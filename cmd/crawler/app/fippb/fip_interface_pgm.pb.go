//*
// Copyright (C) 2017-2022，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 贵金属(PGM)行情对外接口（PROXY<->APP）proto定义
//        针对上海黄金交易所行情接入需求（2022）
// @author mengxin@dce.com.cn
//
// @date 2022-5-10
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_pgm.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 请求查询PGM分时数据
// @date 2022-5-16
// @note OPCODE 协议号：app->proxy:<3701> proxy->his:<7601> 接收APP请求并转发导后端历史服务
//
// @note 使用场景1：请求某个交易日的一段分时数据，使用start、end和date，date必须填写某个交易日，
//
//	           如果start不填充，则表示从date所在交易日的开始时间到end结束。如果end和start
//	           都没有数值，则表示获取date所表示交易日的数据。
//	使用场景2：请求最近N个交易日数据，date、count字段表示，例如date为20170802，count为1，
//	           获取20170802和20170802上一个交易日的数据。
//
// @note 请求参数优先级：date > start，end > count。
type ReqQryPgmTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(例如：SGE)
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Date       string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                  // 请求某个交易日分时数据，格式年月日，例如"20170802"
	Start      uint64   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                               // (可选) date中表示的交易日的开始时间，时间戳，可以为0，表示从开盘时间开始
	End        uint64   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                   // (可选) date中表示的交易日的结束时间，时间戳
	Count      int32    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                               // (可选) 请求最近N个交易日，如果count为0，则按照date、start和end计算
}

func (x *ReqQryPgmTSChart) Reset() {
	*x = ReqQryPgmTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmTSChart) ProtoMessage() {}

func (x *ReqQryPgmTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmTSChart.ProtoReflect.Descriptor instead.
func (*ReqQryPgmTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{0}
}

func (x *ReqQryPgmTSChart) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmTSChart) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQryPgmTSChart) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqQryPgmTSChart) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQryPgmTSChart) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqQryPgmTSChart) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询PGM分时数据响应
// @date 2022-5-16
// @note OPCODE 协议号：proxy->app:<3702>  his->proxy:<7602>  接收后端历史服务查询响应并将响应转发给APP
type RspQryPgmTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID          `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string            `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Elem       []*PgmTSChartElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 分时数据
	ErrorID    uint32            `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType          `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQryPgmTSChart) Reset() {
	*x = RspQryPgmTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmTSChart) ProtoMessage() {}

func (x *RspQryPgmTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmTSChart.ProtoReflect.Descriptor instead.
func (*RspQryPgmTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{1}
}

func (x *RspQryPgmTSChart) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmTSChart) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQryPgmTSChart) GetElem() []*PgmTSChartElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmTSChart) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmTSChart) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询PGM成交明细
// @date 2022-5-16
// @note 协议号：client-proxy:<3703> proxy-his:<7603>
// @note start不设置的情况，则从当前交易日返回最新的count（正值）条记录，如果当前交易日数据不足count条，则按照实际条数返回。
//
//	start设置的情况，count如果为正，则表示向后查询（比start更旧的数据）。如果为负值，表示向前查询（比start更新的数据）。
type ReqQryPgmMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Start      uint64   `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`                               //（可选) 如果不指定，则从当前交易日最多返回count条数最新的数据
	Count      int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                               // 按条数查。如果start不为0，则以start为起点，向前/向后最多查Cnt条（不存在跨交易日查询）
}

func (x *ReqQryPgmMatchDetail) Reset() {
	*x = ReqQryPgmMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmMatchDetail) ProtoMessage() {}

func (x *ReqQryPgmMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmMatchDetail.ProtoReflect.Descriptor instead.
func (*ReqQryPgmMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{2}
}

func (x *ReqQryPgmMatchDetail) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmMatchDetail) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQryPgmMatchDetail) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQryPgmMatchDetail) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询PGM成交明细响应
// @date 2022-5-16
// @note 协议号：client-proxy:<7604> proxy-real:<3704>
type RspQryPgmMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32                `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID              `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string                `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Elem       []*PgmMatchDetailElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // PGM成交明细数据
	ErrorID    uint32                `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType              `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQryPgmMatchDetail) Reset() {
	*x = RspQryPgmMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmMatchDetail) ProtoMessage() {}

func (x *RspQryPgmMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmMatchDetail.ProtoReflect.Descriptor instead.
func (*RspQryPgmMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{3}
}

func (x *RspQryPgmMatchDetail) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmMatchDetail) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQryPgmMatchDetail) GetElem() []*PgmMatchDetailElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmMatchDetail) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmMatchDetail) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询PGM K线数据
// @date 2022-5-16
// @note 协议号：client->proxy:<3705> proxy->his:<7605>
type ReqQryPgmKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID      `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string        `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Type       EPgmKLineType `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.EPgmKLineType" json:"type,omitempty"`        // K线类型，例如1分钟K线，日线等
	Start      uint64        `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                               // 开始时间戳
	End        uint64        `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                   // (可选) 结束时间戳，可以为0
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                               // (可选) 按调试查询时使用，当end不为0时，该字段无效。即start-end查询优先级高于start-count查询
}

func (x *ReqQryPgmKLine) Reset() {
	*x = ReqQryPgmKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmKLine) ProtoMessage() {}

func (x *ReqQryPgmKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmKLine.ProtoReflect.Descriptor instead.
func (*ReqQryPgmKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{4}
}

func (x *ReqQryPgmKLine) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmKLine) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQryPgmKLine) GetType() EPgmKLineType {
	if x != nil {
		return x.Type
	}
	return EPgmKLineType_PgmKLine_Minute_1
}

func (x *ReqQryPgmKLine) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQryPgmKLine) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqQryPgmKLine) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询PGM K线数据响应
// @date  2022-5-16
// @note 协议号：：his->proxy:<7606>  proxy->client:<3706>
type RspQryPgmKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32          `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID        `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string          `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Type       EPgmKLineType   `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.EPgmKLineType" json:"type,omitempty"`        // K线类型
	Elem       []*PgmKLineElem `protobuf:"bytes,5,rep,name=elem,proto3" json:"elem,omitempty"`                                  // Kline数据
	ErrorID    uint32          `protobuf:"varint,6,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType        `protobuf:"varint,7,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQryPgmKLine) Reset() {
	*x = RspQryPgmKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmKLine) ProtoMessage() {}

func (x *RspQryPgmKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmKLine.ProtoReflect.Descriptor instead.
func (*RspQryPgmKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{5}
}

func (x *RspQryPgmKLine) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmKLine) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQryPgmKLine) GetType() EPgmKLineType {
	if x != nil {
		return x.Type
	}
	return EPgmKLineType_PgmKLine_Minute_1
}

func (x *RspQryPgmKLine) GetElem() []*PgmKLineElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmKLine) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmKLine) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询PGM分价数据
// @date 2022-5-16
// @note 协议号：client->proxy:<3707> proxy->real:<5610>
type ReqQryPgmTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
}

func (x *ReqQryPgmTimePrice) Reset() {
	*x = ReqQryPgmTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmTimePrice) ProtoMessage() {}

func (x *ReqQryPgmTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmTimePrice.ProtoReflect.Descriptor instead.
func (*ReqQryPgmTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{6}
}

func (x *ReqQryPgmTimePrice) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmTimePrice) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询PGM分价数据响应
// @date  2022-5-16
// @note 协议号：real->proxy:<5611>  proxy->client:<3708>
type RspQryPgmTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32              `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID            `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string              `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	TradeDate  string              `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期，例如20170808（todo：是否可以去掉）
	Timestamp  uint64              `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime    string              `protobuf:"bytes,6,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	Elem       []*PgmTimePriceElem `protobuf:"bytes,7,rep,name=elem,proto3" json:"elem,omitempty"`                                  // PGM分价数据
	ErrorID    uint32              `protobuf:"varint,8,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType            `protobuf:"varint,9,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQryPgmTimePrice) Reset() {
	*x = RspQryPgmTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmTimePrice) ProtoMessage() {}

func (x *RspQryPgmTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmTimePrice.ProtoReflect.Descriptor instead.
func (*RspQryPgmTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{7}
}

func (x *RspQryPgmTimePrice) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmTimePrice) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQryPgmTimePrice) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspQryPgmTimePrice) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspQryPgmTimePrice) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspQryPgmTimePrice) GetElem() []*PgmTimePriceElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmTimePrice) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmTimePrice) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询PGM分笔数据请求
// @date 2022-5-16
// @note 协议号：client->proxy:<3709> proxy->real:<5612>
type ReqQryPgmTimeVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
}

func (x *ReqQryPgmTimeVolume) Reset() {
	*x = ReqQryPgmTimeVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmTimeVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmTimeVolume) ProtoMessage() {}

func (x *ReqQryPgmTimeVolume) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmTimeVolume.ProtoReflect.Descriptor instead.
func (*ReqQryPgmTimeVolume) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{8}
}

func (x *ReqQryPgmTimeVolume) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmTimeVolume) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmTimeVolume) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询PGM分笔数据响应
// @date 2022-5-16
// @note 协议号：real->proxy:<5613>  proxy->client:<3710>
type RspQryPgmTimeVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID           uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID      EExchgID          `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID      string            `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Timestamp       uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime         string            `protobuf:"bytes,5,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	BigBuyVolume    uint64            `protobuf:"varint,6,opt,name=bigBuyVolume,proto3" json:"bigBuyVolume,omitempty"`                 // 大单买量
	BigSellVolume   uint64            `protobuf:"varint,7,opt,name=bigSellVolume,proto3" json:"bigSellVolume,omitempty"`               // 大单卖量
	SmallBuyVolume  uint64            `protobuf:"varint,8,opt,name=smallBuyVolume,proto3" json:"smallBuyVolume,omitempty"`             // 散单买量
	SmallSellVolume uint64            `protobuf:"varint,9,opt,name=smallSellVolume,proto3" json:"smallSellVolume,omitempty"`           // 散单卖量
	TradeCount      uint64            `protobuf:"varint,10,opt,name=tradeCount,proto3" json:"tradeCount,omitempty"`                    // 统计成交次数
	BuyTurnover     float64           `protobuf:"fixed64,11,opt,name=buyTurnover,proto3" json:"buyTurnover,omitempty"`                 // 买方成交额
	SellTurnover    float64           `protobuf:"fixed64,12,opt,name=sellTurnover,proto3" json:"sellTurnover,omitempty"`               // 卖方成交额
	OffsetSta       *PgmOffsetStaElem `protobuf:"bytes,13,opt,name=offsetSta,proto3" json:"offsetSta,omitempty"`                       // 开平类别统计量
	BigOffsetSta    *PgmOffsetStaElem `protobuf:"bytes,14,opt,name=bigOffsetSta,proto3" json:"bigOffsetSta,omitempty"`                 // 开平类别大单统计量
	AvgVolome       *PgmAvgVolumeElem `protobuf:"bytes,15,opt,name=avgVolome,proto3" json:"avgVolome,omitempty"`                       // 当前均量及类型
	ErrorID         uint32            `protobuf:"varint,16,opt,name=errorID,proto3" json:"errorID,omitempty"`                          // 错误码
	PkgType         EPkgType          `protobuf:"varint,17,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`      // 分包标志
}

func (x *RspQryPgmTimeVolume) Reset() {
	*x = RspQryPgmTimeVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmTimeVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmTimeVolume) ProtoMessage() {}

func (x *RspQryPgmTimeVolume) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmTimeVolume.ProtoReflect.Descriptor instead.
func (*RspQryPgmTimeVolume) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{9}
}

func (x *RspQryPgmTimeVolume) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmTimeVolume) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQryPgmTimeVolume) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspQryPgmTimeVolume) GetBigBuyVolume() uint64 {
	if x != nil {
		return x.BigBuyVolume
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetBigSellVolume() uint64 {
	if x != nil {
		return x.BigSellVolume
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetSmallBuyVolume() uint64 {
	if x != nil {
		return x.SmallBuyVolume
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetSmallSellVolume() uint64 {
	if x != nil {
		return x.SmallSellVolume
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetTradeCount() uint64 {
	if x != nil {
		return x.TradeCount
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetBuyTurnover() float64 {
	if x != nil {
		return x.BuyTurnover
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetSellTurnover() float64 {
	if x != nil {
		return x.SellTurnover
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetOffsetSta() *PgmOffsetStaElem {
	if x != nil {
		return x.OffsetSta
	}
	return nil
}

func (x *RspQryPgmTimeVolume) GetBigOffsetSta() *PgmOffsetStaElem {
	if x != nil {
		return x.BigOffsetSta
	}
	return nil
}

func (x *RspQryPgmTimeVolume) GetAvgVolome() *PgmAvgVolumeElem {
	if x != nil {
		return x.AvgVolome
	}
	return nil
}

func (x *RspQryPgmTimeVolume) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmTimeVolume) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询PGM服务状态
// @date 2022-5-16
// @note 协议号  9651  请求服务状态(中继内部用)
type ReqPgmServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqPgmServiceStatus) Reset() {
	*x = ReqPgmServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmServiceStatus) ProtoMessage() {}

func (x *ReqPgmServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmServiceStatus.ProtoReflect.Descriptor instead.
func (*ReqPgmServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{10}
}

func (x *ReqPgmServiceStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmServiceStatus) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求查询PGM服务状态响应
// @date 2022-5-16
// @note 协议号    9652 请求服务状态响应(中继内部用)
type RspPgmServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                // 请求id
	ExchangeID EExchgID          `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`  // 交易所id
	Status     EPgmServiceStatus `protobuf:"varint,3,opt,name=status,proto3,enum=fippb.EPgmServiceStatus" json:"status,omitempty"` // 服务状态
	ErrorID    uint32            `protobuf:"varint,4,opt,name=errorID,proto3" json:"errorID,omitempty"`                            // 错误码
}

func (x *RspPgmServiceStatus) Reset() {
	*x = RspPgmServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmServiceStatus) ProtoMessage() {}

func (x *RspPgmServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmServiceStatus.ProtoReflect.Descriptor instead.
func (*RspPgmServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{11}
}

func (x *RspPgmServiceStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmServiceStatus) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspPgmServiceStatus) GetStatus() EPgmServiceStatus {
	if x != nil {
		return x.Status
	}
	return EPgmServiceStatus_PgmBegin
}

func (x *RspPgmServiceStatus) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 推送PGM服务状态通知
// @date 2022-5-16
// @note 协议号    9653 推送服务状态
type NotifyPgmServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID          `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`  // 交易所id
	Status     EPgmServiceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=fippb.EPgmServiceStatus" json:"status,omitempty"` // 服务状态
}

func (x *NotifyPgmServiceStatus) Reset() {
	*x = NotifyPgmServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmServiceStatus) ProtoMessage() {}

func (x *NotifyPgmServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmServiceStatus.ProtoReflect.Descriptor instead.
func (*NotifyPgmServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyPgmServiceStatus) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmServiceStatus) GetStatus() EPgmServiceStatus {
	if x != nil {
		return x.Status
	}
	return EPgmServiceStatus_PgmBegin
}

// *
// @brief 请求查询PGM交易所信息
// @date 2022-5-16
// @note 协议号：client->proxy:<3713>
//
//	contract manage:<9601>
type ReqQryPgmExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(为0则查询所有交易所)
}

func (x *ReqQryPgmExchange) Reset() {
	*x = ReqQryPgmExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmExchange) ProtoMessage() {}

func (x *ReqQryPgmExchange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmExchange.ProtoReflect.Descriptor instead.
func (*ReqQryPgmExchange) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{13}
}

func (x *ReqQryPgmExchange) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmExchange) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求查询PGM交易所信息响应
// @date 2022-5-16
// @note 协议号：proxy->client:<3714>
//
//	contract manage:<9602>
type RspQryPgmExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32             `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	Elem    []*PgmExchangeElem `protobuf:"bytes,2,rep,name=elem,proto3" json:"elem,omitempty"`                            // 交易所信息
	ErrorID uint32             `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	PkgType EPkgType           `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspQryPgmExchange) Reset() {
	*x = RspQryPgmExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmExchange) ProtoMessage() {}

func (x *RspQryPgmExchange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmExchange.ProtoReflect.Descriptor instead.
func (*RspQryPgmExchange) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{14}
}

func (x *RspQryPgmExchange) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmExchange) GetElem() []*PgmExchangeElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmExchange) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmExchange) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查PGM合约信息
// @date 2022-5-16
// @note 协议号：client->proxy:<3715>
type ReqQryPgmContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id(为空则查询对应条件下的所有合约)
}

func (x *ReqQryPgmContract) Reset() {
	*x = ReqQryPgmContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPgmContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPgmContract) ProtoMessage() {}

func (x *ReqQryPgmContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPgmContract.ProtoReflect.Descriptor instead.
func (*ReqQryPgmContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{15}
}

func (x *ReqQryPgmContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryPgmContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPgmContract) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询PGM合约信息响应
// @date 2022-5-16
// @note 协议号：proxy->client:<3716>
type RspQryPgmContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32             `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID           `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，该字段与请求接口里的exchangeID一样
	TradeDate  string             `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	Elem       []*PgmContractElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 合约信息
	ErrorID    uint32             `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType           `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQryPgmContract) Reset() {
	*x = RspQryPgmContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPgmContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPgmContract) ProtoMessage() {}

func (x *RspQryPgmContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPgmContract.ProtoReflect.Descriptor instead.
func (*RspQryPgmContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{16}
}

func (x *RspQryPgmContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryPgmContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQryPgmContract) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspQryPgmContract) GetElem() []*PgmContractElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQryPgmContract) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryPgmContract) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求订阅PGM行情
// @date 2022-5-16
// @note 协议号：client->proxy:<3717>
type ReqSubPgmQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                            // 请求id
	SubType EPgmSubType   `protobuf:"varint,2,opt,name=subType,proto3,enum=fippb.EPgmSubType" json:"subType,omitempty"` // 订阅类型
	Elem    []*PgmSubElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`                               // 订阅消息体（订阅参数数组，包括交易所、订阅类型、合约ID等）
}

func (x *ReqSubPgmQuot) Reset() {
	*x = ReqSubPgmQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubPgmQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubPgmQuot) ProtoMessage() {}

func (x *ReqSubPgmQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubPgmQuot.ProtoReflect.Descriptor instead.
func (*ReqSubPgmQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{17}
}

func (x *ReqSubPgmQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubPgmQuot) GetSubType() EPgmSubType {
	if x != nil {
		return x.SubType
	}
	return EPgmSubType_PgmST_Add
}

func (x *ReqSubPgmQuot) GetElem() []*PgmSubElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 请求订阅PGM行情响应
// @date 2022-5-16
// @note 协议号：proxy->client:<3718>
type RspSubPgmQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubPgmQuot) Reset() {
	*x = RspSubPgmQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubPgmQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubPgmQuot) ProtoMessage() {}

func (x *RspSubPgmQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubPgmQuot.ProtoReflect.Descriptor instead.
func (*RspSubPgmQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{18}
}

func (x *RspSubPgmQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubPgmQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief PGM行情通知
// @date 2022-5-16
// @note 协议号：proxy->client:<3719>
type NotifyPgmQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID         `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string           `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	TradeDate  string           `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	Best       *PgmBestQuotElem `protobuf:"bytes,4,opt,name=best,proto3" json:"best,omitempty"`                                  // 最优行情
	MblList    []*PgmMBLQuot    `protobuf:"bytes,5,rep,name=mblList,proto3" json:"mblList,omitempty"`                            // 深度行情(数组:买1卖1....买N卖M)
	Extra      *PgmExtraQuot    `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`                                // 额外参数（扩展参数）
}

func (x *NotifyPgmQuot) Reset() {
	*x = NotifyPgmQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmQuot) ProtoMessage() {}

func (x *NotifyPgmQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmQuot.ProtoReflect.Descriptor instead.
func (*NotifyPgmQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{19}
}

func (x *NotifyPgmQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmQuot) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifyPgmQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyPgmQuot) GetBest() *PgmBestQuotElem {
	if x != nil {
		return x.Best
	}
	return nil
}

func (x *NotifyPgmQuot) GetMblList() []*PgmMBLQuot {
	if x != nil {
		return x.MblList
	}
	return nil
}

func (x *NotifyPgmQuot) GetExtra() *PgmExtraQuot {
	if x != nil {
		return x.Extra
	}
	return nil
}

// *
// @brief 请求订阅PGM简要行情
// @date 2022-5-16
// @note 协议号：client-proxy:<3722>
type ReqSubPgmBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                            // 请求id
	SubType EPgmSubType   `protobuf:"varint,2,opt,name=subType,proto3,enum=fippb.EPgmSubType" json:"subType,omitempty"` // 订阅类型
	Elem    []*PgmSubElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`                               // 订阅消息体（订阅参数数组，包括交易所、订阅类型、合约ID等）
}

func (x *ReqSubPgmBriefQuot) Reset() {
	*x = ReqSubPgmBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubPgmBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubPgmBriefQuot) ProtoMessage() {}

func (x *ReqSubPgmBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubPgmBriefQuot.ProtoReflect.Descriptor instead.
func (*ReqSubPgmBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{20}
}

func (x *ReqSubPgmBriefQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubPgmBriefQuot) GetSubType() EPgmSubType {
	if x != nil {
		return x.SubType
	}
	return EPgmSubType_PgmST_Add
}

func (x *ReqSubPgmBriefQuot) GetElem() []*PgmSubElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 请求订阅PGM简要行情响应
// @date 2022-5-16
// @note 协议号：proxy-client:<3723>
type RspSubPgmBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubPgmBriefQuot) Reset() {
	*x = RspSubPgmBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubPgmBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubPgmBriefQuot) ProtoMessage() {}

func (x *RspSubPgmBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubPgmBriefQuot.ProtoReflect.Descriptor instead.
func (*RspSubPgmBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{21}
}

func (x *RspSubPgmBriefQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubPgmBriefQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief PGM简要行情通知
// @date 2022-5-16
// @date 2021-10-26 根据需求，补充简要行情的字段。尚有部分字段不能满足需求
// @note 协议号：client-proxy:<3724>
type NotifyPgmBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID         EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID         string   `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	TradeDate          string   `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	PreSettlementPrice float64  `protobuf:"fixed64,5,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`    // 昨结算价
	OpenPrice          float64  `protobuf:"fixed64,6,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                      // 今开盘价
	LastPrice          float64  `protobuf:"fixed64,7,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                      // 最新价
	TotalVolume        uint64   `protobuf:"varint,8,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`                   // 总成交量
	TotalPosition      uint64   `protobuf:"varint,10,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`              // 总持仓量
	PositionChange     int64    `protobuf:"varint,11,opt,name=positionChange,proto3" json:"positionChange,omitempty"`            // 持仓量变化
	AvgPrice           float64  `protobuf:"fixed64,12,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                       // 当日均价
	Turnover           float64  `protobuf:"fixed64,13,opt,name=turnover,proto3" json:"turnover,omitempty"`                       // 总成交金额
	PreClosePrice      float64  `protobuf:"fixed64,14,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`             // 昨收盘价
	HighPrice          float64  `protobuf:"fixed64,15,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                     // 最高价
	LowPrice           float64  `protobuf:"fixed64,16,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                       // 最低价
}

func (x *NotifyPgmBriefQuot) Reset() {
	*x = NotifyPgmBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmBriefQuot) ProtoMessage() {}

func (x *NotifyPgmBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmBriefQuot.ProtoReflect.Descriptor instead.
func (*NotifyPgmBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{22}
}

func (x *NotifyPgmBriefQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmBriefQuot) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifyPgmBriefQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyPgmBriefQuot) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *NotifyPgmBriefQuot) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

// *
// @brief 请求查询PGM静态数据版本
// @date 2022-5-16
// @note 协议号
type ReqPgmStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqPgmStaticDataVersion) Reset() {
	*x = ReqPgmStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmStaticDataVersion) ProtoMessage() {}

func (x *ReqPgmStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmStaticDataVersion.ProtoReflect.Descriptor instead.
func (*ReqPgmStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{23}
}

func (x *ReqPgmStaticDataVersion) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmStaticDataVersion) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求查询PGM静态数据版本响应
// @date 2022-5-16
// @note 协议号
type RspPgmStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                      `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	Elem    []*PgmStaticDataVersionElem `protobuf:"bytes,2,rep,name=elem,proto3" json:"elem,omitempty"`                            // PGM静态数据版本信息
	ErrorID uint32                      `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	PkgType EPkgType                    `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspPgmStaticDataVersion) Reset() {
	*x = RspPgmStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmStaticDataVersion) ProtoMessage() {}

func (x *RspPgmStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmStaticDataVersion.ProtoReflect.Descriptor instead.
func (*RspPgmStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{24}
}

func (x *RspPgmStaticDataVersion) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmStaticDataVersion) GetElem() []*PgmStaticDataVersionElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspPgmStaticDataVersion) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmStaticDataVersion) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief PGM静态数据版本变动通知
// @date 2022-5-16
// @note 协议号
type NotifyPgmStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elem []*PgmStaticDataVersionElem `protobuf:"bytes,1,rep,name=elem,proto3" json:"elem,omitempty"` // PGM静态数据版本信息
}

func (x *NotifyPgmStaticDataVersion) Reset() {
	*x = NotifyPgmStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_pgm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmStaticDataVersion) ProtoMessage() {}

func (x *NotifyPgmStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_pgm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmStaticDataVersion.ProtoReflect.Descriptor instead.
func (*NotifyPgmStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_pgm_proto_rawDescGZIP(), []int{25}
}

func (x *NotifyPgmStaticDataVersion) GetElem() []*PgmStaticDataVersionElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

var File_fip_interface_pgm_proto protoreflect.FileDescriptor

var file_fip_interface_pgm_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x67, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x70, 0x67, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x50, 0x67, 0x6d, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x67,
	0x6d, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x14,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x65,
	0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xdf, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x22, 0xc3, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x50, 0x67, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x22, 0xa6, 0x05, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50,
	0x67, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x69, 0x67, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x6f, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d,
	0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x50, 0x67, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x13,
	0x52, 0x73, 0x70, 0x50, 0x67, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x67, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x65,
	0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70,
	0x51, 0x72, 0x79, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x50, 0x67,
	0x6d, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x65, 0x6c, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x50, 0x67, 0x6d, 0x53, 0x75, 0x62, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d,
	0x22, 0x3f, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x50, 0x67, 0x6d, 0x51, 0x75, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67, 0x6d, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x42, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x4d, 0x42, 0x4c, 0x51, 0x75,
	0x6f, 0x74, 0x52, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x51, 0x75, 0x6f, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62,
	0x50, 0x67, 0x6d, 0x42, 0x72, 0x69, 0x65, 0x66, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x53, 0x75, 0x62, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x53, 0x75,
	0x62, 0x50, 0x67, 0x6d, 0x42, 0x72, 0x69, 0x65, 0x66, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xf7, 0x03,
	0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67, 0x6d, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x51, 0x75, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x50, 0x67,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x52, 0x73,
	0x70, 0x50, 0x67, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x04, 0x65,
	0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x50, 0x67, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x67, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_pgm_proto_rawDescOnce sync.Once
	file_fip_interface_pgm_proto_rawDescData = file_fip_interface_pgm_proto_rawDesc
)

func file_fip_interface_pgm_proto_rawDescGZIP() []byte {
	file_fip_interface_pgm_proto_rawDescOnce.Do(func() {
		file_fip_interface_pgm_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_pgm_proto_rawDescData)
	})
	return file_fip_interface_pgm_proto_rawDescData
}

var file_fip_interface_pgm_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_fip_interface_pgm_proto_goTypes = []interface{}{
	(*ReqQryPgmTSChart)(nil),           // 0: fippb.ReqQryPgmTSChart
	(*RspQryPgmTSChart)(nil),           // 1: fippb.RspQryPgmTSChart
	(*ReqQryPgmMatchDetail)(nil),       // 2: fippb.ReqQryPgmMatchDetail
	(*RspQryPgmMatchDetail)(nil),       // 3: fippb.RspQryPgmMatchDetail
	(*ReqQryPgmKLine)(nil),             // 4: fippb.ReqQryPgmKLine
	(*RspQryPgmKLine)(nil),             // 5: fippb.RspQryPgmKLine
	(*ReqQryPgmTimePrice)(nil),         // 6: fippb.ReqQryPgmTimePrice
	(*RspQryPgmTimePrice)(nil),         // 7: fippb.RspQryPgmTimePrice
	(*ReqQryPgmTimeVolume)(nil),        // 8: fippb.ReqQryPgmTimeVolume
	(*RspQryPgmTimeVolume)(nil),        // 9: fippb.RspQryPgmTimeVolume
	(*ReqPgmServiceStatus)(nil),        // 10: fippb.ReqPgmServiceStatus
	(*RspPgmServiceStatus)(nil),        // 11: fippb.RspPgmServiceStatus
	(*NotifyPgmServiceStatus)(nil),     // 12: fippb.NotifyPgmServiceStatus
	(*ReqQryPgmExchange)(nil),          // 13: fippb.ReqQryPgmExchange
	(*RspQryPgmExchange)(nil),          // 14: fippb.RspQryPgmExchange
	(*ReqQryPgmContract)(nil),          // 15: fippb.ReqQryPgmContract
	(*RspQryPgmContract)(nil),          // 16: fippb.RspQryPgmContract
	(*ReqSubPgmQuot)(nil),              // 17: fippb.ReqSubPgmQuot
	(*RspSubPgmQuot)(nil),              // 18: fippb.RspSubPgmQuot
	(*NotifyPgmQuot)(nil),              // 19: fippb.NotifyPgmQuot
	(*ReqSubPgmBriefQuot)(nil),         // 20: fippb.ReqSubPgmBriefQuot
	(*RspSubPgmBriefQuot)(nil),         // 21: fippb.RspSubPgmBriefQuot
	(*NotifyPgmBriefQuot)(nil),         // 22: fippb.NotifyPgmBriefQuot
	(*ReqPgmStaticDataVersion)(nil),    // 23: fippb.ReqPgmStaticDataVersion
	(*RspPgmStaticDataVersion)(nil),    // 24: fippb.RspPgmStaticDataVersion
	(*NotifyPgmStaticDataVersion)(nil), // 25: fippb.NotifyPgmStaticDataVersion
	(EExchgID)(0),                      // 26: fippb.EExchgID
	(*PgmTSChartElem)(nil),             // 27: fippb.PgmTSChartElem
	(EPkgType)(0),                      // 28: fippb.EPkgType
	(*PgmMatchDetailElem)(nil),         // 29: fippb.PgmMatchDetailElem
	(EPgmKLineType)(0),                 // 30: fippb.EPgmKLineType
	(*PgmKLineElem)(nil),               // 31: fippb.PgmKLineElem
	(*PgmTimePriceElem)(nil),           // 32: fippb.PgmTimePriceElem
	(*PgmOffsetStaElem)(nil),           // 33: fippb.PgmOffsetStaElem
	(*PgmAvgVolumeElem)(nil),           // 34: fippb.PgmAvgVolumeElem
	(EPgmServiceStatus)(0),             // 35: fippb.EPgmServiceStatus
	(*PgmExchangeElem)(nil),            // 36: fippb.PgmExchangeElem
	(*PgmContractElem)(nil),            // 37: fippb.PgmContractElem
	(EPgmSubType)(0),                   // 38: fippb.EPgmSubType
	(*PgmSubElem)(nil),                 // 39: fippb.PgmSubElem
	(*PgmBestQuotElem)(nil),            // 40: fippb.PgmBestQuotElem
	(*PgmMBLQuot)(nil),                 // 41: fippb.PgmMBLQuot
	(*PgmExtraQuot)(nil),               // 42: fippb.PgmExtraQuot
	(*PgmStaticDataVersionElem)(nil),   // 43: fippb.PgmStaticDataVersionElem
}
var file_fip_interface_pgm_proto_depIdxs = []int32{
	26, // 0: fippb.ReqQryPgmTSChart.exchangeID:type_name -> fippb.EExchgID
	26, // 1: fippb.RspQryPgmTSChart.exchangeID:type_name -> fippb.EExchgID
	27, // 2: fippb.RspQryPgmTSChart.elem:type_name -> fippb.PgmTSChartElem
	28, // 3: fippb.RspQryPgmTSChart.pkgType:type_name -> fippb.EPkgType
	26, // 4: fippb.ReqQryPgmMatchDetail.exchangeID:type_name -> fippb.EExchgID
	26, // 5: fippb.RspQryPgmMatchDetail.exchangeID:type_name -> fippb.EExchgID
	29, // 6: fippb.RspQryPgmMatchDetail.elem:type_name -> fippb.PgmMatchDetailElem
	28, // 7: fippb.RspQryPgmMatchDetail.pkgType:type_name -> fippb.EPkgType
	26, // 8: fippb.ReqQryPgmKLine.exchangeID:type_name -> fippb.EExchgID
	30, // 9: fippb.ReqQryPgmKLine.type:type_name -> fippb.EPgmKLineType
	26, // 10: fippb.RspQryPgmKLine.exchangeID:type_name -> fippb.EExchgID
	30, // 11: fippb.RspQryPgmKLine.type:type_name -> fippb.EPgmKLineType
	31, // 12: fippb.RspQryPgmKLine.elem:type_name -> fippb.PgmKLineElem
	28, // 13: fippb.RspQryPgmKLine.pkgType:type_name -> fippb.EPkgType
	26, // 14: fippb.ReqQryPgmTimePrice.exchangeID:type_name -> fippb.EExchgID
	26, // 15: fippb.RspQryPgmTimePrice.exchangeID:type_name -> fippb.EExchgID
	32, // 16: fippb.RspQryPgmTimePrice.elem:type_name -> fippb.PgmTimePriceElem
	28, // 17: fippb.RspQryPgmTimePrice.pkgType:type_name -> fippb.EPkgType
	26, // 18: fippb.ReqQryPgmTimeVolume.exchangeID:type_name -> fippb.EExchgID
	26, // 19: fippb.RspQryPgmTimeVolume.exchangeID:type_name -> fippb.EExchgID
	33, // 20: fippb.RspQryPgmTimeVolume.offsetSta:type_name -> fippb.PgmOffsetStaElem
	33, // 21: fippb.RspQryPgmTimeVolume.bigOffsetSta:type_name -> fippb.PgmOffsetStaElem
	34, // 22: fippb.RspQryPgmTimeVolume.avgVolome:type_name -> fippb.PgmAvgVolumeElem
	28, // 23: fippb.RspQryPgmTimeVolume.pkgType:type_name -> fippb.EPkgType
	26, // 24: fippb.ReqPgmServiceStatus.exchangeID:type_name -> fippb.EExchgID
	26, // 25: fippb.RspPgmServiceStatus.exchangeID:type_name -> fippb.EExchgID
	35, // 26: fippb.RspPgmServiceStatus.status:type_name -> fippb.EPgmServiceStatus
	26, // 27: fippb.NotifyPgmServiceStatus.exchangeID:type_name -> fippb.EExchgID
	35, // 28: fippb.NotifyPgmServiceStatus.status:type_name -> fippb.EPgmServiceStatus
	26, // 29: fippb.ReqQryPgmExchange.exchangeID:type_name -> fippb.EExchgID
	36, // 30: fippb.RspQryPgmExchange.elem:type_name -> fippb.PgmExchangeElem
	28, // 31: fippb.RspQryPgmExchange.pkgType:type_name -> fippb.EPkgType
	26, // 32: fippb.ReqQryPgmContract.exchangeID:type_name -> fippb.EExchgID
	26, // 33: fippb.RspQryPgmContract.exchangeID:type_name -> fippb.EExchgID
	37, // 34: fippb.RspQryPgmContract.elem:type_name -> fippb.PgmContractElem
	28, // 35: fippb.RspQryPgmContract.pkgType:type_name -> fippb.EPkgType
	38, // 36: fippb.ReqSubPgmQuot.subType:type_name -> fippb.EPgmSubType
	39, // 37: fippb.ReqSubPgmQuot.elem:type_name -> fippb.PgmSubElem
	26, // 38: fippb.NotifyPgmQuot.exchangeID:type_name -> fippb.EExchgID
	40, // 39: fippb.NotifyPgmQuot.best:type_name -> fippb.PgmBestQuotElem
	41, // 40: fippb.NotifyPgmQuot.mblList:type_name -> fippb.PgmMBLQuot
	42, // 41: fippb.NotifyPgmQuot.extra:type_name -> fippb.PgmExtraQuot
	38, // 42: fippb.ReqSubPgmBriefQuot.subType:type_name -> fippb.EPgmSubType
	39, // 43: fippb.ReqSubPgmBriefQuot.elem:type_name -> fippb.PgmSubElem
	26, // 44: fippb.NotifyPgmBriefQuot.exchangeID:type_name -> fippb.EExchgID
	26, // 45: fippb.ReqPgmStaticDataVersion.exchangeID:type_name -> fippb.EExchgID
	43, // 46: fippb.RspPgmStaticDataVersion.elem:type_name -> fippb.PgmStaticDataVersionElem
	28, // 47: fippb.RspPgmStaticDataVersion.pkgType:type_name -> fippb.EPkgType
	43, // 48: fippb.NotifyPgmStaticDataVersion.elem:type_name -> fippb.PgmStaticDataVersionElem
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_fip_interface_pgm_proto_init() }
func file_fip_interface_pgm_proto_init() {
	if File_fip_interface_pgm_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_pgm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_pgm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmTimeVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmTimeVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPgmContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPgmContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubPgmQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubPgmQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubPgmBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubPgmBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_pgm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_pgm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_pgm_proto_goTypes,
		DependencyIndexes: file_fip_interface_pgm_proto_depIdxs,
		MessageInfos:      file_fip_interface_pgm_proto_msgTypes,
	}.Build()
	File_fip_interface_pgm_proto = out.File
	file_fip_interface_pgm_proto_rawDesc = nil
	file_fip_interface_pgm_proto_goTypes = nil
	file_fip_interface_pgm_proto_depIdxs = nil
}
