//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 运营管理平台proto定义
//
// @author <wyl>
//
// @date 2020-05-14
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_omp.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ///////////////////////// 运营管理平台(OMP : Operation Management Platform)接口定义 //////////////////////////////
// /< 管理平台错误消息
type OMPErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId      int32  `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`          // 0成功 非0失败          M
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // 失败原因               M
}

func (x *OMPErr) Reset() {
	*x = OMPErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMPErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMPErr) ProtoMessage() {}

func (x *OMPErr) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMPErr.ProtoReflect.Descriptor instead.
func (*OMPErr) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{0}
}

func (x *OMPErr) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *OMPErr) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// /< 云条件单附加数据
type ExtraCondInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime         string  `protobuf:"bytes,1,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                  ///< 最新更新时间         NM
	RelatedOrderID     string  `protobuf:"bytes,2,opt,name=relatedOrderID,proto3" json:"relatedOrderID,omitempty"`          ///< 相关联委托号         NM
	AutoPricePlus      float64 `protobuf:"fixed64,3,opt,name=autoPricePlus,proto3" json:"autoPricePlus,omitempty"`          ///< 基准价               NM
	OrderVolumeTimes   uint32  `protobuf:"varint,4,opt,name=orderVolumeTimes,proto3" json:"orderVolumeTimes,omitempty"`     ///< 报单委托次数         NM
	OrderVolumeSuccess uint32  `protobuf:"varint,5,opt,name=orderVolumeSuccess,proto3" json:"orderVolumeSuccess,omitempty"` ///< 委托成功数量         NM
	OrderVolumeFailed  uint32  `protobuf:"varint,6,opt,name=orderVolumeFailed,proto3" json:"orderVolumeFailed,omitempty"`   ///< 委托失败数量         NM
}

func (x *ExtraCondInfo) Reset() {
	*x = ExtraCondInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraCondInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraCondInfo) ProtoMessage() {}

func (x *ExtraCondInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraCondInfo.ProtoReflect.Descriptor instead.
func (*ExtraCondInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{1}
}

func (x *ExtraCondInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ExtraCondInfo) GetRelatedOrderID() string {
	if x != nil {
		return x.RelatedOrderID
	}
	return ""
}

func (x *ExtraCondInfo) GetAutoPricePlus() float64 {
	if x != nil {
		return x.AutoPricePlus
	}
	return 0
}

func (x *ExtraCondInfo) GetOrderVolumeTimes() uint32 {
	if x != nil {
		return x.OrderVolumeTimes
	}
	return 0
}

func (x *ExtraCondInfo) GetOrderVolumeSuccess() uint32 {
	if x != nil {
		return x.OrderVolumeSuccess
	}
	return 0
}

func (x *ExtraCondInfo) GetOrderVolumeFailed() uint32 {
	if x != nil {
		return x.OrderVolumeFailed
	}
	return 0
}

// /< 管理平台服务注册请求
type ReqRegSrv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32        `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                             ///< 请求id               M
	ServiceType EServiceType `protobuf:"varint,2,opt,name=serviceType,proto3,enum=fippb.EServiceType" json:"serviceType,omitempty"` ///< 服务类型             M
	ServerId    string       `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                ///< 服务id               M
}

func (x *ReqRegSrv) Reset() {
	*x = ReqRegSrv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegSrv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegSrv) ProtoMessage() {}

func (x *ReqRegSrv) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegSrv.ProtoReflect.Descriptor instead.
func (*ReqRegSrv) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{2}
}

func (x *ReqRegSrv) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqRegSrv) GetServiceType() EServiceType {
	if x != nil {
		return x.ServiceType
	}
	return EServiceType_ST_Null
}

func (x *ReqRegSrv) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

// /< 管理平台服务注册响应
type RspRegSrv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32        `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                             ///< 请求id               M
	ServiceType EServiceType `protobuf:"varint,2,opt,name=serviceType,proto3,enum=fippb.EServiceType" json:"serviceType,omitempty"` ///< 服务类型             M
	ServerId    string       `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                ///< 服务id               M
	ErrInfo     *OMPErr      `protobuf:"bytes,4,opt,name=errInfo,proto3" json:"errInfo,omitempty"`                                  ///< 错误消息             M
}

func (x *RspRegSrv) Reset() {
	*x = RspRegSrv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRegSrv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRegSrv) ProtoMessage() {}

func (x *RspRegSrv) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRegSrv.ProtoReflect.Descriptor instead.
func (*RspRegSrv) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{3}
}

func (x *RspRegSrv) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspRegSrv) GetServiceType() EServiceType {
	if x != nil {
		return x.ServiceType
	}
	return EServiceType_ST_Null
}

func (x *RspRegSrv) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RspRegSrv) GetErrInfo() *OMPErr {
	if x != nil {
		return x.ErrInfo
	}
	return nil
}

// /< 管理平台条件单操作请求
type ReqCondCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                  ///< 请求id               M
	ServiceType      EServiceType      `protobuf:"varint,2,opt,name=serviceType,proto3,enum=fippb.EServiceType" json:"serviceType,omitempty"`      ///< 服务类型             M
	ServerId         string            `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                     ///< 服务id               M
	CmdId            EOMPCondCmd       `protobuf:"varint,4,opt,name=cmdId,proto3,enum=fippb.EOMPCondCmd" json:"cmdId,omitempty"`                   ///< 操作id               M
	ConditionOrderId string            `protobuf:"bytes,5,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"`                     ///< 条件单id             M
	TriggerType      ETriggerOrderType `protobuf:"varint,6,opt,name=triggerType,proto3,enum=fippb.ETriggerOrderType" json:"triggerType,omitempty"` ///< 条件单类型...........M
}

func (x *ReqCondCmd) Reset() {
	*x = ReqCondCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCondCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCondCmd) ProtoMessage() {}

func (x *ReqCondCmd) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCondCmd.ProtoReflect.Descriptor instead.
func (*ReqCondCmd) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{4}
}

func (x *ReqCondCmd) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqCondCmd) GetServiceType() EServiceType {
	if x != nil {
		return x.ServiceType
	}
	return EServiceType_ST_Null
}

func (x *ReqCondCmd) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ReqCondCmd) GetCmdId() EOMPCondCmd {
	if x != nil {
		return x.CmdId
	}
	return EOMPCondCmd_OMPCC_Null
}

func (x *ReqCondCmd) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ReqCondCmd) GetTriggerType() ETriggerOrderType {
	if x != nil {
		return x.TriggerType
	}
	return ETriggerOrderType_TR_Null
}

// /< 管理平台条件单操作结果
type RspCondCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32                 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                ///< 请求id               M
	ServiceType      EServiceType          `protobuf:"varint,2,opt,name=serviceType,proto3,enum=fippb.EServiceType" json:"serviceType,omitempty"`    ///< 服务类型             M
	ServerId         string                `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`                                   ///< 服务id               M
	CmdId            EOMPCondCmd           `protobuf:"varint,4,opt,name=cmdId,proto3,enum=fippb.EOMPCondCmd" json:"cmdId,omitempty"`                 ///< 操作id               M
	ConditionOrderId string                `protobuf:"bytes,5,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"`                   ///< 条件单id             M
	ErrInfo          *OMPErr               `protobuf:"bytes,6,opt,name=errInfo,proto3" json:"errInfo,omitempty"`                                     ///< 错误消息             M
	OrderInfoDetail  *ConditionOrderDetail `protobuf:"bytes,7,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"`                     ///< 云条件单信息明细     NM
	ExtraOrderInfo   *ExtraCondInfo        `protobuf:"bytes,8,opt,name=extraOrderInfo,proto3" json:"extraOrderInfo,omitempty"`                       ///< 云条件单附加数据     NM
	ChannelType      EApiChannelType       `protobuf:"varint,9,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` ///< 柜台类型             M
}

func (x *RspCondCmd) Reset() {
	*x = RspCondCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_omp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCondCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCondCmd) ProtoMessage() {}

func (x *RspCondCmd) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_omp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCondCmd.ProtoReflect.Descriptor instead.
func (*RspCondCmd) Descriptor() ([]byte, []int) {
	return file_fip_interface_omp_proto_rawDescGZIP(), []int{5}
}

func (x *RspCondCmd) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspCondCmd) GetServiceType() EServiceType {
	if x != nil {
		return x.ServiceType
	}
	return EServiceType_ST_Null
}

func (x *RspCondCmd) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RspCondCmd) GetCmdId() EOMPCondCmd {
	if x != nil {
		return x.CmdId
	}
	return EOMPCondCmd_OMPCC_Null
}

func (x *RspCondCmd) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *RspCondCmd) GetErrInfo() *OMPErr {
	if x != nil {
		return x.ErrInfo
	}
	return nil
}

func (x *RspCondCmd) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

func (x *RspCondCmd) GetExtraOrderInfo() *ExtraCondInfo {
	if x != nil {
		return x.ExtraOrderInfo
	}
	return nil
}

func (x *RspCondCmd) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

var File_fip_interface_omp_proto protoreflect.FileDescriptor

var file_fip_interface_omp_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6f, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x1a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6f, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x06, 0x4f, 0x4d, 0x50, 0x45,
	0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x87, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x52, 0x65, 0x67, 0x53, 0x72, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x52, 0x73, 0x70,
	0x52, 0x65, 0x67, 0x53, 0x72, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4f, 0x4d, 0x50, 0x45, 0x72, 0x72, 0x52, 0x07, 0x65, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x64,
	0x43, 0x6d, 0x64, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x0a, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x4d, 0x50, 0x43, 0x6f,
	0x6e, 0x64, 0x43, 0x6d, 0x64, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x4f, 0x4d, 0x50, 0x45, 0x72, 0x72, 0x52, 0x07, 0x65, 0x72, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_omp_proto_rawDescOnce sync.Once
	file_fip_interface_omp_proto_rawDescData = file_fip_interface_omp_proto_rawDesc
)

func file_fip_interface_omp_proto_rawDescGZIP() []byte {
	file_fip_interface_omp_proto_rawDescOnce.Do(func() {
		file_fip_interface_omp_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_omp_proto_rawDescData)
	})
	return file_fip_interface_omp_proto_rawDescData
}

var file_fip_interface_omp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_fip_interface_omp_proto_goTypes = []interface{}{
	(*OMPErr)(nil),               // 0: fippb.OMPErr
	(*ExtraCondInfo)(nil),        // 1: fippb.ExtraCondInfo
	(*ReqRegSrv)(nil),            // 2: fippb.ReqRegSrv
	(*RspRegSrv)(nil),            // 3: fippb.RspRegSrv
	(*ReqCondCmd)(nil),           // 4: fippb.ReqCondCmd
	(*RspCondCmd)(nil),           // 5: fippb.RspCondCmd
	(EServiceType)(0),            // 6: fippb.EServiceType
	(EOMPCondCmd)(0),             // 7: fippb.EOMPCondCmd
	(ETriggerOrderType)(0),       // 8: fippb.ETriggerOrderType
	(*ConditionOrderDetail)(nil), // 9: fippb.ConditionOrderDetail
	(EApiChannelType)(0),         // 10: fippb.EApiChannelType
}
var file_fip_interface_omp_proto_depIdxs = []int32{
	6,  // 0: fippb.ReqRegSrv.serviceType:type_name -> fippb.EServiceType
	6,  // 1: fippb.RspRegSrv.serviceType:type_name -> fippb.EServiceType
	0,  // 2: fippb.RspRegSrv.errInfo:type_name -> fippb.OMPErr
	6,  // 3: fippb.ReqCondCmd.serviceType:type_name -> fippb.EServiceType
	7,  // 4: fippb.ReqCondCmd.cmdId:type_name -> fippb.EOMPCondCmd
	8,  // 5: fippb.ReqCondCmd.triggerType:type_name -> fippb.ETriggerOrderType
	6,  // 6: fippb.RspCondCmd.serviceType:type_name -> fippb.EServiceType
	7,  // 7: fippb.RspCondCmd.cmdId:type_name -> fippb.EOMPCondCmd
	0,  // 8: fippb.RspCondCmd.errInfo:type_name -> fippb.OMPErr
	9,  // 9: fippb.RspCondCmd.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	1,  // 10: fippb.RspCondCmd.extraOrderInfo:type_name -> fippb.ExtraCondInfo
	10, // 11: fippb.RspCondCmd.channelType:type_name -> fippb.EApiChannelType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_fip_interface_omp_proto_init() }
func file_fip_interface_omp_proto_init() {
	if File_fip_interface_omp_proto != nil {
		return
	}
	file_fip_def_omp_proto_init()
	file_fip_def_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_omp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMPErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_omp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraCondInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_omp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegSrv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_omp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRegSrv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_omp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCondCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_omp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCondCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_omp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_omp_proto_goTypes,
		DependencyIndexes: file_fip_interface_omp_proto_depIdxs,
		MessageInfos:      file_fip_interface_omp_proto_msgTypes,
	}.Build()
	File_fip_interface_omp_proto = out.File
	file_fip_interface_omp_proto_rawDesc = nil
	file_fip_interface_omp_proto_goTypes = nil
	file_fip_interface_omp_proto_depIdxs = nil
}
