//*
// Copyright (C) 2020-2023，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 实时行情接口proto定义
//
// @author <liuwei>
//
// @date 2020-7-14
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def_otc.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// /< 场外行情类型
type EOtcQuotType int32

const (
	EOtcQuotType_OQT_basisStatus      EOtcQuotType = 0 // 基差行情
	EOtcQuotType_OQT_wbillTransaction EOtcQuotType = 1 // 仓单行情
	EOtcQuotType_OQT_swapMatch        EOtcQuotType = 2 // 互换成交行情
	EOtcQuotType_OQT_commodities      EOtcQuotType = 3 // 大宗现货行情
	EOtcQuotType_OQT_swapPosition     EOtcQuotType = 4 // 互换持仓行情
	EOtcQuotType_OQT_swapAll          EOtcQuotType = 5 // 互换全部行情
	EOtcQuotType_OQT_OTC_REAL_STA     EOtcQuotType = 6 // 场外实时行情统计
)

// Enum value maps for EOtcQuotType.
var (
	EOtcQuotType_name = map[int32]string{
		0: "OQT_basisStatus",
		1: "OQT_wbillTransaction",
		2: "OQT_swapMatch",
		3: "OQT_commodities",
		4: "OQT_swapPosition",
		5: "OQT_swapAll",
		6: "OQT_OTC_REAL_STA",
	}
	EOtcQuotType_value = map[string]int32{
		"OQT_basisStatus":      0,
		"OQT_wbillTransaction": 1,
		"OQT_swapMatch":        2,
		"OQT_commodities":      3,
		"OQT_swapPosition":     4,
		"OQT_swapAll":          5,
		"OQT_OTC_REAL_STA":     6,
	}
)

func (x EOtcQuotType) Enum() *EOtcQuotType {
	p := new(EOtcQuotType)
	*p = x
	return p
}

func (x EOtcQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOtcQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[0].Descriptor()
}

func (EOtcQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[0]
}

func (x EOtcQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOtcQuotType.Descriptor instead.
func (EOtcQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{0}
}

// /< 场外行情状态
type EOtcQuotStatus int32

const (
	EOtcQuotStatus_OQS_detailMktQuot EOtcQuotStatus = 0 // 详情盘面行情
	EOtcQuotStatus_OQS_orderQuot     EOtcQuotStatus = 1 // 报价行情
)

// Enum value maps for EOtcQuotStatus.
var (
	EOtcQuotStatus_name = map[int32]string{
		0: "OQS_detailMktQuot",
		1: "OQS_orderQuot",
	}
	EOtcQuotStatus_value = map[string]int32{
		"OQS_detailMktQuot": 0,
		"OQS_orderQuot":     1,
	}
)

func (x EOtcQuotStatus) Enum() *EOtcQuotStatus {
	p := new(EOtcQuotStatus)
	*p = x
	return p
}

func (x EOtcQuotStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOtcQuotStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[1].Descriptor()
}

func (EOtcQuotStatus) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[1]
}

func (x EOtcQuotStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOtcQuotStatus.Descriptor instead.
func (EOtcQuotStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{1}
}

// /< 请求订阅行情类型
type ReqSubscribeType int32

const (
	ReqSubscribeType_RST_Add        ReqSubscribeType = 0 // 新增订阅(不覆盖之前订阅)
	ReqSubscribeType_RST_CancelPart ReqSubscribeType = 1 // 取消varietyIds范围内的订阅
	ReqSubscribeType_RST_CancelAll  ReqSubscribeType = 2 // 取消所有订阅
	ReqSubscribeType_RST_Update     ReqSubscribeType = 3 // 更换订阅(覆盖之前订阅)
)

// Enum value maps for ReqSubscribeType.
var (
	ReqSubscribeType_name = map[int32]string{
		0: "RST_Add",
		1: "RST_CancelPart",
		2: "RST_CancelAll",
		3: "RST_Update",
	}
	ReqSubscribeType_value = map[string]int32{
		"RST_Add":        0,
		"RST_CancelPart": 1,
		"RST_CancelAll":  2,
		"RST_Update":     3,
	}
)

func (x ReqSubscribeType) Enum() *ReqSubscribeType {
	p := new(ReqSubscribeType)
	*p = x
	return p
}

func (x ReqSubscribeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqSubscribeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[2].Descriptor()
}

func (ReqSubscribeType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[2]
}

func (x ReqSubscribeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqSubscribeType.Descriptor instead.
func (ReqSubscribeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{2}
}

// /< 用于订阅仓单的行情类型
type WbillQuotType int32

const (
	WbillQuotType_WQT_OrderQuot   WbillQuotType = 0 // 报价行情
	WbillQuotType_WQT_MatchDetail WbillQuotType = 1 // 成交逐笔
	WbillQuotType_WQT_Match       WbillQuotType = 2 // 成交汇总
	WbillQuotType_WQT_MBL_QUOT    WbillQuotType = 3 // 深度行情
)

// Enum value maps for WbillQuotType.
var (
	WbillQuotType_name = map[int32]string{
		0: "WQT_OrderQuot",
		1: "WQT_MatchDetail",
		2: "WQT_Match",
		3: "WQT_MBL_QUOT",
	}
	WbillQuotType_value = map[string]int32{
		"WQT_OrderQuot":   0,
		"WQT_MatchDetail": 1,
		"WQT_Match":       2,
		"WQT_MBL_QUOT":    3,
	}
)

func (x WbillQuotType) Enum() *WbillQuotType {
	p := new(WbillQuotType)
	*p = x
	return p
}

func (x WbillQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WbillQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[3].Descriptor()
}

func (WbillQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[3]
}

func (x WbillQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WbillQuotType.Descriptor instead.
func (WbillQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{3}
}

// /< 元素增量行情类型
type EElementIncrequotType int32

const (
	EElementIncrequotType_EIQT_Add    EElementIncrequotType = 0 // 增加
	EElementIncrequotType_EIQT_Update EElementIncrequotType = 1 // 更新
	EElementIncrequotType_EIQT_Delete EElementIncrequotType = 2 // 删除
)

// Enum value maps for EElementIncrequotType.
var (
	EElementIncrequotType_name = map[int32]string{
		0: "EIQT_Add",
		1: "EIQT_Update",
		2: "EIQT_Delete",
	}
	EElementIncrequotType_value = map[string]int32{
		"EIQT_Add":    0,
		"EIQT_Update": 1,
		"EIQT_Delete": 2,
	}
)

func (x EElementIncrequotType) Enum() *EElementIncrequotType {
	p := new(EElementIncrequotType)
	*p = x
	return p
}

func (x EElementIncrequotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EElementIncrequotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[4].Descriptor()
}

func (EElementIncrequotType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[4]
}

func (x EElementIncrequotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EElementIncrequotType.Descriptor instead.
func (EElementIncrequotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{4}
}

// / 成交行情周期类型
type EOTCQuotPeriodType int32

const (
	EOTCQuotPeriodType_OTCQuotPeriod_Day       EOTCQuotPeriodType = 0 // 日K线
	EOTCQuotPeriodType_OTCQuotPeriod_Week_1    EOTCQuotPeriodType = 1 // 1周K线
	EOTCQuotPeriodType_OTCQuotPeriod_Month_1   EOTCQuotPeriodType = 2 // 1月K线
	EOTCQuotPeriodType_OTCQuotPeriod_Quarter_1 EOTCQuotPeriodType = 3 // 1季K线
	EOTCQuotPeriodType_OTCQuotPeriod_Year_1    EOTCQuotPeriodType = 4 // 1年K线
	EOTCQuotPeriodType_OTCQuotPeriod_Year_3    EOTCQuotPeriodType = 5 // 3年K线
)

// Enum value maps for EOTCQuotPeriodType.
var (
	EOTCQuotPeriodType_name = map[int32]string{
		0: "OTCQuotPeriod_Day",
		1: "OTCQuotPeriod_Week_1",
		2: "OTCQuotPeriod_Month_1",
		3: "OTCQuotPeriod_Quarter_1",
		4: "OTCQuotPeriod_Year_1",
		5: "OTCQuotPeriod_Year_3",
	}
	EOTCQuotPeriodType_value = map[string]int32{
		"OTCQuotPeriod_Day":       0,
		"OTCQuotPeriod_Week_1":    1,
		"OTCQuotPeriod_Month_1":   2,
		"OTCQuotPeriod_Quarter_1": 3,
		"OTCQuotPeriod_Year_1":    4,
		"OTCQuotPeriod_Year_3":    5,
	}
)

func (x EOTCQuotPeriodType) Enum() *EOTCQuotPeriodType {
	p := new(EOTCQuotPeriodType)
	*p = x
	return p
}

func (x EOTCQuotPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOTCQuotPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[5].Descriptor()
}

func (EOTCQuotPeriodType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[5]
}

func (x EOTCQuotPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOTCQuotPeriodType.Descriptor instead.
func (EOTCQuotPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{5}
}

// / 场外数据请求按照哪个类型进行排序
type EOtcSortType int32

const (
	EOtcSortType_SortNotNeed      EOtcSortType = 0 //不需要排序
	EOtcSortType_SortByRegionName EOtcSortType = 1 //按照区域名称排序
	EOtcSortType_SortByGradeName  EOtcSortType = 2 //按照品级名称排序
)

// Enum value maps for EOtcSortType.
var (
	EOtcSortType_name = map[int32]string{
		0: "SortNotNeed",
		1: "SortByRegionName",
		2: "SortByGradeName",
	}
	EOtcSortType_value = map[string]int32{
		"SortNotNeed":      0,
		"SortByRegionName": 1,
		"SortByGradeName":  2,
	}
)

func (x EOtcSortType) Enum() *EOtcSortType {
	p := new(EOtcSortType)
	*p = x
	return p
}

func (x EOtcSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOtcSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[6].Descriptor()
}

func (EOtcSortType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[6]
}

func (x EOtcSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOtcSortType.Descriptor instead.
func (EOtcSortType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{6}
}

// /场外实时行情统计周期
type EOTCStaPeriodType int32

const (
	EOTCStaPeriodType_OTCStaPeriodAll      EOTCStaPeriodType = 0 // 所有周期的数据，后端使用（客户端禁止使用）
	EOTCStaPeriodType_OTCStaPeriodMonth    EOTCStaPeriodType = 1 // 1月
	EOTCStaPeriodType_OTCStaPeriodQuarter  EOTCStaPeriodType = 2 // 1季
	EOTCStaPeriodType_OTCStaPeriodHalfYear EOTCStaPeriodType = 3 // 半年
	EOTCStaPeriodType_OTCStaPeriodYear     EOTCStaPeriodType = 4 // 1年
	EOTCStaPeriodType_OTCStaPeriodToNow    EOTCStaPeriodType = 5 // 至今
)

// Enum value maps for EOTCStaPeriodType.
var (
	EOTCStaPeriodType_name = map[int32]string{
		0: "OTCStaPeriodAll",
		1: "OTCStaPeriodMonth",
		2: "OTCStaPeriodQuarter",
		3: "OTCStaPeriodHalfYear",
		4: "OTCStaPeriodYear",
		5: "OTCStaPeriodToNow",
	}
	EOTCStaPeriodType_value = map[string]int32{
		"OTCStaPeriodAll":      0,
		"OTCStaPeriodMonth":    1,
		"OTCStaPeriodQuarter":  2,
		"OTCStaPeriodHalfYear": 3,
		"OTCStaPeriodYear":     4,
		"OTCStaPeriodToNow":    5,
	}
)

func (x EOTCStaPeriodType) Enum() *EOTCStaPeriodType {
	p := new(EOTCStaPeriodType)
	*p = x
	return p
}

func (x EOTCStaPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOTCStaPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_otc_proto_enumTypes[7].Descriptor()
}

func (EOTCStaPeriodType) Type() protoreflect.EnumType {
	return &file_fip_def_otc_proto_enumTypes[7]
}

func (x EOTCStaPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOTCStaPeriodType.Descriptor instead.
func (EOTCStaPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_otc_proto_rawDescGZIP(), []int{7}
}

var File_fip_def_otc_proto protoreflect.FileDescriptor

var file_fip_def_otc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6f, 0x74, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2a, 0xa2, 0x01, 0x0a, 0x0c, 0x45,
	0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x51, 0x54, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x51, 0x54, 0x5f, 0x77, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x51,
	0x54, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x51, 0x54, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x51, 0x54, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x51, 0x54, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x51, 0x54,
	0x5f, 0x4f, 0x54, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x10, 0x06, 0x2a,
	0x3a, 0x0a, 0x0e, 0x45, 0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x51, 0x53, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d,
	0x6b, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x51, 0x53, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x53, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c,
	0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0d, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x51, 0x54, 0x5f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x51, 0x54, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x51, 0x54, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x51, 0x54, 0x5f, 0x4d, 0x42, 0x4c, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x47, 0x0a,
	0x15, 0x45, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x71, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x49, 0x51, 0x54, 0x5f, 0x41,
	0x64, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x49, 0x51, 0x54, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x49, 0x51, 0x54, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x2a, 0xb1, 0x01, 0x0a, 0x12, 0x45, 0x4f, 0x54, 0x43, 0x51,
	0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x44,
	0x61, 0x79, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x54, 0x43,
	0x51, 0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x51, 0x75, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x31, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x33, 0x10, 0x05, 0x2a, 0x4a, 0x0a, 0x0c, 0x45, 0x4f,
	0x74, 0x63, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a, 0x11, 0x45, 0x4f, 0x54, 0x43, 0x53,
	0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x6c, 0x6c, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x54, 0x43, 0x53,
	0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x61, 0x6c, 0x66, 0x59, 0x65, 0x61, 0x72, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x59, 0x65, 0x61, 0x72, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x54, 0x6f, 0x4e, 0x6f, 0x77, 0x10, 0x05, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_otc_proto_rawDescOnce sync.Once
	file_fip_def_otc_proto_rawDescData = file_fip_def_otc_proto_rawDesc
)

func file_fip_def_otc_proto_rawDescGZIP() []byte {
	file_fip_def_otc_proto_rawDescOnce.Do(func() {
		file_fip_def_otc_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_otc_proto_rawDescData)
	})
	return file_fip_def_otc_proto_rawDescData
}

var file_fip_def_otc_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_fip_def_otc_proto_goTypes = []interface{}{
	(EOtcQuotType)(0),          // 0: fippb.EOtcQuotType
	(EOtcQuotStatus)(0),        // 1: fippb.EOtcQuotStatus
	(ReqSubscribeType)(0),      // 2: fippb.ReqSubscribeType
	(WbillQuotType)(0),         // 3: fippb.WbillQuotType
	(EElementIncrequotType)(0), // 4: fippb.EElementIncrequotType
	(EOTCQuotPeriodType)(0),    // 5: fippb.EOTCQuotPeriodType
	(EOtcSortType)(0),          // 6: fippb.EOtcSortType
	(EOTCStaPeriodType)(0),     // 7: fippb.EOTCStaPeriodType
}
var file_fip_def_otc_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fip_def_otc_proto_init() }
func file_fip_def_otc_proto_init() {
	if File_fip_def_otc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_otc_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_otc_proto_goTypes,
		DependencyIndexes: file_fip_def_otc_proto_depIdxs,
		EnumInfos:         file_fip_def_otc_proto_enumTypes,
	}.Build()
	File_fip_def_otc_proto = out.File
	file_fip_def_otc_proto_rawDesc = nil
	file_fip_def_otc_proto_goTypes = nil
	file_fip_def_otc_proto_depIdxs = nil
}
