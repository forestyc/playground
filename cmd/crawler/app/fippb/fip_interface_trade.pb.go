//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 实时行情接口proto定义
//
// @author <zhaow>
//
// @date 2018-6-28
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_trade.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// del interfaceProductInfo接口端产品信息 protocolInfo协议信息 macAddress动态密码 loginRemark登录备注 tradingDay交易日
type ReqUserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	UserId             string            `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号                ctp_max(15) x1_max(12)
	Password           string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                   // 密码,                   max(40)
	ChannelType        EApiChannelType   `protobuf:"varint,4,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	BrokerId           string            `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 经纪公司代码           ctp_M x1_N, max(10)
	UserProductInfo    string            `protobuf:"bytes,6,opt,name=userProductInfo,proto3" json:"userProductInfo,omitempty"`                     // 用户端产品信息         ctp_NM x1_N def="" max(10)
	ClientIpAddress    string            `protobuf:"bytes,7,opt,name=clientIpAddress,proto3" json:"clientIpAddress,omitempty"`                     // 终端IP地址
	MacAddress         string            `protobuf:"bytes,8,opt,name=macAddress,proto3" json:"macAddress,omitempty"`                               // Mac地址
	RegisterAuthInfo   *RegisterAuthInfo `protobuf:"bytes,9,opt,name=registerAuthInfo,proto3" json:"registerAuthInfo,omitempty"`                   // 穿透式监管需要的信息
	ClientPort         string            `protobuf:"bytes,10,opt,name=clientPort,proto3" json:"clientPort,omitempty"`                              // 终端端口
	PasswordSM2Encrypt bool              `protobuf:"varint,11,opt,name=passwordSM2Encrypt,proto3" json:"passwordSM2Encrypt,omitempty"`             // 密码是否进行了SM2加密
}

func (x *ReqUserLogin) Reset() {
	*x = ReqUserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserLogin) ProtoMessage() {}

func (x *ReqUserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserLogin.ProtoReflect.Descriptor instead.
func (*ReqUserLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{0}
}

func (x *ReqUserLogin) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqUserLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqUserLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqUserLogin) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqUserLogin) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqUserLogin) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *ReqUserLogin) GetClientIpAddress() string {
	if x != nil {
		return x.ClientIpAddress
	}
	return ""
}

func (x *ReqUserLogin) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReqUserLogin) GetRegisterAuthInfo() *RegisterAuthInfo {
	if x != nil {
		return x.RegisterAuthInfo
	}
	return nil
}

func (x *ReqUserLogin) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *ReqUserLogin) GetPasswordSM2Encrypt() bool {
	if x != nil {
		return x.PasswordSM2Encrypt
	}
	return false
}

// *
// @brief 删减版的交易账号登录柜台的基本信息
// @author <liyu>
// @date 2019-7-15
// @note 协议号 client-proxy:<21001> proxy-server:<25001>
// @modify
type ReqUserLoginBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string          `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号                ctp_max(15) x1_max(12)
	Password        string          `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                                   // 密码,                   max(40)
	ChannelType     EApiChannelType `protobuf:"varint,3,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	BrokerId        string          `protobuf:"bytes,4,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 经纪公司代码           ctp_M x1_N, max(10)
	UserProductInfo string          `protobuf:"bytes,5,opt,name=userProductInfo,proto3" json:"userProductInfo,omitempty"`                     // 用户端产品信息         ctp_NM x1_N def="" max(10)
}

func (x *ReqUserLoginBasicInfo) Reset() {
	*x = ReqUserLoginBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserLoginBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserLoginBasicInfo) ProtoMessage() {}

func (x *ReqUserLoginBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserLoginBasicInfo.ProtoReflect.Descriptor instead.
func (*ReqUserLoginBasicInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{1}
}

func (x *ReqUserLoginBasicInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqUserLoginBasicInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqUserLoginBasicInfo) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqUserLoginBasicInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqUserLoginBasicInfo) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

// *
// @brief 删减版的交易账号登录柜台的基本信息被收到后，发回的响应报文
// @author <liyu>
// @date 2019-7-15
// @note 协议号 client-proxy:<21001> proxy-server:<25001>
// @modify
type RspUserLoginBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号                ctp_max(15) x1_max(12)
	Feedback  int32  `protobuf:"varint,2,opt,name=feedback,proto3" json:"feedback,omitempty"`  // 密码登陆柜台行情系统的反馈，0成功，1失败,2请求更换账号  max(40)
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 用户端产品信息         ctp_NM x1_N def="" max(32)
}

func (x *RspUserLoginBasicInfo) Reset() {
	*x = RspUserLoginBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserLoginBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserLoginBasicInfo) ProtoMessage() {}

func (x *RspUserLoginBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserLoginBasicInfo.ProtoReflect.Descriptor instead.
func (*RspUserLoginBasicInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{2}
}

func (x *RspUserLoginBasicInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspUserLoginBasicInfo) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *RspUserLoginBasicInfo) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// del tradingDay交易日 loginTime登录成功时间 brokerId经纪公司代码 systemName交易系统名称
type RspUserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead           *RspTradeHead      `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                      // 通用头              ctp x1
	UserId              string             `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                            // 用户账号            ctp x1
	MaxOrderRef         int64              `protobuf:"varint,3,opt,name=maxOrderRef,proto3" json:"maxOrderRef,omitempty"`                 // OrderRef初始化值    ctp x1
	SameUserKey         *SameUserKey       `protobuf:"bytes,4,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                  // 同名用户唯一标示    ctp x1
	ExchgTime           *ExchgTime         `protobuf:"bytes,5,opt,name=exchgTime,proto3" json:"exchgTime,omitempty"`                      // 各交易所时间        ctp x1
	TradingDay          string             `protobuf:"bytes,6,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                    // 交易日              ctp
	Type                EConOrderCacheType `protobuf:"varint,7,opt,name=type,proto3,enum=fippb.EConOrderCacheType" json:"type,omitempty"` // 条件单类型
	SupportPositionDate bool               `protobuf:"varint,8,opt,name=supportPositionDate,proto3" json:"supportPositionDate,omitempty"` // 是否支持持仓日期字段
}

func (x *RspUserLogin) Reset() {
	*x = RspUserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserLogin) ProtoMessage() {}

func (x *RspUserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserLogin.ProtoReflect.Descriptor instead.
func (*RspUserLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{3}
}

func (x *RspUserLogin) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUserLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspUserLogin) GetMaxOrderRef() int64 {
	if x != nil {
		return x.MaxOrderRef
	}
	return 0
}

func (x *RspUserLogin) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RspUserLogin) GetExchgTime() *ExchgTime {
	if x != nil {
		return x.ExchgTime
	}
	return nil
}

func (x *RspUserLogin) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *RspUserLogin) GetType() EConOrderCacheType {
	if x != nil {
		return x.Type
	}
	return EConOrderCacheType_COCT_NULL
}

func (x *RspUserLogin) GetSupportPositionDate() bool {
	if x != nil {
		return x.SupportPositionDate
	}
	return false
}

// del interfaceProductInfo接口端产品信息 protocolInfo协议信息 macAddress动态密码 loginRemark登录备注 tradingDay交易日
type ReqLoginForConditionOrderAsUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	UserId           string            `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号                ctp_max(15) x1_max(12)
	Password         string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                   // 密码,                   max(40)
	ChannelType      EApiChannelType   `protobuf:"varint,4,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	BrokerId         string            `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 经纪公司代码           ctp_M x1_N, max(10)
	UserProductInfo  string            `protobuf:"bytes,6,opt,name=userProductInfo,proto3" json:"userProductInfo,omitempty"`                     // 用户端产品信息         ctp_NM x1_N def="" max(10)
	ClientIpAddress  string            `protobuf:"bytes,7,opt,name=clientIpAddress,proto3" json:"clientIpAddress,omitempty"`                     // 终端IP地址
	MacAddress       string            `protobuf:"bytes,8,opt,name=macAddress,proto3" json:"macAddress,omitempty"`                               // Mac地址
	RegisterAuthInfo *RegisterAuthInfo `protobuf:"bytes,9,opt,name=registerAuthInfo,proto3" json:"registerAuthInfo,omitempty"`                   // 穿透式监管需要的信息
	ClientPort       string            `protobuf:"bytes,10,opt,name=clientPort,proto3" json:"clientPort,omitempty"`                              // 终端端口
}

func (x *ReqLoginForConditionOrderAsUser) Reset() {
	*x = ReqLoginForConditionOrderAsUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoginForConditionOrderAsUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoginForConditionOrderAsUser) ProtoMessage() {}

func (x *ReqLoginForConditionOrderAsUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoginForConditionOrderAsUser.ProtoReflect.Descriptor instead.
func (*ReqLoginForConditionOrderAsUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{4}
}

func (x *ReqLoginForConditionOrderAsUser) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqLoginForConditionOrderAsUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqLoginForConditionOrderAsUser) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetClientIpAddress() string {
	if x != nil {
		return x.ClientIpAddress
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReqLoginForConditionOrderAsUser) GetRegisterAuthInfo() *RegisterAuthInfo {
	if x != nil {
		return x.RegisterAuthInfo
	}
	return nil
}

func (x *ReqLoginForConditionOrderAsUser) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

// del tradingDay交易日 loginTime登录成功时间 brokerId经纪公司代码 systemName交易系统名称
type RspLoginForConditionOrderAsUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`      // 通用头              ctp x1
	UserId      string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`            // 用户账号            ctp x1
	MaxOrderRef int64         `protobuf:"varint,3,opt,name=maxOrderRef,proto3" json:"maxOrderRef,omitempty"` // OrderRef初始化值    ctp x1
	SameUserKey *SameUserKey  `protobuf:"bytes,4,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`  // 同名用户唯一标示    ctp x1
	ExchgTime   *ExchgTime    `protobuf:"bytes,5,opt,name=exchgTime,proto3" json:"exchgTime,omitempty"`      // 各交易所时间        ctp x1
	TradingDay  string        `protobuf:"bytes,6,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`    // 交易日              ctp
}

func (x *RspLoginForConditionOrderAsUser) Reset() {
	*x = RspLoginForConditionOrderAsUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLoginForConditionOrderAsUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLoginForConditionOrderAsUser) ProtoMessage() {}

func (x *RspLoginForConditionOrderAsUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLoginForConditionOrderAsUser.ProtoReflect.Descriptor instead.
func (*RspLoginForConditionOrderAsUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{5}
}

func (x *RspLoginForConditionOrderAsUser) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspLoginForConditionOrderAsUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspLoginForConditionOrderAsUser) GetMaxOrderRef() int64 {
	if x != nil {
		return x.MaxOrderRef
	}
	return 0
}

func (x *RspLoginForConditionOrderAsUser) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RspLoginForConditionOrderAsUser) GetExchgTime() *ExchgTime {
	if x != nil {
		return x.ExchgTime
	}
	return nil
}

func (x *RspLoginForConditionOrderAsUser) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

// *
// @brief 交易账号登出请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21003> proxy-server:<25003>
// @modify
type ReqUserLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`        // 用户账号             ，x1_max(12) ctp_max(15)
	LocalPos  uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`   // tproxy专用
}

func (x *ReqUserLogout) Reset() {
	*x = ReqUserLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserLogout) ProtoMessage() {}

func (x *ReqUserLogout) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserLogout.ProtoReflect.Descriptor instead.
func (*ReqUserLogout) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{6}
}

func (x *ReqUserLogout) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqUserLogout) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqUserLogout) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 交易账号登出响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21004> proxy-server:<25004>
// @modify
type RspUserLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头               ctp x1
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号             ctp x1
}

func (x *RspUserLogout) Reset() {
	*x = RspUserLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserLogout) ProtoMessage() {}

func (x *RspUserLogout) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserLogout.ProtoReflect.Descriptor instead.
func (*RspUserLogout) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{7}
}

func (x *RspUserLogout) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUserLogout) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 交易账号口令更新请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21005> proxy-server:<25005>
// @modify
type ReqResetUserPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                   // 请求id
	UserId             string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                          // 用户账号             ，ctp_max(15) x1_max(12)
	OldPassword        string `protobuf:"bytes,3,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`                // 旧密码,              ，max(40)
	NewPassword        string `protobuf:"bytes,4,opt,name=newPassword,proto3" json:"newPassword,omitempty"`                // 新密码,              ，max(40)
	LocalPos           uint64 `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                     // tproxy专用
	PasswordSM2Encrypt bool   `protobuf:"varint,6,opt,name=passwordSM2Encrypt,proto3" json:"passwordSM2Encrypt,omitempty"` // 密码是否进行了SM2加密
}

func (x *ReqResetUserPassword) Reset() {
	*x = ReqResetUserPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqResetUserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqResetUserPassword) ProtoMessage() {}

func (x *ReqResetUserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqResetUserPassword.ProtoReflect.Descriptor instead.
func (*ReqResetUserPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{8}
}

func (x *ReqResetUserPassword) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqResetUserPassword) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqResetUserPassword) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ReqResetUserPassword) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ReqResetUserPassword) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqResetUserPassword) GetPasswordSM2Encrypt() bool {
	if x != nil {
		return x.PasswordSM2Encrypt
	}
	return false
}

// *
// @brief 交易账号口令更新响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21006> proxy-server:<25006>
// @modify
type RspResetUserPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头               ctp x1
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号             ctp x1
}

func (x *RspResetUserPassword) Reset() {
	*x = RspResetUserPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspResetUserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspResetUserPassword) ProtoMessage() {}

func (x *RspResetUserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspResetUserPassword.ProtoReflect.Descriptor instead.
func (*RspResetUserPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{9}
}

func (x *RspResetUserPassword) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspResetUserPassword) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 资金账号口令更新请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21009> proxy-server:<25013>
// @modify
type ReqResetAccountPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                   // 请求id
	AccountId          string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`                    // 资金账号             ，ctp_max(15) x1_max(12)
	OldPassword        string `protobuf:"bytes,3,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`                // 旧密码               ，max(40)
	NewPassword        string `protobuf:"bytes,4,opt,name=newPassword,proto3" json:"newPassword,omitempty"`                // 新密码               ，max(40)
	LocalPos           uint64 `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                     // tproxy专用
	PasswordSM2Encrypt bool   `protobuf:"varint,6,opt,name=passwordSM2Encrypt,proto3" json:"passwordSM2Encrypt,omitempty"` // 密码是否进行了SM2加密
}

func (x *ReqResetAccountPassword) Reset() {
	*x = ReqResetAccountPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqResetAccountPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqResetAccountPassword) ProtoMessage() {}

func (x *ReqResetAccountPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqResetAccountPassword.ProtoReflect.Descriptor instead.
func (*ReqResetAccountPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{10}
}

func (x *ReqResetAccountPassword) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqResetAccountPassword) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqResetAccountPassword) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ReqResetAccountPassword) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ReqResetAccountPassword) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqResetAccountPassword) GetPasswordSM2Encrypt() bool {
	if x != nil {
		return x.PasswordSM2Encrypt
	}
	return false
}

// *
// @brief 资金账号口令更新响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<21010> proxy-server:<25014>
// @modify
type RspResetAccountPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`     // 通用头               ctp x1
	AccountId   string        `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`     // 资金账号             ，ctp_max(15) x1_max(12)
	OldPassword string        `protobuf:"bytes,3,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"` // 旧密码               ，max(40)
	NewPassword string        `protobuf:"bytes,4,opt,name=newPassword,proto3" json:"newPassword,omitempty"` // 新密码               ，max(40)
}

func (x *RspResetAccountPassword) Reset() {
	*x = RspResetAccountPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspResetAccountPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspResetAccountPassword) ProtoMessage() {}

func (x *RspResetAccountPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspResetAccountPassword.ProtoReflect.Descriptor instead.
func (*RspResetAccountPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{11}
}

func (x *RspResetAccountPassword) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspResetAccountPassword) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RspResetAccountPassword) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *RspResetAccountPassword) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// *
// @brief 期货委托报单请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22001> proxy-server:<26001>
// @modify
type ReqOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32                           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id
	OrderInfo    *OrderInfo                      `protobuf:"bytes,2,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"`       // 报单信息
	LocalPos     uint64                          `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
	AutoStopPara *OrdinaryOrderAutoStopParameter `protobuf:"bytes,4,opt,name=autoStopPara,proto3" json:"autoStopPara,omitempty"` // 自动止盈止损参数
}

func (x *ReqOrderInsert) Reset() {
	*x = ReqOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOrderInsert) ProtoMessage() {}

func (x *ReqOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOrderInsert.ProtoReflect.Descriptor instead.
func (*ReqOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{12}
}

func (x *ReqOrderInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqOrderInsert) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *ReqOrderInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqOrderInsert) GetAutoStopPara() *OrdinaryOrderAutoStopParameter {
	if x != nil {
		return x.AutoStopPara
	}
	return nil
}

// *
// @brief 期货委托报单响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22002> proxy-server:<26002>
// @modify
type RspOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
	OrderInfo *OrderInfo    `protobuf:"bytes,2,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"` // 报单信息
}

func (x *RspOrderInsert) Reset() {
	*x = RspOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOrderInsert) ProtoMessage() {}

func (x *RspOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOrderInsert.ProtoReflect.Descriptor instead.
func (*RspOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{13}
}

func (x *RspOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspOrderInsert) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

// *
// @brief 期货委托报单响应, 对条件单发送
// @author <xuxiaochen>
// @date 2018-6-28
// @note 协议号 server-trigger:<26043>
// @modify
type RspOrderInsertToTrig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
	OrderInfo *OrderInfo    `protobuf:"bytes,2,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"` // 报单信息
}

func (x *RspOrderInsertToTrig) Reset() {
	*x = RspOrderInsertToTrig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOrderInsertToTrig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOrderInsertToTrig) ProtoMessage() {}

func (x *RspOrderInsertToTrig) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOrderInsertToTrig.ProtoReflect.Descriptor instead.
func (*RspOrderInsertToTrig) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{14}
}

func (x *RspOrderInsertToTrig) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspOrderInsertToTrig) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

// *
// @brief 报单录入错误回报
// @author <zhaowei>
// @date 2019-01-07
// @note 协议号 client-proxy:<22511> proxy-server:<26511>
// @modify
type ErrRtnOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
	OrderInfo *OrderInfo    `protobuf:"bytes,2,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"` // 报单信息
}

func (x *ErrRtnOrderInsert) Reset() {
	*x = ErrRtnOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrRtnOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrRtnOrderInsert) ProtoMessage() {}

func (x *ErrRtnOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrRtnOrderInsert.ProtoReflect.Descriptor instead.
func (*ErrRtnOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{15}
}

func (x *ErrRtnOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *ErrRtnOrderInsert) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

// *
// @brief 报单通知
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22501> proxy-server:<26501>
// @modify
type RtnOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderInfo            *OrderInfo             `protobuf:"bytes,1,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"`                                                    // 报单信息
	OrderSysId           string                 `protobuf:"bytes,2,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号             ctp x1
	OrderSubmitStatus    EOrderSubmitStatusType `protobuf:"varint,3,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态         ctp x1
	OrderStatus          EOrderStatusType       `protobuf:"varint,4,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   // 报单状态             ctp x1
	VolumnTraded         int32                  `protobuf:"varint,5,opt,name=volumnTraded,proto3" json:"volumnTraded,omitempty"`                                             // 今成交数量           ctp x1 (报单今日在交易系统中成交的数量)
	VolumnTotal          int32                  `protobuf:"varint,6,opt,name=volumnTotal,proto3" json:"volumnTotal,omitempty"`                                               // 剩余数量             ctp x1 (数量-今成交数量)
	StatusMsg            string                 `protobuf:"bytes,7,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息             ctp x1
	SameUserKey          *SameUserKey           `protobuf:"bytes,8,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示     ctp x1
	InsertDate           string                 `protobuf:"bytes,9,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期             ctp
	InsertTime           string                 `protobuf:"bytes,10,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                 // 委托时间             ctp
	CancelTime           string                 `protobuf:"bytes,11,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                 // 撤销时间             ctp
	UpdateTime           string                 `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                 // 最后修改时间         ctp
	RelativeOrderSysId   string                 `protobuf:"bytes,13,opt,name=relativeOrderSysId,proto3" json:"relativeOrderSysId,omitempty"`                                 // 相关报单             ctp
	ZceTotalTradedVolumn int32                  `protobuf:"varint,14,opt,name=zceTotalTradedVolumn,proto3" json:"zceTotalTradedVolumn,omitempty"`                            // 郑商所成交数量       ctp
	LocalPos             uint64                 `protobuf:"varint,15,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                    // tproxy专用
	ActiveTime           string                 `protobuf:"bytes,16,opt,name=activeTime,proto3" json:"activeTime,omitempty"`                                                 // 触发时间             ctp
	OrderType            EOrderTypeType         `protobuf:"varint,17,opt,name=orderType,proto3,enum=fippb.EOrderTypeType" json:"orderType,omitempty"`                        // 报单类型
}

func (x *RtnOrder) Reset() {
	*x = RtnOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnOrder) ProtoMessage() {}

func (x *RtnOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnOrder.ProtoReflect.Descriptor instead.
func (*RtnOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{16}
}

func (x *RtnOrder) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *RtnOrder) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *RtnOrder) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *RtnOrder) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *RtnOrder) GetVolumnTraded() int32 {
	if x != nil {
		return x.VolumnTraded
	}
	return 0
}

func (x *RtnOrder) GetVolumnTotal() int32 {
	if x != nil {
		return x.VolumnTotal
	}
	return 0
}

func (x *RtnOrder) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *RtnOrder) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RtnOrder) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *RtnOrder) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *RtnOrder) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *RtnOrder) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RtnOrder) GetRelativeOrderSysId() string {
	if x != nil {
		return x.RelativeOrderSysId
	}
	return ""
}

func (x *RtnOrder) GetZceTotalTradedVolumn() int32 {
	if x != nil {
		return x.ZceTotalTradedVolumn
	}
	return 0
}

func (x *RtnOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *RtnOrder) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *RtnOrder) GetOrderType() EOrderTypeType {
	if x != nil {
		return x.OrderType
	}
	return EOrderTypeType_ORDT_Normal
}

// del brokerId经纪公司代码 brokerOrderSeq经纪公司报单编号 exchangeInstId合约在交易所的代码 traderId交易所交易员代码 orderLocalId本地报单编号 tradingRole交易角色
//
//	businessUnit业务单元(报单的席位) participantId会员代码(经纪公司在交易所的代码) settlementId结算编号(交易所结算部给出的编号) clearingPartId结算会员编号(交易所结算部给出的结算会员编号)
//	sequenceNo序号(报单返回编号，目前不使用) userId用户代码 investUnitId投资单元代码 tradeDate成交日期(x1没有) tradingday交易日 tradeSource成交来源
//
// brokerId + brokerOrderSeq                    Thost收到用户报单后为每个经纪公司生成序列号
// exchangeId + orderSysId                      交易所接受了投资者报单，产生这组交易序列号
type RtnTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId      string           `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                 // 合约代码             ctp x1
	ExchangeId      EExchgID         `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`            // 交易所代码           ctp x1
	TradeId         string           `protobuf:"bytes,3,opt,name=tradeId,proto3" json:"tradeId,omitempty"`                                       // 成交编号             ctp x1
	Direction       EDirectionType   `protobuf:"varint,4,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`        // 买卖方向             ctp x1
	OrderSysId      string           `protobuf:"bytes,5,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                 // 报单编号             ctp x1
	ClientId        string           `protobuf:"bytes,6,opt,name=clientId,proto3" json:"clientId,omitempty"`                                     // 客户代码             ctp
	OffsetFlag      EOffsetFlagType  `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`     // 开平标示             ctp x1
	HedgeFlag       EHedgeFlagType   `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`        // 投保类型             ctp x1
	Price           float64          `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`                                         // 价格                 ctp x1
	VolumnCondition int32            `protobuf:"varint,10,opt,name=volumnCondition,proto3" json:"volumnCondition,omitempty"`                     // 数量                 ctp x1
	TradeTime       string           `protobuf:"bytes,11,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                                  // 成交时间             ctp x1
	InvestorId      string           `protobuf:"bytes,12,opt,name=investorId,proto3" json:"investorId,omitempty"`                                // 投资者代码           ctp
	TradeType       ETradeTypeType   `protobuf:"varint,13,opt,name=tradeType,proto3,enum=fippb.ETradeTypeType" json:"tradeType,omitempty"`       // 成交类型             ctp
	PriceSource     EPriceSourceType `protobuf:"varint,14,opt,name=priceSource,proto3,enum=fippb.EPriceSourceType" json:"priceSource,omitempty"` // 成交价来源           ctp
	OrderRef        uint64           `protobuf:"varint,15,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                   // 报单引用             ctp
	LocalPos        uint64           `protobuf:"varint,16,opt,name=localPos,proto3" json:"localPos,omitempty"`                                   // tproxy专用
}

func (x *RtnTrade) Reset() {
	*x = RtnTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnTrade) ProtoMessage() {}

func (x *RtnTrade) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnTrade.ProtoReflect.Descriptor instead.
func (*RtnTrade) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{17}
}

func (x *RtnTrade) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RtnTrade) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RtnTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *RtnTrade) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *RtnTrade) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *RtnTrade) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RtnTrade) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *RtnTrade) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *RtnTrade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RtnTrade) GetVolumnCondition() int32 {
	if x != nil {
		return x.VolumnCondition
	}
	return 0
}

func (x *RtnTrade) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *RtnTrade) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RtnTrade) GetTradeType() ETradeTypeType {
	if x != nil {
		return x.TradeType
	}
	return ETradeTypeType_TRDT_SplitCombination
}

func (x *RtnTrade) GetPriceSource() EPriceSourceType {
	if x != nil {
		return x.PriceSource
	}
	return EPriceSourceType_PSRC_LastPrice
}

func (x *RtnTrade) GetOrderRef() uint64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *RtnTrade) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货报单操作请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22003> proxy-server:<26003>
// @modify
type ReqOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32            `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`            // 请求id
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
	LocalPos        uint64           `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`              // tproxy专用
}

func (x *ReqOrderAction) Reset() {
	*x = ReqOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOrderAction) ProtoMessage() {}

func (x *ReqOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOrderAction.ProtoReflect.Descriptor instead.
func (*ReqOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{18}
}

func (x *ReqOrderAction) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqOrderAction) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

func (x *ReqOrderAction) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货报单操作响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22004> proxy-server:<26004>
// @modify
type RspOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
}

func (x *RspOrderAction) Reset() {
	*x = RspOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOrderAction) ProtoMessage() {}

func (x *RspOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOrderAction.ProtoReflect.Descriptor instead.
func (*RspOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{19}
}

func (x *RspOrderAction) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspOrderAction) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

// *
// @brief 报单操作错误回报
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22512> proxy-server:<26512>
// @modify
type ErrRtnOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId           int32                  `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`                                                       // errid    0成功 非0失败
	ErrorMessage      string                 `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`                                              // 失败原因
	OrderInfo         *OrderInfo             `protobuf:"bytes,3,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"`                                                    // 报单信息
	OrderActionRef    string                 `protobuf:"bytes,4,opt,name=orderActionRef,proto3" json:"orderActionRef,omitempty"`                                          // 报单操作引用
	SameUserKey       *SameUserKey           `protobuf:"bytes,5,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示
	OrderSysId        string                 `protobuf:"bytes,6,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号
	ActionDate        string                 `protobuf:"bytes,7,opt,name=actionDate,proto3" json:"actionDate,omitempty"`                                                  // 操作日期
	ActionTime        string                 `protobuf:"bytes,8,opt,name=actionTime,proto3" json:"actionTime,omitempty"`                                                  // 操作时间
	OrderActionStatus EOrderActionStatusType `protobuf:"varint,9,opt,name=orderActionStatus,proto3,enum=fippb.EOrderActionStatusType" json:"orderActionStatus,omitempty"` // 报单操作状态
	StatusMsg         string                 `protobuf:"bytes,10,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                   // 状态信息
	LocalPos          uint64                 `protobuf:"varint,11,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                    // tproxy专用
}

func (x *ErrRtnOrderAction) Reset() {
	*x = ErrRtnOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrRtnOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrRtnOrderAction) ProtoMessage() {}

func (x *ErrRtnOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrRtnOrderAction.ProtoReflect.Descriptor instead.
func (*ErrRtnOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{20}
}

func (x *ErrRtnOrderAction) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *ErrRtnOrderAction) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrRtnOrderAction) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *ErrRtnOrderAction) GetOrderActionRef() string {
	if x != nil {
		return x.OrderActionRef
	}
	return ""
}

func (x *ErrRtnOrderAction) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ErrRtnOrderAction) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *ErrRtnOrderAction) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *ErrRtnOrderAction) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *ErrRtnOrderAction) GetOrderActionStatus() EOrderActionStatusType {
	if x != nil {
		return x.OrderActionStatus
	}
	return EOrderActionStatusType_EOAS_Null
}

func (x *ErrRtnOrderAction) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ErrRtnOrderAction) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 执行宣告录入请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22005> proxy-server:<26005>
// @modify
type ReqExeOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32          `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id
	ExeOrderInfo *ExecOrderInfo `protobuf:"bytes,2,opt,name=exeOrderInfo,proto3" json:"exeOrderInfo,omitempty"` // 执行宣告信息
	LocalPos     uint64         `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
}

func (x *ReqExeOrderInsert) Reset() {
	*x = ReqExeOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqExeOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqExeOrderInsert) ProtoMessage() {}

func (x *ReqExeOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqExeOrderInsert.ProtoReflect.Descriptor instead.
func (*ReqExeOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{21}
}

func (x *ReqExeOrderInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqExeOrderInsert) GetExeOrderInfo() *ExecOrderInfo {
	if x != nil {
		return x.ExeOrderInfo
	}
	return nil
}

func (x *ReqExeOrderInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 执行宣告录入响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22006> proxy-server:<26006>
// @modify
type RspExeOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead  `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`       // 交易通用应答头
	ExeOrderInfo *ExecOrderInfo `protobuf:"bytes,2,opt,name=exeOrderInfo,proto3" json:"exeOrderInfo,omitempty"` // 执行宣告信息
}

func (x *RspExeOrderInsert) Reset() {
	*x = RspExeOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspExeOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspExeOrderInsert) ProtoMessage() {}

func (x *RspExeOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspExeOrderInsert.ProtoReflect.Descriptor instead.
func (*RspExeOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{22}
}

func (x *RspExeOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspExeOrderInsert) GetExeOrderInfo() *ExecOrderInfo {
	if x != nil {
		return x.ExeOrderInfo
	}
	return nil
}

// *
// @brief 执行宣告录入错误回报
// @author <zhaowei>
// @date 2019-01-07
// @note 协议号 client-proxy:<22513> proxy-server:<26513>
// @modify
type ErrRtnExeOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead  `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`       // 交易通用应答头
	ExeOrderInfo *ExecOrderInfo `protobuf:"bytes,2,opt,name=exeOrderInfo,proto3" json:"exeOrderInfo,omitempty"` // 执行宣告信息
}

func (x *ErrRtnExeOrderInsert) Reset() {
	*x = ErrRtnExeOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrRtnExeOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrRtnExeOrderInsert) ProtoMessage() {}

func (x *ErrRtnExeOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrRtnExeOrderInsert.ProtoReflect.Descriptor instead.
func (*ErrRtnExeOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{23}
}

func (x *ErrRtnExeOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *ErrRtnExeOrderInsert) GetExeOrderInfo() *ExecOrderInfo {
	if x != nil {
		return x.ExeOrderInfo
	}
	return nil
}

// del exeOrderLocalId本地执行宣告编号 participantId会员代码 exchangeInstId合约在交易所的代码 traderId交易所交易员代码 installId安装编号（使用报盘机id）notifySequence报单提示序号 tradingDay交易日
//
//	settlementId结算编号 insertDate报单日期 clearingPartId结算会员编号 sequenceNo序号 userProductInfo用户端产品信息 activeUserId操作用户代码 branchId营业部编号 brokerExecOrderSeq经纪公司报单编号
//	requestId请求id
type RtnExeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExeOrderInfo      *ExecOrderInfo         `protobuf:"bytes,1,opt,name=exeOrderInfo,proto3" json:"exeOrderInfo,omitempty"`                                              // 执行宣告信息
	OrderSubmitStatus EOrderSubmitStatusType `protobuf:"varint,2,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 执行宣告提交状态     ctp x1
	ExecOrderSysId    string                 `protobuf:"bytes,3,opt,name=execOrderSysId,proto3" json:"execOrderSysId,omitempty"`                                          // 执行宣告编号
	InsertTime        string                 `protobuf:"bytes,4,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  // 插入时间
	CancelTime        string                 `protobuf:"bytes,5,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  // 撤销时间
	ExcResult         EExecResultType        `protobuf:"varint,6,opt,name=excResult,proto3,enum=fippb.EExecResultType" json:"excResult,omitempty"`                        // 执行结果
	StatusMsg         string                 `protobuf:"bytes,7,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息
	SameUserKey       *SameUserKey           `protobuf:"bytes,8,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示     ctp x1
	LocalPos          uint64                 `protobuf:"varint,9,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                     // tproxy专用
}

func (x *RtnExeOrder) Reset() {
	*x = RtnExeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnExeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnExeOrder) ProtoMessage() {}

func (x *RtnExeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnExeOrder.ProtoReflect.Descriptor instead.
func (*RtnExeOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{24}
}

func (x *RtnExeOrder) GetExeOrderInfo() *ExecOrderInfo {
	if x != nil {
		return x.ExeOrderInfo
	}
	return nil
}

func (x *RtnExeOrder) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *RtnExeOrder) GetExecOrderSysId() string {
	if x != nil {
		return x.ExecOrderSysId
	}
	return ""
}

func (x *RtnExeOrder) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *RtnExeOrder) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *RtnExeOrder) GetExcResult() EExecResultType {
	if x != nil {
		return x.ExcResult
	}
	return EExecResultType_OER_Unknown
}

func (x *RtnExeOrder) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *RtnExeOrder) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RtnExeOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 执行宣告操作请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22007> proxy-server:<26007>
// @modify
type ReqExeOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          int32                `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                  // 请求id
	ExeOrderActionInfo *ExecOrderActionInfo `protobuf:"bytes,2,opt,name=exeOrderActionInfo,proto3" json:"exeOrderActionInfo,omitempty"` // 执行宣告操作信息
	LocalPos           uint64               `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`                    // tproxy专用
}

func (x *ReqExeOrderAction) Reset() {
	*x = ReqExeOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqExeOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqExeOrderAction) ProtoMessage() {}

func (x *ReqExeOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqExeOrderAction.ProtoReflect.Descriptor instead.
func (*ReqExeOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{25}
}

func (x *ReqExeOrderAction) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqExeOrderAction) GetExeOrderActionInfo() *ExecOrderActionInfo {
	if x != nil {
		return x.ExeOrderActionInfo
	}
	return nil
}

func (x *ReqExeOrderAction) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 执行宣告操作响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22008> proxy-server:<26008>
// @modify
type RspExeOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead          *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                   // 交易通用应答头
	ExeOrderActionInfo *ExecOrderActionInfo `protobuf:"bytes,2,opt,name=exeOrderActionInfo,proto3" json:"exeOrderActionInfo,omitempty"` // 执行宣告操作信息
}

func (x *RspExeOrderAction) Reset() {
	*x = RspExeOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspExeOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspExeOrderAction) ProtoMessage() {}

func (x *RspExeOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspExeOrderAction.ProtoReflect.Descriptor instead.
func (*RspExeOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{26}
}

func (x *RspExeOrderAction) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspExeOrderAction) GetExeOrderActionInfo() *ExecOrderActionInfo {
	if x != nil {
		return x.ExeOrderActionInfo
	}
	return nil
}

// *
// @brief 执行宣告操作错误回报
// @author <zhaowei>
// @date 2019-01-07
// @note 协议号 client-proxy:<22514> proxy-server:<26514>
// @modify
type ErrRtnExeOrderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId            int32                  `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`                                                        // errid    0成功 非0失败
	ErrorMessage       string                 `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`                                               // 失败原因
	InvestorId         string                 `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                                   // 投资者代码
	OrderRef           int64                  `protobuf:"varint,4,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                                      // 执行宣告引用
	ExchangeId         EExchgID               `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                              // 交易所代码
	ExecOrderActionRef int64                  `protobuf:"varint,6,opt,name=execOrderActionRef,proto3" json:"execOrderActionRef,omitempty"`                                  // 执行宣告操作引用
	SameUserKey        *SameUserKey           `protobuf:"bytes,7,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                 // 同名用户唯一标示
	ExecOrderSysId     string                 `protobuf:"bytes,8,opt,name=execOrderSysId,proto3" json:"execOrderSysId,omitempty"`                                           // 执行宣告编号
	ActionDate         string                 `protobuf:"bytes,9,opt,name=actionDate,proto3" json:"actionDate,omitempty"`                                                   // 操作日期
	ActionTime         string                 `protobuf:"bytes,10,opt,name=actionTime,proto3" json:"actionTime,omitempty"`                                                  // 操作时间
	OrderActionStatus  EOrderActionStatusType `protobuf:"varint,11,opt,name=orderActionStatus,proto3,enum=fippb.EOrderActionStatusType" json:"orderActionStatus,omitempty"` // 报单操作状态
	ActionType         EActionTypeType        `protobuf:"varint,12,opt,name=actionType,proto3,enum=fippb.EActionTypeType" json:"actionType,omitempty"`                      // 执行类型
	StatusMsg          string                 `protobuf:"bytes,13,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息
	LocalPos           uint64                 `protobuf:"varint,14,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                     // tproxy专用
}

func (x *ErrRtnExeOrderAction) Reset() {
	*x = ErrRtnExeOrderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrRtnExeOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrRtnExeOrderAction) ProtoMessage() {}

func (x *ErrRtnExeOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrRtnExeOrderAction.ProtoReflect.Descriptor instead.
func (*ErrRtnExeOrderAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{27}
}

func (x *ErrRtnExeOrderAction) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *ErrRtnExeOrderAction) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ErrRtnExeOrderAction) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ErrRtnExeOrderAction) GetExecOrderActionRef() int64 {
	if x != nil {
		return x.ExecOrderActionRef
	}
	return 0
}

func (x *ErrRtnExeOrderAction) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ErrRtnExeOrderAction) GetExecOrderSysId() string {
	if x != nil {
		return x.ExecOrderSysId
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetOrderActionStatus() EOrderActionStatusType {
	if x != nil {
		return x.OrderActionStatus
	}
	return EOrderActionStatusType_EOAS_Null
}

func (x *ErrRtnExeOrderAction) GetActionType() EActionTypeType {
	if x != nil {
		return x.ActionType
	}
	return EActionTypeType_ACTP_Null
}

func (x *ErrRtnExeOrderAction) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ErrRtnExeOrderAction) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// del brokerId经纪公司代码 investUnitId投资单元代码
type ReqQryPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	ContractType EContractTypeType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型      x1_AllContract可能会失败
	InvestorId   string            `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码     def=登录userid
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码       def=所有
	ExchangeId   EExchgID          `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所代码     def=所有
	LocalPos     uint64            `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryPosition) Reset() {
	*x = ReqQryPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPosition) ProtoMessage() {}

func (x *ReqQryPosition) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPosition.ProtoReflect.Descriptor instead.
func (*ReqQryPosition) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{28}
}

func (x *ReqQryPosition) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryPosition) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryPosition) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryPosition) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryPosition) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPosition) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货持仓查询响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23002> proxy-server:<27002>
// @modify
type RspQryPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
	IsLast    bool          `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`      // 最后一条响应消息
	Position  []*Position   `protobuf:"bytes,3,rep,name=position,proto3" json:"position,omitempty"`   // 持仓明细
}

func (x *RspQryPosition) Reset() {
	*x = RspQryPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPosition) ProtoMessage() {}

func (x *RspQryPosition) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPosition.ProtoReflect.Descriptor instead.
func (*RspQryPosition) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{29}
}

func (x *RspQryPosition) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryPosition) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryPosition) GetPosition() []*Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// del brokerId经纪公司代码 investUnitId投资单元代码
type ReqQryPositionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	ContractType EContractTypeType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型      x1_AllContract可能会失败
	InvestorId   string            `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码     def=登录userid
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码       def=所有
	ExchangeId   EExchgID          `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所代码     def=所有
	LocalPos     uint64            `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryPositionDetail) Reset() {
	*x = ReqQryPositionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryPositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryPositionDetail) ProtoMessage() {}

func (x *ReqQryPositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryPositionDetail.ProtoReflect.Descriptor instead.
func (*ReqQryPositionDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{30}
}

func (x *ReqQryPositionDetail) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryPositionDetail) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryPositionDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryPositionDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryPositionDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryPositionDetail) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货持仓明细查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23016> proxy-server:<27016>
// @modify
type RspQryPositionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	PositionDetail []*PositionDetail `protobuf:"bytes,3,rep,name=positionDetail,proto3" json:"positionDetail,omitempty"` // 持仓明细
}

func (x *RspQryPositionDetail) Reset() {
	*x = RspQryPositionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryPositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryPositionDetail) ProtoMessage() {}

func (x *RspQryPositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryPositionDetail.ProtoReflect.Descriptor instead.
func (*RspQryPositionDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{31}
}

func (x *RspQryPositionDetail) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryPositionDetail) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryPositionDetail) GetPositionDetail() []*PositionDetail {
	if x != nil {
		return x.PositionDetail
	}
	return nil
}

// del brokerId经纪公司代码 insertTimeStart开始时间 insertTimeEnd结束时间 investUnitID投资单元代码
type ReqQryOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	ContractType EContractTypeType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型      x1_AllContract可能会失败
	InvestorId   string            `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码     def=登录userid
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码       def=所有
	ExchangeId   EExchgID          `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所代码     def=所有
	OrderSysID   string            `protobuf:"bytes,6,opt,name=orderSysID,proto3" json:"orderSysID,omitempty"`                                   // 报单编号       def=所有 x1不可用
	LocalPos     uint64            `protobuf:"varint,7,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryOrderInfo) Reset() {
	*x = ReqQryOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryOrderInfo) ProtoMessage() {}

func (x *ReqQryOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryOrderInfo.ProtoReflect.Descriptor instead.
func (*ReqQryOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{32}
}

func (x *ReqQryOrderInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryOrderInfo) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryOrderInfo) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *ReqQryOrderInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 委托查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23004> proxy-server:<27004>
// @modify
type RspQryOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead  `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`     // 交易通用应答头
	IsLast      bool           `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`          // 最后一条响应消息
	OrderDetail []*OrderDetail `protobuf:"bytes,3,rep,name=orderDetail,proto3" json:"orderDetail,omitempty"` // 委托明细
}

func (x *RspQryOrderInfo) Reset() {
	*x = RspQryOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryOrderInfo) ProtoMessage() {}

func (x *RspQryOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryOrderInfo.ProtoReflect.Descriptor instead.
func (*RspQryOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{33}
}

func (x *RspQryOrderInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryOrderInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryOrderInfo) GetOrderDetail() []*OrderDetail {
	if x != nil {
		return x.OrderDetail
	}
	return nil
}

// del brokerId经纪公司代码 EBizTypeType业务类型(现在只有期货) currencyId币种代码 accountId投资者帐号
type ReqQryCustomerCapital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	InvestorId string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码     def=登录userid
	LocalPos   uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
}

func (x *ReqQryCustomerCapital) Reset() {
	*x = ReqQryCustomerCapital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryCustomerCapital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryCustomerCapital) ProtoMessage() {}

func (x *ReqQryCustomerCapital) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryCustomerCapital.ProtoReflect.Descriptor instead.
func (*ReqQryCustomerCapital) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{34}
}

func (x *ReqQryCustomerCapital) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryCustomerCapital) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryCustomerCapital) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 客户资金查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23006> proxy-server:<27006>
// @modify
type RspQryCustomerCapital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead          `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`         // 交易通用应答头
	IsLast        bool                   `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`              // 最后一条响应消息
	CapitalDetail *CustomerCapitalDetail `protobuf:"bytes,3,opt,name=capitalDetail,proto3" json:"capitalDetail,omitempty"` // 资金明细
}

func (x *RspQryCustomerCapital) Reset() {
	*x = RspQryCustomerCapital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryCustomerCapital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryCustomerCapital) ProtoMessage() {}

func (x *RspQryCustomerCapital) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryCustomerCapital.ProtoReflect.Descriptor instead.
func (*RspQryCustomerCapital) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{35}
}

func (x *RspQryCustomerCapital) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryCustomerCapital) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryCustomerCapital) GetCapitalDetail() *CustomerCapitalDetail {
	if x != nil {
		return x.CapitalDetail
	}
	return nil
}

// del exchangeInstId合约在交易所的代码 productId产品代码
type ReqQryExchangeContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	InvestorId   string            `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码      def=登录userid
	ContractId   string            `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码        def=所有合约
	ExchangeId   EExchgID          `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所编码      def=所有交易所
	ContractType EContractTypeType `protobuf:"varint,5,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型       x1_AllContract可能会失败
	LocalPos     uint64            `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryExchangeContractInfo) Reset() {
	*x = ReqQryExchangeContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryExchangeContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryExchangeContractInfo) ProtoMessage() {}

func (x *ReqQryExchangeContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryExchangeContractInfo.ProtoReflect.Descriptor instead.
func (*ReqQryExchangeContractInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{36}
}

func (x *ReqQryExchangeContractInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryExchangeContractInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryExchangeContractInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryExchangeContractInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryExchangeContractInfo) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryExchangeContractInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询交易所合约应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23008> proxy-server:<27008>
// @modify
type RspQryExchangeContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	ContractDetail []*ContractDetail `protobuf:"bytes,3,rep,name=contractDetail,proto3" json:"contractDetail,omitempty"` // 合约明细
}

func (x *RspQryExchangeContractInfo) Reset() {
	*x = RspQryExchangeContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryExchangeContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryExchangeContractInfo) ProtoMessage() {}

func (x *RspQryExchangeContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryExchangeContractInfo.ProtoReflect.Descriptor instead.
func (*RspQryExchangeContractInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{37}
}

func (x *RspQryExchangeContractInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryExchangeContractInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryExchangeContractInfo) GetContractDetail() []*ContractDetail {
	if x != nil {
		return x.ContractDetail
	}
	return nil
}

// *
// @brief 查询所有合约请求
// @author <zhaowei>
// @date 2019-3-28
// @note 协议号 client-proxy:<23057> proxy-server:<27057>
// @modify
type ReqQryAllContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	InvestorId string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码      def=登录userid
	LocalPos   uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
}

func (x *ReqQryAllContractInfo) Reset() {
	*x = ReqQryAllContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryAllContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryAllContractInfo) ProtoMessage() {}

func (x *ReqQryAllContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryAllContractInfo.ProtoReflect.Descriptor instead.
func (*ReqQryAllContractInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{38}
}

func (x *ReqQryAllContractInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryAllContractInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryAllContractInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询所有合约应答
// @author <zhaowei>
// @date 2019-3-28
// @note 协议号 client-proxy:<23058> proxy-server:<27058>
// @modify
type RspQryAllContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	ContractDetail []*ContractDetail `protobuf:"bytes,3,rep,name=contractDetail,proto3" json:"contractDetail,omitempty"` // 合约明细
}

func (x *RspQryAllContractInfo) Reset() {
	*x = RspQryAllContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryAllContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryAllContractInfo) ProtoMessage() {}

func (x *RspQryAllContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryAllContractInfo.ProtoReflect.Descriptor instead.
func (*RspQryAllContractInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{39}
}

func (x *RspQryAllContractInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryAllContractInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryAllContractInfo) GetContractDetail() []*ContractDetail {
	if x != nil {
		return x.ContractDetail
	}
	return nil
}

// del brokerId经纪公司代码 tradeTimeStart开始时间 tradeTimeEnd结束时间 investUnitIdinvestUnitId
type ReqQryMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	ContractType EContractTypeType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型       x1_AllContract可能会失败
	InvestorId   string            `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码      def=登录userid
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码        def=所有合约
	ExchangeId   EExchgID          `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所编码      def=所有交易所
	TradeId      string            `protobuf:"bytes,6,opt,name=tradeId,proto3" json:"tradeId,omitempty"`                                         // 成交编号        def=所有合约
	LocalPos     uint64            `protobuf:"varint,7,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryMatchInfo) Reset() {
	*x = ReqQryMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryMatchInfo) ProtoMessage() {}

func (x *ReqQryMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryMatchInfo.ProtoReflect.Descriptor instead.
func (*ReqQryMatchInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{40}
}

func (x *ReqQryMatchInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryMatchInfo) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryMatchInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryMatchInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryMatchInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryMatchInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ReqQryMatchInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 成交查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23010> proxy-server:<27010>
// @modify
type RspQryMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead      `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`     // 交易通用应答头
	IsLast      bool               `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`          // 最后一条响应消息
	MatchDetail []*MatchInfoDetail `protobuf:"bytes,3,rep,name=matchDetail,proto3" json:"matchDetail,omitempty"` // 成交明细
}

func (x *RspQryMatchInfo) Reset() {
	*x = RspQryMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryMatchInfo) ProtoMessage() {}

func (x *RspQryMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryMatchInfo.ProtoReflect.Descriptor instead.
func (*RspQryMatchInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{41}
}

func (x *RspQryMatchInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryMatchInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryMatchInfo) GetMatchDetail() []*MatchInfoDetail {
	if x != nil {
		return x.MatchDetail
	}
	return nil
}

// *
// @brief 指定合约信息查询请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type ReqQrySpecifyContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	AccountId    string   `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`                        // 资金账号id
	ContractId   string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId   EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所
	ContractType uint32   `protobuf:"varint,5,opt,name=contractType,proto3" json:"contractType,omitempty"`                 // 合约类型  0 期货 1 期权
	LocalPos     uint64   `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQrySpecifyContract) Reset() {
	*x = ReqQrySpecifyContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySpecifyContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySpecifyContract) ProtoMessage() {}

func (x *ReqQrySpecifyContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySpecifyContract.ProtoReflect.Descriptor instead.
func (*ReqQrySpecifyContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{42}
}

func (x *ReqQrySpecifyContract) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQrySpecifyContract) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqQrySpecifyContract) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQrySpecifyContract) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySpecifyContract) GetContractType() uint32 {
	if x != nil {
		return x.ContractType
	}
	return 0
}

func (x *ReqQrySpecifyContract) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 指定合约信息查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspQrySpecifyContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead             *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                         // 交易通用应答头
	IsLast                bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                              // 最后一条响应消息
	SpecifyContractDetail *SpecifyContractInfo `protobuf:"bytes,3,opt,name=specifyContractDetail,proto3" json:"specifyContractDetail,omitempty"` // 指定合约信息明细
}

func (x *RspQrySpecifyContract) Reset() {
	*x = RspQrySpecifyContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySpecifyContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySpecifyContract) ProtoMessage() {}

func (x *RspQrySpecifyContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySpecifyContract.ProtoReflect.Descriptor instead.
func (*RspQrySpecifyContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{43}
}

func (x *RspQrySpecifyContract) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQrySpecifyContract) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQrySpecifyContract) GetSpecifyContractDetail() *SpecifyContractInfo {
	if x != nil {
		return x.SpecifyContractDetail
	}
	return nil
}

// *
// @brief 交易所状态查询请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23013> proxy-server:<27013>
// @modify
type ReqQryExchangeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	ExchangeId EExchgID `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所
	LocalPos   uint64   `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryExchangeStatus) Reset() {
	*x = ReqQryExchangeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryExchangeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryExchangeStatus) ProtoMessage() {}

func (x *ReqQryExchangeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryExchangeStatus.ProtoReflect.Descriptor instead.
func (*ReqQryExchangeStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{44}
}

func (x *ReqQryExchangeStatus) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryExchangeStatus) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryExchangeStatus) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 交易所状态查询应答
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23014> proxy-server:<27014>
// @modify
type RspQryExchangeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                                             // 交易通用应答头
	ExchangeStatus EInstrumentStatusType `protobuf:"varint,2,opt,name=exchangeStatus,proto3,enum=fippb.EInstrumentStatusType" json:"exchangeStatus,omitempty"` // 交易所状态
	ExchangeId     EExchgID              `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                      // 交易所
}

func (x *RspQryExchangeStatus) Reset() {
	*x = RspQryExchangeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryExchangeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryExchangeStatus) ProtoMessage() {}

func (x *RspQryExchangeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryExchangeStatus.ProtoReflect.Descriptor instead.
func (*RspQryExchangeStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{45}
}

func (x *RspQryExchangeStatus) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryExchangeStatus) GetExchangeStatus() EInstrumentStatusType {
	if x != nil {
		return x.ExchangeStatus
	}
	return EInstrumentStatusType_EIS_BeforeTrading
}

func (x *RspQryExchangeStatus) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 交易所状态通知
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23035> proxy-server:<27035>
// @modify
type RtnExchangeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId     EExchgID              `protobuf:"varint,1,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                      // 交易所
	ContractId     string                `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                           // 合约代码
	ExchangeStatus EInstrumentStatusType `protobuf:"varint,3,opt,name=exchangeStatus,proto3,enum=fippb.EInstrumentStatusType" json:"exchangeStatus,omitempty"` // 交易所状态
	LocalPos       uint64                `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                                              // tproxy专用
	EnterTime      string                `protobuf:"bytes,5,opt,name=enterTime,proto3" json:"enterTime,omitempty"`                                             // 更新时间
}

func (x *RtnExchangeStatus) Reset() {
	*x = RtnExchangeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnExchangeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnExchangeStatus) ProtoMessage() {}

func (x *RtnExchangeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnExchangeStatus.ProtoReflect.Descriptor instead.
func (*RtnExchangeStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{46}
}

func (x *RtnExchangeStatus) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RtnExchangeStatus) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RtnExchangeStatus) GetExchangeStatus() EInstrumentStatusType {
	if x != nil {
		return x.ExchangeStatus
	}
	return EInstrumentStatusType_EIS_BeforeTrading
}

func (x *RtnExchangeStatus) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *RtnExchangeStatus) GetEnterTime() string {
	if x != nil {
		return x.EnterTime
	}
	return ""
}

// *
// @brief 交易所状态通知
// @author <xuxiaochen>
// @date 2019-7-17
// @note 协议号 server-trigger:<27061>
// @modify
type RtnExchangeStatusToTrig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId     EExchgID              `protobuf:"varint,1,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                      // 交易所
	ContractId     string                `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                           // 合约代码
	ExchangeStatus EInstrumentStatusType `protobuf:"varint,3,opt,name=exchangeStatus,proto3,enum=fippb.EInstrumentStatusType" json:"exchangeStatus,omitempty"` // 交易所状态
	LocalPos       uint64                `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                                              // tproxy专用
}

func (x *RtnExchangeStatusToTrig) Reset() {
	*x = RtnExchangeStatusToTrig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnExchangeStatusToTrig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnExchangeStatusToTrig) ProtoMessage() {}

func (x *RtnExchangeStatusToTrig) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnExchangeStatusToTrig.ProtoReflect.Descriptor instead.
func (*RtnExchangeStatusToTrig) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{47}
}

func (x *RtnExchangeStatusToTrig) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RtnExchangeStatusToTrig) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RtnExchangeStatusToTrig) GetExchangeStatus() EInstrumentStatusType {
	if x != nil {
		return x.ExchangeStatus
	}
	return EInstrumentStatusType_EIS_BeforeTrading
}

func (x *RtnExchangeStatusToTrig) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 服务端ping请求
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @modify
type ReqTradePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ReqTradePing) Reset() {
	*x = ReqTradePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTradePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTradePing) ProtoMessage() {}

func (x *ReqTradePing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTradePing.ProtoReflect.Descriptor instead.
func (*ReqTradePing) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{48}
}

func (x *ReqTradePing) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 服务端ping响应
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @modify
type RspTradePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RspTradePing) Reset() {
	*x = RspTradePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTradePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTradePing) ProtoMessage() {}

func (x *RspTradePing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTradePing.ProtoReflect.Descriptor instead.
func (*RspTradePing) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{49}
}

func (x *RspTradePing) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 释放指定连接请求
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @details releaseAll为真时释放所有连接。
// @modify
type ReqReleaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	LocalPos    uint64          `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                                  // api位置，server-proxy通信用
	ReleaseAll  bool            `protobuf:"varint,3,opt,name=releaseAll,proto3" json:"releaseAll,omitempty"`                              // 释放所有连接
	ReleaseType EApiReleaseType `protobuf:"varint,4,opt,name=releaseType,proto3,enum=fippb.EApiReleaseType" json:"releaseType,omitempty"` // 释放请求类型
	UserId      string          `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号                ctp_max(15) x1_max(12)
	LoginStatus int32           `protobuf:"varint,6,opt,name=loginStatus,proto3" json:"loginStatus,omitempty"`                            // 登陆失败时，此字段为8899，否则不关注，默认为0
}

func (x *ReqReleaseUser) Reset() {
	*x = ReqReleaseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReleaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReleaseUser) ProtoMessage() {}

func (x *ReqReleaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReleaseUser.ProtoReflect.Descriptor instead.
func (*ReqReleaseUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{50}
}

func (x *ReqReleaseUser) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqReleaseUser) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqReleaseUser) GetReleaseAll() bool {
	if x != nil {
		return x.ReleaseAll
	}
	return false
}

func (x *ReqReleaseUser) GetReleaseType() EApiReleaseType {
	if x != nil {
		return x.ReleaseType
	}
	return EApiReleaseType_EAR_Null
}

func (x *ReqReleaseUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqReleaseUser) GetLoginStatus() int32 {
	if x != nil {
		return x.LoginStatus
	}
	return 0
}

// *
// @brief 释放指定连接应答
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @modify
type RspReleaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
}

func (x *RspReleaseUser) Reset() {
	*x = RspReleaseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspReleaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspReleaseUser) ProtoMessage() {}

func (x *RspReleaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspReleaseUser.ProtoReflect.Descriptor instead.
func (*RspReleaseUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{51}
}

func (x *RspReleaseUser) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 请求对“刚刚登陆柜台请求时”截留下来的用户账号密码等系列信息的处理（保存或抛弃）
// @author <liyu>
// @date 2019-7-1
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type ReqDisposeSavedUserPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	LoginStatus int32           `protobuf:"varint,2,opt,name=loginStatus,proto3" json:"loginStatus,omitempty"`                            // 登陆失败时，此字段为8899，否则不关注，默认为0
	ChannelType EApiChannelType `protobuf:"varint,3,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	UserId      string          `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号     ctp_max(15) x1_max(12)
}

func (x *ReqDisposeSavedUserPassword) Reset() {
	*x = ReqDisposeSavedUserPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDisposeSavedUserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDisposeSavedUserPassword) ProtoMessage() {}

func (x *ReqDisposeSavedUserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDisposeSavedUserPassword.ProtoReflect.Descriptor instead.
func (*ReqDisposeSavedUserPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{52}
}

func (x *ReqDisposeSavedUserPassword) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqDisposeSavedUserPassword) GetLoginStatus() int32 {
	if x != nil {
		return x.LoginStatus
	}
	return 0
}

func (x *ReqDisposeSavedUserPassword) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqDisposeSavedUserPassword) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 用户账号密码等系列信息的处理之后的应答
// @author <liyu>
// @date 2019-7-1
// @note 协议号
// @modify
type RspDisposeSavedUserPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
}

func (x *RspDisposeSavedUserPassword) Reset() {
	*x = RspDisposeSavedUserPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDisposeSavedUserPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDisposeSavedUserPassword) ProtoMessage() {}

func (x *RspDisposeSavedUserPassword) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDisposeSavedUserPassword.ProtoReflect.Descriptor instead.
func (*RspDisposeSavedUserPassword) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{53}
}

func (x *RspDisposeSavedUserPassword) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 请求对“刚刚登陆柜台请求时”截留下来的用户原生的requestid保存起来
// @author <liyu>
// @date 2019-7-1
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type ReqRecordUserOriginalRequestid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId         int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	OriginalRequestid int32           `protobuf:"varint,2,opt,name=originalRequestid,proto3" json:"originalRequestid,omitempty"`                // 登陆失败时，此字段为8899，否则不关注，默认为0
	ChannelType       EApiChannelType `protobuf:"varint,3,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	UserId            string          `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号     ctp_max(15) x1_max(12)
}

func (x *ReqRecordUserOriginalRequestid) Reset() {
	*x = ReqRecordUserOriginalRequestid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRecordUserOriginalRequestid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRecordUserOriginalRequestid) ProtoMessage() {}

func (x *ReqRecordUserOriginalRequestid) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRecordUserOriginalRequestid.ProtoReflect.Descriptor instead.
func (*ReqRecordUserOriginalRequestid) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{54}
}

func (x *ReqRecordUserOriginalRequestid) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqRecordUserOriginalRequestid) GetOriginalRequestid() int32 {
	if x != nil {
		return x.OriginalRequestid
	}
	return 0
}

func (x *ReqRecordUserOriginalRequestid) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqRecordUserOriginalRequestid) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 柜台登录信息
// @author <daihouda>
// @date 2019-9-4
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type InnerTradeLoginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid         uint64          `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"` // for x1:请求ID []
	OriginalRequestid int32           `protobuf:"varint,2,opt,name=originalRequestid,proto3" json:"originalRequestid,omitempty"`
	Usr               string          `protobuf:"bytes,3,opt,name=usr,proto3" json:"usr,omitempty"`                           // for both : ctp_max(15) x1_max(12)
	Pwd               string          `protobuf:"bytes,4,opt,name=pwd,proto3" json:"pwd,omitempty"`                           // for x1/ctp: 密码 []
	BrokerId          string          `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                 // for ctp:期货公司代码
	UsrPdctInfo       string          `protobuf:"bytes,6,opt,name=usrPdctInfo,proto3" json:"usrPdctInfo,omitempty"`           // for ctp:用户端产品信息
	Mac               string          `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`                           // for ctp:Mac地址
	Ip                string          `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`                             // for ctp:终端IP地址
	Appid             string          `protobuf:"bytes,9,opt,name=appid,proto3" json:"appid,omitempty"`                       // 终端AppId
	Authcode          string          `protobuf:"bytes,10,opt,name=authcode,proto3" json:"authcode,omitempty"`                // 终端AuthCode
	SysInfoLen        int32           `protobuf:"varint,11,opt,name=sysInfoLen,proto3" json:"sysInfoLen,omitempty"`           // systemInfo的长度
	SysInfo           string          `protobuf:"bytes,12,opt,name=sysInfo,proto3" json:"sysInfo,omitempty"`                  // 穿透式监管需要的系统信息
	SysInfoInteLen    int32           `protobuf:"varint,13,opt,name=sysInfoInteLen,proto3" json:"sysInfoInteLen,omitempty"`   // systemInfoIntegrityLen的长度
	SysInfoInte       string          `protobuf:"bytes,14,opt,name=sysInfoInte,proto3" json:"sysInfoInte,omitempty"`          // 信息采集完整度
	AbnormalTypeLen   int32           `protobuf:"varint,15,opt,name=abnormalTypeLen,proto3" json:"abnormalTypeLen,omitempty"` // abnormalType的长度
	AbnormalType      string          `protobuf:"bytes,16,opt,name=abnormalType,proto3" json:"abnormalType,omitempty"`        // 信息采集异常标示
	Timestamp         string          `protobuf:"bytes,17,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChannelType       EApiChannelType `protobuf:"varint,18,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"`
	LocalPos          uint64          `protobuf:"varint,19,opt,name=localPos,proto3" json:"localPos,omitempty"`    // 交易中继改造必须
	ClientPort        string          `protobuf:"bytes,20,opt,name=clientPort,proto3" json:"clientPort,omitempty"` // 终端端口
}

func (x *InnerTradeLoginInfo) Reset() {
	*x = InnerTradeLoginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerTradeLoginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerTradeLoginInfo) ProtoMessage() {}

func (x *InnerTradeLoginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerTradeLoginInfo.ProtoReflect.Descriptor instead.
func (*InnerTradeLoginInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{55}
}

func (x *InnerTradeLoginInfo) GetRequestid() uint64 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetOriginalRequestid() int32 {
	if x != nil {
		return x.OriginalRequestid
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetUsr() string {
	if x != nil {
		return x.Usr
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetUsrPdctInfo() string {
	if x != nil {
		return x.UsrPdctInfo
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetAuthcode() string {
	if x != nil {
		return x.Authcode
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetSysInfoLen() int32 {
	if x != nil {
		return x.SysInfoLen
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetSysInfo() string {
	if x != nil {
		return x.SysInfo
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetSysInfoInteLen() int32 {
	if x != nil {
		return x.SysInfoInteLen
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetSysInfoInte() string {
	if x != nil {
		return x.SysInfoInte
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetAbnormalTypeLen() int32 {
	if x != nil {
		return x.AbnormalTypeLen
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetAbnormalType() string {
	if x != nil {
		return x.AbnormalType
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *InnerTradeLoginInfo) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *InnerTradeLoginInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *InnerTradeLoginInfo) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

// *
// @brief 条件单服务的客户柜台交易连接状态变更信息
// @author <liyu>
// @date 2020-12-10
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type InnerNtfUserTradeConnectStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid     uint64          `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`                                // 请求ID []
	ConnectStatus int32           `protobuf:"varint,2,opt,name=connectStatus,proto3" json:"connectStatus,omitempty"`                        // 客户柜台交易连接状态值
	UserId        string          `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 客户资金账号
	BrokerId      string          `protobuf:"bytes,4,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 期货公司代码
	ErrorMsg      string          `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                                   // 交易连接错误原因
	ErrorId       int32           `protobuf:"varint,6,opt,name=errorId,proto3" json:"errorId,omitempty"`                                    // 交易连接错误编号
	ServerId      string          `protobuf:"bytes,7,opt,name=serverId,proto3" json:"serverId,omitempty"`                                   // 条件单服务id编排号
	LifeSpan      int32           `protobuf:"varint,8,opt,name=lifeSpan,proto3" json:"lifeSpan,omitempty"`                                  // 连接状态值的有效期，单位为second
	ChannelType   EApiChannelType `protobuf:"varint,9,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
}

func (x *InnerNtfUserTradeConnectStatus) Reset() {
	*x = InnerNtfUserTradeConnectStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerNtfUserTradeConnectStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerNtfUserTradeConnectStatus) ProtoMessage() {}

func (x *InnerNtfUserTradeConnectStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerNtfUserTradeConnectStatus.ProtoReflect.Descriptor instead.
func (*InnerNtfUserTradeConnectStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{56}
}

func (x *InnerNtfUserTradeConnectStatus) GetRequestid() uint64 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *InnerNtfUserTradeConnectStatus) GetConnectStatus() int32 {
	if x != nil {
		return x.ConnectStatus
	}
	return 0
}

func (x *InnerNtfUserTradeConnectStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InnerNtfUserTradeConnectStatus) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *InnerNtfUserTradeConnectStatus) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *InnerNtfUserTradeConnectStatus) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *InnerNtfUserTradeConnectStatus) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *InnerNtfUserTradeConnectStatus) GetLifeSpan() int32 {
	if x != nil {
		return x.LifeSpan
	}
	return 0
}

func (x *InnerNtfUserTradeConnectStatus) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

// *
// @brief 条件单服务的柜台行情连接状态变更信息
// @author <liyu>
// @date 2020-12-10
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type InnerNtfServerQuotConnectStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requestid      uint64          `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`                                     // 请求ID []
	ConnectStatus  int32           `protobuf:"varint,2,opt,name=connectStatus,proto3" json:"connectStatus,omitempty"`                             // 客户柜台交易连接状态值
	UserId         string          `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`                                            // 客户资金账号
	BrokerId       string          `protobuf:"bytes,4,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                        // 期货公司代码
	ErrorMsg       string          `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                                        // 交易连接错误原因
	ErrorId        int32           `protobuf:"varint,6,opt,name=errorId,proto3" json:"errorId,omitempty"`                                         // 交易连接错误编号
	ServerId       string          `protobuf:"bytes,7,opt,name=serverId,proto3" json:"serverId,omitempty"`                                        // 条件单服务id编排号
	LifeSpan       int32           `protobuf:"varint,8,opt,name=lifeSpan,proto3" json:"lifeSpan,omitempty"`                                       // 连接状态值的有效期，单位为second
	ChannelType    EApiChannelType `protobuf:"varint,9,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"`      // 交易通道类型
	QuotSource     string          `protobuf:"bytes,10,opt,name=quotSource,proto3" json:"quotSource,omitempty"`                                   // 行情源的ip:port
	ActivateStatus EActiveStatus   `protobuf:"varint,11,opt,name=activateStatus,proto3,enum=fippb.EActiveStatus" json:"activateStatus,omitempty"` // 此行情连接当前的激活状态值
}

func (x *InnerNtfServerQuotConnectStatus) Reset() {
	*x = InnerNtfServerQuotConnectStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerNtfServerQuotConnectStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerNtfServerQuotConnectStatus) ProtoMessage() {}

func (x *InnerNtfServerQuotConnectStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerNtfServerQuotConnectStatus.ProtoReflect.Descriptor instead.
func (*InnerNtfServerQuotConnectStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{57}
}

func (x *InnerNtfServerQuotConnectStatus) GetRequestid() uint64 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *InnerNtfServerQuotConnectStatus) GetConnectStatus() int32 {
	if x != nil {
		return x.ConnectStatus
	}
	return 0
}

func (x *InnerNtfServerQuotConnectStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InnerNtfServerQuotConnectStatus) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *InnerNtfServerQuotConnectStatus) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *InnerNtfServerQuotConnectStatus) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *InnerNtfServerQuotConnectStatus) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *InnerNtfServerQuotConnectStatus) GetLifeSpan() int32 {
	if x != nil {
		return x.LifeSpan
	}
	return 0
}

func (x *InnerNtfServerQuotConnectStatus) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *InnerNtfServerQuotConnectStatus) GetQuotSource() string {
	if x != nil {
		return x.QuotSource
	}
	return ""
}

func (x *InnerNtfServerQuotConnectStatus) GetActivateStatus() EActiveStatus {
	if x != nil {
		return x.ActivateStatus
	}
	return EActiveStatus_EAS_NULL
}

// *
// @brief 重置柜台登录用户密码信息
// @author <daihouda>
// @date 2019-9-9
// @note 协议号
// @details 此数据结构仅服务端后台内部使用，不涉及和终端用户的交互
// @modify
type InnerResetPwd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Usr       string `protobuf:"bytes,2,opt,name=usr,proto3" json:"usr,omitempty"`
	Pwd       string `protobuf:"bytes,3,opt,name=pwd,proto3" json:"pwd,omitempty"`
	LocalPos  uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`
}

func (x *InnerResetPwd) Reset() {
	*x = InnerResetPwd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerResetPwd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerResetPwd) ProtoMessage() {}

func (x *InnerResetPwd) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerResetPwd.ProtoReflect.Descriptor instead.
func (*InnerResetPwd) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{58}
}

func (x *InnerResetPwd) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *InnerResetPwd) GetUsr() string {
	if x != nil {
		return x.Usr
	}
	return ""
}

func (x *InnerResetPwd) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *InnerResetPwd) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 用户账号登陆时的原生requestid和新合成的requestid的映射信息存储后的应答
// @author <liyu>
// @date 2019-7-1
// @note 协议号
// @modify
type RspRecordUserOriginalRequestid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
}

func (x *RspRecordUserOriginalRequestid) Reset() {
	*x = RspRecordUserOriginalRequestid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspRecordUserOriginalRequestid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspRecordUserOriginalRequestid) ProtoMessage() {}

func (x *RspRecordUserOriginalRequestid) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspRecordUserOriginalRequestid.ProtoReflect.Descriptor instead.
func (*RspRecordUserOriginalRequestid) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{59}
}

func (x *RspRecordUserOriginalRequestid) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief Tproxy登录请求
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @modify
type ReqTproxyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TProxyAccount string `protobuf:"bytes,1,opt,name=TProxyAccount,proto3" json:"TProxyAccount,omitempty"`  // Tproxy用户名    默认admin
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`            // Tproxy用户密码   默认888888
	HeartBeatTime uint32 `protobuf:"varint,3,opt,name=heartBeatTime,proto3" json:"heartBeatTime,omitempty"` // 心跳超时时间       默认20秒
}

func (x *ReqTproxyLogin) Reset() {
	*x = ReqTproxyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTproxyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTproxyLogin) ProtoMessage() {}

func (x *ReqTproxyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTproxyLogin.ProtoReflect.Descriptor instead.
func (*ReqTproxyLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{60}
}

func (x *ReqTproxyLogin) GetTProxyAccount() string {
	if x != nil {
		return x.TProxyAccount
	}
	return ""
}

func (x *ReqTproxyLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqTproxyLogin) GetHeartBeatTime() uint32 {
	if x != nil {
		return x.HeartBeatTime
	}
	return 0
}

// *
// @brief Tproxy登录应答
// @author <zhaow>
// @date 2017-8-1
// @note 协议号
// @modify
type RspTproxyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
}

func (x *RspTproxyLogin) Reset() {
	*x = RspTproxyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTproxyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTproxyLogin) ProtoMessage() {}

func (x *RspTproxyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTproxyLogin.ProtoReflect.Descriptor instead.
func (*RspTproxyLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{61}
}

func (x *RspTproxyLogin) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 套利合约查询请求
// @author <zhaow>
// @date 2017-8-1
// @details 当exchangeID为空时，表示查询各交易所的所有合约代码，也可指定查询某交易所的所有合约代码信息。
// @note 协议号 client-proxy:<23017> proxy-server:<27017>
// @modify
type ReqQryArbitrageContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	AccountId  string   `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`                        // 资金账号id
	ExchangeId EExchgID `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所
	LocalPos   uint64   `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryArbitrageContract) Reset() {
	*x = ReqQryArbitrageContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryArbitrageContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryArbitrageContract) ProtoMessage() {}

func (x *ReqQryArbitrageContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryArbitrageContract.ProtoReflect.Descriptor instead.
func (*ReqQryArbitrageContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{62}
}

func (x *ReqQryArbitrageContract) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryArbitrageContract) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqQryArbitrageContract) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryArbitrageContract) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 套利合约查询应答
// @author <zhaow>
// @date 2017-8-1
// @note 协议号 client-proxy:<23018> proxy-server:<27018>
// @modify
type RspQryArbitrageContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead          *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                   // 交易通用应答头
	IsLast             bool                  `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                        // 最后一条响应消息
	ArbicontractDetail []*ArbiContractDetail `protobuf:"bytes,3,rep,name=arbicontractDetail,proto3" json:"arbicontractDetail,omitempty"` // 套利合约明细
}

func (x *RspQryArbitrageContract) Reset() {
	*x = RspQryArbitrageContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryArbitrageContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryArbitrageContract) ProtoMessage() {}

func (x *RspQryArbitrageContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryArbitrageContract.ProtoReflect.Descriptor instead.
func (*RspQryArbitrageContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{63}
}

func (x *RspQryArbitrageContract) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryArbitrageContract) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryArbitrageContract) GetArbicontractDetail() []*ArbiContractDetail {
	if x != nil {
		return x.ArbicontractDetail
	}
	return nil
}

// del brokerId经纪公司代码 investUnitId投资单元代码
type ReqQryArbitrageCombineDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	InvestorId string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
	LocalPos   uint64   `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryArbitrageCombineDetail) Reset() {
	*x = ReqQryArbitrageCombineDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryArbitrageCombineDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryArbitrageCombineDetail) ProtoMessage() {}

func (x *ReqQryArbitrageCombineDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryArbitrageCombineDetail.ProtoReflect.Descriptor instead.
func (*ReqQryArbitrageCombineDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{64}
}

func (x *ReqQryArbitrageCombineDetail) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryArbitrageCombineDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryArbitrageCombineDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryArbitrageCombineDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryArbitrageCombineDetail) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 组合持仓明细查询应答
// @author <zhaow>
// @date 2017-8-1
// @details
// @note 协议号 client-proxy:<23020> proxy-server:<27020>
// @modify
type RspQryArbitrageCombineDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead         *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                 // 交易通用应答头
	IsLast            bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // 最后一条响应消息
	ArbiCombineDetail []*ArbiCombineDetail `protobuf:"bytes,3,rep,name=arbiCombineDetail,proto3" json:"arbiCombineDetail,omitempty"` // 组合持仓明细
}

func (x *RspQryArbitrageCombineDetail) Reset() {
	*x = RspQryArbitrageCombineDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryArbitrageCombineDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryArbitrageCombineDetail) ProtoMessage() {}

func (x *RspQryArbitrageCombineDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryArbitrageCombineDetail.ProtoReflect.Descriptor instead.
func (*RspQryArbitrageCombineDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{65}
}

func (x *RspQryArbitrageCombineDetail) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryArbitrageCombineDetail) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryArbitrageCombineDetail) GetArbiCombineDetail() []*ArbiCombineDetail {
	if x != nil {
		return x.ArbiCombineDetail
	}
	return nil
}

// *
// @brief 查询合约保证金率
// @author <xiahl>
// @date 2018-8-23
// @details 合约不填写返回持仓合约的保证金率
// @note 协议号 client-proxy:<23021> proxy-server:<27021>
// @modify
type ReqQryContractMarginRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	InvestorId   string            `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码
	BrokerId     string            `protobuf:"bytes,3,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                       // 经纪公司代码
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码
	HedgeFlag    EHedgeFlagType    `protobuf:"varint,5,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`          // 投机套保标志
	ExchangeId   EExchgID          `protobuf:"varint,6,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所编码
	InvestUnitId string            `protobuf:"bytes,7,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                               // 投资单元代码
	ContractType EContractTypeType `protobuf:"varint,8,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型  0 期货 1 期权 x1_AllContract可能会失败
	LocalPos     uint64            `protobuf:"varint,9,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryContractMarginRate) Reset() {
	*x = ReqQryContractMarginRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryContractMarginRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryContractMarginRate) ProtoMessage() {}

func (x *ReqQryContractMarginRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryContractMarginRate.ProtoReflect.Descriptor instead.
func (*ReqQryContractMarginRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{66}
}

func (x *ReqQryContractMarginRate) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryContractMarginRate) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryContractMarginRate) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqQryContractMarginRate) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryContractMarginRate) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ReqQryContractMarginRate) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryContractMarginRate) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *ReqQryContractMarginRate) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryContractMarginRate) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询合约保证金率应答
// @author <xiahl>
// @date 2018-8-23
// @details
// @note 协议号 client-proxy:<23022> proxy-server:<27022>
// @modify
type RspQryContractMarginRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead        *RspTradeHead       `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`               // 交易通用应答头
	IsLast           bool                `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                    // 最后一条响应消息
	MarginRateDetail []*MarginRateDetail `protobuf:"bytes,3,rep,name=marginRateDetail,proto3" json:"marginRateDetail,omitempty"` // 保证金率
}

func (x *RspQryContractMarginRate) Reset() {
	*x = RspQryContractMarginRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryContractMarginRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryContractMarginRate) ProtoMessage() {}

func (x *RspQryContractMarginRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryContractMarginRate.ProtoReflect.Descriptor instead.
func (*RspQryContractMarginRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{67}
}

func (x *RspQryContractMarginRate) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryContractMarginRate) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryContractMarginRate) GetMarginRateDetail() []*MarginRateDetail {
	if x != nil {
		return x.MarginRateDetail
	}
	return nil
}

// *
// @brief 查询合约手续费率
// @author <xiahl>
// @date 2018-8-23
// @details 合约不填写返回持仓合约的保证金率
// @note 协议号 client-proxy:<23023> proxy-server:<27023>
// @modify
type ReqQryInstrumentCommissionRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	InvestorId   string            `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码
	BrokerId     string            `protobuf:"bytes,3,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                       // 经纪公司代码
	ContractId   string            `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                   // 合约代码
	ExchangeId   EExchgID          `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所编码
	InvestUnitId string            `protobuf:"bytes,6,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                               // 投资单元代码
	ContractType EContractTypeType `protobuf:"varint,7,opt,name=contractType,proto3,enum=fippb.EContractTypeType" json:"contractType,omitempty"` // 合约类型  0 期货 1 期权 x1_AllContract可能会失败
	LocalPos     uint64            `protobuf:"varint,8,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
	HedgeFlag    EHedgeFlagType    `protobuf:"varint,9,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`          // 投保类型
}

func (x *ReqQryInstrumentCommissionRate) Reset() {
	*x = ReqQryInstrumentCommissionRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryInstrumentCommissionRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryInstrumentCommissionRate) ProtoMessage() {}

func (x *ReqQryInstrumentCommissionRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryInstrumentCommissionRate.ProtoReflect.Descriptor instead.
func (*ReqQryInstrumentCommissionRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{68}
}

func (x *ReqQryInstrumentCommissionRate) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryInstrumentCommissionRate) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryInstrumentCommissionRate) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqQryInstrumentCommissionRate) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryInstrumentCommissionRate) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryInstrumentCommissionRate) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *ReqQryInstrumentCommissionRate) GetContractType() EContractTypeType {
	if x != nil {
		return x.ContractType
	}
	return EContractTypeType_ECT_AllContract
}

func (x *ReqQryInstrumentCommissionRate) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryInstrumentCommissionRate) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

// *
// @brief 查询合约手续费率应答
// @author <xiahl>
// @date 2018-8-23
// @details
// @note 协议号 client-proxy:<23024> proxy-server:<27024>
// @modify
type RspQryInstrumentCommissionRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead            *RspTradeHead           `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                       // 交易通用应答头
	IsLast               bool                    `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                            // 最后一条响应消息
	CommissionRateDetail []*CommissionRateDetail `protobuf:"bytes,3,rep,name=commissionRateDetail,proto3" json:"commissionRateDetail,omitempty"` // 手续费率
}

func (x *RspQryInstrumentCommissionRate) Reset() {
	*x = RspQryInstrumentCommissionRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryInstrumentCommissionRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryInstrumentCommissionRate) ProtoMessage() {}

func (x *RspQryInstrumentCommissionRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryInstrumentCommissionRate.ProtoReflect.Descriptor instead.
func (*RspQryInstrumentCommissionRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{69}
}

func (x *RspQryInstrumentCommissionRate) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryInstrumentCommissionRate) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryInstrumentCommissionRate) GetCommissionRateDetail() []*CommissionRateDetail {
	if x != nil {
		return x.CommissionRateDetail
	}
	return nil
}

// *
// @brief 新增云条件单请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22029> proxy-server:<26029>
// @modify
type ReqAddConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32                         `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`          // 请求id
	ConOrderInfo   *ConditionOrderInfo           `protobuf:"bytes,2,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"`     // 云条件单信息
	TradeParameter *ConditionOrderTradeparameter `protobuf:"bytes,3,opt,name=tradeParameter,proto3" json:"tradeParameter,omitempty"` // 交易参数
	LocalPos       uint64                        `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`            // tproxy专用
}

func (x *ReqAddConditionOrder) Reset() {
	*x = ReqAddConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddConditionOrder) ProtoMessage() {}

func (x *ReqAddConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqAddConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{70}
}

func (x *ReqAddConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqAddConditionOrder) GetConOrderInfo() *ConditionOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

func (x *ReqAddConditionOrder) GetTradeParameter() *ConditionOrderTradeparameter {
	if x != nil {
		return x.TradeParameter
	}
	return nil
}

func (x *ReqAddConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 新增云条件单响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22030> proxy-server:<26030>
// @modify
type RspAddConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RspAddConditionOrder) Reset() {
	*x = RspAddConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAddConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAddConditionOrder) ProtoMessage() {}

func (x *RspAddConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAddConditionOrder.ProtoReflect.Descriptor instead.
func (*RspAddConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{71}
}

func (x *RspAddConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspAddConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 修改云条件单请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22031> proxy-server:<26031>
// @modify
type ReqUpdateConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32                         `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`              // 请求id
	ConditionOrderId string                        `protobuf:"bytes,2,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` //server端维护的condition_order_id  类似于普通报单的orderSysId
	ConOrderInfo     *ConditionOrderInfo           `protobuf:"bytes,3,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"`         // 云条件单信息
	TradeParameter   *ConditionOrderTradeparameter `protobuf:"bytes,4,opt,name=tradeParameter,proto3" json:"tradeParameter,omitempty"`     // 交易参数
	LocalPos         uint64                        `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                // tproxy专用
}

func (x *ReqUpdateConditionOrder) Reset() {
	*x = ReqUpdateConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateConditionOrder) ProtoMessage() {}

func (x *ReqUpdateConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqUpdateConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{72}
}

func (x *ReqUpdateConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqUpdateConditionOrder) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ReqUpdateConditionOrder) GetConOrderInfo() *ConditionOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

func (x *ReqUpdateConditionOrder) GetTradeParameter() *ConditionOrderTradeparameter {
	if x != nil {
		return x.TradeParameter
	}
	return nil
}

func (x *ReqUpdateConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 修改云条件单响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22032> proxy-server:<26032>
// @modify
type RspUpdateConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RspUpdateConditionOrder) Reset() {
	*x = RspUpdateConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUpdateConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUpdateConditionOrder) ProtoMessage() {}

func (x *RspUpdateConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUpdateConditionOrder.ProtoReflect.Descriptor instead.
func (*RspUpdateConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{73}
}

func (x *RspUpdateConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUpdateConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 暂停云条件单请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22033> proxy-server:<26033>
// @modify
type ReqPauseConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`              // 请求id
	InvestorId       string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`             // 投资者代码
	ConditionOrderId string `protobuf:"bytes,3,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` //server端维护的condition_order_id  类似于普通报单的orderSysId
	LocalPos         uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                // tproxy专用
}

func (x *ReqPauseConditionOrder) Reset() {
	*x = ReqPauseConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPauseConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPauseConditionOrder) ProtoMessage() {}

func (x *ReqPauseConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPauseConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqPauseConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{74}
}

func (x *ReqPauseConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqPauseConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqPauseConditionOrder) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ReqPauseConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 暂停云条件单响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22034> proxy-server:<26034>
// @modify
type RspPauseConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RspPauseConditionOrder) Reset() {
	*x = RspPauseConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPauseConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPauseConditionOrder) ProtoMessage() {}

func (x *RspPauseConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPauseConditionOrder.ProtoReflect.Descriptor instead.
func (*RspPauseConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{75}
}

func (x *RspPauseConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspPauseConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 启动云条件单请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22035> proxy-server:<26035>
// @modify
type ReqStartConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`              // 请求id
	InvestorId       string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`             // 投资者代码
	ConditionOrderId string `protobuf:"bytes,3,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` // server端维护的condition_order_id  类似于普通报单的orderSysId
	LocalPos         uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                // tproxy专用
}

func (x *ReqStartConditionOrder) Reset() {
	*x = ReqStartConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStartConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStartConditionOrder) ProtoMessage() {}

func (x *ReqStartConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStartConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqStartConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{76}
}

func (x *ReqStartConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqStartConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqStartConditionOrder) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ReqStartConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 启动云条件单响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22036> proxy-server:<26036>
// @modify
type RspStartConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RspStartConditionOrder) Reset() {
	*x = RspStartConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspStartConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspStartConditionOrder) ProtoMessage() {}

func (x *RspStartConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspStartConditionOrder.ProtoReflect.Descriptor instead.
func (*RspStartConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{77}
}

func (x *RspStartConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspStartConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 删除云条件单请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22037> proxy-server:<26037>
// @modify
type ReqDeleteConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`              // 请求id
	InvestorId       string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`             // 投资者代码
	ConditionOrderId string `protobuf:"bytes,3,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` //server端维护的condition_order_id  类似于普通报单的orderSysId
	LocalPos         uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                // tproxy专用
}

func (x *ReqDeleteConditionOrder) Reset() {
	*x = ReqDeleteConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteConditionOrder) ProtoMessage() {}

func (x *ReqDeleteConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqDeleteConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{78}
}

func (x *ReqDeleteConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqDeleteConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqDeleteConditionOrder) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ReqDeleteConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 删除云条件单响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22038> proxy-server:<26038>
// @modify
type RspDeleteConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RspDeleteConditionOrder) Reset() {
	*x = RspDeleteConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteConditionOrder) ProtoMessage() {}

func (x *RspDeleteConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteConditionOrder.ProtoReflect.Descriptor instead.
func (*RspDeleteConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{79}
}

func (x *RspDeleteConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspDeleteConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 云条件单触发通知
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 client-proxy:<22606> proxy-server:<26606>
// @modify
type RtnTriggerConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead         `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头           理论上发生错误不会推rtn，所以里面的errorid和errormessage移动端可能不用，tradehead有点多余！
	IsLast          bool                  `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                  // 最后一条响应消息  实际联调中移动端不关心islast
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,3,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细
}

func (x *RtnTriggerConditionOrder) Reset() {
	*x = RtnTriggerConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnTriggerConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnTriggerConditionOrder) ProtoMessage() {}

func (x *RtnTriggerConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnTriggerConditionOrder.ProtoReflect.Descriptor instead.
func (*RtnTriggerConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{80}
}

func (x *RtnTriggerConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RtnTriggerConditionOrder) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RtnTriggerConditionOrder) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 云条件单委托结果通知
// @author <fengwei>
// @date 2019-6-23
// @details
// @note 协议号 client-proxy:<22607> proxy-server:<26607>
// @modify
type RtnConOrderInsertResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId          int32  `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`                  // errid  0成功 非0失败
	ErrorMessage     string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`         // 失败原因
	ConditionOrderId string `protobuf:"bytes,3,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` // server端维护的condition_order_id  类似于普通报单的orderSysId
}

func (x *RtnConOrderInsertResult) Reset() {
	*x = RtnConOrderInsertResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnConOrderInsertResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnConOrderInsertResult) ProtoMessage() {}

func (x *RtnConOrderInsertResult) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnConOrderInsertResult.ProtoReflect.Descriptor instead.
func (*RtnConOrderInsertResult) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{81}
}

func (x *RtnConOrderInsertResult) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RtnConOrderInsertResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RtnConOrderInsertResult) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

// *
// @brief 云条件单查询
// @author <fengwei>
// @date 2019-6-14
// @details
// @note 协议号 client-proxy:<23059> proxy-server:<27059>
// @modify
type ReqQryConditionOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32                  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                     // 请求id
	InvestorId string                 `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                    // 投资者代码
	OrderType  EQryConOrderType       `protobuf:"varint,3,opt,name=orderType,proto3,enum=fippb.EQryConOrderType" json:"orderType,omitempty"`         // 查询条件 类型   ：         1条件单 2止盈止损单  模糊查询
	StatusType EQryConOrderStatusType `protobuf:"varint,4,opt,name=StatusType,proto3,enum=fippb.EQryConOrderStatusType" json:"StatusType,omitempty"` // 查询条件     触发状态：      1已触发 2未触发            模糊查询
	LocalPos   uint64                 `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                                       // tproxy专用
}

func (x *ReqQryConditionOrderList) Reset() {
	*x = ReqQryConditionOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryConditionOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryConditionOrderList) ProtoMessage() {}

func (x *ReqQryConditionOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryConditionOrderList.ProtoReflect.Descriptor instead.
func (*ReqQryConditionOrderList) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{82}
}

func (x *ReqQryConditionOrderList) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryConditionOrderList) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryConditionOrderList) GetOrderType() EQryConOrderType {
	if x != nil {
		return x.OrderType
	}
	return EQryConOrderType_QCOT_Null
}

func (x *ReqQryConditionOrderList) GetStatusType() EQryConOrderStatusType {
	if x != nil {
		return x.StatusType
	}
	return EQryConOrderStatusType_QCOST_Null
}

func (x *ReqQryConditionOrderList) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 云条件单查询响应
// @author <fengwei>
// @date 2019-6-14
// @details
// @note 协议号 client-proxy:<23060> proxy-server:<27060>
// @modify
type RspQryConditionOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead           `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	IsLast          bool                    `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                  // 最后一条响应消息
	OrderInfoDetail []*ConditionOrderDetail `protobuf:"bytes,3,rep,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"` // 云条件单信息明细           查询结果为空时不必填
}

func (x *RspQryConditionOrderList) Reset() {
	*x = RspQryConditionOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryConditionOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryConditionOrderList) ProtoMessage() {}

func (x *RspQryConditionOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryConditionOrderList.ProtoReflect.Descriptor instead.
func (*RspQryConditionOrderList) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{83}
}

func (x *RspQryConditionOrderList) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryConditionOrderList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryConditionOrderList) GetOrderInfoDetail() []*ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

// *
// @brief 云条件单新增一个需要订阅行情的合约
// @author <fengwei>
// @date 2019-7-15
// @details
// @note 协议号 内部消息流转:<30002>
// @modify
type ReqAddInstrumentToQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string   `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	InvestorId string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码
	ExchangeId EExchgID `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
}

func (x *ReqAddInstrumentToQuot) Reset() {
	*x = ReqAddInstrumentToQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddInstrumentToQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddInstrumentToQuot) ProtoMessage() {}

func (x *ReqAddInstrumentToQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddInstrumentToQuot.ProtoReflect.Descriptor instead.
func (*ReqAddInstrumentToQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{84}
}

func (x *ReqAddInstrumentToQuot) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqAddInstrumentToQuot) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqAddInstrumentToQuot) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 成交通知，交易中继转发给云条件单，和RtnTrade字段保持一致，额外还需要一个conditionOrderId
// @author <fengwei>
// @date 2019-7-31
// @note 协议号 server-trigger:<30003>
// @modify 后来交易连接移到条件单，已弃用！！！
type RtnTradeToTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId       string           `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                 // 合约代码             ctp x1
	ExchangeId       EExchgID         `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`            // 交易所代码           ctp x1
	TradeId          string           `protobuf:"bytes,3,opt,name=tradeId,proto3" json:"tradeId,omitempty"`                                       // 成交编号             ctp x1
	Direction        EDirectionType   `protobuf:"varint,4,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`        // 买卖方向             ctp x1
	OrderSysId       string           `protobuf:"bytes,5,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                 // 报单编号             ctp x1
	ClientId         string           `protobuf:"bytes,6,opt,name=clientId,proto3" json:"clientId,omitempty"`                                     // 客户代码             ctp
	OffsetFlag       EOffsetFlagType  `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`     // 开平标示             ctp x1
	HedgeFlag        EHedgeFlagType   `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`        // 投保类型             ctp x1
	Price            float64          `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`                                         // 价格                 ctp x1
	VolumnCondition  int32            `protobuf:"varint,10,opt,name=volumnCondition,proto3" json:"volumnCondition,omitempty"`                     // 数量                 ctp x1
	TradeTime        string           `protobuf:"bytes,11,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                                  // 成交时间             ctp x1
	InvestorId       string           `protobuf:"bytes,12,opt,name=investorId,proto3" json:"investorId,omitempty"`                                // 投资者代码           ctp
	TradeType        ETradeTypeType   `protobuf:"varint,13,opt,name=tradeType,proto3,enum=fippb.ETradeTypeType" json:"tradeType,omitempty"`       // 成交类型             ctp
	PriceSource      EPriceSourceType `protobuf:"varint,14,opt,name=priceSource,proto3,enum=fippb.EPriceSourceType" json:"priceSource,omitempty"` // 成交价来源           ctp
	OrderRef         uint64           `protobuf:"varint,15,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                   // 报单引用             ctp
	LocalPos         uint64           `protobuf:"varint,16,opt,name=localPos,proto3" json:"localPos,omitempty"`                                   // tproxy专用
	ConditionOrderId string           `protobuf:"bytes,17,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"`                    // server端维护的condition_order_id  类似于普通报单的orderSysId
}

func (x *RtnTradeToTrigger) Reset() {
	*x = RtnTradeToTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnTradeToTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnTradeToTrigger) ProtoMessage() {}

func (x *RtnTradeToTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnTradeToTrigger.ProtoReflect.Descriptor instead.
func (*RtnTradeToTrigger) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{85}
}

func (x *RtnTradeToTrigger) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RtnTradeToTrigger) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RtnTradeToTrigger) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *RtnTradeToTrigger) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *RtnTradeToTrigger) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *RtnTradeToTrigger) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RtnTradeToTrigger) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *RtnTradeToTrigger) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *RtnTradeToTrigger) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RtnTradeToTrigger) GetVolumnCondition() int32 {
	if x != nil {
		return x.VolumnCondition
	}
	return 0
}

func (x *RtnTradeToTrigger) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *RtnTradeToTrigger) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RtnTradeToTrigger) GetTradeType() ETradeTypeType {
	if x != nil {
		return x.TradeType
	}
	return ETradeTypeType_TRDT_SplitCombination
}

func (x *RtnTradeToTrigger) GetPriceSource() EPriceSourceType {
	if x != nil {
		return x.PriceSource
	}
	return EPriceSourceType_PSRC_LastPrice
}

func (x *RtnTradeToTrigger) GetOrderRef() uint64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *RtnTradeToTrigger) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *RtnTradeToTrigger) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

// *
// @brief trade_srevice中vm_response给vm_trigger_receiver发送条件单长连接的localpos，方便过滤重复的成交回报
// @author <fengwei>
// @date 2019-08-05
// @note 协议号 inner:<30004>
// @modify  后来交易连接移到条件单，已弃用
type RtnLongConnLocalPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId string `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码
	LocalPos   uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
}

func (x *RtnLongConnLocalPos) Reset() {
	*x = RtnLongConnLocalPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnLongConnLocalPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnLongConnLocalPos) ProtoMessage() {}

func (x *RtnLongConnLocalPos) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnLongConnLocalPos.ProtoReflect.Descriptor instead.
func (*RtnLongConnLocalPos) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{86}
}

func (x *RtnLongConnLocalPos) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RtnLongConnLocalPos) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 云条件单已触发列表全部删除请求
// @author <fengwei>
// @date 2019-08-19
// @note 协议号 client-proxy:<22039> proxy-server:<26047>
// @modify
type ReqDeleteAllTriggeredConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32               `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                  // 请求id
	InvestorId string              `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                 // 投资者代码
	DeleteType EDeleteConOrderType `protobuf:"varint,3,opt,name=deleteType,proto3,enum=fippb.EDeleteConOrderType" json:"deleteType,omitempty"` // 删除类型 1.已触发条件单 2.已触发单止盈止损单
	LocalPos   uint64              `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                                    // tproxy专用
}

func (x *ReqDeleteAllTriggeredConditionOrder) Reset() {
	*x = ReqDeleteAllTriggeredConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteAllTriggeredConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteAllTriggeredConditionOrder) ProtoMessage() {}

func (x *ReqDeleteAllTriggeredConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteAllTriggeredConditionOrder.ProtoReflect.Descriptor instead.
func (*ReqDeleteAllTriggeredConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{87}
}

func (x *ReqDeleteAllTriggeredConditionOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqDeleteAllTriggeredConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqDeleteAllTriggeredConditionOrder) GetDeleteType() EDeleteConOrderType {
	if x != nil {
		return x.DeleteType
	}
	return EDeleteConOrderType_DCOT_NULL
}

func (x *ReqDeleteAllTriggeredConditionOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 云条件单已触发列表全部删除响应
// @author <fengwei>
// @date 2019-08-19
// @note 协议号 client-proxy:<22040> proxy-server:<26048>
// @modify
type RspDeleteAllTriggeredConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead  *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`   // 交易通用应答头
	InvestorId string        `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码
}

func (x *RspDeleteAllTriggeredConditionOrder) Reset() {
	*x = RspDeleteAllTriggeredConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteAllTriggeredConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteAllTriggeredConditionOrder) ProtoMessage() {}

func (x *RspDeleteAllTriggeredConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteAllTriggeredConditionOrder.ProtoReflect.Descriptor instead.
func (*RspDeleteAllTriggeredConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{88}
}

func (x *RspDeleteAllTriggeredConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspDeleteAllTriggeredConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// *
// @brief 云条件单已触发列表全部删除结果通知
// @author <fengwei>
// @date 2019-08-19
// @note 协议号 client-proxy:<22608> proxy-server:<26610>
// @modify
type RtnDeleteAllTriggeredConditionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead        *RspTradeHead       `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                                   // 交易通用应答头  有点多余
	InvestorId       string              `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                 // 投资者代码
	DeleteType       EDeleteConOrderType `protobuf:"varint,3,opt,name=deleteType,proto3,enum=fippb.EDeleteConOrderType" json:"deleteType,omitempty"` // 删除类型 1.已触发条件单 2.已触发单止盈止损单
	IsLast           bool                `protobuf:"varint,4,opt,name=isLast,proto3" json:"isLast,omitempty"`                                        // ConditionOrderId太多，可能无法一次传完
	ConditionOrderId []string            `protobuf:"bytes,5,rep,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"`                     // 已删除的单子数组
}

func (x *RtnDeleteAllTriggeredConditionOrder) Reset() {
	*x = RtnDeleteAllTriggeredConditionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnDeleteAllTriggeredConditionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnDeleteAllTriggeredConditionOrder) ProtoMessage() {}

func (x *RtnDeleteAllTriggeredConditionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnDeleteAllTriggeredConditionOrder.ProtoReflect.Descriptor instead.
func (*RtnDeleteAllTriggeredConditionOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{89}
}

func (x *RtnDeleteAllTriggeredConditionOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RtnDeleteAllTriggeredConditionOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RtnDeleteAllTriggeredConditionOrder) GetDeleteType() EDeleteConOrderType {
	if x != nil {
		return x.DeleteType
	}
	return EDeleteConOrderType_DCOT_NULL
}

func (x *RtnDeleteAllTriggeredConditionOrder) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RtnDeleteAllTriggeredConditionOrder) GetConditionOrderId() []string {
	if x != nil {
		return x.ConditionOrderId
	}
	return nil
}

// *
// @brief 投资者结算结果确认请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22009> proxy-server:<26009>
// @modify
type ReqSettlementInfoConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId             int32                  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                        // 请求id
	SettlementInfoConfirm *SettlementInfoConfirm `protobuf:"bytes,2,opt,name=settlementInfoConfirm,proto3" json:"settlementInfoConfirm,omitempty"` // 投资者结算结果信息
	LocalPos              uint64                 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`                          // tproxy专用
}

func (x *ReqSettlementInfoConfirm) Reset() {
	*x = ReqSettlementInfoConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSettlementInfoConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSettlementInfoConfirm) ProtoMessage() {}

func (x *ReqSettlementInfoConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSettlementInfoConfirm.ProtoReflect.Descriptor instead.
func (*ReqSettlementInfoConfirm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{90}
}

func (x *ReqSettlementInfoConfirm) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqSettlementInfoConfirm) GetSettlementInfoConfirm() *SettlementInfoConfirm {
	if x != nil {
		return x.SettlementInfoConfirm
	}
	return nil
}

func (x *ReqSettlementInfoConfirm) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 投资者结算结果确认响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22010> proxy-server:<26010>
// @modify
type RspSettlementInfoConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead             *RspTradeHead          `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                         // 交易通用应答头
	SettlementInfoConfirm *SettlementInfoConfirm `protobuf:"bytes,2,opt,name=settlementInfoConfirm,proto3" json:"settlementInfoConfirm,omitempty"` // 投资者结算结果信息
}

func (x *RspSettlementInfoConfirm) Reset() {
	*x = RspSettlementInfoConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSettlementInfoConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSettlementInfoConfirm) ProtoMessage() {}

func (x *RspSettlementInfoConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSettlementInfoConfirm.ProtoReflect.Descriptor instead.
func (*RspSettlementInfoConfirm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{91}
}

func (x *RspSettlementInfoConfirm) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspSettlementInfoConfirm) GetSettlementInfoConfirm() *SettlementInfoConfirm {
	if x != nil {
		return x.SettlementInfoConfirm
	}
	return nil
}

// del brokerId经纪公司代码 accountId投资者帐号 currencyId币种代码
type ReqQrySettlementInfoConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	InvestorId string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码      def=登录userid
	LocalPos   uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
}

func (x *ReqQrySettlementInfoConfirm) Reset() {
	*x = ReqQrySettlementInfoConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySettlementInfoConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySettlementInfoConfirm) ProtoMessage() {}

func (x *ReqQrySettlementInfoConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySettlementInfoConfirm.ProtoReflect.Descriptor instead.
func (*ReqQrySettlementInfoConfirm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{92}
}

func (x *ReqQrySettlementInfoConfirm) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQrySettlementInfoConfirm) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQrySettlementInfoConfirm) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询结算信息确认响应
// @author <zhaowei>
// @date 2018-11-19
// @note 协议号 client-proxy:<23040> proxy-server:<27040>
// @modify
type RspQrySettlementInfoConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead             *RspTradeHead          `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                          // 交易通用应答头
	SettlementInfoConfirm *SettlementInfoConfirm `protobuf:"bytes,2,opt,name=settlementInfoConfirm,proto3" json:"settlementInfoConfirm,omitempty"`  // 投资者结算结果信息
	IsConfirmed           EBooLean               `protobuf:"varint,3,opt,name=isConfirmed,proto3,enum=fippb.EBooLean" json:"isConfirmed,omitempty"` // 是否已经确认过  HS
}

func (x *RspQrySettlementInfoConfirm) Reset() {
	*x = RspQrySettlementInfoConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySettlementInfoConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySettlementInfoConfirm) ProtoMessage() {}

func (x *RspQrySettlementInfoConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySettlementInfoConfirm.ProtoReflect.Descriptor instead.
func (*RspQrySettlementInfoConfirm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{93}
}

func (x *RspQrySettlementInfoConfirm) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQrySettlementInfoConfirm) GetSettlementInfoConfirm() *SettlementInfoConfirm {
	if x != nil {
		return x.SettlementInfoConfirm
	}
	return nil
}

func (x *RspQrySettlementInfoConfirm) GetIsConfirmed() EBooLean {
	if x != nil {
		return x.IsConfirmed
	}
	return EBooLean_EBL_Null
}

// del brokerId经纪公司代码 tradingDay交易日 accountId投资者账号 currencyId币种代码
type ReqQrySettlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	InvestorId string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码     def=登录userid
	LocalPos   uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
	TradingDay string `protobuf:"bytes,4,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"` // 交易日         def=当前交易日
}

func (x *ReqQrySettlementInfo) Reset() {
	*x = ReqQrySettlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySettlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySettlementInfo) ProtoMessage() {}

func (x *ReqQrySettlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySettlementInfo.ProtoReflect.Descriptor instead.
func (*ReqQrySettlementInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{94}
}

func (x *ReqQrySettlementInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQrySettlementInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQrySettlementInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQrySettlementInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

// *
// @brief 查询投资者结算结果响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23028> proxy-server:<27028>
// @modify
type RspQrySettlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`        // 交易通用应答头
	IsLast       bool          `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`             // 最后一条响应消息
	TradingDay   string        `protobuf:"bytes,3,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`      // 交易日
	SettlementId int32         `protobuf:"varint,4,opt,name=settlementId,proto3" json:"settlementId,omitempty"` // 结算编号
	InvestorId   string        `protobuf:"bytes,5,opt,name=investorId,proto3" json:"investorId,omitempty"`      // 投资者代码
	SequenceNo   int32         `protobuf:"varint,6,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`     // 序号
	Content      string        `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`            // 消息正文
}

func (x *RspQrySettlementInfo) Reset() {
	*x = RspQrySettlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySettlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySettlementInfo) ProtoMessage() {}

func (x *RspQrySettlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySettlementInfo.ProtoReflect.Descriptor instead.
func (*RspQrySettlementInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{95}
}

func (x *RspQrySettlementInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQrySettlementInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQrySettlementInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *RspQrySettlementInfo) GetSettlementId() int32 {
	if x != nil {
		return x.SettlementId
	}
	return 0
}

func (x *RspQrySettlementInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RspQrySettlementInfo) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspQrySettlementInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// *
// @brief 查询最大报单数量请求
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<23029> proxy-server:<27029>
// @modify
type ReqQryMaxOrderVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`          // 请求id
	MaxOrderVolumn *MaxOrderVolumn `protobuf:"bytes,2,opt,name=maxOrderVolumn,proto3" json:"maxOrderVolumn,omitempty"` // 最大报单数量
	LocalPos       uint64          `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`            // tproxy专用
}

func (x *ReqQryMaxOrderVolumn) Reset() {
	*x = ReqQryMaxOrderVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryMaxOrderVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryMaxOrderVolumn) ProtoMessage() {}

func (x *ReqQryMaxOrderVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryMaxOrderVolumn.ProtoReflect.Descriptor instead.
func (*ReqQryMaxOrderVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{96}
}

func (x *ReqQryMaxOrderVolumn) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryMaxOrderVolumn) GetMaxOrderVolumn() *MaxOrderVolumn {
	if x != nil {
		return x.MaxOrderVolumn
	}
	return nil
}

func (x *ReqQryMaxOrderVolumn) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询最大报单数量应答
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<23030> proxy-server:<27030>
// @modify
type RspQryMaxOrderVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	MaxOrderVolumn []*MaxOrderVolumn `protobuf:"bytes,3,rep,name=maxOrderVolumn,proto3" json:"maxOrderVolumn,omitempty"` // 最大报单数量
}

func (x *RspQryMaxOrderVolumn) Reset() {
	*x = RspQryMaxOrderVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryMaxOrderVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryMaxOrderVolumn) ProtoMessage() {}

func (x *RspQryMaxOrderVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryMaxOrderVolumn.ProtoReflect.Descriptor instead.
func (*RspQryMaxOrderVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{97}
}

func (x *RspQryMaxOrderVolumn) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryMaxOrderVolumn) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryMaxOrderVolumn) GetMaxOrderVolumn() []*MaxOrderVolumn {
	if x != nil {
		return x.MaxOrderVolumn
	}
	return nil
}

// del brokerId经纪公司代码
type ReqQryExecOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	InvestorId     string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码           def=登录userid
	ContractId     string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码             def=所有
	ExchangeId     EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码           def=所有
	ExecOrderSysId string   `protobuf:"bytes,5,opt,name=execOrderSysId,proto3" json:"execOrderSysId,omitempty"`              // 执行宣告编号         def=所有
	LocalPos       uint64   `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryExecOrder) Reset() {
	*x = ReqQryExecOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryExecOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryExecOrder) ProtoMessage() {}

func (x *ReqQryExecOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryExecOrder.ProtoReflect.Descriptor instead.
func (*ReqQryExecOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{98}
}

func (x *ReqQryExecOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryExecOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryExecOrder) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryExecOrder) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryExecOrder) GetExecOrderSysId() string {
	if x != nil {
		return x.ExecOrderSysId
	}
	return ""
}

func (x *ReqQryExecOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 请求查询执行宣告应答
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<23026> proxy-server:<27026>
// @modify
type RspQryExecOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	ExeOrderDetail []*ExeOrderDetail `protobuf:"bytes,3,rep,name=exeOrderDetail,proto3" json:"exeOrderDetail,omitempty"` // 执行宣告明细
}

func (x *RspQryExecOrder) Reset() {
	*x = RspQryExecOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryExecOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryExecOrder) ProtoMessage() {}

func (x *RspQryExecOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryExecOrder.ProtoReflect.Descriptor instead.
func (*RspQryExecOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{99}
}

func (x *RspQryExecOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryExecOrder) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryExecOrder) GetExeOrderDetail() []*ExeOrderDetail {
	if x != nil {
		return x.ExeOrderDetail
	}
	return nil
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqQryTradingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	InvestorId   string            `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码           def=登录userid
	ExchangeId   EExchgID          `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所代码           def=所有
	ClientId     string            `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`                                       // 客户代码             def=“”
	ClientIdType EClientIdTypeType `protobuf:"varint,5,opt,name=clientIdType,proto3,enum=fippb.EClientIdTypeType" json:"clientIdType,omitempty"` // 交易编码类型
	LocalPos     uint64            `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // tproxy专用
}

func (x *ReqQryTradingCode) Reset() {
	*x = ReqQryTradingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryTradingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryTradingCode) ProtoMessage() {}

func (x *ReqQryTradingCode) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryTradingCode.ProtoReflect.Descriptor instead.
func (*ReqQryTradingCode) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{100}
}

func (x *ReqQryTradingCode) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryTradingCode) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryTradingCode) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryTradingCode) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReqQryTradingCode) GetClientIdType() EClientIdTypeType {
	if x != nil {
		return x.ClientIdType
	}
	return EClientIdTypeType_ECIDT_Null
}

func (x *ReqQryTradingCode) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 请求查询交易编码应答
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspQryTradingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead         *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                 // 交易通用应答头
	IsLast            bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // 最后一条响应消息
	TradingCodeDetail []*TradingCodeDetail `protobuf:"bytes,3,rep,name=tradingCodeDetail,proto3" json:"tradingCodeDetail,omitempty"` // 交易编码明细
}

func (x *RspQryTradingCode) Reset() {
	*x = RspQryTradingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryTradingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryTradingCode) ProtoMessage() {}

func (x *RspQryTradingCode) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryTradingCode.ProtoReflect.Descriptor instead.
func (*RspQryTradingCode) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{101}
}

func (x *RspQryTradingCode) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryTradingCode) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryTradingCode) GetTradingCodeDetail() []*TradingCodeDetail {
	if x != nil {
		return x.TradingCodeDetail
	}
	return nil
}

// del brokerId经纪公司代码
type ReqQryContractBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId          int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                    // 请求id
	LocalPos           uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                      // tproxy专用
	BankId             string `protobuf:"bytes,3,opt,name=bankId,proto3" json:"bankId,omitempty"`                           // 银行代码
	BankBrchId         string `protobuf:"bytes,4,opt,name=bankBrchId,proto3" json:"bankBrchId,omitempty"`                   // 银行分中心代码
	OpBankBrchId       string `protobuf:"bytes,5,opt,name=opBankBrchId,proto3" json:"opBankBrchId,omitempty"`               // 操作分支机构        hs
	Station            string `protobuf:"bytes,6,opt,name=station,proto3" json:"station,omitempty"`                         // 站点地址            hs
	ClientId           string `protobuf:"bytes,7,opt,name=clientId,proto3" json:"clientId,omitempty"`                       // 客户编码            hs
	AccountId          string `protobuf:"bytes,8,opt,name=accountId,proto3" json:"accountId,omitempty"`                     // 投资者账号          hs
	Password           string `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`                       // 期货密码            hs
	PasswordSM2Encrypt bool   `protobuf:"varint,10,opt,name=passwordSM2Encrypt,proto3" json:"passwordSM2Encrypt,omitempty"` // 密码是否进行了SM2加密
}

func (x *ReqQryContractBank) Reset() {
	*x = ReqQryContractBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryContractBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryContractBank) ProtoMessage() {}

func (x *ReqQryContractBank) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryContractBank.ProtoReflect.Descriptor instead.
func (*ReqQryContractBank) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{102}
}

func (x *ReqQryContractBank) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryContractBank) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryContractBank) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ReqQryContractBank) GetBankBrchId() string {
	if x != nil {
		return x.BankBrchId
	}
	return ""
}

func (x *ReqQryContractBank) GetOpBankBrchId() string {
	if x != nil {
		return x.OpBankBrchId
	}
	return ""
}

func (x *ReqQryContractBank) GetStation() string {
	if x != nil {
		return x.Station
	}
	return ""
}

func (x *ReqQryContractBank) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReqQryContractBank) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqQryContractBank) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqQryContractBank) GetPasswordSM2Encrypt() bool {
	if x != nil {
		return x.PasswordSM2Encrypt
	}
	return false
}

// *
// @brief 查询签约银行应答
// @author <zhaow>
// @date 2018-11-19
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspQryContractBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead         *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                 // 交易通用应答头
	IsLast            bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // 最后一条响应消息
	ContractBankField []*ContractBankField `protobuf:"bytes,3,rep,name=contractBankField,proto3" json:"contractBankField,omitempty"` // 签约银行明细
}

func (x *RspQryContractBank) Reset() {
	*x = RspQryContractBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryContractBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryContractBank) ProtoMessage() {}

func (x *RspQryContractBank) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryContractBank.ProtoReflect.Descriptor instead.
func (*RspQryContractBank) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{103}
}

func (x *RspQryContractBank) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryContractBank) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryContractBank) GetContractBankField() []*ContractBankField {
	if x != nil {
		return x.ContractBankField
	}
	return nil
}

// del brokerId经纪公司代码
type ReqQryTransferSerial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	LocalPos   uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
	AccountId  string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`   // 投资者账号
	BankId     string `protobuf:"bytes,4,opt,name=bankId,proto3" json:"bankId,omitempty"`         // 银行代码
	CurrencyId string `protobuf:"bytes,5,opt,name=currencyId,proto3" json:"currencyId,omitempty"` // 币种代码
}

func (x *ReqQryTransferSerial) Reset() {
	*x = ReqQryTransferSerial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryTransferSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryTransferSerial) ProtoMessage() {}

func (x *ReqQryTransferSerial) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryTransferSerial.ProtoReflect.Descriptor instead.
func (*ReqQryTransferSerial) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{104}
}

func (x *ReqQryTransferSerial) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryTransferSerial) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryTransferSerial) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqQryTransferSerial) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ReqQryTransferSerial) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

// *
// @brief 查询转账流水应答
// @author <zhaow>
// @date 2018-11-19
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspQryTransferSerial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead           *RspTradeHead          `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                     // 交易通用应答头
	IsLast              bool                   `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                          // 最后一条响应消息
	TransferSerialField []*TransferSerialField `protobuf:"bytes,3,rep,name=transferSerialField,proto3" json:"transferSerialField,omitempty"` // 银期转账交易流水表
}

func (x *RspQryTransferSerial) Reset() {
	*x = RspQryTransferSerial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryTransferSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryTransferSerial) ProtoMessage() {}

func (x *RspQryTransferSerial) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryTransferSerial.ProtoReflect.Descriptor instead.
func (*RspQryTransferSerial) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{105}
}

func (x *RspQryTransferSerial) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryTransferSerial) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryTransferSerial) GetTransferSerialField() []*TransferSerialField {
	if x != nil {
		return x.TransferSerialField
	}
	return nil
}

// del brokerId经纪公司代码
type ReqQryBankAccountMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId         int32              `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                // 请求id
	LocalPos          uint64             `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                  // tproxy专用
	QueryAccountField *QueryAccountField `protobuf:"bytes,3,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"` // 查询账户信息
}

func (x *ReqQryBankAccountMoney) Reset() {
	*x = ReqQryBankAccountMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryBankAccountMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryBankAccountMoney) ProtoMessage() {}

func (x *ReqQryBankAccountMoney) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryBankAccountMoney.ProtoReflect.Descriptor instead.
func (*ReqQryBankAccountMoney) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{106}
}

func (x *ReqQryBankAccountMoney) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryBankAccountMoney) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryBankAccountMoney) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

// *
// @brief 查询银行余额应答
// @author <zhaow>
// @date 2018-11-19
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspQryBankAccountMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead         *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                 // 交易通用应答头
	IsLast            bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // 最后一条响应消息
	QueryAccountField []*QueryAccountField `protobuf:"bytes,3,rep,name=queryAccountField,proto3" json:"queryAccountField,omitempty"` // 查询账户信息
}

func (x *RspQryBankAccountMoney) Reset() {
	*x = RspQryBankAccountMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryBankAccountMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryBankAccountMoney) ProtoMessage() {}

func (x *RspQryBankAccountMoney) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryBankAccountMoney.ProtoReflect.Descriptor instead.
func (*RspQryBankAccountMoney) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{107}
}

func (x *RspQryBankAccountMoney) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryBankAccountMoney) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryBankAccountMoney) GetQueryAccountField() []*QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

// *
// @brief 查询银行余额通知
// @author <zhaow>
// @date 2018-11-19
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RtnQryBankAccountMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAccountField *QueryAccountField `protobuf:"bytes,1,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"` // 查询账户信息
	RequestId         int32              `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`                // 请求编号
	BankUseAmount     float64            `protobuf:"fixed64,3,opt,name=bankUseAmount,proto3" json:"bankUseAmount,omitempty"`       // 银行可用金额
	BankFetchAmount   float64            `protobuf:"fixed64,4,opt,name=bankFetchAmount,proto3" json:"bankFetchAmount,omitempty"`   // 银行可取金额
	ErrId             int32              `protobuf:"varint,5,opt,name=errId,proto3" json:"errId,omitempty"`                        // 错误代码
	ErrorMessage      string             `protobuf:"bytes,6,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`           // 错误信息
	LocalPos          uint64             `protobuf:"varint,7,opt,name=localPos,proto3" json:"localPos,omitempty"`                  // tproxy专用
}

func (x *RtnQryBankAccountMoney) Reset() {
	*x = RtnQryBankAccountMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnQryBankAccountMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnQryBankAccountMoney) ProtoMessage() {}

func (x *RtnQryBankAccountMoney) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnQryBankAccountMoney.ProtoReflect.Descriptor instead.
func (*RtnQryBankAccountMoney) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{108}
}

func (x *RtnQryBankAccountMoney) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

func (x *RtnQryBankAccountMoney) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RtnQryBankAccountMoney) GetBankUseAmount() float64 {
	if x != nil {
		return x.BankUseAmount
	}
	return 0
}

func (x *RtnQryBankAccountMoney) GetBankFetchAmount() float64 {
	if x != nil {
		return x.BankFetchAmount
	}
	return 0
}

func (x *RtnQryBankAccountMoney) GetErrId() int32 {
	if x != nil {
		return x.ErrId
	}
	return 0
}

func (x *RtnQryBankAccountMoney) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RtnQryBankAccountMoney) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货发起银行资金转期货请求
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type ReqFromBankToFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32          `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	LocalPos   uint64         `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
	TransField *TransferField `protobuf:"bytes,3,opt,name=transField,proto3" json:"transField,omitempty"` // 银行期货转账明细
}

func (x *ReqFromBankToFuture) Reset() {
	*x = ReqFromBankToFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFromBankToFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFromBankToFuture) ProtoMessage() {}

func (x *ReqFromBankToFuture) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFromBankToFuture.ProtoReflect.Descriptor instead.
func (*ReqFromBankToFuture) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{109}
}

func (x *ReqFromBankToFuture) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqFromBankToFuture) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqFromBankToFuture) GetTransField() *TransferField {
	if x != nil {
		return x.TransField
	}
	return nil
}

// *
// @brief 期货发起银行资金转期货应答
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspFromBankToFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`         // 交易通用应答头
	IsLast        bool             `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`              // 最后一条响应消息
	TransferField []*TransferField `protobuf:"bytes,3,rep,name=transferField,proto3" json:"transferField,omitempty"` // 银行期货转账明细
}

func (x *RspFromBankToFuture) Reset() {
	*x = RspFromBankToFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFromBankToFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFromBankToFuture) ProtoMessage() {}

func (x *RspFromBankToFuture) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFromBankToFuture.ProtoReflect.Descriptor instead.
func (*RspFromBankToFuture) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{110}
}

func (x *RspFromBankToFuture) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspFromBankToFuture) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspFromBankToFuture) GetTransferField() []*TransferField {
	if x != nil {
		return x.TransferField
	}
	return nil
}

// *
// @brief 期货发起银行资金转期货通知
// @author <zhaow>
// @date 2018-11-21
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RtnFromBankToFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAccountField *QueryAccountField  `protobuf:"bytes,1,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"`                           // 查询账户信息
	TradeAmount       float64             `protobuf:"fixed64,2,opt,name=tradeAmount,proto3" json:"tradeAmount,omitempty"`                                     // 转账金额
	FutureFetchAmount float64             `protobuf:"fixed64,3,opt,name=futureFetchAmount,proto3" json:"futureFetchAmount,omitempty"`                         // 期货可取金额
	FeePayFlag        EFeePayFlagType     `protobuf:"varint,4,opt,name=feePayFlag,proto3,enum=fippb.EFeePayFlagType" json:"feePayFlag,omitempty"`             // 费用支付标志
	CustFee           float64             `protobuf:"fixed64,5,opt,name=custFee,proto3" json:"custFee,omitempty"`                                             // 应收客户费用
	BrokerFee         float64             `protobuf:"fixed64,6,opt,name=brokerFee,proto3" json:"brokerFee,omitempty"`                                         // 应收期货公司费用
	Message           string              `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                               // 发送方给接收方的消息
	TransferStatus    ETransferStatusType `protobuf:"varint,8,opt,name=transferStatus,proto3,enum=fippb.ETransferStatusType" json:"transferStatus,omitempty"` // 转账交易状态
	RequestId         int32               `protobuf:"varint,9,opt,name=requestId,proto3" json:"requestId,omitempty"`                                          // 请求编号
	ErrId             int32               `protobuf:"varint,10,opt,name=errId,proto3" json:"errId,omitempty"`                                                 // 错误代码
	ErrorMessage      string              `protobuf:"bytes,11,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`                                    // 错误信息
	LocalPos          uint64              `protobuf:"varint,12,opt,name=localPos,proto3" json:"localPos,omitempty"`                                           // tproxy专用
}

func (x *RtnFromBankToFuture) Reset() {
	*x = RtnFromBankToFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnFromBankToFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnFromBankToFuture) ProtoMessage() {}

func (x *RtnFromBankToFuture) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnFromBankToFuture.ProtoReflect.Descriptor instead.
func (*RtnFromBankToFuture) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{111}
}

func (x *RtnFromBankToFuture) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

func (x *RtnFromBankToFuture) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *RtnFromBankToFuture) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *RtnFromBankToFuture) GetFeePayFlag() EFeePayFlagType {
	if x != nil {
		return x.FeePayFlag
	}
	return EFeePayFlagType_EFPF_Null
}

func (x *RtnFromBankToFuture) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *RtnFromBankToFuture) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *RtnFromBankToFuture) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RtnFromBankToFuture) GetTransferStatus() ETransferStatusType {
	if x != nil {
		return x.TransferStatus
	}
	return ETransferStatusType_ETRFS_Null
}

func (x *RtnFromBankToFuture) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RtnFromBankToFuture) GetErrId() int32 {
	if x != nil {
		return x.ErrId
	}
	return 0
}

func (x *RtnFromBankToFuture) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RtnFromBankToFuture) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqFromFutureToBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32          `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	LocalPos   uint64         `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
	TransField *TransferField `protobuf:"bytes,3,opt,name=transField,proto3" json:"transField,omitempty"` // 银行期货转账明细
}

func (x *ReqFromFutureToBank) Reset() {
	*x = ReqFromFutureToBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFromFutureToBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFromFutureToBank) ProtoMessage() {}

func (x *ReqFromFutureToBank) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFromFutureToBank.ProtoReflect.Descriptor instead.
func (*ReqFromFutureToBank) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{112}
}

func (x *ReqFromFutureToBank) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqFromFutureToBank) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqFromFutureToBank) GetTransField() *TransferField {
	if x != nil {
		return x.TransField
	}
	return nil
}

// *
// @brief 期货发起期货资金转银行应答
// @author <zhaow>
// @date 2018-9-26
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RspFromFutureToBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`         // 交易通用应答头
	IsLast        bool             `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`              // 最后一条响应消息
	TransferField []*TransferField `protobuf:"bytes,3,rep,name=transferField,proto3" json:"transferField,omitempty"` // 银行期货转账明细
}

func (x *RspFromFutureToBank) Reset() {
	*x = RspFromFutureToBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFromFutureToBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFromFutureToBank) ProtoMessage() {}

func (x *RspFromFutureToBank) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFromFutureToBank.ProtoReflect.Descriptor instead.
func (*RspFromFutureToBank) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{113}
}

func (x *RspFromFutureToBank) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspFromFutureToBank) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspFromFutureToBank) GetTransferField() []*TransferField {
	if x != nil {
		return x.TransferField
	}
	return nil
}

// *
// @brief 期货发起期货资金转银行通知
// @author <zhaow>
// @date 2018-11-21
// @note 协议号 client-proxy:<> proxy-server:<>
// @modify
type RtnFromFutureToBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAccountField *QueryAccountField  `protobuf:"bytes,1,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"`                           // 查询账户信息
	TradeAmount       float64             `protobuf:"fixed64,2,opt,name=tradeAmount,proto3" json:"tradeAmount,omitempty"`                                     // 转账金额
	FutureFetchAmount float64             `protobuf:"fixed64,3,opt,name=futureFetchAmount,proto3" json:"futureFetchAmount,omitempty"`                         // 期货可取金额
	FeePayFlag        EFeePayFlagType     `protobuf:"varint,4,opt,name=feePayFlag,proto3,enum=fippb.EFeePayFlagType" json:"feePayFlag,omitempty"`             // 费用支付标志
	CustFee           float64             `protobuf:"fixed64,5,opt,name=custFee,proto3" json:"custFee,omitempty"`                                             // 应收客户费用
	BrokerFee         float64             `protobuf:"fixed64,6,opt,name=brokerFee,proto3" json:"brokerFee,omitempty"`                                         // 应收期货公司费用
	Message           string              `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                               // 发送方给接收方的消息
	TransferStatus    ETransferStatusType `protobuf:"varint,8,opt,name=transferStatus,proto3,enum=fippb.ETransferStatusType" json:"transferStatus,omitempty"` // 转账交易状态
	RequestId         int32               `protobuf:"varint,9,opt,name=requestId,proto3" json:"requestId,omitempty"`                                          // 请求编号
	ErrId             int32               `protobuf:"varint,10,opt,name=errId,proto3" json:"errId,omitempty"`                                                 // 错误代码
	ErrorMessage      string              `protobuf:"bytes,11,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`                                    // 错误信息
	LocalPos          uint64              `protobuf:"varint,12,opt,name=localPos,proto3" json:"localPos,omitempty"`                                           // tproxy专用
}

func (x *RtnFromFutureToBank) Reset() {
	*x = RtnFromFutureToBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnFromFutureToBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnFromFutureToBank) ProtoMessage() {}

func (x *RtnFromFutureToBank) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnFromFutureToBank.ProtoReflect.Descriptor instead.
func (*RtnFromFutureToBank) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{114}
}

func (x *RtnFromFutureToBank) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

func (x *RtnFromFutureToBank) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *RtnFromFutureToBank) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *RtnFromFutureToBank) GetFeePayFlag() EFeePayFlagType {
	if x != nil {
		return x.FeePayFlag
	}
	return EFeePayFlagType_EFPF_Null
}

func (x *RtnFromFutureToBank) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *RtnFromFutureToBank) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *RtnFromFutureToBank) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RtnFromFutureToBank) GetTransferStatus() ETransferStatusType {
	if x != nil {
		return x.TransferStatus
	}
	return ETransferStatusType_ETRFS_Null
}

func (x *RtnFromFutureToBank) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RtnFromFutureToBank) GetErrId() int32 {
	if x != nil {
		return x.ErrId
	}
	return 0
}

func (x *RtnFromFutureToBank) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RtnFromFutureToBank) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// del brokerId经纪公司代码
type ReqQryAccountregister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id
	LocalPos     uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
	AccountId    string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`       // 投资者账号
	BankId       string `protobuf:"bytes,4,opt,name=bankId,proto3" json:"bankId,omitempty"`             // 银行编码
	BankBrchId   string `protobuf:"bytes,5,opt,name=bankBrchId,proto3" json:"bankBrchId,omitempty"`     // 银行分支机构编码
	CurrencyId   string `protobuf:"bytes,6,opt,name=currencyId,proto3" json:"currencyId,omitempty"`     // 币种代码
	OpBankBrchId string `protobuf:"bytes,7,opt,name=opBankBrchId,proto3" json:"opBankBrchId,omitempty"` // 操作分支机构        hs
	Station      string `protobuf:"bytes,8,opt,name=station,proto3" json:"station,omitempty"`           // 站点地址            hs
	ClientId     string `protobuf:"bytes,9,opt,name=clientId,proto3" json:"clientId,omitempty"`         // 客户编号            hs
	Password     string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`        // 密码                hs
}

func (x *ReqQryAccountregister) Reset() {
	*x = ReqQryAccountregister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryAccountregister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryAccountregister) ProtoMessage() {}

func (x *ReqQryAccountregister) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryAccountregister.ProtoReflect.Descriptor instead.
func (*ReqQryAccountregister) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{115}
}

func (x *ReqQryAccountregister) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryAccountregister) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryAccountregister) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReqQryAccountregister) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ReqQryAccountregister) GetBankBrchId() string {
	if x != nil {
		return x.BankBrchId
	}
	return ""
}

func (x *ReqQryAccountregister) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *ReqQryAccountregister) GetOpBankBrchId() string {
	if x != nil {
		return x.OpBankBrchId
	}
	return ""
}

func (x *ReqQryAccountregister) GetStation() string {
	if x != nil {
		return x.Station
	}
	return ""
}

func (x *ReqQryAccountregister) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReqQryAccountregister) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// *
// @brief 查询银期签约关系应答
// @author <zhaow>
// @date 2018-11-20
// @note 协议号 client-proxy:<23048> proxy-server:<27048>
// @modify
type RspQryAccountregister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead      `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	IsLast          bool               `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                  // 最后一条响应消息
	AccountregField []*AccountregField `protobuf:"bytes,3,rep,name=accountregField,proto3" json:"accountregField,omitempty"` // 客户开销户信息表
}

func (x *RspQryAccountregister) Reset() {
	*x = RspQryAccountregister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryAccountregister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryAccountregister) ProtoMessage() {}

func (x *RspQryAccountregister) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryAccountregister.ProtoReflect.Descriptor instead.
func (*RspQryAccountregister) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{116}
}

func (x *RspQryAccountregister) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryAccountregister) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryAccountregister) GetAccountregField() []*AccountregField {
	if x != nil {
		return x.AccountregField
	}
	return nil
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqOptionInstrTradeCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32          `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                           // 请求id
	InvestorId      string         `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                          // 投资者代码           def=登录userid
	ContractId      string         `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                          // 合约代码             def=所有
	HedgeFlag       EHedgeFlagType `protobuf:"varint,4,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"` // 投机套保标志
	InputPrice      float64        `protobuf:"fixed64,5,opt,name=inputPrice,proto3" json:"inputPrice,omitempty"`                        // 期权合约报价
	UnderlyingPrice float64        `protobuf:"fixed64,6,opt,name=underlyingPrice,proto3" json:"underlyingPrice,omitempty"`              // 标的价格，填0则用昨结算价
	ExchangeId      EExchgID       `protobuf:"varint,7,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`     // 交易所代码           def=所有
	LocalPos        uint64         `protobuf:"varint,8,opt,name=localPos,proto3" json:"localPos,omitempty"`                             // tproxy专用
}

func (x *ReqOptionInstrTradeCost) Reset() {
	*x = ReqOptionInstrTradeCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOptionInstrTradeCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOptionInstrTradeCost) ProtoMessage() {}

func (x *ReqOptionInstrTradeCost) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOptionInstrTradeCost.ProtoReflect.Descriptor instead.
func (*ReqOptionInstrTradeCost) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{117}
}

func (x *ReqOptionInstrTradeCost) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqOptionInstrTradeCost) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqOptionInstrTradeCost) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqOptionInstrTradeCost) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ReqOptionInstrTradeCost) GetInputPrice() float64 {
	if x != nil {
		return x.InputPrice
	}
	return 0
}

func (x *ReqOptionInstrTradeCost) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *ReqOptionInstrTradeCost) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqOptionInstrTradeCost) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询期权交易成本应答
// @author <zhaow>
// @date 2018-10-24
// @note 协议号 client-proxy:<23032> proxy-server:<27032>
// @modify
type RspOptionInstrTradeCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead         *RspTradeHead        `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                 // 交易通用应答头
	IsLast            bool                 `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // 最后一条响应消息
	OptTradeCostField []*OptTradeCostField `protobuf:"bytes,3,rep,name=optTradeCostField,proto3" json:"optTradeCostField,omitempty"` // 期权交易成本明细
}

func (x *RspOptionInstrTradeCost) Reset() {
	*x = RspOptionInstrTradeCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOptionInstrTradeCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOptionInstrTradeCost) ProtoMessage() {}

func (x *RspOptionInstrTradeCost) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOptionInstrTradeCost.ProtoReflect.Descriptor instead.
func (*RspOptionInstrTradeCost) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{118}
}

func (x *RspOptionInstrTradeCost) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspOptionInstrTradeCost) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOptionInstrTradeCost) GetOptTradeCostField() []*OptTradeCostField {
	if x != nil {
		return x.OptTradeCostField
	}
	return nil
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqOptionInstrCommRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32          `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                           // 请求id
	InvestorId string         `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                          // 投资者代码           def=登录userid
	ContractId string         `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                          // 合约代码             def=所有
	ExchangeId EExchgID       `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`     // 交易所代码           def=所有
	LocalPos   uint64         `protobuf:"varint,5,opt,name=localPos,proto3" json:"localPos,omitempty"`                             // tproxy专用
	HedgeFlag  EHedgeFlagType `protobuf:"varint,6,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"` // 投机套保标志
}

func (x *ReqOptionInstrCommRate) Reset() {
	*x = ReqOptionInstrCommRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOptionInstrCommRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOptionInstrCommRate) ProtoMessage() {}

func (x *ReqOptionInstrCommRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOptionInstrCommRate.ProtoReflect.Descriptor instead.
func (*ReqOptionInstrCommRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{119}
}

func (x *ReqOptionInstrCommRate) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqOptionInstrCommRate) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqOptionInstrCommRate) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqOptionInstrCommRate) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqOptionInstrCommRate) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqOptionInstrCommRate) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

// *
// @brief 查询期权手续费率应答
// @author <zhaow>
// @date 2018-10-24
// @note 协议号 client-proxy:<23034> proxy-server:<27034>
// @modify
type RspOptionInstrCommRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead        *RspTradeHead       `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`               // 交易通用应答头
	IsLast           bool                `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                    // 最后一条响应消息
	OptCommRateField []*OptCommRateField `protobuf:"bytes,3,rep,name=optCommRateField,proto3" json:"optCommRateField,omitempty"` // 期权手续费率明细
}

func (x *RspOptionInstrCommRate) Reset() {
	*x = RspOptionInstrCommRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOptionInstrCommRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOptionInstrCommRate) ProtoMessage() {}

func (x *RspOptionInstrCommRate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOptionInstrCommRate.ProtoReflect.Descriptor instead.
func (*RspOptionInstrCommRate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{120}
}

func (x *RspOptionInstrCommRate) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspOptionInstrCommRate) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOptionInstrCommRate) GetOptCommRateField() []*OptCommRateField {
	if x != nil {
		return x.OptCommRateField
	}
	return nil
}

// *
// @brief 查询浮动盈亏算法请求
// @author <zhaow>
// @date 2018-11-13
// @note 协议号 client-proxy:<23037> proxy-server:<27037>
// @modify
type ReqPositionProfitAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	InvestorId string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码           def=登录userid
	LocalPos   uint64 `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`    // tproxy专用
}

func (x *ReqPositionProfitAlgorithm) Reset() {
	*x = ReqPositionProfitAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPositionProfitAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPositionProfitAlgorithm) ProtoMessage() {}

func (x *ReqPositionProfitAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPositionProfitAlgorithm.ProtoReflect.Descriptor instead.
func (*ReqPositionProfitAlgorithm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{121}
}

func (x *ReqPositionProfitAlgorithm) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqPositionProfitAlgorithm) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqPositionProfitAlgorithm) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询浮动盈亏算法应答
// @author <zhaow>
// @date 2018-11-13
// @note 协议号 client-proxy:<23038> proxy-server:<27038>
// @modify
type RspPositionProfitAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead            *RspTradeHead           `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                       // 交易通用应答头
	IsLast               bool                    `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                            // 最后一条响应消息
	Profitalgorithmfield []*ProfitAlgorithmField `protobuf:"bytes,3,rep,name=profitalgorithmfield,proto3" json:"profitalgorithmfield,omitempty"` // 期权手续费率明细
}

func (x *RspPositionProfitAlgorithm) Reset() {
	*x = RspPositionProfitAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPositionProfitAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPositionProfitAlgorithm) ProtoMessage() {}

func (x *RspPositionProfitAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPositionProfitAlgorithm.ProtoReflect.Descriptor instead.
func (*RspPositionProfitAlgorithm) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{122}
}

func (x *RspPositionProfitAlgorithm) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspPositionProfitAlgorithm) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspPositionProfitAlgorithm) GetProfitalgorithmfield() []*ProfitAlgorithmField {
	if x != nil {
		return x.Profitalgorithmfield
	}
	return nil
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqQryForQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	InvestorId      string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码           def=登录userid
	ContractId      string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码             def=所有
	ExchangeId      EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码           def=所有
	InsertTimeStart string   `protobuf:"bytes,5,opt,name=insertTimeStart,proto3" json:"insertTimeStart,omitempty"`            // 开始时间             def=所有
	InsertTimeEnd   string   `protobuf:"bytes,6,opt,name=insertTimeEnd,proto3" json:"insertTimeEnd,omitempty"`                // 结束时间             def=所有
	LocalPos        uint64   `protobuf:"varint,7,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryForQuote) Reset() {
	*x = ReqQryForQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryForQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryForQuote) ProtoMessage() {}

func (x *ReqQryForQuote) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryForQuote.ProtoReflect.Descriptor instead.
func (*ReqQryForQuote) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{123}
}

func (x *ReqQryForQuote) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryForQuote) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryForQuote) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryForQuote) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryForQuote) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *ReqQryForQuote) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

func (x *ReqQryForQuote) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 查询询价应答
// @author <zhaow>
// @date 2019-01-07
// @note 协议号 client-proxy:<23050> proxy-server:<27050>
// @modify
type RspQryForQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`         // 交易通用应答头
	IsLast        bool             `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`              // 最后一条响应消息
	ForQuoteField []*ForQuoteField `protobuf:"bytes,3,rep,name=forQuoteField,proto3" json:"forQuoteField,omitempty"` // 询价明细
}

func (x *RspQryForQuote) Reset() {
	*x = RspQryForQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryForQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryForQuote) ProtoMessage() {}

func (x *RspQryForQuote) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryForQuote.ProtoReflect.Descriptor instead.
func (*RspQryForQuote) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{124}
}

func (x *RspQryForQuote) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryForQuote) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryForQuote) GetForQuoteField() []*ForQuoteField {
	if x != nil {
		return x.ForQuoteField
	}
	return nil
}

// del brokerId经纪公司代码 investUnitID投资单元代码
type ReqForQuoteInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32         `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id
	ForQuoteInfo *ForQuoteInfo `protobuf:"bytes,2,opt,name=forQuoteInfo,proto3" json:"forQuoteInfo,omitempty"` // 询价录入明细
	LocalPos     uint64        `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
}

func (x *ReqForQuoteInsert) Reset() {
	*x = ReqForQuoteInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqForQuoteInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqForQuoteInsert) ProtoMessage() {}

func (x *ReqForQuoteInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqForQuoteInsert.ProtoReflect.Descriptor instead.
func (*ReqForQuoteInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{125}
}

func (x *ReqForQuoteInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqForQuoteInsert) GetForQuoteInfo() *ForQuoteInfo {
	if x != nil {
		return x.ForQuoteInfo
	}
	return nil
}

func (x *ReqForQuoteInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 询价录入请求响应
// @author <zhaow>
// @date 2019-01-07
// @note 协议号 client-proxy:<22016> proxy-server:<26016>
// @modify
type RspForQuoteInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`       // 交易通用应答头
	ForQuoteInfo *ForQuoteInfo `protobuf:"bytes,2,opt,name=forQuoteInfo,proto3" json:"forQuoteInfo,omitempty"` // 询价录入明细
}

func (x *RspForQuoteInsert) Reset() {
	*x = RspForQuoteInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspForQuoteInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspForQuoteInsert) ProtoMessage() {}

func (x *RspForQuoteInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspForQuoteInsert.ProtoReflect.Descriptor instead.
func (*RspForQuoteInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{126}
}

func (x *RspForQuoteInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspForQuoteInsert) GetForQuoteInfo() *ForQuoteInfo {
	if x != nil {
		return x.ForQuoteInfo
	}
	return nil
}

// *
// @brief 询价录入错误响应
// @author <zhaow>
// @date 2019-01-07
// @note 协议号 client-proxy:<22515> proxy-server:<26515>
// @modify
type ErrRtnForQuoteInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId      int32         `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`          // errid    0成功 非0失败
	ErrorMessage string        `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // 失败原因
	ForQuoteInfo *ForQuoteInfo `protobuf:"bytes,3,opt,name=forQuoteInfo,proto3" json:"forQuoteInfo,omitempty"` // 询价录入明细
	LocalPos     uint64        `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
}

func (x *ErrRtnForQuoteInsert) Reset() {
	*x = ErrRtnForQuoteInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrRtnForQuoteInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrRtnForQuoteInsert) ProtoMessage() {}

func (x *ErrRtnForQuoteInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrRtnForQuoteInsert.ProtoReflect.Descriptor instead.
func (*ErrRtnForQuoteInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{127}
}

func (x *ErrRtnForQuoteInsert) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *ErrRtnForQuoteInsert) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrRtnForQuoteInsert) GetForQuoteInfo() *ForQuoteInfo {
	if x != nil {
		return x.ForQuoteInfo
	}
	return nil
}

func (x *ErrRtnForQuoteInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货条件单委托报单请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22017> proxy-server:<26017>
// @modify
type ReqConOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32         `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id
	ConOrderInfo *ConOrderInfo `protobuf:"bytes,2,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"` // 条件单报单信息
	LocalPos     uint64        `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用
}

func (x *ReqConOrderInsert) Reset() {
	*x = ReqConOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConOrderInsert) ProtoMessage() {}

func (x *ReqConOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConOrderInsert.ProtoReflect.Descriptor instead.
func (*ReqConOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{128}
}

func (x *ReqConOrderInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqConOrderInsert) GetConOrderInfo() *ConOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

func (x *ReqConOrderInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货条件单委托报单响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22018> proxy-server:<26018>
// @modify
type RspConOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`       // 交易通用应答头
	ConOrderInfo *ConOrderInfo `protobuf:"bytes,2,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"` // 条件单报单信息
}

func (x *RspConOrderInsert) Reset() {
	*x = RspConOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConOrderInsert) ProtoMessage() {}

func (x *RspConOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConOrderInsert.ProtoReflect.Descriptor instead.
func (*RspConOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{129}
}

func (x *RspConOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspConOrderInsert) GetConOrderInfo() *ConOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

// del brokerId经纪公司代码 insertTimeStart开始时间 insertTimeEnd结束时间 investUnitID投资单元代码
type ReqQryConOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	InvestorId string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码     def=登录userid
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码       def=所有
	ExchangeId EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码     def=所有
	OrderSysId string   `protobuf:"bytes,5,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                      // 报单编号       def=所有 x1不可用
	LocalPos   uint64   `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryConOrderInfo) Reset() {
	*x = ReqQryConOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryConOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryConOrderInfo) ProtoMessage() {}

func (x *ReqQryConOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryConOrderInfo.ProtoReflect.Descriptor instead.
func (*ReqQryConOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{130}
}

func (x *ReqQryConOrderInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryConOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryConOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryConOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryConOrderInfo) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *ReqQryConOrderInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 条件单委托查询响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23052> proxy-server:<27052>
// @modify
type RspQryConOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead     `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	IsLast         bool              `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                // 最后一条响应消息
	ConOrderDetail []*ConOrderDetail `protobuf:"bytes,3,rep,name=conOrderDetail,proto3" json:"conOrderDetail,omitempty"` // 委托明细
}

func (x *RspQryConOrderInfo) Reset() {
	*x = RspQryConOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryConOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryConOrderInfo) ProtoMessage() {}

func (x *RspQryConOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryConOrderInfo.ProtoReflect.Descriptor instead.
func (*RspQryConOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{131}
}

func (x *RspQryConOrderInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryConOrderInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryConOrderInfo) GetConOrderDetail() []*ConOrderDetail {
	if x != nil {
		return x.ConOrderDetail
	}
	return nil
}

// *
// @brief 条件单报单通知
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22604> proxy-server:<26604>
// @modify
type RtnConOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConOrderInfo      *ConOrderInfo          `protobuf:"bytes,1,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"`                                              // 报单信息
	OrderSysId        string                 `protobuf:"bytes,2,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号             ctp x1
	OrderSubmitStatus EOrderSubmitStatusType `protobuf:"varint,3,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态         ctp x1
	OrderStatus       EOrderStatusType       `protobuf:"varint,4,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   // 报单状态             ctp x1
	StatusMsg         string                 `protobuf:"bytes,5,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息             ctp x1
	SameUserKey       *SameUserKey           `protobuf:"bytes,6,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示     ctp x1
	InsertDate        string                 `protobuf:"bytes,7,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期             ctp
	InsertTime        string                 `protobuf:"bytes,8,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  // 委托时间             ctp
	CancelTime        string                 `protobuf:"bytes,9,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  // 撤销时间             ctp
	UpdateTime        string                 `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                 // 最后修改时间         ctp
	LocalPos          uint64                 `protobuf:"varint,11,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                    // tproxy专用
}

func (x *RtnConOrder) Reset() {
	*x = RtnConOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnConOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnConOrder) ProtoMessage() {}

func (x *RtnConOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnConOrder.ProtoReflect.Descriptor instead.
func (*RtnConOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{132}
}

func (x *RtnConOrder) GetConOrderInfo() *ConOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

func (x *RtnConOrder) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *RtnConOrder) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *RtnConOrder) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *RtnConOrder) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *RtnConOrder) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RtnConOrder) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *RtnConOrder) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *RtnConOrder) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *RtnConOrder) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RtnConOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货条件单报单删除请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22019> proxy-server:<26019>
// @modify
type ReqConOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32            `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`            // 请求id
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
	LocalPos        uint64           `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`              // tproxy专用
}

func (x *ReqConOrderRemove) Reset() {
	*x = ReqConOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConOrderRemove) ProtoMessage() {}

func (x *ReqConOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConOrderRemove.ProtoReflect.Descriptor instead.
func (*ReqConOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{133}
}

func (x *ReqConOrderRemove) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqConOrderRemove) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

func (x *ReqConOrderRemove) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货条件单报单删除响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22020> proxy-server:<26020>
// @modify
type RspConOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
}

func (x *RspConOrderRemove) Reset() {
	*x = RspConOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConOrderRemove) ProtoMessage() {}

func (x *RspConOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConOrderRemove.ProtoReflect.Descriptor instead.
func (*RspConOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{134}
}

func (x *RspConOrderRemove) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspConOrderRemove) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

// *
// @brief 期货损赢单请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22025> proxy-server:<26025>
// @modify
type ReqTouchOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`          // 请求id
	TouchOrderInfo *TouchOrderInfo `protobuf:"bytes,2,opt,name=touchOrderInfo,proto3" json:"touchOrderInfo,omitempty"` // 损赢单报单信息
	LocalPos       uint64          `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`            // tproxy专用
}

func (x *ReqTouchOrderInsert) Reset() {
	*x = ReqTouchOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTouchOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTouchOrderInsert) ProtoMessage() {}

func (x *ReqTouchOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTouchOrderInsert.ProtoReflect.Descriptor instead.
func (*ReqTouchOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{135}
}

func (x *ReqTouchOrderInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqTouchOrderInsert) GetTouchOrderInfo() *TouchOrderInfo {
	if x != nil {
		return x.TouchOrderInfo
	}
	return nil
}

func (x *ReqTouchOrderInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货损赢单响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22026> proxy-server:<26026>
// @modify
type RspTouchOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead      *RspTradeHead   `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`           // 交易通用应答头
	TouchOrderInfo *TouchOrderInfo `protobuf:"bytes,2,opt,name=touchOrderInfo,proto3" json:"touchOrderInfo,omitempty"` // 损赢单信息
}

func (x *RspTouchOrderInsert) Reset() {
	*x = RspTouchOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTouchOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTouchOrderInsert) ProtoMessage() {}

func (x *RspTouchOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTouchOrderInsert.ProtoReflect.Descriptor instead.
func (*RspTouchOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{136}
}

func (x *RspTouchOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspTouchOrderInsert) GetTouchOrderInfo() *TouchOrderInfo {
	if x != nil {
		return x.TouchOrderInfo
	}
	return nil
}

// del brokerId经纪公司代码 insertTimeStart开始时间 insertTimeEnd结束时间 investUnitID投资单元代码
type ReqQryTouchOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	InvestorId string   `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码     def=登录userid
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码       def=所有
	ExchangeId EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码     def=所有
	OrderSysId string   `protobuf:"bytes,5,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                      // 报单编号       def=所有 x1不可用
	LocalPos   uint64   `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
}

func (x *ReqQryTouchOrderInfo) Reset() {
	*x = ReqQryTouchOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryTouchOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryTouchOrderInfo) ProtoMessage() {}

func (x *ReqQryTouchOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryTouchOrderInfo.ProtoReflect.Descriptor instead.
func (*ReqQryTouchOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{137}
}

func (x *ReqQryTouchOrderInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryTouchOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryTouchOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryTouchOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryTouchOrderInfo) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *ReqQryTouchOrderInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 损赢单委托查询响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23056> proxy-server:<27056>
// @modify
type RspQryTouchOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead        *RspTradeHead       `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`               // 交易通用应答头
	IsLast           bool                `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                    // 最后一条响应消息
	TouchOrderDetail []*TouchOrderDetail `protobuf:"bytes,3,rep,name=touchOrderDetail,proto3" json:"touchOrderDetail,omitempty"` // 损赢单明细
}

func (x *RspQryTouchOrderInfo) Reset() {
	*x = RspQryTouchOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryTouchOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryTouchOrderInfo) ProtoMessage() {}

func (x *RspQryTouchOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryTouchOrderInfo.ProtoReflect.Descriptor instead.
func (*RspQryTouchOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{138}
}

func (x *RspQryTouchOrderInfo) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryTouchOrderInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryTouchOrderInfo) GetTouchOrderDetail() []*TouchOrderDetail {
	if x != nil {
		return x.TouchOrderDetail
	}
	return nil
}

// *
// @brief 损赢单报单通知
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22605> proxy-server:<26605>
// @modify
type RtnTouchOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TouchOrderInfo    *TouchOrderInfo        `protobuf:"bytes,1,opt,name=touchOrderInfo,proto3" json:"touchOrderInfo,omitempty"`                                          // 报单信息
	OrderSysId        string                 `protobuf:"bytes,2,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号             ctp x1
	OrderSubmitStatus EOrderSubmitStatusType `protobuf:"varint,3,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态         ctp x1
	OrderStatus       EOrderStatusType       `protobuf:"varint,4,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   // 报单状态             ctp x1
	StatusMsg         string                 `protobuf:"bytes,5,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息             ctp x1
	SameUserKey       *SameUserKey           `protobuf:"bytes,6,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示     ctp x1
	InsertDate        string                 `protobuf:"bytes,7,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期             ctp
	InsertTime        string                 `protobuf:"bytes,8,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  // 委托时间             ctp
	CancelTime        string                 `protobuf:"bytes,9,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  // 撤销时间             ctp
	UpdateTime        string                 `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                 // 最后修改时间         ctp
	LocalPos          uint64                 `protobuf:"varint,11,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                    // tproxy专用
	ActiveTime        string                 `protobuf:"bytes,12,opt,name=activeTime,proto3" json:"activeTime,omitempty"`                                                 // 触发时间         ctp
}

func (x *RtnTouchOrder) Reset() {
	*x = RtnTouchOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnTouchOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnTouchOrder) ProtoMessage() {}

func (x *RtnTouchOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnTouchOrder.ProtoReflect.Descriptor instead.
func (*RtnTouchOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{139}
}

func (x *RtnTouchOrder) GetTouchOrderInfo() *TouchOrderInfo {
	if x != nil {
		return x.TouchOrderInfo
	}
	return nil
}

func (x *RtnTouchOrder) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *RtnTouchOrder) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *RtnTouchOrder) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *RtnTouchOrder) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *RtnTouchOrder) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RtnTouchOrder) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *RtnTouchOrder) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *RtnTouchOrder) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *RtnTouchOrder) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *RtnTouchOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *RtnTouchOrder) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

// *
// @brief 损赢单报单删除请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22027> proxy-server:<26027>
// @modify
type ReqTouchOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32            `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`            // 请求id
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
	LocalPos        uint64           `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`              // tproxy专用
}

func (x *ReqTouchOrderRemove) Reset() {
	*x = ReqTouchOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTouchOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTouchOrderRemove) ProtoMessage() {}

func (x *ReqTouchOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTouchOrderRemove.ProtoReflect.Descriptor instead.
func (*ReqTouchOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{140}
}

func (x *ReqTouchOrderRemove) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqTouchOrderRemove) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

func (x *ReqTouchOrderRemove) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 损赢单报单删除响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22028> proxy-server:<26028>
// @modify
type RspTouchOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	OrderActionInfo *OrderActionInfo `protobuf:"bytes,2,opt,name=orderActionInfo,proto3" json:"orderActionInfo,omitempty"` // 报单操作信息
}

func (x *RspTouchOrderRemove) Reset() {
	*x = RspTouchOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTouchOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTouchOrderRemove) ProtoMessage() {}

func (x *RspTouchOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTouchOrderRemove.ProtoReflect.Descriptor instead.
func (*RspTouchOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{141}
}

func (x *RspTouchOrderRemove) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspTouchOrderRemove) GetOrderActionInfo() *OrderActionInfo {
	if x != nil {
		return x.OrderActionInfo
	}
	return nil
}

// *
// @brief 期货预埋单委托报单请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22021> proxy-server:<26021>
// @modify
type ReqParkedOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32            `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`            // 请求id
	ParkedOrderInfo *ParkedOrderInfo `protobuf:"bytes,2,opt,name=parkedOrderInfo,proto3" json:"parkedOrderInfo,omitempty"` // 报单信息
	LocalPos        uint64           `protobuf:"varint,3,opt,name=localPos,proto3" json:"localPos,omitempty"`              // tproxy专用
}

func (x *ReqParkedOrderInsert) Reset() {
	*x = ReqParkedOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParkedOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParkedOrderInsert) ProtoMessage() {}

func (x *ReqParkedOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParkedOrderInsert.ProtoReflect.Descriptor instead.
func (*ReqParkedOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{142}
}

func (x *ReqParkedOrderInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqParkedOrderInsert) GetParkedOrderInfo() *ParkedOrderInfo {
	if x != nil {
		return x.ParkedOrderInfo
	}
	return nil
}

func (x *ReqParkedOrderInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货预埋单委托报单响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22022> proxy-server:<26022>
// @modify
type RspParkedOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead    `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	ParkedOrderInfo *ParkedOrderInfo `protobuf:"bytes,2,opt,name=parkedOrderInfo,proto3" json:"parkedOrderInfo,omitempty"` // 报单信息
}

func (x *RspParkedOrderInsert) Reset() {
	*x = RspParkedOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspParkedOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspParkedOrderInsert) ProtoMessage() {}

func (x *RspParkedOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspParkedOrderInsert.ProtoReflect.Descriptor instead.
func (*RspParkedOrderInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{143}
}

func (x *RspParkedOrderInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspParkedOrderInsert) GetParkedOrderInfo() *ParkedOrderInfo {
	if x != nil {
		return x.ParkedOrderInfo
	}
	return nil
}

// *
// @brief 期货预埋单委托查询请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23053> proxy-server:<27053>
// @modify
type ReqQryParkedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	LocalPos   uint64   `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // tproxy专用
	InvestorId string   `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码     def=登录userid
	ContractId string   `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码       def=所有
	ExchangeId EExchgID `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码     def=所有
}

func (x *ReqQryParkedOrder) Reset() {
	*x = ReqQryParkedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryParkedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryParkedOrder) ProtoMessage() {}

func (x *ReqQryParkedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryParkedOrder.ProtoReflect.Descriptor instead.
func (*ReqQryParkedOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{144}
}

func (x *ReqQryParkedOrder) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryParkedOrder) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryParkedOrder) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqQryParkedOrder) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQryParkedOrder) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 期货预埋单委托查询响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<23054> proxy-server:<27054>
// @modify
type RspQryParkedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead      `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`             // 交易通用应答头
	ParkedOrderInfo []*ParkedOrderInfo `protobuf:"bytes,2,rep,name=parkedOrderInfo,proto3" json:"parkedOrderInfo,omitempty"` // 报单信息
	IsLast          bool               `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`                  // 最后一条响应消息
}

func (x *RspQryParkedOrder) Reset() {
	*x = RspQryParkedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryParkedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryParkedOrder) ProtoMessage() {}

func (x *RspQryParkedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryParkedOrder.ProtoReflect.Descriptor instead.
func (*RspQryParkedOrder) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{145}
}

func (x *RspQryParkedOrder) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryParkedOrder) GetParkedOrderInfo() []*ParkedOrderInfo {
	if x != nil {
		return x.ParkedOrderInfo
	}
	return nil
}

func (x *RspQryParkedOrder) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// *
// @brief 期货预埋单委托删除请求
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22023> proxy-server:<26023>
// @modify
type ReqParkedOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`        // 请求id
	InvestorId    string `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`       // 投资者代码
	ParkedOrderId string `protobuf:"bytes,3,opt,name=parkedOrderId,proto3" json:"parkedOrderId,omitempty"` // 预埋报单编号
	LocalPos      uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`          // tproxy专用
}

func (x *ReqParkedOrderRemove) Reset() {
	*x = ReqParkedOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParkedOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParkedOrderRemove) ProtoMessage() {}

func (x *ReqParkedOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParkedOrderRemove.ProtoReflect.Descriptor instead.
func (*ReqParkedOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{146}
}

func (x *ReqParkedOrderRemove) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqParkedOrderRemove) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqParkedOrderRemove) GetParkedOrderId() string {
	if x != nil {
		return x.ParkedOrderId
	}
	return ""
}

func (x *ReqParkedOrderRemove) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 期货预埋单委托删除响应
// @author <zhaowei>
// @date 2018-6-28
// @note 协议号 client-proxy:<22024> proxy-server:<26024>
// @modify
type RspParkedOrderRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`         // 交易通用应答头
	InvestorId    string        `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`       // 投资者代码
	ParkedOrderId string        `protobuf:"bytes,3,opt,name=parkedOrderId,proto3" json:"parkedOrderId,omitempty"` //预埋报单编号
}

func (x *RspParkedOrderRemove) Reset() {
	*x = RspParkedOrderRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspParkedOrderRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspParkedOrderRemove) ProtoMessage() {}

func (x *RspParkedOrderRemove) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspParkedOrderRemove.ProtoReflect.Descriptor instead.
func (*RspParkedOrderRemove) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{147}
}

func (x *RspParkedOrderRemove) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspParkedOrderRemove) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RspParkedOrderRemove) GetParkedOrderId() string {
	if x != nil {
		return x.ParkedOrderId
	}
	return ""
}

// *
// @brief 从各种柜台系统获取的实时行情流
// @author <liyu>
// @date 2019-7-8
// @note 协议号 client-proxy:<22024> proxy-server:<26024>
// @modify
type RtnMblRealQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                   // 交易日
	InstrumentId       string  `protobuf:"bytes,2,opt,name=instrumentId,proto3" json:"instrumentId,omitempty"`               // 合约代码
	ExchangeId         string  `protobuf:"bytes,3,opt,name=exchangeId,proto3" json:"exchangeId,omitempty"`                   // 交易所代码
	LastPrice          float64 `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                   // 最新价
	PresettlementPrice float64 `protobuf:"fixed64,5,opt,name=presettlementPrice,proto3" json:"presettlementPrice,omitempty"` // 上次结算价
	PreClosePrice      float64 `protobuf:"fixed64,6,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`           // 昨收盘价
	OpenPrice          float64 `protobuf:"fixed64,7,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                   // 今开盘价
	HighestPrice       float64 `protobuf:"fixed64,8,opt,name=highestPrice,proto3" json:"highestPrice,omitempty"`             // 最高价
	LowestPrice        float64 `protobuf:"fixed64,9,opt,name=lowestPrice,proto3" json:"lowestPrice,omitempty"`               // 最低价
	Volume             int32   `protobuf:"varint,10,opt,name=volume,proto3" json:"volume,omitempty"`                         // 数量
	Turnover           float64 `protobuf:"fixed64,11,opt,name=turnover,proto3" json:"turnover,omitempty"`                    // 成交金额
	ClosePrice         float64 `protobuf:"fixed64,12,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                // 今收盘价
	SettlementPrice    float64 `protobuf:"fixed64,13,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`      // 本次结算价
	UpperLimitPrice    float64 `protobuf:"fixed64,14,opt,name=upperLimitPrice,proto3" json:"upperLimitPrice,omitempty"`      // 涨停板价
	LowerLimitPrice    float64 `protobuf:"fixed64,15,opt,name=lowerLimitPrice,proto3" json:"lowerLimitPrice,omitempty"`      // 跌停板价
	BidPrice1          float64 `protobuf:"fixed64,16,opt,name=bidPrice1,proto3" json:"bidPrice1,omitempty"`                  // 申买价一
	BidVolume1         int32   `protobuf:"varint,17,opt,name=bidVolume1,proto3" json:"bidVolume1,omitempty"`                 // 申买量一
	AskPrice1          float64 `protobuf:"fixed64,18,opt,name=askPrice1,proto3" json:"askPrice1,omitempty"`                  // 申卖价一
	AskVolume1         int32   `protobuf:"varint,19,opt,name=askVolume1,proto3" json:"askVolume1,omitempty"`                 // 申卖量一
	AveragePrice       float64 `protobuf:"fixed64,20,opt,name=averagePrice,proto3" json:"averagePrice,omitempty"`            // 当日均价
	ActionDay          string  `protobuf:"bytes,21,opt,name=actionDay,proto3" json:"actionDay,omitempty"`                    // 业务日期
	UpdateTime         string  `protobuf:"bytes,22,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                  // 更新时间
}

func (x *RtnMblRealQuot) Reset() {
	*x = RtnMblRealQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnMblRealQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnMblRealQuot) ProtoMessage() {}

func (x *RtnMblRealQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnMblRealQuot.ProtoReflect.Descriptor instead.
func (*RtnMblRealQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{148}
}

func (x *RtnMblRealQuot) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *RtnMblRealQuot) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *RtnMblRealQuot) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *RtnMblRealQuot) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetPresettlementPrice() float64 {
	if x != nil {
		return x.PresettlementPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *RtnMblRealQuot) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *RtnMblRealQuot) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetBidPrice1() float64 {
	if x != nil {
		return x.BidPrice1
	}
	return 0
}

func (x *RtnMblRealQuot) GetBidVolume1() int32 {
	if x != nil {
		return x.BidVolume1
	}
	return 0
}

func (x *RtnMblRealQuot) GetAskPrice1() float64 {
	if x != nil {
		return x.AskPrice1
	}
	return 0
}

func (x *RtnMblRealQuot) GetAskVolume1() int32 {
	if x != nil {
		return x.AskVolume1
	}
	return 0
}

func (x *RtnMblRealQuot) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *RtnMblRealQuot) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

func (x *RtnMblRealQuot) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// *
// @brief 云条件单报单参数查询请求
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 condition order iner:<30007>
// @modify
type ReqConditionOrderParamCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32                 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                             // 请求id
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"`                  // 云条件单信息明细
	OrderType       EQryConOrderType      `protobuf:"varint,3,opt,name=orderType,proto3,enum=fippb.EQryConOrderType" json:"orderType,omitempty"` // 条件单类型
	LocalPos        uint64                `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                               // tproxy专用
}

func (x *ReqConditionOrderParamCheck) Reset() {
	*x = ReqConditionOrderParamCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConditionOrderParamCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConditionOrderParamCheck) ProtoMessage() {}

func (x *ReqConditionOrderParamCheck) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConditionOrderParamCheck.ProtoReflect.Descriptor instead.
func (*ReqConditionOrderParamCheck) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{149}
}

func (x *ReqConditionOrderParamCheck) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqConditionOrderParamCheck) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

func (x *ReqConditionOrderParamCheck) GetOrderType() EQryConOrderType {
	if x != nil {
		return x.OrderType
	}
	return EQryConOrderType_QCOT_Null
}

func (x *ReqConditionOrderParamCheck) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 云条件单报单参数查询响应
// @author <fengwei>
// @date 2019-5-28
// @details
// @note 协议号 condition order iner:<30008>
type RspConditionOrderParamCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead        *RspTradeHead   `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                               // 交易通用应答头
	OrderVolumnLast  uint64          `protobuf:"varint,2,opt,name=orderVolumnLast,proto3" json:"orderVolumnLast,omitempty"`                  // 报单数量
	OrderVolumnPre   uint64          `protobuf:"varint,3,opt,name=orderVolumnPre,proto3" json:"orderVolumnPre,omitempty"`                    // 报单数量
	OffsetFlag       EOffsetFlagType `protobuf:"varint,4,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"` // 开平标志
	ConditionOrderId string          `protobuf:"bytes,5,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"`                 // 条件单编号
}

func (x *RspConditionOrderParamCheck) Reset() {
	*x = RspConditionOrderParamCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConditionOrderParamCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConditionOrderParamCheck) ProtoMessage() {}

func (x *RspConditionOrderParamCheck) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConditionOrderParamCheck.ProtoReflect.Descriptor instead.
func (*RspConditionOrderParamCheck) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{150}
}

func (x *RspConditionOrderParamCheck) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspConditionOrderParamCheck) GetOrderVolumnLast() uint64 {
	if x != nil {
		return x.OrderVolumnLast
	}
	return 0
}

func (x *RspConditionOrderParamCheck) GetOrderVolumnPre() uint64 {
	if x != nil {
		return x.OrderVolumnPre
	}
	return 0
}

func (x *RspConditionOrderParamCheck) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *RspConditionOrderParamCheck) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

// *
// @brief 云条件单订阅空持仓信息
// @author <wangyanlong>
// @date 2019-9-19
// @details
// @note 协议号 condition order iner:<30010>
type SubEmptyPositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int32                 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                             // 请求id
	OrderInfoDetail *ConditionOrderDetail `protobuf:"bytes,2,opt,name=orderInfoDetail,proto3" json:"orderInfoDetail,omitempty"`                  // 云条件单信息明细
	OrderType       EQryConOrderType      `protobuf:"varint,3,opt,name=orderType,proto3,enum=fippb.EQryConOrderType" json:"orderType,omitempty"` // 条件单类型
	LocalPos        uint64                `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                               // tproxy专用
}

func (x *SubEmptyPositionInfo) Reset() {
	*x = SubEmptyPositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubEmptyPositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubEmptyPositionInfo) ProtoMessage() {}

func (x *SubEmptyPositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubEmptyPositionInfo.ProtoReflect.Descriptor instead.
func (*SubEmptyPositionInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{151}
}

func (x *SubEmptyPositionInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SubEmptyPositionInfo) GetOrderInfoDetail() *ConditionOrderDetail {
	if x != nil {
		return x.OrderInfoDetail
	}
	return nil
}

func (x *SubEmptyPositionInfo) GetOrderType() EQryConOrderType {
	if x != nil {
		return x.OrderType
	}
	return EQryConOrderType_QCOT_Null
}

func (x *SubEmptyPositionInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 空持仓信息通知
// @author <wangyanlong>
// @date 2019-9-19
// @details
// @note 协议号 condition order iner:<30011>
type NotifyEmptyPositionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string          `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                             // 合约代码
	ExchangeId EExchgID        `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`        // 交易所编码
	InvestorId string          `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                             // 投资者代码
	LocalPos   uint64          `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`                                // tproxy专用
	Direction  EDirectionType  `protobuf:"varint,5,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`    // 买卖标志
	OffsetFlag EOffsetFlagType `protobuf:"varint,6,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"` // 开平标志
	HedgeFlag  EHedgeFlagType  `protobuf:"varint,7,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`    // 投机套保标志
}

func (x *NotifyEmptyPositionInfo) Reset() {
	*x = NotifyEmptyPositionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyEmptyPositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEmptyPositionInfo) ProtoMessage() {}

func (x *NotifyEmptyPositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEmptyPositionInfo.ProtoReflect.Descriptor instead.
func (*NotifyEmptyPositionInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{152}
}

func (x *NotifyEmptyPositionInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NotifyEmptyPositionInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *NotifyEmptyPositionInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *NotifyEmptyPositionInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *NotifyEmptyPositionInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *NotifyEmptyPositionInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *NotifyEmptyPositionInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

// *
// @brief 空持仓信息通知
// @author <daihouda>
// @date 2020-01-04
// @details
// @note 协议号 trade service iner:<30012>
type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id      旧版条件单必须
	LocalPos  uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`   // tproxy专用 交易中继改造必须
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{153}
}

func (x *SessionInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SessionInfo) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 服务状态通知
// @author <wangyanlong>
// @date 2020-07-07
// @details
// @note 协议号 OP_NOTIFY_TRADE_SERVICE_STATUS:<30015>
type NotifyServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType   ETradeServiceType   `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3,enum=fippb.ETradeServiceType" json:"service_type,omitempty"`         // 服务类型
	ServiceStatus ETradeServiceStatus `protobuf:"varint,2,opt,name=service_status,json=serviceStatus,proto3,enum=fippb.ETradeServiceStatus" json:"service_status,omitempty"` // 服务状态
	ServiceIp     string              `protobuf:"bytes,3,opt,name=service_ip,json=serviceIp,proto3" json:"service_ip,omitempty"`                                             // 服务IP
	ServicePid    string              `protobuf:"bytes,4,opt,name=service_pid,json=servicePid,proto3" json:"service_pid,omitempty"`                                          // 服务PID
}

func (x *NotifyServiceStatus) Reset() {
	*x = NotifyServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServiceStatus) ProtoMessage() {}

func (x *NotifyServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServiceStatus.ProtoReflect.Descriptor instead.
func (*NotifyServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{154}
}

func (x *NotifyServiceStatus) GetServiceType() ETradeServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ETradeServiceType_ETST_NULL
}

func (x *NotifyServiceStatus) GetServiceStatus() ETradeServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return ETradeServiceStatus_ETSS_NULL
}

func (x *NotifyServiceStatus) GetServiceIp() string {
	if x != nil {
		return x.ServiceIp
	}
	return ""
}

func (x *NotifyServiceStatus) GetServicePid() string {
	if x != nil {
		return x.ServicePid
	}
	return ""
}

// *
// @brief 服务可用容量通知
// @author <wangyanlong>
// @date 2020-07-07
// @details
// @note 协议号 OP_NOTIFY_AVAILABLE_CAPACITY:<30016>
type NotifyAvailableCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType       ETradeServiceType `protobuf:"varint,1,opt,name=service_type,json=serviceType,proto3,enum=fippb.ETradeServiceType" json:"service_type,omitempty"` // 服务类型
	ChannelType       EApiChannelType   `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3,enum=fippb.EApiChannelType" json:"channel_type,omitempty"`   // 通道类型
	AvailableCapacity uint64            `protobuf:"varint,3,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`            // 通道可用容量
}

func (x *NotifyAvailableCapacity) Reset() {
	*x = NotifyAvailableCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyAvailableCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAvailableCapacity) ProtoMessage() {}

func (x *NotifyAvailableCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAvailableCapacity.ProtoReflect.Descriptor instead.
func (*NotifyAvailableCapacity) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{155}
}

func (x *NotifyAvailableCapacity) GetServiceType() ETradeServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ETradeServiceType_ETST_NULL
}

func (x *NotifyAvailableCapacity) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *NotifyAvailableCapacity) GetAvailableCapacity() uint64 {
	if x != nil {
		return x.AvailableCapacity
	}
	return 0
}

// *
// @brief 交易中继向柜台接入模块发送登录请求
// @author <fengwei>
// @date 2020-07-16
// @details
// @note 协议号 OP_INNER_REQ_USER_LOGIN:<30017>
type ReqUserLoginInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32             `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	UserId           string            `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号                ctp_max(15) x1_max(12)
	Password         string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                   // 密码,                   max(40)
	ChannelType      EApiChannelType   `protobuf:"varint,4,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	BrokerId         string            `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 经纪公司代码           ctp_M x1_N, max(10)
	UserProductInfo  string            `protobuf:"bytes,6,opt,name=userProductInfo,proto3" json:"userProductInfo,omitempty"`                     // 用户端产品信息         ctp_NM x1_N def="" max(10)
	ClientIpAddress  string            `protobuf:"bytes,7,opt,name=clientIpAddress,proto3" json:"clientIpAddress,omitempty"`                     // 终端IP地址
	MacAddress       string            `protobuf:"bytes,8,opt,name=macAddress,proto3" json:"macAddress,omitempty"`                               // Mac地址
	RegisterAuthInfo *RegisterAuthInfo `protobuf:"bytes,9,opt,name=registerAuthInfo,proto3" json:"registerAuthInfo,omitempty"`                   // 穿透式监管需要的信息
	ClientPort       string            `protobuf:"bytes,10,opt,name=clientPort,proto3" json:"clientPort,omitempty"`                              // 终端端口
	LocalPos         uint64            `protobuf:"varint,11,opt,name=localPos,proto3" json:"localPos,omitempty"`                                 // tproxy专用
}

func (x *ReqUserLoginInner) Reset() {
	*x = ReqUserLoginInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserLoginInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserLoginInner) ProtoMessage() {}

func (x *ReqUserLoginInner) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserLoginInner.ProtoReflect.Descriptor instead.
func (*ReqUserLoginInner) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{156}
}

func (x *ReqUserLoginInner) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqUserLoginInner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqUserLoginInner) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqUserLoginInner) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqUserLoginInner) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqUserLoginInner) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *ReqUserLoginInner) GetClientIpAddress() string {
	if x != nil {
		return x.ClientIpAddress
	}
	return ""
}

func (x *ReqUserLoginInner) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReqUserLoginInner) GetRegisterAuthInfo() *RegisterAuthInfo {
	if x != nil {
		return x.RegisterAuthInfo
	}
	return nil
}

func (x *ReqUserLoginInner) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *ReqUserLoginInner) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 柜台接入模块内部消息通知--柜台连接成功
// @author <wangyanlong>
// @date 2020-07-18
// @details
// @note 协议号 OP_INNER_REQ_USER_LOGIN:<30018>
type RspUserConnectInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号                ctp_max(15) x1_max(12)
}

func (x *RspUserConnectInner) Reset() {
	*x = RspUserConnectInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserConnectInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserConnectInner) ProtoMessage() {}

func (x *RspUserConnectInner) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserConnectInner.ProtoReflect.Descriptor instead.
func (*RspUserConnectInner) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{157}
}

func (x *RspUserConnectInner) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUserConnectInner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 柜台接入模块内部消息通知--柜台连接断开
// @author <wangyanlong>
// @date 2020-07-18
// @details
// @note 协议号 OP_INNER_REQ_USER_LOGIN:<30019>
type RspUserDisConnectInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号                ctp_max(15) x1_max(12)
}

func (x *RspUserDisConnectInner) Reset() {
	*x = RspUserDisConnectInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserDisConnectInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserDisConnectInner) ProtoMessage() {}

func (x *RspUserDisConnectInner) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserDisConnectInner.ProtoReflect.Descriptor instead.
func (*RspUserDisConnectInner) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{158}
}

func (x *RspUserDisConnectInner) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUserDisConnectInner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 柜台接入模块内部消息通知--认证响应
// @author <wangyanlong>
// @date 2020-07-18
// @details
// @note 协议号 OP_INNER_REQ_USER_LOGIN:<30019>
type RspAuthenticate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号                ctp_max(15) x1_max(12)
}

func (x *RspAuthenticate) Reset() {
	*x = RspAuthenticate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAuthenticate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAuthenticate) ProtoMessage() {}

func (x *RspAuthenticate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAuthenticate.ProtoReflect.Descriptor instead.
func (*RspAuthenticate) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{159}
}

func (x *RspAuthenticate) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspAuthenticate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief vm之间条件已连接的cid
// @author <fengwei>
// @date 2020-08-07
// @details
// @note 协议号 OP_INNER_NOTIFY_CONNECTED_CID:<30021>
type NotifyConnectedCid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId int32 `protobuf:"varint,1,opt,name=vmId,proto3" json:"vmId,omitempty"` // 所属vm的id
	CId  int32 `protobuf:"varint,2,opt,name=cId,proto3" json:"cId,omitempty"`   // 已建立连接的cid
}

func (x *NotifyConnectedCid) Reset() {
	*x = NotifyConnectedCid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyConnectedCid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyConnectedCid) ProtoMessage() {}

func (x *NotifyConnectedCid) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyConnectedCid.ProtoReflect.Descriptor instead.
func (*NotifyConnectedCid) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{160}
}

func (x *NotifyConnectedCid) GetVmId() int32 {
	if x != nil {
		return x.VmId
	}
	return 0
}

func (x *NotifyConnectedCid) GetCId() int32 {
	if x != nil {
		return x.CId
	}
	return 0
}

// *
// @brief 行情登录请求
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_Q_QUOT_USER_LOGIN:<25021>
type ReqUserQuotLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     int32           `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                                // 请求id
	UserId        string          `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号
	Password      string          `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                   // 密码,
	ChannelType   EApiChannelType `protobuf:"varint,4,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	BrokerId      string          `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                   // 经纪公司代码
	LocalPos      uint64          `protobuf:"varint,6,opt,name=localPos,proto3" json:"localPos,omitempty"`                                  // 到柜台连接实例标识
	HeartBeatTime uint64          `protobuf:"varint,7,opt,name=heartBeatTime,proto3" json:"heartBeatTime,omitempty"`                        // 心跳超时时间(单位S)
}

func (x *ReqUserQuotLogin) Reset() {
	*x = ReqUserQuotLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserQuotLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserQuotLogin) ProtoMessage() {}

func (x *ReqUserQuotLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserQuotLogin.ProtoReflect.Descriptor instead.
func (*ReqUserQuotLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{161}
}

func (x *ReqUserQuotLogin) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqUserQuotLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqUserQuotLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqUserQuotLogin) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *ReqUserQuotLogin) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *ReqUserQuotLogin) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqUserQuotLogin) GetHeartBeatTime() uint64 {
	if x != nil {
		return x.HeartBeatTime
	}
	return 0
}

// *
// @brief 行情登录响应
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_R_QUOT_USER_LOGIN:<25022>
type RspUserQuotLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead   `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                                 // 通用头
	UserId      string          `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // 用户账号
	ChannelType EApiChannelType `protobuf:"varint,3,opt,name=channelType,proto3,enum=fippb.EApiChannelType" json:"channelType,omitempty"` // 交易通道类型
	SameUserKey *SameUserKey    `protobuf:"bytes,4,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                             // 同名用户唯一标示
	ExchgTime   *ExchgTime      `protobuf:"bytes,5,opt,name=exchgTime,proto3" json:"exchgTime,omitempty"`                                 // 各交易所时间
	TradingDay  string          `protobuf:"bytes,6,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                               // 交易日
}

func (x *RspUserQuotLogin) Reset() {
	*x = RspUserQuotLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUserQuotLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUserQuotLogin) ProtoMessage() {}

func (x *RspUserQuotLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUserQuotLogin.ProtoReflect.Descriptor instead.
func (*RspUserQuotLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{162}
}

func (x *RspUserQuotLogin) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspUserQuotLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspUserQuotLogin) GetChannelType() EApiChannelType {
	if x != nil {
		return x.ChannelType
	}
	return EApiChannelType_EAC_Null
}

func (x *RspUserQuotLogin) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *RspUserQuotLogin) GetExchgTime() *ExchgTime {
	if x != nil {
		return x.ExchgTime
	}
	return nil
}

func (x *RspUserQuotLogin) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

// *
// @brief 行情连接释放请求
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_Q_QUOT_RELEASE_USER:<25023>
type ReqQuotReleaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id
	LocalPos  uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`   // 实例标识
}

func (x *ReqQuotReleaseUser) Reset() {
	*x = ReqQuotReleaseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotReleaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotReleaseUser) ProtoMessage() {}

func (x *ReqQuotReleaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotReleaseUser.ProtoReflect.Descriptor instead.
func (*ReqQuotReleaseUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{163}
}

func (x *ReqQuotReleaseUser) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQuotReleaseUser) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief 行情连接释放响应
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_R_QUOT_RELEASE_USER:<25024>
type RspQuotReleaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
}

func (x *RspQuotReleaseUser) Reset() {
	*x = RspQuotReleaseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotReleaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotReleaseUser) ProtoMessage() {}

func (x *RspQuotReleaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotReleaseUser.ProtoReflect.Descriptor instead.
func (*RspQuotReleaseUser) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{164}
}

func (x *RspQuotReleaseUser) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 行情订阅请求
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_Q_QUOT_SUBSCRIBE:<26049>
type ReqQuotSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	LocalPos   uint64   `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // 实例标识
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
}

func (x *ReqQuotSubscribe) Reset() {
	*x = ReqQuotSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotSubscribe) ProtoMessage() {}

func (x *ReqQuotSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotSubscribe.ProtoReflect.Descriptor instead.
func (*ReqQuotSubscribe) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{165}
}

func (x *ReqQuotSubscribe) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQuotSubscribe) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQuotSubscribe) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQuotSubscribe) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 行情订阅响应
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_R_QUOT_SUBSCRIBE:<26050>
type RspQuotSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead  *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                        // 通用头
	ContractId string        `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId EExchgID      `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
}

func (x *RspQuotSubscribe) Reset() {
	*x = RspQuotSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotSubscribe) ProtoMessage() {}

func (x *RspQuotSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotSubscribe.ProtoReflect.Descriptor instead.
func (*RspQuotSubscribe) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{166}
}

func (x *RspQuotSubscribe) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQuotSubscribe) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RspQuotSubscribe) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 行情取消订阅请求
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_Q_QUOT_UNSUBSCRIBE:<26051>
type ReqQuotUnSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32    `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id
	LocalPos   uint64   `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // 实例标识
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
}

func (x *ReqQuotUnSubscribe) Reset() {
	*x = ReqQuotUnSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotUnSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotUnSubscribe) ProtoMessage() {}

func (x *ReqQuotUnSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotUnSubscribe.ProtoReflect.Descriptor instead.
func (*ReqQuotUnSubscribe) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{167}
}

func (x *ReqQuotUnSubscribe) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQuotUnSubscribe) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQuotUnSubscribe) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqQuotUnSubscribe) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 行情取消订阅响应
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_R_QUOT_UNSUBSCRIBE:<26052>
type RspQuotUnSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead  *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                        // 通用头
	ContractId string        `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId EExchgID      `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所编码
}

func (x *RspQuotUnSubscribe) Reset() {
	*x = RspQuotUnSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotUnSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotUnSubscribe) ProtoMessage() {}

func (x *RspQuotUnSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotUnSubscribe.ProtoReflect.Descriptor instead.
func (*RspQuotUnSubscribe) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{168}
}

func (x *RspQuotUnSubscribe) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQuotUnSubscribe) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RspQuotUnSubscribe) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 行情状态设置请求
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_Q_QUOT_STATUS_SET:<26053>
type ReqQuotStatusSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id
	LocalPos  uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`   // 实例标识
	IsActive  bool   `protobuf:"varint,3,opt,name=isActive,proto3" json:"isActive,omitempty"`   // 是否激活行情
}

func (x *ReqQuotStatusSet) Reset() {
	*x = ReqQuotStatusSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotStatusSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotStatusSet) ProtoMessage() {}

func (x *ReqQuotStatusSet) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotStatusSet.ProtoReflect.Descriptor instead.
func (*ReqQuotStatusSet) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{169}
}

func (x *ReqQuotStatusSet) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQuotStatusSet) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQuotStatusSet) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// *
// @brief 行情状态设置响应
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_R_QUOT_STATUS_SET:<26054>
type RspQuotStatusSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
	IsActive  bool          `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`  // 是否激活行情
}

func (x *RspQuotStatusSet) Reset() {
	*x = RspQuotStatusSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotStatusSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotStatusSet) ProtoMessage() {}

func (x *RspQuotStatusSet) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotStatusSet.ProtoReflect.Descriptor instead.
func (*RspQuotStatusSet) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{170}
}

func (x *RspQuotStatusSet) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQuotStatusSet) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// *
// @brief HS FENS模式下最优站点查询请求
// @author <wangyanlong>
// @date 2021-07-15
// @details
// @note 协议号 OP_Q_QUOT_OPTIMAL_STATION:<26055>
type ReqQuotOptimalStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id
	LocalPos  uint64 `protobuf:"varint,2,opt,name=localPos,proto3" json:"localPos,omitempty"`   // 实例标识
}

func (x *ReqQuotOptimalStation) Reset() {
	*x = ReqQuotOptimalStation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotOptimalStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotOptimalStation) ProtoMessage() {}

func (x *ReqQuotOptimalStation) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotOptimalStation.ProtoReflect.Descriptor instead.
func (*ReqQuotOptimalStation) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{171}
}

func (x *ReqQuotOptimalStation) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQuotOptimalStation) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// *
// @brief HS FENS模式下最优站点查询响应
// @author <wangyanlong>
// @date 2021-07-15
// @details
// @note 协议号 OP_R_QUOT_OPTIMAL_STATION:<26056>
type RspQuotOptimalStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead   *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`     // 通用头
	StationInfo *StationInfo  `protobuf:"bytes,2,opt,name=stationInfo,proto3" json:"stationInfo,omitempty"` // 站点信息
}

func (x *RspQuotOptimalStation) Reset() {
	*x = RspQuotOptimalStation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotOptimalStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotOptimalStation) ProtoMessage() {}

func (x *RspQuotOptimalStation) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotOptimalStation.ProtoReflect.Descriptor instead.
func (*RspQuotOptimalStation) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{172}
}

func (x *RspQuotOptimalStation) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQuotOptimalStation) GetStationInfo() *StationInfo {
	if x != nil {
		return x.StationInfo
	}
	return nil
}

// *
// @brief 行情错误通知
// @author <wangyanlong>
// @date 2020-11-30
// @details
// @note 协议号 OP_T_QUOT_ERR_NOTIFY:<26612>
type NotifyQuotErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
}

func (x *NotifyQuotErr) Reset() {
	*x = NotifyQuotErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyQuotErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyQuotErr) ProtoMessage() {}

func (x *NotifyQuotErr) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyQuotErr.ProtoReflect.Descriptor instead.
func (*NotifyQuotErr) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{173}
}

func (x *NotifyQuotErr) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 行情心跳通知
// @author <wangyanlong>
// @date 2021-03-02
// @details
// @note 协议号 OP_T_QUOT_HEART:<26614>
type NotifyQuotHeart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
}

func (x *NotifyQuotHeart) Reset() {
	*x = NotifyQuotHeart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyQuotHeart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyQuotHeart) ProtoMessage() {}

func (x *NotifyQuotHeart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyQuotHeart.ProtoReflect.Descriptor instead.
func (*NotifyQuotHeart) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{174}
}

func (x *NotifyQuotHeart) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

// *
// @brief 行情连接成功通知
// @author <fengbaoxin>
// @date 2020-12-04
// @details
// @note 协议号 OP_T_QUOT_CONNECTED_NOTIFY:<26613>
type NotifyQuotConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 通用头
	UserId    string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       // 用户账号                ctp_max(15) x1_max(12)
}

func (x *NotifyQuotConnected) Reset() {
	*x = NotifyQuotConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyQuotConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyQuotConnected) ProtoMessage() {}

func (x *NotifyQuotConnected) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyQuotConnected.ProtoReflect.Descriptor instead.
func (*NotifyQuotConnected) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{175}
}

func (x *NotifyQuotConnected) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *NotifyQuotConnected) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 申请组合录入请求
// @author <wangyanlong>
// @date 2021-11-17
// @note 协议号 client-proxy:<22041> proxy-server:<26057>
// @modify
type ReqCombActionInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos      uint64             `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`                                         // 实例标识
	RequestId     int32              `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`                                       // 请求id
	InvestorId    string             `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      // 投资者代码
	ContractId    string             `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      // 合约代码
	CombActionRef string             `protobuf:"bytes,5,opt,name=combActionRef,proto3" json:"combActionRef,omitempty"`                                // 组合引用
	Direction     EDirectionType     `protobuf:"varint,6,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`             // 买卖方向
	Volumn        int32              `protobuf:"varint,7,opt,name=volumn,proto3" json:"volumn,omitempty"`                                             // 数量
	CombDirection ECombDirectionType `protobuf:"varint,8,opt,name=combDirection,proto3,enum=fippb.ECombDirectionType" json:"combDirection,omitempty"` // 组合指令方向
	HedgeFlag     EHedgeFlagType     `protobuf:"varint,9,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投保类型
	ExchangeId    EExchgID           `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                // 交易所代码
}

func (x *ReqCombActionInsert) Reset() {
	*x = ReqCombActionInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCombActionInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCombActionInsert) ProtoMessage() {}

func (x *ReqCombActionInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCombActionInsert.ProtoReflect.Descriptor instead.
func (*ReqCombActionInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{176}
}

func (x *ReqCombActionInsert) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqCombActionInsert) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqCombActionInsert) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ReqCombActionInsert) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqCombActionInsert) GetCombActionRef() string {
	if x != nil {
		return x.CombActionRef
	}
	return ""
}

func (x *ReqCombActionInsert) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *ReqCombActionInsert) GetVolumn() int32 {
	if x != nil {
		return x.Volumn
	}
	return 0
}

func (x *ReqCombActionInsert) GetCombDirection() ECombDirectionType {
	if x != nil {
		return x.CombDirection
	}
	return ECombDirectionType_ECDT_NULL
}

func (x *ReqCombActionInsert) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ReqCombActionInsert) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 申请组合录入响应
// @author <wangyanlong>
// @date 2021-11-17
// @note 协议号 client-proxy:<22042> proxy-server:<26058>
// @modify
type RspCombActionInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead     *RspTradeHead      `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                                        // 通用头
	InvestorId    string             `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      // 投资者代码
	ContractId    string             `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      // 合约代码
	CombActionRef string             `protobuf:"bytes,4,opt,name=combActionRef,proto3" json:"combActionRef,omitempty"`                                // 组合引用
	Direction     EDirectionType     `protobuf:"varint,5,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`             // 买卖方向
	Volumn        int32              `protobuf:"varint,6,opt,name=volumn,proto3" json:"volumn,omitempty"`                                             // 数量
	CombDirection ECombDirectionType `protobuf:"varint,7,opt,name=combDirection,proto3,enum=fippb.ECombDirectionType" json:"combDirection,omitempty"` // 组合指令方向
	HedgeFlag     EHedgeFlagType     `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投保类型
	ExchangeId    EExchgID           `protobuf:"varint,9,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                 // 交易所代码
}

func (x *RspCombActionInsert) Reset() {
	*x = RspCombActionInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCombActionInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCombActionInsert) ProtoMessage() {}

func (x *RspCombActionInsert) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCombActionInsert.ProtoReflect.Descriptor instead.
func (*RspCombActionInsert) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{177}
}

func (x *RspCombActionInsert) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspCombActionInsert) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RspCombActionInsert) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RspCombActionInsert) GetCombActionRef() string {
	if x != nil {
		return x.CombActionRef
	}
	return ""
}

func (x *RspCombActionInsert) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *RspCombActionInsert) GetVolumn() int32 {
	if x != nil {
		return x.Volumn
	}
	return 0
}

func (x *RspCombActionInsert) GetCombDirection() ECombDirectionType {
	if x != nil {
		return x.CombDirection
	}
	return ECombDirectionType_ECDT_NULL
}

func (x *RspCombActionInsert) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *RspCombActionInsert) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// *
// @brief 组合录入回报
// @author <wangyanlong>
// @date 2021-11-17
// @note 协议号 client-proxy:<22609> proxy-server:<26617>
// @modify
type RtnCombAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos          uint64                 `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`                                                      // 实例标识
	InvestorId        string                 `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                                   // 投资者代码
	ContractId        string                 `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                                                   // 合约代码
	CombActionRef     string                 `protobuf:"bytes,4,opt,name=combActionRef,proto3" json:"combActionRef,omitempty"`                                             // 组合引用
	Direction         EDirectionType         `protobuf:"varint,5,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`                          // 买卖方向
	Volumn            int32                  `protobuf:"varint,6,opt,name=volumn,proto3" json:"volumn,omitempty"`                                                          // 数量
	CombDirection     ECombDirectionType     `protobuf:"varint,7,opt,name=combDirection,proto3,enum=fippb.ECombDirectionType" json:"combDirection,omitempty"`              // 组合指令方向
	HedgeFlag         EHedgeFlagType         `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`                          // 投保类型
	ExchangeId        EExchgID               `protobuf:"varint,9,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                              // 交易所代码
	OrderActionStatus EOrderActionStatusType `protobuf:"varint,10,opt,name=orderActionStatus,proto3,enum=fippb.EOrderActionStatusType" json:"orderActionStatus,omitempty"` // 报单提交状态
	FrontId           int32                  `protobuf:"varint,11,opt,name=frontId,proto3" json:"frontId,omitempty"`                                                       // 前置编号
	SessionId         int64                  `protobuf:"varint,12,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                                                   // 会话ID
	StatusMsg         string                 `protobuf:"bytes,13,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息
}

func (x *RtnCombAction) Reset() {
	*x = RtnCombAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnCombAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnCombAction) ProtoMessage() {}

func (x *RtnCombAction) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnCombAction.ProtoReflect.Descriptor instead.
func (*RtnCombAction) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{178}
}

func (x *RtnCombAction) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *RtnCombAction) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RtnCombAction) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RtnCombAction) GetCombActionRef() string {
	if x != nil {
		return x.CombActionRef
	}
	return ""
}

func (x *RtnCombAction) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *RtnCombAction) GetVolumn() int32 {
	if x != nil {
		return x.Volumn
	}
	return 0
}

func (x *RtnCombAction) GetCombDirection() ECombDirectionType {
	if x != nil {
		return x.CombDirection
	}
	return ECombDirectionType_ECDT_NULL
}

func (x *RtnCombAction) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *RtnCombAction) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RtnCombAction) GetOrderActionStatus() EOrderActionStatusType {
	if x != nil {
		return x.OrderActionStatus
	}
	return EOrderActionStatusType_EOAS_Null
}

func (x *RtnCombAction) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *RtnCombAction) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *RtnCombAction) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// *
// @brief 交易中继版本号查询请求
// @author <tandaping>
// @date 2022-02-21
// @note 协议号 client-proxy:<22043> proxy-server:<22044>
// @modify
type ReqQryVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // 请求id
}

func (x *ReqQryVersion) Reset() {
	*x = ReqQryVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryVersion) ProtoMessage() {}

func (x *ReqQryVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryVersion.ProtoReflect.Descriptor instead.
func (*ReqQryVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{179}
}

func (x *ReqQryVersion) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// *
// @brief 交易中继版本号查询响应
// @author <tandaping>
// @date 2022-02-21
// @note 协议号 client-proxy:<22043> proxy-server:<22044>
// @modify
type RspQryVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`       // 版本号
	BuildDate  string `protobuf:"bytes,3,opt,name=buildDate,proto3" json:"buildDate,omitempty"`   // 编译日期
	UpdateDate string `protobuf:"bytes,4,opt,name=updateDate,proto3" json:"updateDate,omitempty"` // 更新日期
	PreVersion string `protobuf:"bytes,5,opt,name=preVersion,proto3" json:"preVersion,omitempty"` // 旧版本
	Note       string `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`             // 说明
}

func (x *RspQryVersion) Reset() {
	*x = RspQryVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryVersion) ProtoMessage() {}

func (x *RspQryVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryVersion.ProtoReflect.Descriptor instead.
func (*RspQryVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{180}
}

func (x *RspQryVersion) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspQryVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RspQryVersion) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *RspQryVersion) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *RspQryVersion) GetPreVersion() string {
	if x != nil {
		return x.PreVersion
	}
	return ""
}

func (x *RspQryVersion) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// *
// @brief 保证金监管系统账户密钥查询请求
// @author <tandaping>
// @date 2022-04-20
// @note 协议号 client-proxy:<23061> proxy-server:<27067>
// @modify
type ReqQryCFMMCAccountKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos   uint64 `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`    // 实例标识
	RequestId  int32  `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id
	BrokerID   string `protobuf:"bytes,3,opt,name=brokerID,proto3" json:"brokerID,omitempty"`     // 经纪公司代码
	InvestorId string `protobuf:"bytes,4,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码
}

func (x *ReqQryCFMMCAccountKey) Reset() {
	*x = ReqQryCFMMCAccountKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryCFMMCAccountKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryCFMMCAccountKey) ProtoMessage() {}

func (x *ReqQryCFMMCAccountKey) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryCFMMCAccountKey.ProtoReflect.Descriptor instead.
func (*ReqQryCFMMCAccountKey) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{181}
}

func (x *ReqQryCFMMCAccountKey) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryCFMMCAccountKey) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryCFMMCAccountKey) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *ReqQryCFMMCAccountKey) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// *
// @brief 保证金监管系统账户密钥查询响应
// @author <tandaping>
// @date 2022-04-20
// @note 协议号 client-proxy:<23062> proxy-server:<27068>
// @modify
type RspQryCFMMCAccountKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead  *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`   // 通用头
	BrokerID   string        `protobuf:"bytes,2,opt,name=brokerID,proto3" json:"brokerID,omitempty"`     // 经纪公司代码
	CompanyID  string        `protobuf:"bytes,3,opt,name=companyID,proto3" json:"companyID,omitempty"`   // 经纪公司统一编码
	InvestorId string        `protobuf:"bytes,4,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码
	KeyId      string        `protobuf:"bytes,5,opt,name=keyId,proto3" json:"keyId,omitempty"`           // 密钥编号
	CurrentKey string        `protobuf:"bytes,6,opt,name=currentKey,proto3" json:"currentKey,omitempty"` // 动态密钥
}

func (x *RspQryCFMMCAccountKey) Reset() {
	*x = RspQryCFMMCAccountKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryCFMMCAccountKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryCFMMCAccountKey) ProtoMessage() {}

func (x *RspQryCFMMCAccountKey) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryCFMMCAccountKey.ProtoReflect.Descriptor instead.
func (*RspQryCFMMCAccountKey) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{182}
}

func (x *RspQryCFMMCAccountKey) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryCFMMCAccountKey) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *RspQryCFMMCAccountKey) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

func (x *RspQryCFMMCAccountKey) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RspQryCFMMCAccountKey) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *RspQryCFMMCAccountKey) GetCurrentKey() string {
	if x != nil {
		return x.CurrentKey
	}
	return ""
}

// *
// @brief 风险结算产品查询请求
// @author <wangyanlong>
// @date 2023-08-02
// @note 协议号 client-proxy:<23063> proxy-server:<27069>
// @modify
type ReqQryRiskSettleProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos     uint64            `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`                                      // 实例标识
	RequestId    int32             `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`                                    // 请求id
	ExchangeId   EExchgID          `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所代码
	ProductId    string            `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`                                     // 品种或合约代码
	ProductClass EProductClassType `protobuf:"varint,5,opt,name=productClass,proto3,enum=fippb.EProductClassType" json:"productClass,omitempty"` // 产品类型
}

func (x *ReqQryRiskSettleProduct) Reset() {
	*x = ReqQryRiskSettleProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryRiskSettleProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryRiskSettleProduct) ProtoMessage() {}

func (x *ReqQryRiskSettleProduct) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryRiskSettleProduct.ProtoReflect.Descriptor instead.
func (*ReqQryRiskSettleProduct) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{183}
}

func (x *ReqQryRiskSettleProduct) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryRiskSettleProduct) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryRiskSettleProduct) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryRiskSettleProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReqQryRiskSettleProduct) GetProductClass() EProductClassType {
	if x != nil {
		return x.ProductClass
	}
	return EProductClassType_PC_NUll
}

// *
// @brief 风险结算产品查询响应
// @author <wangyanlong>
// @date 2023-08-02
// @note 协议号 client-proxy:<23064> proxy-server:<27070>
// @modify
type RspQryRiskSettleProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead       *RspTradeHead            `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`                                                  // 通用头
	IsLast          bool                     `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`                                                       // 最后一条响应消息
	ExchangeId      EExchgID                 `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                           // 交易所代码
	ProductId       string                   `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`                                                  // 品种或合约代码
	ProductIdStatus ERiskSettleProductStatus `protobuf:"varint,5,opt,name=productIdStatus,proto3,enum=fippb.ERiskSettleProductStatus" json:"productIdStatus,omitempty"` // 品种或合约代码交易状态
	ProductClass    EProductClassType        `protobuf:"varint,6,opt,name=productClass,proto3,enum=fippb.EProductClassType" json:"productClass,omitempty"`              // 产品类型
}

func (x *RspQryRiskSettleProduct) Reset() {
	*x = RspQryRiskSettleProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryRiskSettleProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryRiskSettleProduct) ProtoMessage() {}

func (x *RspQryRiskSettleProduct) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryRiskSettleProduct.ProtoReflect.Descriptor instead.
func (*RspQryRiskSettleProduct) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{184}
}

func (x *RspQryRiskSettleProduct) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryRiskSettleProduct) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryRiskSettleProduct) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RspQryRiskSettleProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *RspQryRiskSettleProduct) GetProductIdStatus() ERiskSettleProductStatus {
	if x != nil {
		return x.ProductIdStatus
	}
	return ERiskSettleProductStatus_ERSPS_NULL
}

func (x *RspQryRiskSettleProduct) GetProductClass() EProductClassType {
	if x != nil {
		return x.ProductClass
	}
	return EProductClassType_PC_NUll
}

// *
// @brief 风险结算持仓查询请求
// @author <wangyanlong>
// @date 2023-08-02
// @note 协议号 client-proxy:<23065> proxy-server:<27071>
// @modify
type ReqQryRiskSettlePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos   uint64   `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`                         // 实例标识      M
	RequestId  int32    `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`                       // 请求id        NM
	ExchangeId EExchgID `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码    NM def=所有
	ContractId string   `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码      NM def=所有
}

func (x *ReqQryRiskSettlePosition) Reset() {
	*x = ReqQryRiskSettlePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryRiskSettlePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryRiskSettlePosition) ProtoMessage() {}

func (x *ReqQryRiskSettlePosition) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryRiskSettlePosition.ProtoReflect.Descriptor instead.
func (*ReqQryRiskSettlePosition) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{185}
}

func (x *ReqQryRiskSettlePosition) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryRiskSettlePosition) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryRiskSettlePosition) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqQryRiskSettlePosition) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

// *
// @brief 风险结算持仓查询响应
// @author <wangyanlong>
// @date 2023-08-02
// @note 协议号 client-proxy:<23066> proxy-server:<27072>
// @modify
type RspQryRiskSettlePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"` // 交易通用应答头
	IsLast    bool          `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`      // 最后一条响应消息
	Position  *RiskPosition `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`   // 持仓信息
}

func (x *RspQryRiskSettlePosition) Reset() {
	*x = RspQryRiskSettlePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryRiskSettlePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryRiskSettlePosition) ProtoMessage() {}

func (x *RspQryRiskSettlePosition) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryRiskSettlePosition.ProtoReflect.Descriptor instead.
func (*RspQryRiskSettlePosition) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{186}
}

func (x *RspQryRiskSettlePosition) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryRiskSettlePosition) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryRiskSettlePosition) GetPosition() *RiskPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// *
// @brief 查询投资者请求
// @author <houyahui>
// @date 2023-10-16
// @note 协议号 client-proxy:<23067> proxy-server:<27073>
// @modify
type ReqQryInvestor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPos   uint64 `protobuf:"varint,1,opt,name=localPos,proto3" json:"localPos,omitempty"`    // 实例标识      M
	RequestId  int32  `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`  // 请求id        NM
	BrokerID   string `protobuf:"bytes,3,opt,name=brokerID,proto3" json:"brokerID,omitempty"`     // 经纪公司代码
	InvestorId string `protobuf:"bytes,4,opt,name=investorId,proto3" json:"investorId,omitempty"` // 投资者代码
}

func (x *ReqQryInvestor) Reset() {
	*x = ReqQryInvestor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryInvestor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryInvestor) ProtoMessage() {}

func (x *ReqQryInvestor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryInvestor.ProtoReflect.Descriptor instead.
func (*ReqQryInvestor) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{187}
}

func (x *ReqQryInvestor) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

func (x *ReqQryInvestor) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReqQryInvestor) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *ReqQryInvestor) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// *
// @brief 查询投资者请求响应
// @author <houyahui>
// @date 2023-10-16
// @note 协议号 client-proxy:<23068> proxy-server:<27074>
// @modify
type RspQryInvestor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeHead    *RspTradeHead `protobuf:"bytes,1,opt,name=tradeHead,proto3" json:"tradeHead,omitempty"`       // 交易通用应答头
	IsLast       bool          `protobuf:"varint,2,opt,name=isLast,proto3" json:"isLast,omitempty"`            // 最后一条响应消息
	InvestorInfo *InvestorInfo `protobuf:"bytes,3,opt,name=investorInfo,proto3" json:"investorInfo,omitempty"` // 投资者信息
}

func (x *RspQryInvestor) Reset() {
	*x = RspQryInvestor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_trade_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryInvestor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryInvestor) ProtoMessage() {}

func (x *RspQryInvestor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_trade_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryInvestor.ProtoReflect.Descriptor instead.
func (*RspQryInvestor) Descriptor() ([]byte, []int) {
	return file_fip_interface_trade_proto_rawDescGZIP(), []int{188}
}

func (x *RspQryInvestor) GetTradeHead() *RspTradeHead {
	if x != nil {
		return x.TradeHead
	}
	return nil
}

func (x *RspQryInvestor) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspQryInvestor) GetInvestorInfo() *InvestorInfo {
	if x != nil {
		return x.InvestorInfo
	}
	return nil
}

var File_fip_interface_trade_proto protoreflect.FileDescriptor

var file_fip_interface_trade_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x1a, 0x13, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x03, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x15, 0x52, 0x73, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xe2, 0x02, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x1f, 0x52, 0x65,
	0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x94,
	0x02, 0x0a, 0x1f, 0x52, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73,
	0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x22, 0x61, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x5a, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x22, 0x61, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x49, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x14,
	0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f,
	0x54, 0x72, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x52, 0x74,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x2e, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xd1, 0x05, 0x0a, 0x08, 0x52, 0x74, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x7a, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x7a, 0x63,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xf9, 0x04, 0x0a, 0x08, 0x52, 0x74, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22,
	0x8c, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x52, 0x74,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22,
	0x87, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x52, 0x73,
	0x70, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a,
	0x14, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xa2, 0x03, 0x0a, 0x0b, 0x52, 0x74, 0x6e, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x78,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x45,
	0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x65,
	0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x45, 0x78, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x4a, 0x0a, 0x12,
	0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x04, 0x0a, 0x14, 0x45, 0x72, 0x72,
	0x52, 0x74, 0x6e, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xff, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x71, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x1a,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0x71, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x94, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x14, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xe4, 0x01, 0x0a, 0x11, 0x52, 0x74, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x52, 0x74, 0x6e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x54,
	0x72, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1b, 0x52, 0x73,
	0x70, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0xbe, 0x01, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfd, 0x04,
	0x0a, 0x13, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x73, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x72, 0x50, 0x64, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x72, 0x50, 0x64, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x4c, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xc0, 0x02,
	0x0a, 0x1e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x66, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69,
	0x66, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9f, 0x03, 0x0a, 0x1f, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x74, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x6d, 0x0a, 0x0d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x77, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x73, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x22, 0x53, 0x0a, 0x1e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0x78, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x54, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x54, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x54, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73,
	0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x72, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x61, 0x72, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc9, 0x01, 0x0a,
	0x1c, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x52, 0x73, 0x70,
	0x51, 0x72, 0x79, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x61, 0x72, 0x62, 0x69, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf8, 0x02, 0x0a,
	0x18, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x8b, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x16,
	0x52, 0x73, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x9e, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x52, 0x73, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xac,
	0x01, 0x0a, 0x18, 0x52, 0x74, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x83, 0x01,
	0x0a, 0x17, 0x52, 0x74, 0x6e, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0xac, 0x01, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x89, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xae, 0x05, 0x0a, 0x11,
	0x52, 0x74, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13,
	0x52, 0x74, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x78, 0x0a,
	0x23, 0x52, 0x73, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x23, 0x52, 0x74, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x15, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x15, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x18, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x52, 0x0a,
	0x15, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x15, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x22, 0x77, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x52, 0x0a,
	0x15, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x15, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x42, 0x6f, 0x6f, 0x4c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xe4,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xca, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x51,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xa6,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x46,
	0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x52, 0x73, 0x70, 0x51, 0x72,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x16, 0x52, 0x74, 0x6e, 0x51, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6b, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62,
	0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0xef, 0x03, 0x0a, 0x13, 0x52, 0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61,
	0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x13, 0x52, 0x73, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xef, 0x03, 0x0a, 0x13,
	0x52, 0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x66,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xbd, 0x02,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x70, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x15, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x52,
	0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x70,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x10, 0x6f,
	0x70, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0x76, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x52, 0x73, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0x97, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x6f,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x66, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x52, 0x73, 0x70,
	0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x12, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xde, 0x03,
	0x0a, 0x0b, 0x52, 0x74, 0x6e, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x8f,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x13, 0x52, 0x73, 0x70, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x10, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x86, 0x04, 0x0a, 0x0d, 0x52, 0x74, 0x6e, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x92, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x40,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xbe, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x14, 0x52, 0x73, 0x70, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xfc, 0x05, 0x0a, 0x0e, 0x52, 0x74, 0x6e, 0x4d, 0x62, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x1b, 0x52, 0x73, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xce, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x22, 0xc8, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x47, 0x0a, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a,
	0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22,
	0xb0, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0x60, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x16, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x73, 0x70,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6d, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x49, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x41, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x22, 0x47, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x10,
	0x52, 0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x51, 0x75,
	0x6f, 0x74, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x68, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x61, 0x0a, 0x10, 0x52,
	0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x51,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x34,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x75,
	0x6f, 0x74, 0x45, 0x72, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x22, 0x60,
	0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa9, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa2, 0x03, 0x0a,
	0x13, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x22, 0xa8, 0x04, 0x0a, 0x0d, 0x52, 0x74, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0d,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x51,
	0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51,
	0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65,
	0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_trade_proto_rawDescOnce sync.Once
	file_fip_interface_trade_proto_rawDescData = file_fip_interface_trade_proto_rawDesc
)

func file_fip_interface_trade_proto_rawDescGZIP() []byte {
	file_fip_interface_trade_proto_rawDescOnce.Do(func() {
		file_fip_interface_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_trade_proto_rawDescData)
	})
	return file_fip_interface_trade_proto_rawDescData
}

var file_fip_interface_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 189)
var file_fip_interface_trade_proto_goTypes = []interface{}{
	(*ReqUserLogin)(nil),                        // 0: fippb.ReqUserLogin
	(*ReqUserLoginBasicInfo)(nil),               // 1: fippb.ReqUserLoginBasicInfo
	(*RspUserLoginBasicInfo)(nil),               // 2: fippb.RspUserLoginBasicInfo
	(*RspUserLogin)(nil),                        // 3: fippb.RspUserLogin
	(*ReqLoginForConditionOrderAsUser)(nil),     // 4: fippb.ReqLoginForConditionOrderAsUser
	(*RspLoginForConditionOrderAsUser)(nil),     // 5: fippb.RspLoginForConditionOrderAsUser
	(*ReqUserLogout)(nil),                       // 6: fippb.ReqUserLogout
	(*RspUserLogout)(nil),                       // 7: fippb.RspUserLogout
	(*ReqResetUserPassword)(nil),                // 8: fippb.ReqResetUserPassword
	(*RspResetUserPassword)(nil),                // 9: fippb.RspResetUserPassword
	(*ReqResetAccountPassword)(nil),             // 10: fippb.ReqResetAccountPassword
	(*RspResetAccountPassword)(nil),             // 11: fippb.RspResetAccountPassword
	(*ReqOrderInsert)(nil),                      // 12: fippb.ReqOrderInsert
	(*RspOrderInsert)(nil),                      // 13: fippb.RspOrderInsert
	(*RspOrderInsertToTrig)(nil),                // 14: fippb.RspOrderInsertToTrig
	(*ErrRtnOrderInsert)(nil),                   // 15: fippb.ErrRtnOrderInsert
	(*RtnOrder)(nil),                            // 16: fippb.RtnOrder
	(*RtnTrade)(nil),                            // 17: fippb.RtnTrade
	(*ReqOrderAction)(nil),                      // 18: fippb.ReqOrderAction
	(*RspOrderAction)(nil),                      // 19: fippb.RspOrderAction
	(*ErrRtnOrderAction)(nil),                   // 20: fippb.ErrRtnOrderAction
	(*ReqExeOrderInsert)(nil),                   // 21: fippb.ReqExeOrderInsert
	(*RspExeOrderInsert)(nil),                   // 22: fippb.RspExeOrderInsert
	(*ErrRtnExeOrderInsert)(nil),                // 23: fippb.ErrRtnExeOrderInsert
	(*RtnExeOrder)(nil),                         // 24: fippb.RtnExeOrder
	(*ReqExeOrderAction)(nil),                   // 25: fippb.ReqExeOrderAction
	(*RspExeOrderAction)(nil),                   // 26: fippb.RspExeOrderAction
	(*ErrRtnExeOrderAction)(nil),                // 27: fippb.ErrRtnExeOrderAction
	(*ReqQryPosition)(nil),                      // 28: fippb.ReqQryPosition
	(*RspQryPosition)(nil),                      // 29: fippb.RspQryPosition
	(*ReqQryPositionDetail)(nil),                // 30: fippb.ReqQryPositionDetail
	(*RspQryPositionDetail)(nil),                // 31: fippb.RspQryPositionDetail
	(*ReqQryOrderInfo)(nil),                     // 32: fippb.ReqQryOrderInfo
	(*RspQryOrderInfo)(nil),                     // 33: fippb.RspQryOrderInfo
	(*ReqQryCustomerCapital)(nil),               // 34: fippb.ReqQryCustomerCapital
	(*RspQryCustomerCapital)(nil),               // 35: fippb.RspQryCustomerCapital
	(*ReqQryExchangeContractInfo)(nil),          // 36: fippb.ReqQryExchangeContractInfo
	(*RspQryExchangeContractInfo)(nil),          // 37: fippb.RspQryExchangeContractInfo
	(*ReqQryAllContractInfo)(nil),               // 38: fippb.ReqQryAllContractInfo
	(*RspQryAllContractInfo)(nil),               // 39: fippb.RspQryAllContractInfo
	(*ReqQryMatchInfo)(nil),                     // 40: fippb.ReqQryMatchInfo
	(*RspQryMatchInfo)(nil),                     // 41: fippb.RspQryMatchInfo
	(*ReqQrySpecifyContract)(nil),               // 42: fippb.ReqQrySpecifyContract
	(*RspQrySpecifyContract)(nil),               // 43: fippb.RspQrySpecifyContract
	(*ReqQryExchangeStatus)(nil),                // 44: fippb.ReqQryExchangeStatus
	(*RspQryExchangeStatus)(nil),                // 45: fippb.RspQryExchangeStatus
	(*RtnExchangeStatus)(nil),                   // 46: fippb.RtnExchangeStatus
	(*RtnExchangeStatusToTrig)(nil),             // 47: fippb.RtnExchangeStatusToTrig
	(*ReqTradePing)(nil),                        // 48: fippb.ReqTradePing
	(*RspTradePing)(nil),                        // 49: fippb.RspTradePing
	(*ReqReleaseUser)(nil),                      // 50: fippb.ReqReleaseUser
	(*RspReleaseUser)(nil),                      // 51: fippb.RspReleaseUser
	(*ReqDisposeSavedUserPassword)(nil),         // 52: fippb.ReqDisposeSavedUserPassword
	(*RspDisposeSavedUserPassword)(nil),         // 53: fippb.RspDisposeSavedUserPassword
	(*ReqRecordUserOriginalRequestid)(nil),      // 54: fippb.ReqRecordUserOriginalRequestid
	(*InnerTradeLoginInfo)(nil),                 // 55: fippb.InnerTradeLoginInfo
	(*InnerNtfUserTradeConnectStatus)(nil),      // 56: fippb.InnerNtfUserTradeConnectStatus
	(*InnerNtfServerQuotConnectStatus)(nil),     // 57: fippb.InnerNtfServerQuotConnectStatus
	(*InnerResetPwd)(nil),                       // 58: fippb.InnerResetPwd
	(*RspRecordUserOriginalRequestid)(nil),      // 59: fippb.RspRecordUserOriginalRequestid
	(*ReqTproxyLogin)(nil),                      // 60: fippb.ReqTproxyLogin
	(*RspTproxyLogin)(nil),                      // 61: fippb.RspTproxyLogin
	(*ReqQryArbitrageContract)(nil),             // 62: fippb.ReqQryArbitrageContract
	(*RspQryArbitrageContract)(nil),             // 63: fippb.RspQryArbitrageContract
	(*ReqQryArbitrageCombineDetail)(nil),        // 64: fippb.ReqQryArbitrageCombineDetail
	(*RspQryArbitrageCombineDetail)(nil),        // 65: fippb.RspQryArbitrageCombineDetail
	(*ReqQryContractMarginRate)(nil),            // 66: fippb.ReqQryContractMarginRate
	(*RspQryContractMarginRate)(nil),            // 67: fippb.RspQryContractMarginRate
	(*ReqQryInstrumentCommissionRate)(nil),      // 68: fippb.ReqQryInstrumentCommissionRate
	(*RspQryInstrumentCommissionRate)(nil),      // 69: fippb.RspQryInstrumentCommissionRate
	(*ReqAddConditionOrder)(nil),                // 70: fippb.ReqAddConditionOrder
	(*RspAddConditionOrder)(nil),                // 71: fippb.RspAddConditionOrder
	(*ReqUpdateConditionOrder)(nil),             // 72: fippb.ReqUpdateConditionOrder
	(*RspUpdateConditionOrder)(nil),             // 73: fippb.RspUpdateConditionOrder
	(*ReqPauseConditionOrder)(nil),              // 74: fippb.ReqPauseConditionOrder
	(*RspPauseConditionOrder)(nil),              // 75: fippb.RspPauseConditionOrder
	(*ReqStartConditionOrder)(nil),              // 76: fippb.ReqStartConditionOrder
	(*RspStartConditionOrder)(nil),              // 77: fippb.RspStartConditionOrder
	(*ReqDeleteConditionOrder)(nil),             // 78: fippb.ReqDeleteConditionOrder
	(*RspDeleteConditionOrder)(nil),             // 79: fippb.RspDeleteConditionOrder
	(*RtnTriggerConditionOrder)(nil),            // 80: fippb.RtnTriggerConditionOrder
	(*RtnConOrderInsertResult)(nil),             // 81: fippb.RtnConOrderInsertResult
	(*ReqQryConditionOrderList)(nil),            // 82: fippb.ReqQryConditionOrderList
	(*RspQryConditionOrderList)(nil),            // 83: fippb.RspQryConditionOrderList
	(*ReqAddInstrumentToQuot)(nil),              // 84: fippb.ReqAddInstrumentToQuot
	(*RtnTradeToTrigger)(nil),                   // 85: fippb.RtnTradeToTrigger
	(*RtnLongConnLocalPos)(nil),                 // 86: fippb.RtnLongConnLocalPos
	(*ReqDeleteAllTriggeredConditionOrder)(nil), // 87: fippb.ReqDeleteAllTriggeredConditionOrder
	(*RspDeleteAllTriggeredConditionOrder)(nil), // 88: fippb.RspDeleteAllTriggeredConditionOrder
	(*RtnDeleteAllTriggeredConditionOrder)(nil), // 89: fippb.RtnDeleteAllTriggeredConditionOrder
	(*ReqSettlementInfoConfirm)(nil),            // 90: fippb.ReqSettlementInfoConfirm
	(*RspSettlementInfoConfirm)(nil),            // 91: fippb.RspSettlementInfoConfirm
	(*ReqQrySettlementInfoConfirm)(nil),         // 92: fippb.ReqQrySettlementInfoConfirm
	(*RspQrySettlementInfoConfirm)(nil),         // 93: fippb.RspQrySettlementInfoConfirm
	(*ReqQrySettlementInfo)(nil),                // 94: fippb.ReqQrySettlementInfo
	(*RspQrySettlementInfo)(nil),                // 95: fippb.RspQrySettlementInfo
	(*ReqQryMaxOrderVolumn)(nil),                // 96: fippb.ReqQryMaxOrderVolumn
	(*RspQryMaxOrderVolumn)(nil),                // 97: fippb.RspQryMaxOrderVolumn
	(*ReqQryExecOrder)(nil),                     // 98: fippb.ReqQryExecOrder
	(*RspQryExecOrder)(nil),                     // 99: fippb.RspQryExecOrder
	(*ReqQryTradingCode)(nil),                   // 100: fippb.ReqQryTradingCode
	(*RspQryTradingCode)(nil),                   // 101: fippb.RspQryTradingCode
	(*ReqQryContractBank)(nil),                  // 102: fippb.ReqQryContractBank
	(*RspQryContractBank)(nil),                  // 103: fippb.RspQryContractBank
	(*ReqQryTransferSerial)(nil),                // 104: fippb.ReqQryTransferSerial
	(*RspQryTransferSerial)(nil),                // 105: fippb.RspQryTransferSerial
	(*ReqQryBankAccountMoney)(nil),              // 106: fippb.ReqQryBankAccountMoney
	(*RspQryBankAccountMoney)(nil),              // 107: fippb.RspQryBankAccountMoney
	(*RtnQryBankAccountMoney)(nil),              // 108: fippb.RtnQryBankAccountMoney
	(*ReqFromBankToFuture)(nil),                 // 109: fippb.ReqFromBankToFuture
	(*RspFromBankToFuture)(nil),                 // 110: fippb.RspFromBankToFuture
	(*RtnFromBankToFuture)(nil),                 // 111: fippb.RtnFromBankToFuture
	(*ReqFromFutureToBank)(nil),                 // 112: fippb.ReqFromFutureToBank
	(*RspFromFutureToBank)(nil),                 // 113: fippb.RspFromFutureToBank
	(*RtnFromFutureToBank)(nil),                 // 114: fippb.RtnFromFutureToBank
	(*ReqQryAccountregister)(nil),               // 115: fippb.ReqQryAccountregister
	(*RspQryAccountregister)(nil),               // 116: fippb.RspQryAccountregister
	(*ReqOptionInstrTradeCost)(nil),             // 117: fippb.ReqOptionInstrTradeCost
	(*RspOptionInstrTradeCost)(nil),             // 118: fippb.RspOptionInstrTradeCost
	(*ReqOptionInstrCommRate)(nil),              // 119: fippb.ReqOptionInstrCommRate
	(*RspOptionInstrCommRate)(nil),              // 120: fippb.RspOptionInstrCommRate
	(*ReqPositionProfitAlgorithm)(nil),          // 121: fippb.ReqPositionProfitAlgorithm
	(*RspPositionProfitAlgorithm)(nil),          // 122: fippb.RspPositionProfitAlgorithm
	(*ReqQryForQuote)(nil),                      // 123: fippb.ReqQryForQuote
	(*RspQryForQuote)(nil),                      // 124: fippb.RspQryForQuote
	(*ReqForQuoteInsert)(nil),                   // 125: fippb.ReqForQuoteInsert
	(*RspForQuoteInsert)(nil),                   // 126: fippb.RspForQuoteInsert
	(*ErrRtnForQuoteInsert)(nil),                // 127: fippb.ErrRtnForQuoteInsert
	(*ReqConOrderInsert)(nil),                   // 128: fippb.ReqConOrderInsert
	(*RspConOrderInsert)(nil),                   // 129: fippb.RspConOrderInsert
	(*ReqQryConOrderInfo)(nil),                  // 130: fippb.ReqQryConOrderInfo
	(*RspQryConOrderInfo)(nil),                  // 131: fippb.RspQryConOrderInfo
	(*RtnConOrder)(nil),                         // 132: fippb.RtnConOrder
	(*ReqConOrderRemove)(nil),                   // 133: fippb.ReqConOrderRemove
	(*RspConOrderRemove)(nil),                   // 134: fippb.RspConOrderRemove
	(*ReqTouchOrderInsert)(nil),                 // 135: fippb.ReqTouchOrderInsert
	(*RspTouchOrderInsert)(nil),                 // 136: fippb.RspTouchOrderInsert
	(*ReqQryTouchOrderInfo)(nil),                // 137: fippb.ReqQryTouchOrderInfo
	(*RspQryTouchOrderInfo)(nil),                // 138: fippb.RspQryTouchOrderInfo
	(*RtnTouchOrder)(nil),                       // 139: fippb.RtnTouchOrder
	(*ReqTouchOrderRemove)(nil),                 // 140: fippb.ReqTouchOrderRemove
	(*RspTouchOrderRemove)(nil),                 // 141: fippb.RspTouchOrderRemove
	(*ReqParkedOrderInsert)(nil),                // 142: fippb.ReqParkedOrderInsert
	(*RspParkedOrderInsert)(nil),                // 143: fippb.RspParkedOrderInsert
	(*ReqQryParkedOrder)(nil),                   // 144: fippb.ReqQryParkedOrder
	(*RspQryParkedOrder)(nil),                   // 145: fippb.RspQryParkedOrder
	(*ReqParkedOrderRemove)(nil),                // 146: fippb.ReqParkedOrderRemove
	(*RspParkedOrderRemove)(nil),                // 147: fippb.RspParkedOrderRemove
	(*RtnMblRealQuot)(nil),                      // 148: fippb.RtnMblRealQuot
	(*ReqConditionOrderParamCheck)(nil),         // 149: fippb.ReqConditionOrderParamCheck
	(*RspConditionOrderParamCheck)(nil),         // 150: fippb.RspConditionOrderParamCheck
	(*SubEmptyPositionInfo)(nil),                // 151: fippb.SubEmptyPositionInfo
	(*NotifyEmptyPositionInfo)(nil),             // 152: fippb.NotifyEmptyPositionInfo
	(*SessionInfo)(nil),                         // 153: fippb.SessionInfo
	(*NotifyServiceStatus)(nil),                 // 154: fippb.NotifyServiceStatus
	(*NotifyAvailableCapacity)(nil),             // 155: fippb.NotifyAvailableCapacity
	(*ReqUserLoginInner)(nil),                   // 156: fippb.ReqUserLoginInner
	(*RspUserConnectInner)(nil),                 // 157: fippb.RspUserConnectInner
	(*RspUserDisConnectInner)(nil),              // 158: fippb.RspUserDisConnectInner
	(*RspAuthenticate)(nil),                     // 159: fippb.RspAuthenticate
	(*NotifyConnectedCid)(nil),                  // 160: fippb.NotifyConnectedCid
	(*ReqUserQuotLogin)(nil),                    // 161: fippb.ReqUserQuotLogin
	(*RspUserQuotLogin)(nil),                    // 162: fippb.RspUserQuotLogin
	(*ReqQuotReleaseUser)(nil),                  // 163: fippb.ReqQuotReleaseUser
	(*RspQuotReleaseUser)(nil),                  // 164: fippb.RspQuotReleaseUser
	(*ReqQuotSubscribe)(nil),                    // 165: fippb.ReqQuotSubscribe
	(*RspQuotSubscribe)(nil),                    // 166: fippb.RspQuotSubscribe
	(*ReqQuotUnSubscribe)(nil),                  // 167: fippb.ReqQuotUnSubscribe
	(*RspQuotUnSubscribe)(nil),                  // 168: fippb.RspQuotUnSubscribe
	(*ReqQuotStatusSet)(nil),                    // 169: fippb.ReqQuotStatusSet
	(*RspQuotStatusSet)(nil),                    // 170: fippb.RspQuotStatusSet
	(*ReqQuotOptimalStation)(nil),               // 171: fippb.ReqQuotOptimalStation
	(*RspQuotOptimalStation)(nil),               // 172: fippb.RspQuotOptimalStation
	(*NotifyQuotErr)(nil),                       // 173: fippb.NotifyQuotErr
	(*NotifyQuotHeart)(nil),                     // 174: fippb.NotifyQuotHeart
	(*NotifyQuotConnected)(nil),                 // 175: fippb.NotifyQuotConnected
	(*ReqCombActionInsert)(nil),                 // 176: fippb.ReqCombActionInsert
	(*RspCombActionInsert)(nil),                 // 177: fippb.RspCombActionInsert
	(*RtnCombAction)(nil),                       // 178: fippb.RtnCombAction
	(*ReqQryVersion)(nil),                       // 179: fippb.ReqQryVersion
	(*RspQryVersion)(nil),                       // 180: fippb.RspQryVersion
	(*ReqQryCFMMCAccountKey)(nil),               // 181: fippb.ReqQryCFMMCAccountKey
	(*RspQryCFMMCAccountKey)(nil),               // 182: fippb.RspQryCFMMCAccountKey
	(*ReqQryRiskSettleProduct)(nil),             // 183: fippb.ReqQryRiskSettleProduct
	(*RspQryRiskSettleProduct)(nil),             // 184: fippb.RspQryRiskSettleProduct
	(*ReqQryRiskSettlePosition)(nil),            // 185: fippb.ReqQryRiskSettlePosition
	(*RspQryRiskSettlePosition)(nil),            // 186: fippb.RspQryRiskSettlePosition
	(*ReqQryInvestor)(nil),                      // 187: fippb.ReqQryInvestor
	(*RspQryInvestor)(nil),                      // 188: fippb.RspQryInvestor
	(EApiChannelType)(0),                        // 189: fippb.EApiChannelType
	(*RegisterAuthInfo)(nil),                    // 190: fippb.RegisterAuthInfo
	(*RspTradeHead)(nil),                        // 191: fippb.RspTradeHead
	(*SameUserKey)(nil),                         // 192: fippb.SameUserKey
	(*ExchgTime)(nil),                           // 193: fippb.ExchgTime
	(EConOrderCacheType)(0),                     // 194: fippb.EConOrderCacheType
	(*OrderInfo)(nil),                           // 195: fippb.OrderInfo
	(*OrdinaryOrderAutoStopParameter)(nil),      // 196: fippb.OrdinaryOrderAutoStopParameter
	(EOrderSubmitStatusType)(0),                 // 197: fippb.EOrderSubmitStatusType
	(EOrderStatusType)(0),                       // 198: fippb.EOrderStatusType
	(EOrderTypeType)(0),                         // 199: fippb.EOrderTypeType
	(EExchgID)(0),                               // 200: fippb.EExchgID
	(EDirectionType)(0),                         // 201: fippb.EDirectionType
	(EOffsetFlagType)(0),                        // 202: fippb.EOffsetFlagType
	(EHedgeFlagType)(0),                         // 203: fippb.EHedgeFlagType
	(ETradeTypeType)(0),                         // 204: fippb.ETradeTypeType
	(EPriceSourceType)(0),                       // 205: fippb.EPriceSourceType
	(*OrderActionInfo)(nil),                     // 206: fippb.OrderActionInfo
	(EOrderActionStatusType)(0),                 // 207: fippb.EOrderActionStatusType
	(*ExecOrderInfo)(nil),                       // 208: fippb.ExecOrderInfo
	(EExecResultType)(0),                        // 209: fippb.EExecResultType
	(*ExecOrderActionInfo)(nil),                 // 210: fippb.ExecOrderActionInfo
	(EActionTypeType)(0),                        // 211: fippb.EActionTypeType
	(EContractTypeType)(0),                      // 212: fippb.EContractTypeType
	(*Position)(nil),                            // 213: fippb.Position
	(*PositionDetail)(nil),                      // 214: fippb.PositionDetail
	(*OrderDetail)(nil),                         // 215: fippb.OrderDetail
	(*CustomerCapitalDetail)(nil),               // 216: fippb.CustomerCapitalDetail
	(*ContractDetail)(nil),                      // 217: fippb.ContractDetail
	(*MatchInfoDetail)(nil),                     // 218: fippb.MatchInfoDetail
	(*SpecifyContractInfo)(nil),                 // 219: fippb.SpecifyContractInfo
	(EInstrumentStatusType)(0),                  // 220: fippb.EInstrumentStatusType
	(EApiReleaseType)(0),                        // 221: fippb.EApiReleaseType
	(EActiveStatus)(0),                          // 222: fippb.EActiveStatus
	(*ArbiContractDetail)(nil),                  // 223: fippb.ArbiContractDetail
	(*ArbiCombineDetail)(nil),                   // 224: fippb.ArbiCombineDetail
	(*MarginRateDetail)(nil),                    // 225: fippb.MarginRateDetail
	(*CommissionRateDetail)(nil),                // 226: fippb.CommissionRateDetail
	(*ConditionOrderInfo)(nil),                  // 227: fippb.ConditionOrderInfo
	(*ConditionOrderTradeparameter)(nil),        // 228: fippb.ConditionOrderTradeparameter
	(*ConditionOrderDetail)(nil),                // 229: fippb.ConditionOrderDetail
	(EQryConOrderType)(0),                       // 230: fippb.EQryConOrderType
	(EQryConOrderStatusType)(0),                 // 231: fippb.EQryConOrderStatusType
	(EDeleteConOrderType)(0),                    // 232: fippb.EDeleteConOrderType
	(*SettlementInfoConfirm)(nil),               // 233: fippb.SettlementInfoConfirm
	(EBooLean)(0),                               // 234: fippb.EBooLean
	(*MaxOrderVolumn)(nil),                      // 235: fippb.MaxOrderVolumn
	(*ExeOrderDetail)(nil),                      // 236: fippb.ExeOrderDetail
	(EClientIdTypeType)(0),                      // 237: fippb.EClientIdTypeType
	(*TradingCodeDetail)(nil),                   // 238: fippb.TradingCodeDetail
	(*ContractBankField)(nil),                   // 239: fippb.ContractBankField
	(*TransferSerialField)(nil),                 // 240: fippb.TransferSerialField
	(*QueryAccountField)(nil),                   // 241: fippb.QueryAccountField
	(*TransferField)(nil),                       // 242: fippb.TransferField
	(EFeePayFlagType)(0),                        // 243: fippb.EFeePayFlagType
	(ETransferStatusType)(0),                    // 244: fippb.ETransferStatusType
	(*AccountregField)(nil),                     // 245: fippb.AccountregField
	(*OptTradeCostField)(nil),                   // 246: fippb.OptTradeCostField
	(*OptCommRateField)(nil),                    // 247: fippb.OptCommRateField
	(*ProfitAlgorithmField)(nil),                // 248: fippb.ProfitAlgorithmField
	(*ForQuoteField)(nil),                       // 249: fippb.ForQuoteField
	(*ForQuoteInfo)(nil),                        // 250: fippb.ForQuoteInfo
	(*ConOrderInfo)(nil),                        // 251: fippb.ConOrderInfo
	(*ConOrderDetail)(nil),                      // 252: fippb.ConOrderDetail
	(*TouchOrderInfo)(nil),                      // 253: fippb.TouchOrderInfo
	(*TouchOrderDetail)(nil),                    // 254: fippb.TouchOrderDetail
	(*ParkedOrderInfo)(nil),                     // 255: fippb.ParkedOrderInfo
	(ETradeServiceType)(0),                      // 256: fippb.ETradeServiceType
	(ETradeServiceStatus)(0),                    // 257: fippb.ETradeServiceStatus
	(*StationInfo)(nil),                         // 258: fippb.StationInfo
	(ECombDirectionType)(0),                     // 259: fippb.ECombDirectionType
	(EProductClassType)(0),                      // 260: fippb.EProductClassType
	(ERiskSettleProductStatus)(0),               // 261: fippb.ERiskSettleProductStatus
	(*RiskPosition)(nil),                        // 262: fippb.RiskPosition
	(*InvestorInfo)(nil),                        // 263: fippb.InvestorInfo
}
var file_fip_interface_trade_proto_depIdxs = []int32{
	189, // 0: fippb.ReqUserLogin.channelType:type_name -> fippb.EApiChannelType
	190, // 1: fippb.ReqUserLogin.registerAuthInfo:type_name -> fippb.RegisterAuthInfo
	189, // 2: fippb.ReqUserLoginBasicInfo.channelType:type_name -> fippb.EApiChannelType
	191, // 3: fippb.RspUserLogin.tradeHead:type_name -> fippb.RspTradeHead
	192, // 4: fippb.RspUserLogin.sameUserKey:type_name -> fippb.SameUserKey
	193, // 5: fippb.RspUserLogin.exchgTime:type_name -> fippb.ExchgTime
	194, // 6: fippb.RspUserLogin.type:type_name -> fippb.EConOrderCacheType
	189, // 7: fippb.ReqLoginForConditionOrderAsUser.channelType:type_name -> fippb.EApiChannelType
	190, // 8: fippb.ReqLoginForConditionOrderAsUser.registerAuthInfo:type_name -> fippb.RegisterAuthInfo
	191, // 9: fippb.RspLoginForConditionOrderAsUser.tradeHead:type_name -> fippb.RspTradeHead
	192, // 10: fippb.RspLoginForConditionOrderAsUser.sameUserKey:type_name -> fippb.SameUserKey
	193, // 11: fippb.RspLoginForConditionOrderAsUser.exchgTime:type_name -> fippb.ExchgTime
	191, // 12: fippb.RspUserLogout.tradeHead:type_name -> fippb.RspTradeHead
	191, // 13: fippb.RspResetUserPassword.tradeHead:type_name -> fippb.RspTradeHead
	191, // 14: fippb.RspResetAccountPassword.tradeHead:type_name -> fippb.RspTradeHead
	195, // 15: fippb.ReqOrderInsert.orderInfo:type_name -> fippb.OrderInfo
	196, // 16: fippb.ReqOrderInsert.autoStopPara:type_name -> fippb.OrdinaryOrderAutoStopParameter
	191, // 17: fippb.RspOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	195, // 18: fippb.RspOrderInsert.orderInfo:type_name -> fippb.OrderInfo
	191, // 19: fippb.RspOrderInsertToTrig.tradeHead:type_name -> fippb.RspTradeHead
	195, // 20: fippb.RspOrderInsertToTrig.orderInfo:type_name -> fippb.OrderInfo
	191, // 21: fippb.ErrRtnOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	195, // 22: fippb.ErrRtnOrderInsert.orderInfo:type_name -> fippb.OrderInfo
	195, // 23: fippb.RtnOrder.orderInfo:type_name -> fippb.OrderInfo
	197, // 24: fippb.RtnOrder.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	198, // 25: fippb.RtnOrder.orderStatus:type_name -> fippb.EOrderStatusType
	192, // 26: fippb.RtnOrder.sameUserKey:type_name -> fippb.SameUserKey
	199, // 27: fippb.RtnOrder.orderType:type_name -> fippb.EOrderTypeType
	200, // 28: fippb.RtnTrade.exchangeId:type_name -> fippb.EExchgID
	201, // 29: fippb.RtnTrade.direction:type_name -> fippb.EDirectionType
	202, // 30: fippb.RtnTrade.offsetFlag:type_name -> fippb.EOffsetFlagType
	203, // 31: fippb.RtnTrade.hedgeFlag:type_name -> fippb.EHedgeFlagType
	204, // 32: fippb.RtnTrade.tradeType:type_name -> fippb.ETradeTypeType
	205, // 33: fippb.RtnTrade.priceSource:type_name -> fippb.EPriceSourceType
	206, // 34: fippb.ReqOrderAction.orderActionInfo:type_name -> fippb.OrderActionInfo
	191, // 35: fippb.RspOrderAction.tradeHead:type_name -> fippb.RspTradeHead
	206, // 36: fippb.RspOrderAction.orderActionInfo:type_name -> fippb.OrderActionInfo
	195, // 37: fippb.ErrRtnOrderAction.orderInfo:type_name -> fippb.OrderInfo
	192, // 38: fippb.ErrRtnOrderAction.sameUserKey:type_name -> fippb.SameUserKey
	207, // 39: fippb.ErrRtnOrderAction.orderActionStatus:type_name -> fippb.EOrderActionStatusType
	208, // 40: fippb.ReqExeOrderInsert.exeOrderInfo:type_name -> fippb.ExecOrderInfo
	191, // 41: fippb.RspExeOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	208, // 42: fippb.RspExeOrderInsert.exeOrderInfo:type_name -> fippb.ExecOrderInfo
	191, // 43: fippb.ErrRtnExeOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	208, // 44: fippb.ErrRtnExeOrderInsert.exeOrderInfo:type_name -> fippb.ExecOrderInfo
	208, // 45: fippb.RtnExeOrder.exeOrderInfo:type_name -> fippb.ExecOrderInfo
	197, // 46: fippb.RtnExeOrder.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	209, // 47: fippb.RtnExeOrder.excResult:type_name -> fippb.EExecResultType
	192, // 48: fippb.RtnExeOrder.sameUserKey:type_name -> fippb.SameUserKey
	210, // 49: fippb.ReqExeOrderAction.exeOrderActionInfo:type_name -> fippb.ExecOrderActionInfo
	191, // 50: fippb.RspExeOrderAction.tradeHead:type_name -> fippb.RspTradeHead
	210, // 51: fippb.RspExeOrderAction.exeOrderActionInfo:type_name -> fippb.ExecOrderActionInfo
	200, // 52: fippb.ErrRtnExeOrderAction.exchangeId:type_name -> fippb.EExchgID
	192, // 53: fippb.ErrRtnExeOrderAction.sameUserKey:type_name -> fippb.SameUserKey
	207, // 54: fippb.ErrRtnExeOrderAction.orderActionStatus:type_name -> fippb.EOrderActionStatusType
	211, // 55: fippb.ErrRtnExeOrderAction.actionType:type_name -> fippb.EActionTypeType
	212, // 56: fippb.ReqQryPosition.contractType:type_name -> fippb.EContractTypeType
	200, // 57: fippb.ReqQryPosition.exchangeId:type_name -> fippb.EExchgID
	191, // 58: fippb.RspQryPosition.tradeHead:type_name -> fippb.RspTradeHead
	213, // 59: fippb.RspQryPosition.position:type_name -> fippb.Position
	212, // 60: fippb.ReqQryPositionDetail.contractType:type_name -> fippb.EContractTypeType
	200, // 61: fippb.ReqQryPositionDetail.exchangeId:type_name -> fippb.EExchgID
	191, // 62: fippb.RspQryPositionDetail.tradeHead:type_name -> fippb.RspTradeHead
	214, // 63: fippb.RspQryPositionDetail.positionDetail:type_name -> fippb.PositionDetail
	212, // 64: fippb.ReqQryOrderInfo.contractType:type_name -> fippb.EContractTypeType
	200, // 65: fippb.ReqQryOrderInfo.exchangeId:type_name -> fippb.EExchgID
	191, // 66: fippb.RspQryOrderInfo.tradeHead:type_name -> fippb.RspTradeHead
	215, // 67: fippb.RspQryOrderInfo.orderDetail:type_name -> fippb.OrderDetail
	191, // 68: fippb.RspQryCustomerCapital.tradeHead:type_name -> fippb.RspTradeHead
	216, // 69: fippb.RspQryCustomerCapital.capitalDetail:type_name -> fippb.CustomerCapitalDetail
	200, // 70: fippb.ReqQryExchangeContractInfo.exchangeId:type_name -> fippb.EExchgID
	212, // 71: fippb.ReqQryExchangeContractInfo.contractType:type_name -> fippb.EContractTypeType
	191, // 72: fippb.RspQryExchangeContractInfo.tradeHead:type_name -> fippb.RspTradeHead
	217, // 73: fippb.RspQryExchangeContractInfo.contractDetail:type_name -> fippb.ContractDetail
	191, // 74: fippb.RspQryAllContractInfo.tradeHead:type_name -> fippb.RspTradeHead
	217, // 75: fippb.RspQryAllContractInfo.contractDetail:type_name -> fippb.ContractDetail
	212, // 76: fippb.ReqQryMatchInfo.contractType:type_name -> fippb.EContractTypeType
	200, // 77: fippb.ReqQryMatchInfo.exchangeId:type_name -> fippb.EExchgID
	191, // 78: fippb.RspQryMatchInfo.tradeHead:type_name -> fippb.RspTradeHead
	218, // 79: fippb.RspQryMatchInfo.matchDetail:type_name -> fippb.MatchInfoDetail
	200, // 80: fippb.ReqQrySpecifyContract.exchangeId:type_name -> fippb.EExchgID
	191, // 81: fippb.RspQrySpecifyContract.tradeHead:type_name -> fippb.RspTradeHead
	219, // 82: fippb.RspQrySpecifyContract.specifyContractDetail:type_name -> fippb.SpecifyContractInfo
	200, // 83: fippb.ReqQryExchangeStatus.exchangeId:type_name -> fippb.EExchgID
	191, // 84: fippb.RspQryExchangeStatus.tradeHead:type_name -> fippb.RspTradeHead
	220, // 85: fippb.RspQryExchangeStatus.exchangeStatus:type_name -> fippb.EInstrumentStatusType
	200, // 86: fippb.RspQryExchangeStatus.exchangeId:type_name -> fippb.EExchgID
	200, // 87: fippb.RtnExchangeStatus.exchangeId:type_name -> fippb.EExchgID
	220, // 88: fippb.RtnExchangeStatus.exchangeStatus:type_name -> fippb.EInstrumentStatusType
	200, // 89: fippb.RtnExchangeStatusToTrig.exchangeId:type_name -> fippb.EExchgID
	220, // 90: fippb.RtnExchangeStatusToTrig.exchangeStatus:type_name -> fippb.EInstrumentStatusType
	221, // 91: fippb.ReqReleaseUser.releaseType:type_name -> fippb.EApiReleaseType
	191, // 92: fippb.RspReleaseUser.tradeHead:type_name -> fippb.RspTradeHead
	189, // 93: fippb.ReqDisposeSavedUserPassword.channelType:type_name -> fippb.EApiChannelType
	191, // 94: fippb.RspDisposeSavedUserPassword.tradeHead:type_name -> fippb.RspTradeHead
	189, // 95: fippb.ReqRecordUserOriginalRequestid.channelType:type_name -> fippb.EApiChannelType
	189, // 96: fippb.InnerTradeLoginInfo.channelType:type_name -> fippb.EApiChannelType
	189, // 97: fippb.InnerNtfUserTradeConnectStatus.channelType:type_name -> fippb.EApiChannelType
	189, // 98: fippb.InnerNtfServerQuotConnectStatus.channelType:type_name -> fippb.EApiChannelType
	222, // 99: fippb.InnerNtfServerQuotConnectStatus.activateStatus:type_name -> fippb.EActiveStatus
	191, // 100: fippb.RspRecordUserOriginalRequestid.tradeHead:type_name -> fippb.RspTradeHead
	191, // 101: fippb.RspTproxyLogin.tradeHead:type_name -> fippb.RspTradeHead
	200, // 102: fippb.ReqQryArbitrageContract.exchangeId:type_name -> fippb.EExchgID
	191, // 103: fippb.RspQryArbitrageContract.tradeHead:type_name -> fippb.RspTradeHead
	223, // 104: fippb.RspQryArbitrageContract.arbicontractDetail:type_name -> fippb.ArbiContractDetail
	200, // 105: fippb.ReqQryArbitrageCombineDetail.exchangeId:type_name -> fippb.EExchgID
	191, // 106: fippb.RspQryArbitrageCombineDetail.tradeHead:type_name -> fippb.RspTradeHead
	224, // 107: fippb.RspQryArbitrageCombineDetail.arbiCombineDetail:type_name -> fippb.ArbiCombineDetail
	203, // 108: fippb.ReqQryContractMarginRate.hedgeFlag:type_name -> fippb.EHedgeFlagType
	200, // 109: fippb.ReqQryContractMarginRate.exchangeId:type_name -> fippb.EExchgID
	212, // 110: fippb.ReqQryContractMarginRate.contractType:type_name -> fippb.EContractTypeType
	191, // 111: fippb.RspQryContractMarginRate.tradeHead:type_name -> fippb.RspTradeHead
	225, // 112: fippb.RspQryContractMarginRate.marginRateDetail:type_name -> fippb.MarginRateDetail
	200, // 113: fippb.ReqQryInstrumentCommissionRate.exchangeId:type_name -> fippb.EExchgID
	212, // 114: fippb.ReqQryInstrumentCommissionRate.contractType:type_name -> fippb.EContractTypeType
	203, // 115: fippb.ReqQryInstrumentCommissionRate.hedgeFlag:type_name -> fippb.EHedgeFlagType
	191, // 116: fippb.RspQryInstrumentCommissionRate.tradeHead:type_name -> fippb.RspTradeHead
	226, // 117: fippb.RspQryInstrumentCommissionRate.commissionRateDetail:type_name -> fippb.CommissionRateDetail
	227, // 118: fippb.ReqAddConditionOrder.conOrderInfo:type_name -> fippb.ConditionOrderInfo
	228, // 119: fippb.ReqAddConditionOrder.tradeParameter:type_name -> fippb.ConditionOrderTradeparameter
	191, // 120: fippb.RspAddConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 121: fippb.RspAddConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	227, // 122: fippb.ReqUpdateConditionOrder.conOrderInfo:type_name -> fippb.ConditionOrderInfo
	228, // 123: fippb.ReqUpdateConditionOrder.tradeParameter:type_name -> fippb.ConditionOrderTradeparameter
	191, // 124: fippb.RspUpdateConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 125: fippb.RspUpdateConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	191, // 126: fippb.RspPauseConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 127: fippb.RspPauseConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	191, // 128: fippb.RspStartConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 129: fippb.RspStartConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	191, // 130: fippb.RspDeleteConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 131: fippb.RspDeleteConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	191, // 132: fippb.RtnTriggerConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	229, // 133: fippb.RtnTriggerConditionOrder.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	230, // 134: fippb.ReqQryConditionOrderList.orderType:type_name -> fippb.EQryConOrderType
	231, // 135: fippb.ReqQryConditionOrderList.StatusType:type_name -> fippb.EQryConOrderStatusType
	191, // 136: fippb.RspQryConditionOrderList.tradeHead:type_name -> fippb.RspTradeHead
	229, // 137: fippb.RspQryConditionOrderList.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	200, // 138: fippb.ReqAddInstrumentToQuot.exchangeId:type_name -> fippb.EExchgID
	200, // 139: fippb.RtnTradeToTrigger.exchangeId:type_name -> fippb.EExchgID
	201, // 140: fippb.RtnTradeToTrigger.direction:type_name -> fippb.EDirectionType
	202, // 141: fippb.RtnTradeToTrigger.offsetFlag:type_name -> fippb.EOffsetFlagType
	203, // 142: fippb.RtnTradeToTrigger.hedgeFlag:type_name -> fippb.EHedgeFlagType
	204, // 143: fippb.RtnTradeToTrigger.tradeType:type_name -> fippb.ETradeTypeType
	205, // 144: fippb.RtnTradeToTrigger.priceSource:type_name -> fippb.EPriceSourceType
	232, // 145: fippb.ReqDeleteAllTriggeredConditionOrder.deleteType:type_name -> fippb.EDeleteConOrderType
	191, // 146: fippb.RspDeleteAllTriggeredConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	191, // 147: fippb.RtnDeleteAllTriggeredConditionOrder.tradeHead:type_name -> fippb.RspTradeHead
	232, // 148: fippb.RtnDeleteAllTriggeredConditionOrder.deleteType:type_name -> fippb.EDeleteConOrderType
	233, // 149: fippb.ReqSettlementInfoConfirm.settlementInfoConfirm:type_name -> fippb.SettlementInfoConfirm
	191, // 150: fippb.RspSettlementInfoConfirm.tradeHead:type_name -> fippb.RspTradeHead
	233, // 151: fippb.RspSettlementInfoConfirm.settlementInfoConfirm:type_name -> fippb.SettlementInfoConfirm
	191, // 152: fippb.RspQrySettlementInfoConfirm.tradeHead:type_name -> fippb.RspTradeHead
	233, // 153: fippb.RspQrySettlementInfoConfirm.settlementInfoConfirm:type_name -> fippb.SettlementInfoConfirm
	234, // 154: fippb.RspQrySettlementInfoConfirm.isConfirmed:type_name -> fippb.EBooLean
	191, // 155: fippb.RspQrySettlementInfo.tradeHead:type_name -> fippb.RspTradeHead
	235, // 156: fippb.ReqQryMaxOrderVolumn.maxOrderVolumn:type_name -> fippb.MaxOrderVolumn
	191, // 157: fippb.RspQryMaxOrderVolumn.tradeHead:type_name -> fippb.RspTradeHead
	235, // 158: fippb.RspQryMaxOrderVolumn.maxOrderVolumn:type_name -> fippb.MaxOrderVolumn
	200, // 159: fippb.ReqQryExecOrder.exchangeId:type_name -> fippb.EExchgID
	191, // 160: fippb.RspQryExecOrder.tradeHead:type_name -> fippb.RspTradeHead
	236, // 161: fippb.RspQryExecOrder.exeOrderDetail:type_name -> fippb.ExeOrderDetail
	200, // 162: fippb.ReqQryTradingCode.exchangeId:type_name -> fippb.EExchgID
	237, // 163: fippb.ReqQryTradingCode.clientIdType:type_name -> fippb.EClientIdTypeType
	191, // 164: fippb.RspQryTradingCode.tradeHead:type_name -> fippb.RspTradeHead
	238, // 165: fippb.RspQryTradingCode.tradingCodeDetail:type_name -> fippb.TradingCodeDetail
	191, // 166: fippb.RspQryContractBank.tradeHead:type_name -> fippb.RspTradeHead
	239, // 167: fippb.RspQryContractBank.contractBankField:type_name -> fippb.ContractBankField
	191, // 168: fippb.RspQryTransferSerial.tradeHead:type_name -> fippb.RspTradeHead
	240, // 169: fippb.RspQryTransferSerial.transferSerialField:type_name -> fippb.TransferSerialField
	241, // 170: fippb.ReqQryBankAccountMoney.queryAccountField:type_name -> fippb.QueryAccountField
	191, // 171: fippb.RspQryBankAccountMoney.tradeHead:type_name -> fippb.RspTradeHead
	241, // 172: fippb.RspQryBankAccountMoney.queryAccountField:type_name -> fippb.QueryAccountField
	241, // 173: fippb.RtnQryBankAccountMoney.queryAccountField:type_name -> fippb.QueryAccountField
	242, // 174: fippb.ReqFromBankToFuture.transField:type_name -> fippb.TransferField
	191, // 175: fippb.RspFromBankToFuture.tradeHead:type_name -> fippb.RspTradeHead
	242, // 176: fippb.RspFromBankToFuture.transferField:type_name -> fippb.TransferField
	241, // 177: fippb.RtnFromBankToFuture.queryAccountField:type_name -> fippb.QueryAccountField
	243, // 178: fippb.RtnFromBankToFuture.feePayFlag:type_name -> fippb.EFeePayFlagType
	244, // 179: fippb.RtnFromBankToFuture.transferStatus:type_name -> fippb.ETransferStatusType
	242, // 180: fippb.ReqFromFutureToBank.transField:type_name -> fippb.TransferField
	191, // 181: fippb.RspFromFutureToBank.tradeHead:type_name -> fippb.RspTradeHead
	242, // 182: fippb.RspFromFutureToBank.transferField:type_name -> fippb.TransferField
	241, // 183: fippb.RtnFromFutureToBank.queryAccountField:type_name -> fippb.QueryAccountField
	243, // 184: fippb.RtnFromFutureToBank.feePayFlag:type_name -> fippb.EFeePayFlagType
	244, // 185: fippb.RtnFromFutureToBank.transferStatus:type_name -> fippb.ETransferStatusType
	191, // 186: fippb.RspQryAccountregister.tradeHead:type_name -> fippb.RspTradeHead
	245, // 187: fippb.RspQryAccountregister.accountregField:type_name -> fippb.AccountregField
	203, // 188: fippb.ReqOptionInstrTradeCost.hedgeFlag:type_name -> fippb.EHedgeFlagType
	200, // 189: fippb.ReqOptionInstrTradeCost.exchangeId:type_name -> fippb.EExchgID
	191, // 190: fippb.RspOptionInstrTradeCost.tradeHead:type_name -> fippb.RspTradeHead
	246, // 191: fippb.RspOptionInstrTradeCost.optTradeCostField:type_name -> fippb.OptTradeCostField
	200, // 192: fippb.ReqOptionInstrCommRate.exchangeId:type_name -> fippb.EExchgID
	203, // 193: fippb.ReqOptionInstrCommRate.hedgeFlag:type_name -> fippb.EHedgeFlagType
	191, // 194: fippb.RspOptionInstrCommRate.tradeHead:type_name -> fippb.RspTradeHead
	247, // 195: fippb.RspOptionInstrCommRate.optCommRateField:type_name -> fippb.OptCommRateField
	191, // 196: fippb.RspPositionProfitAlgorithm.tradeHead:type_name -> fippb.RspTradeHead
	248, // 197: fippb.RspPositionProfitAlgorithm.profitalgorithmfield:type_name -> fippb.ProfitAlgorithmField
	200, // 198: fippb.ReqQryForQuote.exchangeId:type_name -> fippb.EExchgID
	191, // 199: fippb.RspQryForQuote.tradeHead:type_name -> fippb.RspTradeHead
	249, // 200: fippb.RspQryForQuote.forQuoteField:type_name -> fippb.ForQuoteField
	250, // 201: fippb.ReqForQuoteInsert.forQuoteInfo:type_name -> fippb.ForQuoteInfo
	191, // 202: fippb.RspForQuoteInsert.tradeHead:type_name -> fippb.RspTradeHead
	250, // 203: fippb.RspForQuoteInsert.forQuoteInfo:type_name -> fippb.ForQuoteInfo
	250, // 204: fippb.ErrRtnForQuoteInsert.forQuoteInfo:type_name -> fippb.ForQuoteInfo
	251, // 205: fippb.ReqConOrderInsert.conOrderInfo:type_name -> fippb.ConOrderInfo
	191, // 206: fippb.RspConOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	251, // 207: fippb.RspConOrderInsert.conOrderInfo:type_name -> fippb.ConOrderInfo
	200, // 208: fippb.ReqQryConOrderInfo.exchangeId:type_name -> fippb.EExchgID
	191, // 209: fippb.RspQryConOrderInfo.tradeHead:type_name -> fippb.RspTradeHead
	252, // 210: fippb.RspQryConOrderInfo.conOrderDetail:type_name -> fippb.ConOrderDetail
	251, // 211: fippb.RtnConOrder.conOrderInfo:type_name -> fippb.ConOrderInfo
	197, // 212: fippb.RtnConOrder.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	198, // 213: fippb.RtnConOrder.orderStatus:type_name -> fippb.EOrderStatusType
	192, // 214: fippb.RtnConOrder.sameUserKey:type_name -> fippb.SameUserKey
	206, // 215: fippb.ReqConOrderRemove.orderActionInfo:type_name -> fippb.OrderActionInfo
	191, // 216: fippb.RspConOrderRemove.tradeHead:type_name -> fippb.RspTradeHead
	206, // 217: fippb.RspConOrderRemove.orderActionInfo:type_name -> fippb.OrderActionInfo
	253, // 218: fippb.ReqTouchOrderInsert.touchOrderInfo:type_name -> fippb.TouchOrderInfo
	191, // 219: fippb.RspTouchOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	253, // 220: fippb.RspTouchOrderInsert.touchOrderInfo:type_name -> fippb.TouchOrderInfo
	200, // 221: fippb.ReqQryTouchOrderInfo.exchangeId:type_name -> fippb.EExchgID
	191, // 222: fippb.RspQryTouchOrderInfo.tradeHead:type_name -> fippb.RspTradeHead
	254, // 223: fippb.RspQryTouchOrderInfo.touchOrderDetail:type_name -> fippb.TouchOrderDetail
	253, // 224: fippb.RtnTouchOrder.touchOrderInfo:type_name -> fippb.TouchOrderInfo
	197, // 225: fippb.RtnTouchOrder.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	198, // 226: fippb.RtnTouchOrder.orderStatus:type_name -> fippb.EOrderStatusType
	192, // 227: fippb.RtnTouchOrder.sameUserKey:type_name -> fippb.SameUserKey
	206, // 228: fippb.ReqTouchOrderRemove.orderActionInfo:type_name -> fippb.OrderActionInfo
	191, // 229: fippb.RspTouchOrderRemove.tradeHead:type_name -> fippb.RspTradeHead
	206, // 230: fippb.RspTouchOrderRemove.orderActionInfo:type_name -> fippb.OrderActionInfo
	255, // 231: fippb.ReqParkedOrderInsert.parkedOrderInfo:type_name -> fippb.ParkedOrderInfo
	191, // 232: fippb.RspParkedOrderInsert.tradeHead:type_name -> fippb.RspTradeHead
	255, // 233: fippb.RspParkedOrderInsert.parkedOrderInfo:type_name -> fippb.ParkedOrderInfo
	200, // 234: fippb.ReqQryParkedOrder.exchangeId:type_name -> fippb.EExchgID
	191, // 235: fippb.RspQryParkedOrder.tradeHead:type_name -> fippb.RspTradeHead
	255, // 236: fippb.RspQryParkedOrder.parkedOrderInfo:type_name -> fippb.ParkedOrderInfo
	191, // 237: fippb.RspParkedOrderRemove.tradeHead:type_name -> fippb.RspTradeHead
	229, // 238: fippb.ReqConditionOrderParamCheck.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	230, // 239: fippb.ReqConditionOrderParamCheck.orderType:type_name -> fippb.EQryConOrderType
	191, // 240: fippb.RspConditionOrderParamCheck.tradeHead:type_name -> fippb.RspTradeHead
	202, // 241: fippb.RspConditionOrderParamCheck.offsetFlag:type_name -> fippb.EOffsetFlagType
	229, // 242: fippb.SubEmptyPositionInfo.orderInfoDetail:type_name -> fippb.ConditionOrderDetail
	230, // 243: fippb.SubEmptyPositionInfo.orderType:type_name -> fippb.EQryConOrderType
	200, // 244: fippb.NotifyEmptyPositionInfo.exchangeId:type_name -> fippb.EExchgID
	201, // 245: fippb.NotifyEmptyPositionInfo.direction:type_name -> fippb.EDirectionType
	202, // 246: fippb.NotifyEmptyPositionInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	203, // 247: fippb.NotifyEmptyPositionInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	256, // 248: fippb.NotifyServiceStatus.service_type:type_name -> fippb.ETradeServiceType
	257, // 249: fippb.NotifyServiceStatus.service_status:type_name -> fippb.ETradeServiceStatus
	256, // 250: fippb.NotifyAvailableCapacity.service_type:type_name -> fippb.ETradeServiceType
	189, // 251: fippb.NotifyAvailableCapacity.channel_type:type_name -> fippb.EApiChannelType
	189, // 252: fippb.ReqUserLoginInner.channelType:type_name -> fippb.EApiChannelType
	190, // 253: fippb.ReqUserLoginInner.registerAuthInfo:type_name -> fippb.RegisterAuthInfo
	191, // 254: fippb.RspUserConnectInner.tradeHead:type_name -> fippb.RspTradeHead
	191, // 255: fippb.RspUserDisConnectInner.tradeHead:type_name -> fippb.RspTradeHead
	191, // 256: fippb.RspAuthenticate.tradeHead:type_name -> fippb.RspTradeHead
	189, // 257: fippb.ReqUserQuotLogin.channelType:type_name -> fippb.EApiChannelType
	191, // 258: fippb.RspUserQuotLogin.tradeHead:type_name -> fippb.RspTradeHead
	189, // 259: fippb.RspUserQuotLogin.channelType:type_name -> fippb.EApiChannelType
	192, // 260: fippb.RspUserQuotLogin.sameUserKey:type_name -> fippb.SameUserKey
	193, // 261: fippb.RspUserQuotLogin.exchgTime:type_name -> fippb.ExchgTime
	191, // 262: fippb.RspQuotReleaseUser.tradeHead:type_name -> fippb.RspTradeHead
	200, // 263: fippb.ReqQuotSubscribe.exchangeId:type_name -> fippb.EExchgID
	191, // 264: fippb.RspQuotSubscribe.tradeHead:type_name -> fippb.RspTradeHead
	200, // 265: fippb.RspQuotSubscribe.exchangeId:type_name -> fippb.EExchgID
	200, // 266: fippb.ReqQuotUnSubscribe.exchangeId:type_name -> fippb.EExchgID
	191, // 267: fippb.RspQuotUnSubscribe.tradeHead:type_name -> fippb.RspTradeHead
	200, // 268: fippb.RspQuotUnSubscribe.exchangeId:type_name -> fippb.EExchgID
	191, // 269: fippb.RspQuotStatusSet.tradeHead:type_name -> fippb.RspTradeHead
	191, // 270: fippb.RspQuotOptimalStation.tradeHead:type_name -> fippb.RspTradeHead
	258, // 271: fippb.RspQuotOptimalStation.stationInfo:type_name -> fippb.StationInfo
	191, // 272: fippb.NotifyQuotErr.tradeHead:type_name -> fippb.RspTradeHead
	191, // 273: fippb.NotifyQuotHeart.tradeHead:type_name -> fippb.RspTradeHead
	191, // 274: fippb.NotifyQuotConnected.tradeHead:type_name -> fippb.RspTradeHead
	201, // 275: fippb.ReqCombActionInsert.direction:type_name -> fippb.EDirectionType
	259, // 276: fippb.ReqCombActionInsert.combDirection:type_name -> fippb.ECombDirectionType
	203, // 277: fippb.ReqCombActionInsert.hedgeFlag:type_name -> fippb.EHedgeFlagType
	200, // 278: fippb.ReqCombActionInsert.exchangeId:type_name -> fippb.EExchgID
	191, // 279: fippb.RspCombActionInsert.tradeHead:type_name -> fippb.RspTradeHead
	201, // 280: fippb.RspCombActionInsert.direction:type_name -> fippb.EDirectionType
	259, // 281: fippb.RspCombActionInsert.combDirection:type_name -> fippb.ECombDirectionType
	203, // 282: fippb.RspCombActionInsert.hedgeFlag:type_name -> fippb.EHedgeFlagType
	200, // 283: fippb.RspCombActionInsert.exchangeId:type_name -> fippb.EExchgID
	201, // 284: fippb.RtnCombAction.direction:type_name -> fippb.EDirectionType
	259, // 285: fippb.RtnCombAction.combDirection:type_name -> fippb.ECombDirectionType
	203, // 286: fippb.RtnCombAction.hedgeFlag:type_name -> fippb.EHedgeFlagType
	200, // 287: fippb.RtnCombAction.exchangeId:type_name -> fippb.EExchgID
	207, // 288: fippb.RtnCombAction.orderActionStatus:type_name -> fippb.EOrderActionStatusType
	191, // 289: fippb.RspQryCFMMCAccountKey.tradeHead:type_name -> fippb.RspTradeHead
	200, // 290: fippb.ReqQryRiskSettleProduct.exchangeId:type_name -> fippb.EExchgID
	260, // 291: fippb.ReqQryRiskSettleProduct.productClass:type_name -> fippb.EProductClassType
	191, // 292: fippb.RspQryRiskSettleProduct.tradeHead:type_name -> fippb.RspTradeHead
	200, // 293: fippb.RspQryRiskSettleProduct.exchangeId:type_name -> fippb.EExchgID
	261, // 294: fippb.RspQryRiskSettleProduct.productIdStatus:type_name -> fippb.ERiskSettleProductStatus
	260, // 295: fippb.RspQryRiskSettleProduct.productClass:type_name -> fippb.EProductClassType
	200, // 296: fippb.ReqQryRiskSettlePosition.exchangeId:type_name -> fippb.EExchgID
	191, // 297: fippb.RspQryRiskSettlePosition.tradeHead:type_name -> fippb.RspTradeHead
	262, // 298: fippb.RspQryRiskSettlePosition.position:type_name -> fippb.RiskPosition
	191, // 299: fippb.RspQryInvestor.tradeHead:type_name -> fippb.RspTradeHead
	263, // 300: fippb.RspQryInvestor.investorInfo:type_name -> fippb.InvestorInfo
	301, // [301:301] is the sub-list for method output_type
	301, // [301:301] is the sub-list for method input_type
	301, // [301:301] is the sub-list for extension type_name
	301, // [301:301] is the sub-list for extension extendee
	0,   // [0:301] is the sub-list for field type_name
}

func init() { file_fip_interface_trade_proto_init() }
func file_fip_interface_trade_proto_init() {
	if File_fip_interface_trade_proto != nil {
		return
	}
	file_fip_def_trade_proto_init()
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserLoginBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserLoginBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoginForConditionOrderAsUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLoginForConditionOrderAsUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqResetUserPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspResetUserPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqResetAccountPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspResetAccountPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOrderInsertToTrig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrRtnOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrRtnOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqExeOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspExeOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrRtnExeOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnExeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqExeOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspExeOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrRtnExeOrderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryPositionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryPositionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryCustomerCapital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryCustomerCapital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryExchangeContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryExchangeContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryAllContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryAllContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySpecifyContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySpecifyContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryExchangeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryExchangeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnExchangeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnExchangeStatusToTrig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTradePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTradePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReleaseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspReleaseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDisposeSavedUserPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDisposeSavedUserPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRecordUserOriginalRequestid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerTradeLoginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerNtfUserTradeConnectStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerNtfServerQuotConnectStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerResetPwd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspRecordUserOriginalRequestid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTproxyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTproxyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryArbitrageContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryArbitrageContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryArbitrageCombineDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryArbitrageCombineDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryContractMarginRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryContractMarginRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryInstrumentCommissionRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryInstrumentCommissionRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAddConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUpdateConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPauseConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPauseConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStartConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspStartConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnTriggerConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnConOrderInsertResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryConditionOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryConditionOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddInstrumentToQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnTradeToTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnLongConnLocalPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteAllTriggeredConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteAllTriggeredConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnDeleteAllTriggeredConditionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSettlementInfoConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSettlementInfoConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySettlementInfoConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySettlementInfoConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySettlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySettlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryMaxOrderVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryMaxOrderVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryExecOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryExecOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryTradingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryTradingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryContractBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryContractBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryTransferSerial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryTransferSerial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryBankAccountMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryBankAccountMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnQryBankAccountMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFromBankToFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFromBankToFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnFromBankToFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFromFutureToBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFromFutureToBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnFromFutureToBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryAccountregister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryAccountregister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOptionInstrTradeCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOptionInstrTradeCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOptionInstrCommRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOptionInstrCommRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPositionProfitAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPositionProfitAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryForQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryForQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqForQuoteInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspForQuoteInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrRtnForQuoteInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryConOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryConOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnConOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTouchOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTouchOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryTouchOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryTouchOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnTouchOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTouchOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTouchOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParkedOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspParkedOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryParkedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryParkedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParkedOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspParkedOrderRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnMblRealQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConditionOrderParamCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConditionOrderParamCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubEmptyPositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyEmptyPositionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyAvailableCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserLoginInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserConnectInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserDisConnectInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAuthenticate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyConnectedCid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserQuotLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUserQuotLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotReleaseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotReleaseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotUnSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotUnSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotStatusSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotStatusSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotOptimalStation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotOptimalStation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyQuotErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyQuotHeart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyQuotConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCombActionInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCombActionInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnCombAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryCFMMCAccountKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryCFMMCAccountKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryRiskSettleProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryRiskSettleProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryRiskSettlePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryRiskSettlePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryInvestor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_trade_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryInvestor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   189,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_trade_proto_goTypes,
		DependencyIndexes: file_fip_interface_trade_proto_depIdxs,
		MessageInfos:      file_fip_interface_trade_proto_msgTypes,
	}.Build()
	File_fip_interface_trade_proto = out.File
	file_fip_interface_trade_proto_rawDesc = nil
	file_fip_interface_trade_proto_goTypes = nil
	file_fip_interface_trade_proto_depIdxs = nil
}
