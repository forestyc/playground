//*
// Copyright (C) 2017-2021，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 类型及数据定义
//
// @author fengbaoxin@dce.com.cn,houyahui@dce.com.cn
//
// @date 2021-9-10
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def_sec.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESecErrorCode int32

const (
	ESecErrorCode_SecAll_Success              ESecErrorCode = 0   // 表示成功
	ESecErrorCode_SecReal_InvalidExchangeId   ESecErrorCode = 100 // 交易所id错误
	ESecErrorCode_SecReal_PriceError          ESecErrorCode = 101 // 获取分价数据包错误
	ESecErrorCode_SecReal_VolumeError         ESecErrorCode = 102 // 获取分笔数据包错误
	ESecErrorCode_SecHis_Error                ESecErrorCode = 200 // 错误
	ESecErrorCode_SecHis_InvalidParams        ESecErrorCode = 201 // 无效参数
	ESecErrorCode_SecHis_InitMore             ESecErrorCode = 202 // 重复初始化
	ESecErrorCode_SecHis_InitFirst            ESecErrorCode = 203 // 必须先初始化
	ESecErrorCode_SecHis_SendError            ESecErrorCode = 204 // 发送数据错误
	ESecErrorCode_SecHis_MmapError            ESecErrorCode = 205 // mmap内存映射错误
	ESecErrorCode_SecHis_OpenError            ESecErrorCode = 206 // 打开文件错误
	ESecErrorCode_SecHis_WriteError           ESecErrorCode = 207 // 写文件错误
	ESecErrorCode_SecHis_EmptyData            ESecErrorCode = 208 // 空数据
	ESecErrorCode_SecHis_AllocMemError        ESecErrorCode = 209 // 申请内存错误
	ESecErrorCode_SecHis_LoadError            ESecErrorCode = 210 // 加载数据错误
	ESecErrorCode_SecHis_PBUnMarshalError     ESecErrorCode = 211 // pb包序列化错误
	ESecErrorCode_SecHis_OtherError           ESecErrorCode = 299 // 历史的其它错误
	ESecErrorCode_SecManage_InvalidExchangeId ESecErrorCode = 300 // 交易所id错误
	ESecErrorCode_SecManage_EmptyData         ESecErrorCode = 301 // 空数据
)

// Enum value maps for ESecErrorCode.
var (
	ESecErrorCode_name = map[int32]string{
		0:   "SecAll_Success",
		100: "SecReal_InvalidExchangeId",
		101: "SecReal_PriceError",
		102: "SecReal_VolumeError",
		200: "SecHis_Error",
		201: "SecHis_InvalidParams",
		202: "SecHis_InitMore",
		203: "SecHis_InitFirst",
		204: "SecHis_SendError",
		205: "SecHis_MmapError",
		206: "SecHis_OpenError",
		207: "SecHis_WriteError",
		208: "SecHis_EmptyData",
		209: "SecHis_AllocMemError",
		210: "SecHis_LoadError",
		211: "SecHis_PBUnMarshalError",
		299: "SecHis_OtherError",
		300: "SecManage_InvalidExchangeId",
		301: "SecManage_EmptyData",
	}
	ESecErrorCode_value = map[string]int32{
		"SecAll_Success":              0,
		"SecReal_InvalidExchangeId":   100,
		"SecReal_PriceError":          101,
		"SecReal_VolumeError":         102,
		"SecHis_Error":                200,
		"SecHis_InvalidParams":        201,
		"SecHis_InitMore":             202,
		"SecHis_InitFirst":            203,
		"SecHis_SendError":            204,
		"SecHis_MmapError":            205,
		"SecHis_OpenError":            206,
		"SecHis_WriteError":           207,
		"SecHis_EmptyData":            208,
		"SecHis_AllocMemError":        209,
		"SecHis_LoadError":            210,
		"SecHis_PBUnMarshalError":     211,
		"SecHis_OtherError":           299,
		"SecManage_InvalidExchangeId": 300,
		"SecManage_EmptyData":         301,
	}
)

func (x ESecErrorCode) Enum() *ESecErrorCode {
	p := new(ESecErrorCode)
	*p = x
	return p
}

func (x ESecErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[0].Descriptor()
}

func (ESecErrorCode) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[0]
}

func (x ESecErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecErrorCode.Descriptor instead.
func (ESecErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{0}
}

// 开平性质
type ESecOffsetFlag int32

const (
	ESecOffsetFlag_SecOF_Null        ESecOffsetFlag = 0  // 默认null
	ESecOffsetFlag_SecOF_OpenDouble  ESecOffsetFlag = 1  // 双开
	ESecOffsetFlag_SecOF_OpenMulti   ESecOffsetFlag = 2  // 多开
	ESecOffsetFlag_SecOF_OpenNil     ESecOffsetFlag = 3  // 空开
	ESecOffsetFlag_SecOF_CloseDouble ESecOffsetFlag = 4  // 双平
	ESecOffsetFlag_SecOF_CloseMulti  ESecOffsetFlag = 5  // 多平
	ESecOffsetFlag_SecOF_CloseNil    ESecOffsetFlag = 6  // 空平
	ESecOffsetFlag_SecOF_ChangePeer  ESecOffsetFlag = 7  // 换手
	ESecOffsetFlag_SecOF_ChangeMulti ESecOffsetFlag = 8  // 多换
	ESecOffsetFlag_SecOF_ChangeNil   ESecOffsetFlag = 9  // 空换
	ESecOffsetFlag_SecOF_NilType     ESecOffsetFlag = 10 // 不满足买盘和卖盘条件
)

// Enum value maps for ESecOffsetFlag.
var (
	ESecOffsetFlag_name = map[int32]string{
		0:  "SecOF_Null",
		1:  "SecOF_OpenDouble",
		2:  "SecOF_OpenMulti",
		3:  "SecOF_OpenNil",
		4:  "SecOF_CloseDouble",
		5:  "SecOF_CloseMulti",
		6:  "SecOF_CloseNil",
		7:  "SecOF_ChangePeer",
		8:  "SecOF_ChangeMulti",
		9:  "SecOF_ChangeNil",
		10: "SecOF_NilType",
	}
	ESecOffsetFlag_value = map[string]int32{
		"SecOF_Null":        0,
		"SecOF_OpenDouble":  1,
		"SecOF_OpenMulti":   2,
		"SecOF_OpenNil":     3,
		"SecOF_CloseDouble": 4,
		"SecOF_CloseMulti":  5,
		"SecOF_CloseNil":    6,
		"SecOF_ChangePeer":  7,
		"SecOF_ChangeMulti": 8,
		"SecOF_ChangeNil":   9,
		"SecOF_NilType":     10,
	}
)

func (x ESecOffsetFlag) Enum() *ESecOffsetFlag {
	p := new(ESecOffsetFlag)
	*p = x
	return p
}

func (x ESecOffsetFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecOffsetFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[1].Descriptor()
}

func (ESecOffsetFlag) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[1]
}

func (x ESecOffsetFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecOffsetFlag.Descriptor instead.
func (ESecOffsetFlag) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{1}
}

// K线类型
type ESecKLineType int32

const (
	ESecKLineType_SecKLine_Minute_1  ESecKLineType = 0  // 1分钟K线
	ESecKLineType_SecKLine_Minute_3  ESecKLineType = 1  // 3分钟K线
	ESecKLineType_SecKLine_Minute_5  ESecKLineType = 2  // 5分钟K线
	ESecKLineType_SecKLine_Minute_10 ESecKLineType = 3  // 10分钟K线
	ESecKLineType_SecKLine_Minute_15 ESecKLineType = 4  // 15分钟K线
	ESecKLineType_SecKLine_Minute_30 ESecKLineType = 5  // 30分钟K线
	ESecKLineType_SecKLine_Hour_1    ESecKLineType = 6  // 1小时K线
	ESecKLineType_SecKLine_Hour_2    ESecKLineType = 7  // 2小时K线
	ESecKLineType_SecKLine_Hour_3    ESecKLineType = 8  // 3小时K线
	ESecKLineType_SecKLine_Hour_4    ESecKLineType = 9  // 4小时K线
	ESecKLineType_SecKLine_Day       ESecKLineType = 10 // 日K线
	ESecKLineType_SecKLine_Week_1    ESecKLineType = 11 // 1周K线
	ESecKLineType_SecKLine_Month_1   ESecKLineType = 12 // 1月K线
	ESecKLineType_SecKLine_Quarter_1 ESecKLineType = 13 // 1季K线
	ESecKLineType_SecKLine_Year_1    ESecKLineType = 14 // 1年K线
)

// Enum value maps for ESecKLineType.
var (
	ESecKLineType_name = map[int32]string{
		0:  "SecKLine_Minute_1",
		1:  "SecKLine_Minute_3",
		2:  "SecKLine_Minute_5",
		3:  "SecKLine_Minute_10",
		4:  "SecKLine_Minute_15",
		5:  "SecKLine_Minute_30",
		6:  "SecKLine_Hour_1",
		7:  "SecKLine_Hour_2",
		8:  "SecKLine_Hour_3",
		9:  "SecKLine_Hour_4",
		10: "SecKLine_Day",
		11: "SecKLine_Week_1",
		12: "SecKLine_Month_1",
		13: "SecKLine_Quarter_1",
		14: "SecKLine_Year_1",
	}
	ESecKLineType_value = map[string]int32{
		"SecKLine_Minute_1":  0,
		"SecKLine_Minute_3":  1,
		"SecKLine_Minute_5":  2,
		"SecKLine_Minute_10": 3,
		"SecKLine_Minute_15": 4,
		"SecKLine_Minute_30": 5,
		"SecKLine_Hour_1":    6,
		"SecKLine_Hour_2":    7,
		"SecKLine_Hour_3":    8,
		"SecKLine_Hour_4":    9,
		"SecKLine_Day":       10,
		"SecKLine_Week_1":    11,
		"SecKLine_Month_1":   12,
		"SecKLine_Quarter_1": 13,
		"SecKLine_Year_1":    14,
	}
)

func (x ESecKLineType) Enum() *ESecKLineType {
	p := new(ESecKLineType)
	*p = x
	return p
}

func (x ESecKLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecKLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[2].Descriptor()
}

func (ESecKLineType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[2]
}

func (x ESecKLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecKLineType.Descriptor instead.
func (ESecKLineType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{2}
}

// 均量类型
type ESecAvgVolumeType int32

const (
	ESecAvgVolumeType_SecAVT_LastDay     ESecAvgVolumeType = 0 // 昨日均量计算
	ESecAvgVolumeType_SecAVT_FstContract ESecAvgVolumeType = 1 // 合约第一天上市
	ESecAvgVolumeType_SecAVT_FstVariey   ESecAvgVolumeType = 2 // 品种第一天上市
)

// Enum value maps for ESecAvgVolumeType.
var (
	ESecAvgVolumeType_name = map[int32]string{
		0: "SecAVT_LastDay",
		1: "SecAVT_FstContract",
		2: "SecAVT_FstVariey",
	}
	ESecAvgVolumeType_value = map[string]int32{
		"SecAVT_LastDay":     0,
		"SecAVT_FstContract": 1,
		"SecAVT_FstVariey":   2,
	}
)

func (x ESecAvgVolumeType) Enum() *ESecAvgVolumeType {
	p := new(ESecAvgVolumeType)
	*p = x
	return p
}

func (x ESecAvgVolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecAvgVolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[3].Descriptor()
}

func (ESecAvgVolumeType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[3]
}

func (x ESecAvgVolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecAvgVolumeType.Descriptor instead.
func (ESecAvgVolumeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{3}
}

// 成交方向
type ESecMatchType int32

const (
	ESecMatchType_SecMT_Null      ESecMatchType = 0 // 默认null
	ESecMatchType_SecMT_BuyMatch  ESecMatchType = 1 // 买盘(买成交)
	ESecMatchType_SecMT_SellMatch ESecMatchType = 2 // 卖盘(卖成交)
)

// Enum value maps for ESecMatchType.
var (
	ESecMatchType_name = map[int32]string{
		0: "SecMT_Null",
		1: "SecMT_BuyMatch",
		2: "SecMT_SellMatch",
	}
	ESecMatchType_value = map[string]int32{
		"SecMT_Null":      0,
		"SecMT_BuyMatch":  1,
		"SecMT_SellMatch": 2,
	}
)

func (x ESecMatchType) Enum() *ESecMatchType {
	p := new(ESecMatchType)
	*p = x
	return p
}

func (x ESecMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[4].Descriptor()
}

func (ESecMatchType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[4]
}

func (x ESecMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecMatchType.Descriptor instead.
func (ESecMatchType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{4}
}

// 订阅数据类型(中继内部使用)
type ESecSubDataType int32

const (
	ESecSubDataType_SecSDT_TimeChart   ESecSubDataType = 0 // 分时数据
	ESecSubDataType_SecSDT_MatchDetail ESecSubDataType = 1 // 成交明细数据
	ESecSubDataType_SecSDT_KLine       ESecSubDataType = 2 // K线数据
)

// Enum value maps for ESecSubDataType.
var (
	ESecSubDataType_name = map[int32]string{
		0: "SecSDT_TimeChart",
		1: "SecSDT_MatchDetail",
		2: "SecSDT_KLine",
	}
	ESecSubDataType_value = map[string]int32{
		"SecSDT_TimeChart":   0,
		"SecSDT_MatchDetail": 1,
		"SecSDT_KLine":       2,
	}
)

func (x ESecSubDataType) Enum() *ESecSubDataType {
	p := new(ESecSubDataType)
	*p = x
	return p
}

func (x ESecSubDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecSubDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[5].Descriptor()
}

func (ESecSubDataType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[5]
}

func (x ESecSubDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecSubDataType.Descriptor instead.
func (ESecSubDataType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{5}
}

// 历史服务处理消息类型(中继内部使用)
type ESecHandleType int32

const (
	ESecHandleType_SecHT_TimeChart   ESecHandleType = 0 // 分时数据处理完毕
	ESecHandleType_SecHT_MatchDetail ESecHandleType = 1 // 成交明细数据处理完毕
	ESecHandleType_SecHT_KLine       ESecHandleType = 2 // K线数据处理完毕
)

// Enum value maps for ESecHandleType.
var (
	ESecHandleType_name = map[int32]string{
		0: "SecHT_TimeChart",
		1: "SecHT_MatchDetail",
		2: "SecHT_KLine",
	}
	ESecHandleType_value = map[string]int32{
		"SecHT_TimeChart":   0,
		"SecHT_MatchDetail": 1,
		"SecHT_KLine":       2,
	}
)

func (x ESecHandleType) Enum() *ESecHandleType {
	p := new(ESecHandleType)
	*p = x
	return p
}

func (x ESecHandleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecHandleType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[6].Descriptor()
}

func (ESecHandleType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[6]
}

func (x ESecHandleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecHandleType.Descriptor instead.
func (ESecHandleType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{6}
}

// 证券类型 注意：不要与EContractType重复,不要与EPgmContractType重复
type ESecStockType int32

const (
	ESecStockType_SecST_All ESecStockType = 0 // 所有类型
	// 股票类型
	ESecStockType_SecST_StockAll  ESecStockType = 1010 // 所有股票类型
	ESecStockType_SecST_StockA    ESecStockType = 1011 // A股
	ESecStockType_SecST_StockB    ESecStockType = 1012 // B股
	ESecStockType_SecST_StockKSH  ESecStockType = 1013 // 科创板
	ESecStockType_SecST_StockSME  ESecStockType = 1014 // 中小板
	ESecStockType_SecST_StockGEM  ESecStockType = 1015 // 创业板
	ESecStockType_SecST_StockPS   ESecStockType = 1016 // 优先股
	ESecStockType_SecST_StockBase ESecStockType = 1017 // 新三板-基础层
	ESecStockType_SecST_StockINNO ESecStockType = 1018 // 新三板-创新层(innovation)
	ESecStockType_SecST_StockOEQ  ESecStockType = 1019 // 其它股票
	// 期权类型
	ESecStockType_SecST_OptAll   ESecStockType = 1020 // 所有期权类型
	ESecStockType_SecST_OptStock ESecStockType = 1021 // 个股期权
	ESecStockType_SecST_OptETF   ESecStockType = 1022 // ETF 期权
	// 基金类型
	ESecStockType_SecST_FundAll ESecStockType = 1030 // 所有基金类型
	ESecStockType_SecST_FundCEF ESecStockType = 1031 // 封闭式基金
	ESecStockType_SecST_FundOEF ESecStockType = 1032 // 开放式基金
	ESecStockType_SecST_FundETF ESecStockType = 1033 // 交易所交易基金（买卖）
	ESecStockType_SecST_FundOFN ESecStockType = 1039 // 其它基金
	// 债券类型
	ESecStockType_SecST_BondAll   ESecStockType = 1040 // 所有债券类型
	ESecStockType_SecST_BondDis   ESecStockType = 1041 // 债券分销
	ESecStockType_SecST_Bond      ESecStockType = 1042 // 债券
	ESecStockType_SecST_BondBack  ESecStockType = 1043 // 债券回购
	ESecStockType_SecST_BondOther ESecStockType = 1049 // 其它债券
	// 指数类型
	ESecStockType_SecST_IndexAll  ESecStockType = 1050 // 所有指数
	ESecStockType_SecST_IndexCS   ESecStockType = 1051 // 中证指数
	ESecStockType_SecST_IndexSH   ESecStockType = 1052 // 上海重点指数
	ESecStockType_SecST_IndexSZ   ESecStockType = 1053 // 深圳指数
	ESecStockType_SecST_IndexNEEQ ESecStockType = 1054 // 全国股转系统指数
	// 其它证券
	ESecStockType_SecST_Other ESecStockType = 1060 // 其它证券
)

// Enum value maps for ESecStockType.
var (
	ESecStockType_name = map[int32]string{
		0:    "SecST_All",
		1010: "SecST_StockAll",
		1011: "SecST_StockA",
		1012: "SecST_StockB",
		1013: "SecST_StockKSH",
		1014: "SecST_StockSME",
		1015: "SecST_StockGEM",
		1016: "SecST_StockPS",
		1017: "SecST_StockBase",
		1018: "SecST_StockINNO",
		1019: "SecST_StockOEQ",
		1020: "SecST_OptAll",
		1021: "SecST_OptStock",
		1022: "SecST_OptETF",
		1030: "SecST_FundAll",
		1031: "SecST_FundCEF",
		1032: "SecST_FundOEF",
		1033: "SecST_FundETF",
		1039: "SecST_FundOFN",
		1040: "SecST_BondAll",
		1041: "SecST_BondDis",
		1042: "SecST_Bond",
		1043: "SecST_BondBack",
		1049: "SecST_BondOther",
		1050: "SecST_IndexAll",
		1051: "SecST_IndexCS",
		1052: "SecST_IndexSH",
		1053: "SecST_IndexSZ",
		1054: "SecST_IndexNEEQ",
		1060: "SecST_Other",
	}
	ESecStockType_value = map[string]int32{
		"SecST_All":       0,
		"SecST_StockAll":  1010,
		"SecST_StockA":    1011,
		"SecST_StockB":    1012,
		"SecST_StockKSH":  1013,
		"SecST_StockSME":  1014,
		"SecST_StockGEM":  1015,
		"SecST_StockPS":   1016,
		"SecST_StockBase": 1017,
		"SecST_StockINNO": 1018,
		"SecST_StockOEQ":  1019,
		"SecST_OptAll":    1020,
		"SecST_OptStock":  1021,
		"SecST_OptETF":    1022,
		"SecST_FundAll":   1030,
		"SecST_FundCEF":   1031,
		"SecST_FundOEF":   1032,
		"SecST_FundETF":   1033,
		"SecST_FundOFN":   1039,
		"SecST_BondAll":   1040,
		"SecST_BondDis":   1041,
		"SecST_Bond":      1042,
		"SecST_BondBack":  1043,
		"SecST_BondOther": 1049,
		"SecST_IndexAll":  1050,
		"SecST_IndexCS":   1051,
		"SecST_IndexSH":   1052,
		"SecST_IndexSZ":   1053,
		"SecST_IndexNEEQ": 1054,
		"SecST_Other":     1060,
	}
)

func (x ESecStockType) Enum() *ESecStockType {
	p := new(ESecStockType)
	*p = x
	return p
}

func (x ESecStockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecStockType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[7].Descriptor()
}

func (ESecStockType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[7]
}

func (x ESecStockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecStockType.Descriptor instead.
func (ESecStockType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{7}
}

// 订阅类型
type ESecSubType int32

const (
	ESecSubType_SecST_Add        ESecSubType = 0 // 新增订阅(不覆盖之前订阅)
	ESecSubType_SecST_CancelPart ESecSubType = 1 // 取消list范围内的订阅
	ESecSubType_SecST_CancelAll  ESecSubType = 2 // 取消所有订阅
	ESecSubType_SecST_Update     ESecSubType = 3 // 更换订阅(覆盖之前订阅)
)

// Enum value maps for ESecSubType.
var (
	ESecSubType_name = map[int32]string{
		0: "SecST_Add",
		1: "SecST_CancelPart",
		2: "SecST_CancelAll",
		3: "SecST_Update",
	}
	ESecSubType_value = map[string]int32{
		"SecST_Add":        0,
		"SecST_CancelPart": 1,
		"SecST_CancelAll":  2,
		"SecST_Update":     3,
	}
)

func (x ESecSubType) Enum() *ESecSubType {
	p := new(ESecSubType)
	*p = x
	return p
}

func (x ESecSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[8].Descriptor()
}

func (ESecSubType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[8]
}

func (x ESecSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecSubType.Descriptor instead.
func (ESecSubType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{8}
}

// 订阅合约类型
type ESecSubContractType int32

const (
	ESecSubContractType_SecSCT_Exchange   ESecSubContractType = 0 // 按交易所订阅
	ESecSubContractType_SecSCT_Contract   ESecSubContractType = 1 // 按合约订阅
	ESecSubContractType_SecSCT_StockType  ESecSubContractType = 2 // 按证券类型订阅
	ESecSubContractType_SecSCT_Underlying ESecSubContractType = 3 // 按期权标的订阅
)

// Enum value maps for ESecSubContractType.
var (
	ESecSubContractType_name = map[int32]string{
		0: "SecSCT_Exchange",
		1: "SecSCT_Contract",
		2: "SecSCT_StockType",
		3: "SecSCT_Underlying",
	}
	ESecSubContractType_value = map[string]int32{
		"SecSCT_Exchange":   0,
		"SecSCT_Contract":   1,
		"SecSCT_StockType":  2,
		"SecSCT_Underlying": 3,
	}
)

func (x ESecSubContractType) Enum() *ESecSubContractType {
	p := new(ESecSubContractType)
	*p = x
	return p
}

func (x ESecSubContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecSubContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[9].Descriptor()
}

func (ESecSubContractType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[9]
}

func (x ESecSubContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecSubContractType.Descriptor instead.
func (ESecSubContractType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{9}
}

// 货币类型
type ESecCurrencyType int32

const (
	ESecCurrencyType_SecCT_RMB ESecCurrencyType = 0 // 人民币
	ESecCurrencyType_SecCT_HKD ESecCurrencyType = 1 // 港元
	ESecCurrencyType_SecCT_USD ESecCurrencyType = 2 // 美元
	ESecCurrencyType_SecCT_TWD ESecCurrencyType = 3 // 台币
	ESecCurrencyType_SecCT_JPY ESecCurrencyType = 4 // 日元
)

// Enum value maps for ESecCurrencyType.
var (
	ESecCurrencyType_name = map[int32]string{
		0: "SecCT_RMB",
		1: "SecCT_HKD",
		2: "SecCT_USD",
		3: "SecCT_TWD",
		4: "SecCT_JPY",
	}
	ESecCurrencyType_value = map[string]int32{
		"SecCT_RMB": 0,
		"SecCT_HKD": 1,
		"SecCT_USD": 2,
		"SecCT_TWD": 3,
		"SecCT_JPY": 4,
	}
)

func (x ESecCurrencyType) Enum() *ESecCurrencyType {
	p := new(ESecCurrencyType)
	*p = x
	return p
}

func (x ESecCurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecCurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[10].Descriptor()
}

func (ESecCurrencyType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[10]
}

func (x ESecCurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecCurrencyType.Descriptor instead.
func (ESecCurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{10}
}

// 行权方式
type ESecExerciseType int32

const (
	ESecExerciseType_SecET_Amercia  ESecExerciseType = 0 // 美式
	ESecExerciseType_SecET_Bermuda  ESecExerciseType = 1 // 百慕大式
	ESecExerciseType_SecET_European ESecExerciseType = 2 // 欧式
)

// Enum value maps for ESecExerciseType.
var (
	ESecExerciseType_name = map[int32]string{
		0: "SecET_Amercia",
		1: "SecET_Bermuda",
		2: "SecET_European",
	}
	ESecExerciseType_value = map[string]int32{
		"SecET_Amercia":  0,
		"SecET_Bermuda":  1,
		"SecET_European": 2,
	}
)

func (x ESecExerciseType) Enum() *ESecExerciseType {
	p := new(ESecExerciseType)
	*p = x
	return p
}

func (x ESecExerciseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecExerciseType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[11].Descriptor()
}

func (ESecExerciseType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[11]
}

func (x ESecExerciseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecExerciseType.Descriptor instead.
func (ESecExerciseType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{11}
}

// 认购认沽
type ESecCallOrPut int32

const (
	ESecCallOrPut_SecCOP_NULL ESecCallOrPut = 0
	ESecCallOrPut_SecCOP_CALL ESecCallOrPut = 1 // 认购
	ESecCallOrPut_SecCOP_PUT  ESecCallOrPut = 2 // 认沽
)

// Enum value maps for ESecCallOrPut.
var (
	ESecCallOrPut_name = map[int32]string{
		0: "SecCOP_NULL",
		1: "SecCOP_CALL",
		2: "SecCOP_PUT",
	}
	ESecCallOrPut_value = map[string]int32{
		"SecCOP_NULL": 0,
		"SecCOP_CALL": 1,
		"SecCOP_PUT":  2,
	}
)

func (x ESecCallOrPut) Enum() *ESecCallOrPut {
	p := new(ESecCallOrPut)
	*p = x
	return p
}

func (x ESecCallOrPut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecCallOrPut) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[12].Descriptor()
}

func (ESecCallOrPut) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[12]
}

func (x ESecCallOrPut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecCallOrPut.Descriptor instead.
func (ESecCallOrPut) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{12}
}

// 市场类型
type ESecMarketType int32

const (
	ESecMarketType_SecMT_Global ESecMarketType = 0 // 全球
	ESecMarketType_SecMT_SH     ESecMarketType = 1 // 上交所
	ESecMarketType_SecMT_SZ     ESecMarketType = 2 // 深交所
	ESecMarketType_SecMT_HS     ESecMarketType = 3 // 沪深
	ESecMarketType_SecMT_HK     ESecMarketType = 4 // 香港
	ESecMarketType_SecMT_AP     ESecMarketType = 5 // 亚太
	ESecMarketType_SecMT_Bond   ESecMarketType = 6 // 债券市场
	ESecMarketType_SecMT_Other  ESecMarketType = 7 // 其他
	ESecMarketType_SecMT_NEEQ   ESecMarketType = 8 // 全国股转系统
)

// Enum value maps for ESecMarketType.
var (
	ESecMarketType_name = map[int32]string{
		0: "SecMT_Global",
		1: "SecMT_SH",
		2: "SecMT_SZ",
		3: "SecMT_HS",
		4: "SecMT_HK",
		5: "SecMT_AP",
		6: "SecMT_Bond",
		7: "SecMT_Other",
		8: "SecMT_NEEQ",
	}
	ESecMarketType_value = map[string]int32{
		"SecMT_Global": 0,
		"SecMT_SH":     1,
		"SecMT_SZ":     2,
		"SecMT_HS":     3,
		"SecMT_HK":     4,
		"SecMT_AP":     5,
		"SecMT_Bond":   6,
		"SecMT_Other":  7,
		"SecMT_NEEQ":   8,
	}
)

func (x ESecMarketType) Enum() *ESecMarketType {
	p := new(ESecMarketType)
	*p = x
	return p
}

func (x ESecMarketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecMarketType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[13].Descriptor()
}

func (ESecMarketType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[13]
}

func (x ESecMarketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecMarketType.Descriptor instead.
func (ESecMarketType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{13}
}

// 证券状态
type ESecStockStatus int32

const (
	ESecStockStatus_SecSS_Normal     ESecStockStatus = 0  // 正常交易
	ESecStockStatus_SecSS_Halt       ESecStockStatus = 1  // 停牌
	ESecStockStatus_SecSS_ExRight    ESecStockStatus = 2  // 除权
	ESecStockStatus_SecSS_ExDividend ESecStockStatus = 3  // 除息
	ESecStockStatus_SecSS_ST         ESecStockStatus = 4  // ST
	ESecStockStatus_SecSS_AsteriskST ESecStockStatus = 5  // *ST
	ESecStockStatus_SecSS_FirstDay   ESecStockStatus = 6  // 首日上市
	ESecStockStatus_SecSS_Refinance  ESecStockStatus = 7  // 公司再融资
	ESecStockStatus_SecSS_Renew      ESecStockStatus = 8  // 恢复上市首日
	ESecStockStatus_SecSS_Vote       ESecStockStatus = 9  // 网络投票
	ESecStockStatus_SecSS_Delist     ESecStockStatus = 10 // 退市整理期
	ESecStockStatus_SecSS_AddStock   ESecStockStatus = 11 // 增发股份上市
	ESecStockStatus_SecSS_Adjust     ESecStockStatus = 12 // 合约调整
	ESecStockStatus_SecSS_Attorn     ESecStockStatus = 13 // 暂停上市后协议转让
	ESecStockStatus_SecSS_DoubleTurn ESecStockStatus = 14 // 实施双转单调整
	ESecStockStatus_SecSS_Bond       ESecStockStatus = 15 // 特定债券转让
	ESecStockStatus_SecSS_BeginList  ESecStockStatus = 16 // 上市初期
	ESecStockStatus_SecSS_DelistDay  ESecStockStatus = 17 // 退市整理期首日
)

// Enum value maps for ESecStockStatus.
var (
	ESecStockStatus_name = map[int32]string{
		0:  "SecSS_Normal",
		1:  "SecSS_Halt",
		2:  "SecSS_ExRight",
		3:  "SecSS_ExDividend",
		4:  "SecSS_ST",
		5:  "SecSS_AsteriskST",
		6:  "SecSS_FirstDay",
		7:  "SecSS_Refinance",
		8:  "SecSS_Renew",
		9:  "SecSS_Vote",
		10: "SecSS_Delist",
		11: "SecSS_AddStock",
		12: "SecSS_Adjust",
		13: "SecSS_Attorn",
		14: "SecSS_DoubleTurn",
		15: "SecSS_Bond",
		16: "SecSS_BeginList",
		17: "SecSS_DelistDay",
	}
	ESecStockStatus_value = map[string]int32{
		"SecSS_Normal":     0,
		"SecSS_Halt":       1,
		"SecSS_ExRight":    2,
		"SecSS_ExDividend": 3,
		"SecSS_ST":         4,
		"SecSS_AsteriskST": 5,
		"SecSS_FirstDay":   6,
		"SecSS_Refinance":  7,
		"SecSS_Renew":      8,
		"SecSS_Vote":       9,
		"SecSS_Delist":     10,
		"SecSS_AddStock":   11,
		"SecSS_Adjust":     12,
		"SecSS_Attorn":     13,
		"SecSS_DoubleTurn": 14,
		"SecSS_Bond":       15,
		"SecSS_BeginList":  16,
		"SecSS_DelistDay":  17,
	}
)

func (x ESecStockStatus) Enum() *ESecStockStatus {
	p := new(ESecStockStatus)
	*p = x
	return p
}

func (x ESecStockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecStockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[14].Descriptor()
}

func (ESecStockStatus) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[14]
}

func (x ESecStockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecStockStatus.Descriptor instead.
func (ESecStockStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{14}
}

// 服务状态
type ESecServiceStatus int32

const (
	ESecServiceStatus_SecBegin ESecServiceStatus = 0 // 服务启动状态
	ESecServiceStatus_SecReady ESecServiceStatus = 1 // 服务准备就绪
	ESecServiceStatus_SecClose ESecServiceStatus = 2 // 服务关闭状态
)

// Enum value maps for ESecServiceStatus.
var (
	ESecServiceStatus_name = map[int32]string{
		0: "SecBegin",
		1: "SecReady",
		2: "SecClose",
	}
	ESecServiceStatus_value = map[string]int32{
		"SecBegin": 0,
		"SecReady": 1,
		"SecClose": 2,
	}
)

func (x ESecServiceStatus) Enum() *ESecServiceStatus {
	p := new(ESecServiceStatus)
	*p = x
	return p
}

func (x ESecServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[15].Descriptor()
}

func (ESecServiceStatus) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[15]
}

func (x ESecServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecServiceStatus.Descriptor instead.
func (ESecServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{15}
}

// 静态数据类型
type ESecStaticDataType int32

const (
	ESecStaticDataType_SecSDT_Exchange      ESecStaticDataType = 0 // 交易所类型(ReqQrySecExchange)
	ESecStaticDataType_SecSDT_OptVariety    ESecStaticDataType = 1 // 期权品种类型(RspSecOptVarietyList)
	ESecStaticDataType_SecSDT_OptUnderlying ESecStaticDataType = 2 // 期权标的类型(RspSecOptUnderlyingList)
	ESecStaticDataType_SecSDT_StockContract ESecStaticDataType = 3 // 股票合约类型(ReqQrySecContract)
	ESecStaticDataType_SecSDT_FundContract  ESecStaticDataType = 4 // 基金合约类型(ReqQrySecContract)
	ESecStaticDataType_SecSDT_BondContract  ESecStaticDataType = 5 // 债券合约类型(ReqQrySecContract)
	ESecStaticDataType_SecSDT_OptContract   ESecStaticDataType = 6 // 期权合约类型(ReqQrySecContract)
	ESecStaticDataType_SecSDT_IndexContract ESecStaticDataType = 7 // 指数合约类型(ReqQrySecContract)
)

// Enum value maps for ESecStaticDataType.
var (
	ESecStaticDataType_name = map[int32]string{
		0: "SecSDT_Exchange",
		1: "SecSDT_OptVariety",
		2: "SecSDT_OptUnderlying",
		3: "SecSDT_StockContract",
		4: "SecSDT_FundContract",
		5: "SecSDT_BondContract",
		6: "SecSDT_OptContract",
		7: "SecSDT_IndexContract",
	}
	ESecStaticDataType_value = map[string]int32{
		"SecSDT_Exchange":      0,
		"SecSDT_OptVariety":    1,
		"SecSDT_OptUnderlying": 2,
		"SecSDT_StockContract": 3,
		"SecSDT_FundContract":  4,
		"SecSDT_BondContract":  5,
		"SecSDT_OptContract":   6,
		"SecSDT_IndexContract": 7,
	}
)

func (x ESecStaticDataType) Enum() *ESecStaticDataType {
	p := new(ESecStaticDataType)
	*p = x
	return p
}

func (x ESecStaticDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESecStaticDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_sec_proto_enumTypes[16].Descriptor()
}

func (ESecStaticDataType) Type() protoreflect.EnumType {
	return &file_fip_def_sec_proto_enumTypes[16]
}

func (x ESecStaticDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESecStaticDataType.Descriptor instead.
func (ESecStaticDataType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{16}
}

// 分时数据
type SecTSChartElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate          string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                     // 交易日期，例如20170808
	Timestamp          uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime            string  `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                         // tick生成时间,例如08:55:06.818
	LastPrice          float64 `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                   // 最新价
	AvgPrice           float64 `protobuf:"fixed64,5,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                     // 均价
	TotalPosition      uint64  `protobuf:"varint,6,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`            // 持仓量（股票期权）
	TotalVolume        uint64  `protobuf:"varint,7,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`                // 成交量
	Turnover           float64 `protobuf:"fixed64,8,opt,name=turnover,proto3" json:"turnover,omitempty"`                     // 成交额（股票等）
	PreSettlementPrice float64 `protobuf:"fixed64,9,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"` // 昨结算价
	HighPrice          float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                  // 最高价
	LowPrice           float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                    // 最低价
	SeqNo              uint64  `protobuf:"varint,12,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                           // 序号（内部使用）
}

func (x *SecTSChartElem) Reset() {
	*x = SecTSChartElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecTSChartElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecTSChartElem) ProtoMessage() {}

func (x *SecTSChartElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecTSChartElem.ProtoReflect.Descriptor instead.
func (*SecTSChartElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{0}
}

func (x *SecTSChartElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *SecTSChartElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecTSChartElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *SecTSChartElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *SecTSChartElem) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *SecTSChartElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *SecTSChartElem) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *SecTSChartElem) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *SecTSChartElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SecTSChartElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *SecTSChartElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *SecTSChartElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 成交明细数据
type SecMatchDetailElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate      string         `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                              // 交易日期，例如20170808
	Timestamp      uint64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime        string         `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                                  // tick生成时间，例如08:55:06.818
	LastPrice      float64        `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                            // 最新价
	LastVolume     uint64         `protobuf:"varint,5,opt,name=lastVolume,proto3" json:"lastVolume,omitempty"`                           // 最新成交量（现手）
	PositionChange int64          `protobuf:"varint,6,opt,name=positionChange,proto3" json:"positionChange,omitempty"`                   // 增仓（股票期权）
	OffsetFlag     ESecOffsetFlag `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.ESecOffsetFlag" json:"offsetFlag,omitempty"` // 开平性质（股票期权）
	MatchType      ESecMatchType  `protobuf:"varint,8,opt,name=matchType,proto3,enum=fippb.ESecMatchType" json:"matchType,omitempty"`    // 成交方向(买盘，卖盘)
	SeqNo          uint64         `protobuf:"varint,9,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                                     // 序号（内部使用）
}

func (x *SecMatchDetailElem) Reset() {
	*x = SecMatchDetailElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecMatchDetailElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecMatchDetailElem) ProtoMessage() {}

func (x *SecMatchDetailElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecMatchDetailElem.ProtoReflect.Descriptor instead.
func (*SecMatchDetailElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{1}
}

func (x *SecMatchDetailElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *SecMatchDetailElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecMatchDetailElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *SecMatchDetailElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *SecMatchDetailElem) GetLastVolume() uint64 {
	if x != nil {
		return x.LastVolume
	}
	return 0
}

func (x *SecMatchDetailElem) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *SecMatchDetailElem) GetOffsetFlag() ESecOffsetFlag {
	if x != nil {
		return x.OffsetFlag
	}
	return ESecOffsetFlag_SecOF_Null
}

func (x *SecMatchDetailElem) GetMatchType() ESecMatchType {
	if x != nil {
		return x.MatchType
	}
	return ESecMatchType_SecMT_Null
}

func (x *SecMatchDetailElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// K线数据
type SecKLineElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate           string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期，例如20170808
	Timestamp           uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime             string  `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	TotalPosition       uint64  `protobuf:"varint,4,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`               // 持仓量（股票期权）
	CycleVolume         uint64  `protobuf:"varint,5,opt,name=cycleVolume,proto3" json:"cycleVolume,omitempty"`                   // 该周期成交量
	CycleTurnover       float64 `protobuf:"fixed64,6,opt,name=cycleTurnover,proto3" json:"cycleTurnover,omitempty"`              // 该周期成交额（股票等）
	PreSettlementPrice  float64 `protobuf:"fixed64,7,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`    // 昨结算价
	OpenPrice           float64 `protobuf:"fixed64,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                      // 开盘价
	ClosePrice          float64 `protobuf:"fixed64,9,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                    // 收盘价
	HighPrice           float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                     // 最高价
	LowPrice            float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                       // 最低价
	RealSettlementPrice float64 `protobuf:"fixed64,12,opt,name=realSettlementPrice,proto3" json:"realSettlementPrice,omitempty"` // 实时结算价
	SeqNo               uint64  `protobuf:"varint,13,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                              // 序号（内部使用）
}

func (x *SecKLineElem) Reset() {
	*x = SecKLineElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecKLineElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKLineElem) ProtoMessage() {}

func (x *SecKLineElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKLineElem.ProtoReflect.Descriptor instead.
func (*SecKLineElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{2}
}

func (x *SecKLineElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *SecKLineElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecKLineElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *SecKLineElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *SecKLineElem) GetCycleVolume() uint64 {
	if x != nil {
		return x.CycleVolume
	}
	return 0
}

func (x *SecKLineElem) GetCycleTurnover() float64 {
	if x != nil {
		return x.CycleTurnover
	}
	return 0
}

func (x *SecKLineElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SecKLineElem) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *SecKLineElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *SecKLineElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *SecKLineElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *SecKLineElem) GetRealSettlementPrice() float64 {
	if x != nil {
		return x.RealSettlementPrice
	}
	return 0
}

func (x *SecKLineElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 分价数据
type SecTimePriceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price      float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`          // 价格
	BuyVolume  uint64  `protobuf:"varint,2,opt,name=buyVolume,proto3" json:"buyVolume,omitempty"`   // 买盘量
	SellVolume uint64  `protobuf:"varint,3,opt,name=sellVolume,proto3" json:"sellVolume,omitempty"` // 卖盘量
	BuyCount   uint64  `protobuf:"varint,4,opt,name=buyCount,proto3" json:"buyCount,omitempty"`     // 买盘成交笔数
	SellCount  uint64  `protobuf:"varint,5,opt,name=sellCount,proto3" json:"sellCount,omitempty"`   // 卖盘成交笔数
}

func (x *SecTimePriceElem) Reset() {
	*x = SecTimePriceElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecTimePriceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecTimePriceElem) ProtoMessage() {}

func (x *SecTimePriceElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecTimePriceElem.ProtoReflect.Descriptor instead.
func (*SecTimePriceElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{3}
}

func (x *SecTimePriceElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecTimePriceElem) GetBuyVolume() uint64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *SecTimePriceElem) GetSellVolume() uint64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *SecTimePriceElem) GetBuyCount() uint64 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *SecTimePriceElem) GetSellCount() uint64 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

// 分笔数据-开平类别统计
type SecOffsetStaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongChangeVolume       uint64 `protobuf:"varint,1,opt,name=longChangeVolume,proto3" json:"longChangeVolume,omitempty"`              // 多换量
	ShotChangeVolume       uint64 `protobuf:"varint,2,opt,name=shotChangeVolume,proto3" json:"shotChangeVolume,omitempty"`              // 空换量
	DoubleOpenVolume       uint64 `protobuf:"varint,3,opt,name=doubleOpenVolume,proto3" json:"doubleOpenVolume,omitempty"`              // 双开量
	DoubleCloseVolume      uint64 `protobuf:"varint,4,opt,name=doubleCloseVolume,proto3" json:"doubleCloseVolume,omitempty"`            // 双平量
	LongOpenVolume         uint64 `protobuf:"varint,5,opt,name=longOpenVolume,proto3" json:"longOpenVolume,omitempty"`                  // 多开量
	LongOpenChangeVolume   uint64 `protobuf:"varint,6,opt,name=longOpenChangeVolume,proto3" json:"longOpenChangeVolume,omitempty"`      // 多开换手量
	ShortOpenVolume        uint64 `protobuf:"varint,7,opt,name=shortOpenVolume,proto3" json:"shortOpenVolume,omitempty"`                // 空开量
	ShortOpenChangeVolume  uint64 `protobuf:"varint,8,opt,name=shortOpenChangeVolume,proto3" json:"shortOpenChangeVolume,omitempty"`    // 空开换手量
	LongCloseVolume        uint64 `protobuf:"varint,9,opt,name=longCloseVolume,proto3" json:"longCloseVolume,omitempty"`                // 多平量
	LongCloseChangeVolume  uint64 `protobuf:"varint,10,opt,name=longCloseChangeVolume,proto3" json:"longCloseChangeVolume,omitempty"`   // 多平换手量
	ShortCloseVolume       uint64 `protobuf:"varint,11,opt,name=shortCloseVolume,proto3" json:"shortCloseVolume,omitempty"`             // 空平量
	ShortCloseChangeVolume uint64 `protobuf:"varint,12,opt,name=shortCloseChangeVolume,proto3" json:"shortCloseChangeVolume,omitempty"` // 空平换手量
}

func (x *SecOffsetStaElem) Reset() {
	*x = SecOffsetStaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOffsetStaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOffsetStaElem) ProtoMessage() {}

func (x *SecOffsetStaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOffsetStaElem.ProtoReflect.Descriptor instead.
func (*SecOffsetStaElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{4}
}

func (x *SecOffsetStaElem) GetLongChangeVolume() uint64 {
	if x != nil {
		return x.LongChangeVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetShotChangeVolume() uint64 {
	if x != nil {
		return x.ShotChangeVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetDoubleOpenVolume() uint64 {
	if x != nil {
		return x.DoubleOpenVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetDoubleCloseVolume() uint64 {
	if x != nil {
		return x.DoubleCloseVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetLongOpenVolume() uint64 {
	if x != nil {
		return x.LongOpenVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetLongOpenChangeVolume() uint64 {
	if x != nil {
		return x.LongOpenChangeVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetShortOpenVolume() uint64 {
	if x != nil {
		return x.ShortOpenVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetShortOpenChangeVolume() uint64 {
	if x != nil {
		return x.ShortOpenChangeVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetLongCloseVolume() uint64 {
	if x != nil {
		return x.LongCloseVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetLongCloseChangeVolume() uint64 {
	if x != nil {
		return x.LongCloseChangeVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetShortCloseVolume() uint64 {
	if x != nil {
		return x.ShortCloseVolume
	}
	return 0
}

func (x *SecOffsetStaElem) GetShortCloseChangeVolume() uint64 {
	if x != nil {
		return x.ShortCloseChangeVolume
	}
	return 0
}

// 当前均量及类型
type SecAvgVolumeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgVolume     uint64            `protobuf:"varint,1,opt,name=avgVolume,proto3" json:"avgVolume,omitempty"`                                      // 当前均量
	AvgVolumeType ESecAvgVolumeType `protobuf:"varint,2,opt,name=avgVolumeType,proto3,enum=fippb.ESecAvgVolumeType" json:"avgVolumeType,omitempty"` // 当前均量类型
}

func (x *SecAvgVolumeElem) Reset() {
	*x = SecAvgVolumeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecAvgVolumeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecAvgVolumeElem) ProtoMessage() {}

func (x *SecAvgVolumeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecAvgVolumeElem.ProtoReflect.Descriptor instead.
func (*SecAvgVolumeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{5}
}

func (x *SecAvgVolumeElem) GetAvgVolume() uint64 {
	if x != nil {
		return x.AvgVolume
	}
	return 0
}

func (x *SecAvgVolumeElem) GetAvgVolumeType() ESecAvgVolumeType {
	if x != nil {
		return x.AvgVolumeType
	}
	return ESecAvgVolumeType_SecAVT_LastDay
}

// 交易所信息
type SecExchangeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID  EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 交易所名称
	EnglishName string   `protobuf:"bytes,3,opt,name=englishName,proto3" json:"englishName,omitempty"`                    // 交易所英文名称
}

func (x *SecExchangeElem) Reset() {
	*x = SecExchangeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecExchangeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecExchangeElem) ProtoMessage() {}

func (x *SecExchangeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecExchangeElem.ProtoReflect.Descriptor instead.
func (*SecExchangeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{6}
}

func (x *SecExchangeElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecExchangeElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecExchangeElem) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

// 订阅消息体
type SecSubElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID   EExchgID            `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`                // 交易所
	ContractType ESecSubContractType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.ESecSubContractType" json:"contractType,omitempty"` // 合约订阅类型
	ContractID   string              `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                                     // 合约id
}

func (x *SecSubElem) Reset() {
	*x = SecSubElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecSubElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecSubElem) ProtoMessage() {}

func (x *SecSubElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecSubElem.ProtoReflect.Descriptor instead.
func (*SecSubElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{7}
}

func (x *SecSubElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecSubElem) GetContractType() ESecSubContractType {
	if x != nil {
		return x.ContractType
	}
	return ESecSubContractType_SecSCT_Exchange
}

func (x *SecSubElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// 期权参数
type SecOptParaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta       float64 `protobuf:"fixed64,1,opt,name=delta,proto3" json:"delta,omitempty"`             // delta
	Gamma       float64 `protobuf:"fixed64,2,opt,name=gamma,proto3" json:"gamma,omitempty"`             // gamma
	Rho         float64 `protobuf:"fixed64,3,opt,name=rho,proto3" json:"rho,omitempty"`                 // rho
	Theta       float64 `protobuf:"fixed64,4,opt,name=theta,proto3" json:"theta,omitempty"`             // theta
	Vega        float64 `protobuf:"fixed64,5,opt,name=vega,proto3" json:"vega,omitempty"`               // vega
	TheoryPrice float64 `protobuf:"fixed64,6,opt,name=theoryPrice,proto3" json:"theoryPrice,omitempty"` // 理论价
	EmbedValue  float64 `protobuf:"fixed64,7,opt,name=embedValue,proto3" json:"embedValue,omitempty"`   // 内在价值
	TimeValue   float64 `protobuf:"fixed64,8,opt,name=timeValue,proto3" json:"timeValue,omitempty"`     // 时间价值
	ImpliedVol  float64 `protobuf:"fixed64,9,opt,name=impliedVol,proto3" json:"impliedVol,omitempty"`   // 隐含波动率
}

func (x *SecOptParaElem) Reset() {
	*x = SecOptParaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOptParaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOptParaElem) ProtoMessage() {}

func (x *SecOptParaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOptParaElem.ProtoReflect.Descriptor instead.
func (*SecOptParaElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{8}
}

func (x *SecOptParaElem) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *SecOptParaElem) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *SecOptParaElem) GetRho() float64 {
	if x != nil {
		return x.Rho
	}
	return 0
}

func (x *SecOptParaElem) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *SecOptParaElem) GetVega() float64 {
	if x != nil {
		return x.Vega
	}
	return 0
}

func (x *SecOptParaElem) GetTheoryPrice() float64 {
	if x != nil {
		return x.TheoryPrice
	}
	return 0
}

func (x *SecOptParaElem) GetEmbedValue() float64 {
	if x != nil {
		return x.EmbedValue
	}
	return 0
}

func (x *SecOptParaElem) GetTimeValue() float64 {
	if x != nil {
		return x.TimeValue
	}
	return 0
}

func (x *SecOptParaElem) GetImpliedVol() float64 {
	if x != nil {
		return x.ImpliedVol
	}
	return 0
}

// 额外参数(根据原始行情计算)
type SecExtraQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceChange    float64        `protobuf:"fixed64,1,opt,name=priceChange,proto3" json:"priceChange,omitempty"`                        // 现涨(当前最新价-上次最新价)
	OffsetFlag     ESecOffsetFlag `protobuf:"varint,2,opt,name=offsetFlag,proto3,enum=fippb.ESecOffsetFlag" json:"offsetFlag,omitempty"` // 开平(10种)
	PositionChange int64          `protobuf:"varint,3,opt,name=positionChange,proto3" json:"positionChange,omitempty"`                   // 总持仓量变化(股票期权)(当前总持仓量-上次总持仓量)
	VolumeChange   uint64         `protobuf:"varint,4,opt,name=volumeChange,proto3" json:"volumeChange,omitempty"`                       // 总成交量变化(当前总成交量-上次总成交量)
	MatchType      ESecMatchType  `protobuf:"varint,5,opt,name=matchType,proto3,enum=fippb.ESecMatchType" json:"matchType,omitempty"`    // 成交方向(买盘，卖盘)
	AvgPrice       float64        `protobuf:"fixed64,6,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                              // 当日均价(总成交金额/总成交量)
	TurnoverChange float64        `protobuf:"fixed64,7,opt,name=turnoverChange,proto3" json:"turnoverChange,omitempty"`                  // 总成交金额变化(当前总成交金额-上次总成交金额)
}

func (x *SecExtraQuot) Reset() {
	*x = SecExtraQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecExtraQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecExtraQuot) ProtoMessage() {}

func (x *SecExtraQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecExtraQuot.ProtoReflect.Descriptor instead.
func (*SecExtraQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{9}
}

func (x *SecExtraQuot) GetPriceChange() float64 {
	if x != nil {
		return x.PriceChange
	}
	return 0
}

func (x *SecExtraQuot) GetOffsetFlag() ESecOffsetFlag {
	if x != nil {
		return x.OffsetFlag
	}
	return ESecOffsetFlag_SecOF_Null
}

func (x *SecExtraQuot) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *SecExtraQuot) GetVolumeChange() uint64 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *SecExtraQuot) GetMatchType() ESecMatchType {
	if x != nil {
		return x.MatchType
	}
	return ESecMatchType_SecMT_Null
}

func (x *SecExtraQuot) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *SecExtraQuot) GetTurnoverChange() float64 {
	if x != nil {
		return x.TurnoverChange
	}
	return 0
}

// 最优行情
type SecBestQuotElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreClosePrice      float64 `protobuf:"fixed64,1,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`           // 昨收盘价
	PreSettlementPrice float64 `protobuf:"fixed64,2,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"` // 昨结算价(股票期权)
	PrePosition        uint64  `protobuf:"varint,3,opt,name=prePosition,proto3" json:"prePosition,omitempty"`                // 初始持仓量(股票期权)
	UpLimitPrice       float64 `protobuf:"fixed64,4,opt,name=upLimitPrice,proto3" json:"upLimitPrice,omitempty"`             // 涨停板价
	LowLimitPrice      float64 `protobuf:"fixed64,5,opt,name=lowLimitPrice,proto3" json:"lowLimitPrice,omitempty"`           // 跌停板价
	OpenPrice          float64 `protobuf:"fixed64,6,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                   // 今开盘价
	SettlementPrice    float64 `protobuf:"fixed64,7,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`       // 今结算价(股票期权)
	ClosePrice         float64 `protobuf:"fixed64,8,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                 // 今收盘价
	Turnover           float64 `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`                     // 总成交金额
	HighPrice          float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                  // 最高价
	LowPrice           float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                    // 最低价
	LastPrice          float64 `protobuf:"fixed64,12,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                  // 最新价
	TotalPosition      uint64  `protobuf:"varint,13,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`           // 总持仓量(股票期权)
	TotalVolume        uint64  `protobuf:"varint,14,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`               // 总成交量
	TotalTradeNum      uint64  `protobuf:"varint,15,opt,name=totalTradeNum,proto3" json:"totalTradeNum,omitempty"`           // 总成交笔数
	BuyPrice1          float64 `protobuf:"fixed64,16,opt,name=buyPrice1,proto3" json:"buyPrice1,omitempty"`                  // 申买价1
	BuyVolume1         uint64  `protobuf:"varint,17,opt,name=buyVolume1,proto3" json:"buyVolume1,omitempty"`                 // 申买量1
	SellPrice1         float64 `protobuf:"fixed64,18,opt,name=sellPrice1,proto3" json:"sellPrice1,omitempty"`                // 申卖价1
	SellVolume1        uint64  `protobuf:"varint,19,opt,name=sellVolume1,proto3" json:"sellVolume1,omitempty"`               // 申卖量1
	BuyPrice2          float64 `protobuf:"fixed64,20,opt,name=buyPrice2,proto3" json:"buyPrice2,omitempty"`                  // 申买价2
	BuyVolume2         uint64  `protobuf:"varint,21,opt,name=buyVolume2,proto3" json:"buyVolume2,omitempty"`                 // 申买量2
	SellPrice2         float64 `protobuf:"fixed64,22,opt,name=sellPrice2,proto3" json:"sellPrice2,omitempty"`                // 申卖价2
	SellVolume2        uint64  `protobuf:"varint,23,opt,name=sellVolume2,proto3" json:"sellVolume2,omitempty"`               // 申卖量2
	BuyPrice3          float64 `protobuf:"fixed64,24,opt,name=buyPrice3,proto3" json:"buyPrice3,omitempty"`                  // 申买价3
	BuyVolume3         uint64  `protobuf:"varint,25,opt,name=buyVolume3,proto3" json:"buyVolume3,omitempty"`                 // 申买量3
	SellPrice3         float64 `protobuf:"fixed64,26,opt,name=sellPrice3,proto3" json:"sellPrice3,omitempty"`                // 申卖价3
	SellVolume3        uint64  `protobuf:"varint,27,opt,name=sellVolume3,proto3" json:"sellVolume3,omitempty"`               // 申卖量3
	BuyPrice4          float64 `protobuf:"fixed64,28,opt,name=buyPrice4,proto3" json:"buyPrice4,omitempty"`                  // 申买价4
	BuyVolume4         uint64  `protobuf:"varint,29,opt,name=buyVolume4,proto3" json:"buyVolume4,omitempty"`                 // 申买量4
	SellPrice4         float64 `protobuf:"fixed64,30,opt,name=sellPrice4,proto3" json:"sellPrice4,omitempty"`                // 申卖价4
	SellVolume4        uint64  `protobuf:"varint,31,opt,name=sellVolume4,proto3" json:"sellVolume4,omitempty"`               // 申卖量4
	BuyPrice5          float64 `protobuf:"fixed64,32,opt,name=buyPrice5,proto3" json:"buyPrice5,omitempty"`                  // 申买价5
	BuyVolume5         uint64  `protobuf:"varint,33,opt,name=buyVolume5,proto3" json:"buyVolume5,omitempty"`                 // 申买量5
	SellPrice5         float64 `protobuf:"fixed64,34,opt,name=sellPrice5,proto3" json:"sellPrice5,omitempty"`                // 申卖价5
	SellVolume5        uint64  `protobuf:"varint,35,opt,name=sellVolume5,proto3" json:"sellVolume5,omitempty"`               // 申卖量5
	Timestamp          uint64  `protobuf:"varint,36,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                   // 更新时间戳
	GenTime            string  `protobuf:"bytes,37,opt,name=genTime,proto3" json:"genTime,omitempty"`                        // 生成时间
}

func (x *SecBestQuotElem) Reset() {
	*x = SecBestQuotElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecBestQuotElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecBestQuotElem) ProtoMessage() {}

func (x *SecBestQuotElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecBestQuotElem.ProtoReflect.Descriptor instead.
func (*SecBestQuotElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{10}
}

func (x *SecBestQuotElem) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *SecBestQuotElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetPrePosition() uint64 {
	if x != nil {
		return x.PrePosition
	}
	return 0
}

func (x *SecBestQuotElem) GetUpLimitPrice() float64 {
	if x != nil {
		return x.UpLimitPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetLowLimitPrice() float64 {
	if x != nil {
		return x.LowLimitPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *SecBestQuotElem) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *SecBestQuotElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *SecBestQuotElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *SecBestQuotElem) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *SecBestQuotElem) GetTotalTradeNum() uint64 {
	if x != nil {
		return x.TotalTradeNum
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyPrice1() float64 {
	if x != nil {
		return x.BuyPrice1
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyVolume1() uint64 {
	if x != nil {
		return x.BuyVolume1
	}
	return 0
}

func (x *SecBestQuotElem) GetSellPrice1() float64 {
	if x != nil {
		return x.SellPrice1
	}
	return 0
}

func (x *SecBestQuotElem) GetSellVolume1() uint64 {
	if x != nil {
		return x.SellVolume1
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyPrice2() float64 {
	if x != nil {
		return x.BuyPrice2
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyVolume2() uint64 {
	if x != nil {
		return x.BuyVolume2
	}
	return 0
}

func (x *SecBestQuotElem) GetSellPrice2() float64 {
	if x != nil {
		return x.SellPrice2
	}
	return 0
}

func (x *SecBestQuotElem) GetSellVolume2() uint64 {
	if x != nil {
		return x.SellVolume2
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyPrice3() float64 {
	if x != nil {
		return x.BuyPrice3
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyVolume3() uint64 {
	if x != nil {
		return x.BuyVolume3
	}
	return 0
}

func (x *SecBestQuotElem) GetSellPrice3() float64 {
	if x != nil {
		return x.SellPrice3
	}
	return 0
}

func (x *SecBestQuotElem) GetSellVolume3() uint64 {
	if x != nil {
		return x.SellVolume3
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyPrice4() float64 {
	if x != nil {
		return x.BuyPrice4
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyVolume4() uint64 {
	if x != nil {
		return x.BuyVolume4
	}
	return 0
}

func (x *SecBestQuotElem) GetSellPrice4() float64 {
	if x != nil {
		return x.SellPrice4
	}
	return 0
}

func (x *SecBestQuotElem) GetSellVolume4() uint64 {
	if x != nil {
		return x.SellVolume4
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyPrice5() float64 {
	if x != nil {
		return x.BuyPrice5
	}
	return 0
}

func (x *SecBestQuotElem) GetBuyVolume5() uint64 {
	if x != nil {
		return x.BuyVolume5
	}
	return 0
}

func (x *SecBestQuotElem) GetSellPrice5() float64 {
	if x != nil {
		return x.SellPrice5
	}
	return 0
}

func (x *SecBestQuotElem) GetSellVolume5() uint64 {
	if x != nil {
		return x.SellVolume5
	}
	return 0
}

func (x *SecBestQuotElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SecBestQuotElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

// 指数合约信息
type SecIndexContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID   EExchgID         `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`             // 交易所id
	ContractID   string           `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                                  // 证券合约id
	SecType      ESecStockType    `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`              // 证券类型
	ContractName string           `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`                              // 证券合约名称
	MarketType   ESecMarketType   `protobuf:"varint,5,opt,name=marketType,proto3,enum=fippb.ESecMarketType" json:"marketType,omitempty"`       // 市场类型
	CurrencyType ESecCurrencyType `protobuf:"varint,6,opt,name=currencyType,proto3,enum=fippb.ESecCurrencyType" json:"currencyType,omitempty"` // 货币类型
	RoundLot     uint32           `protobuf:"varint,7,opt,name=roundLot,proto3" json:"roundLot,omitempty"`                                     // 整手数
	Tick         float64          `protobuf:"fixed64,8,opt,name=tick,proto3" json:"tick,omitempty"`                                            // 最小变动价位(默认0.01,仅供展示用)
	KeyFlag      bool             `protobuf:"varint,9,opt,name=keyFlag,proto3" json:"keyFlag,omitempty"`                                       // 重点标识
	SortIndex    uint32           `protobuf:"varint,10,opt,name=sortIndex,proto3" json:"sortIndex,omitempty"`                                  // 排序索引(重点指数:1~999 上证:10000~19999 深证:20000~29999 中证:30000~39999 北证:40000~49999)
}

func (x *SecIndexContractElem) Reset() {
	*x = SecIndexContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecIndexContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecIndexContractElem) ProtoMessage() {}

func (x *SecIndexContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecIndexContractElem.ProtoReflect.Descriptor instead.
func (*SecIndexContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{11}
}

func (x *SecIndexContractElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecIndexContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *SecIndexContractElem) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *SecIndexContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *SecIndexContractElem) GetMarketType() ESecMarketType {
	if x != nil {
		return x.MarketType
	}
	return ESecMarketType_SecMT_Global
}

func (x *SecIndexContractElem) GetCurrencyType() ESecCurrencyType {
	if x != nil {
		return x.CurrencyType
	}
	return ESecCurrencyType_SecCT_RMB
}

func (x *SecIndexContractElem) GetRoundLot() uint32 {
	if x != nil {
		return x.RoundLot
	}
	return 0
}

func (x *SecIndexContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *SecIndexContractElem) GetKeyFlag() bool {
	if x != nil {
		return x.KeyFlag
	}
	return false
}

func (x *SecIndexContractElem) GetSortIndex() uint32 {
	if x != nil {
		return x.SortIndex
	}
	return 0
}

// 股票、ETF合约信息
type SecContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID          EExchgID          `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`              // 交易所id
	ContractID          string            `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                                   // 证券合约id
	SecType             ESecStockType     `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`               // 证券类型
	ContractName        string            `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`                               // 证券合约名称
	ShortName           string            `protobuf:"bytes,5,opt,name=shortName,proto3" json:"shortName,omitempty"`                                     // 证券合约简称
	EnglishName         string            `protobuf:"bytes,6,opt,name=englishName,proto3" json:"englishName,omitempty"`                                 // 证券合约英文名称
	ListDate            string            `protobuf:"bytes,7,opt,name=listDate,proto3" json:"listDate,omitempty"`                                       // 上市日期
	CurrencyType        ESecCurrencyType  `protobuf:"varint,8,opt,name=currencyType,proto3,enum=fippb.ESecCurrencyType" json:"currencyType,omitempty"`  // 货币类型
	QtyUpperLimit       uint32            `protobuf:"varint,9,opt,name=qtyUpperLimit,proto3" json:"qtyUpperLimit,omitempty"`                            // 限价委托的数量上限
	QtyLowerLimit       uint32            `protobuf:"varint,10,opt,name=qtyLowerLimit,proto3" json:"qtyLowerLimit,omitempty"`                           // 限价委托的数量下限(仅上证有效)
	MarketQtyUpperLimit uint32            `protobuf:"varint,11,opt,name=marketQtyUpperLimit,proto3" json:"marketQtyUpperLimit,omitempty"`               // 市价委托的数量上限
	MarketQtyLowerLimit uint32            `protobuf:"varint,12,opt,name=marketQtyLowerLimit,proto3" json:"marketQtyLowerLimit,omitempty"`               // 市价委托的数量下限(仅上证有效)
	BuyQtyUnit          uint32            `protobuf:"varint,13,opt,name=buyQtyUnit,proto3" json:"buyQtyUnit,omitempty"`                                 // 买委托的数量单位
	SellQtyUnit         uint32            `protobuf:"varint,14,opt,name=sellQtyUnit,proto3" json:"sellQtyUnit,omitempty"`                               // 卖委托的数量单位
	RoundLot            uint32            `protobuf:"varint,15,opt,name=roundLot,proto3" json:"roundLot,omitempty"`                                     // 整手数
	Tick                float64           `protobuf:"fixed64,16,opt,name=tick,proto3" json:"tick,omitempty"`                                            // 最小变动价位
	SecStatus           []ESecStockStatus `protobuf:"varint,17,rep,packed,name=secStatus,proto3,enum=fippb.ESecStockStatus" json:"secStatus,omitempty"` // 证券状态(注意：正常交易状态不会填充到状态数组)
	PublicFloatShareQty uint64            `protobuf:"varint,18,opt,name=publicFloatShareQty,proto3" json:"publicFloatShareQty,omitempty"`               // 流通股数
	ParValue            float64           `protobuf:"fixed64,19,opt,name=parValue,proto3" json:"parValue,omitempty"`                                    // 面值
	SortIndex           uint32            `protobuf:"varint,20,opt,name=sortIndex,proto3" json:"sortIndex,omitempty"`                                   // 排序索引
}

func (x *SecContractElem) Reset() {
	*x = SecContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecContractElem) ProtoMessage() {}

func (x *SecContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecContractElem.ProtoReflect.Descriptor instead.
func (*SecContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{12}
}

func (x *SecContractElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *SecContractElem) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *SecContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *SecContractElem) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *SecContractElem) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *SecContractElem) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *SecContractElem) GetCurrencyType() ESecCurrencyType {
	if x != nil {
		return x.CurrencyType
	}
	return ESecCurrencyType_SecCT_RMB
}

func (x *SecContractElem) GetQtyUpperLimit() uint32 {
	if x != nil {
		return x.QtyUpperLimit
	}
	return 0
}

func (x *SecContractElem) GetQtyLowerLimit() uint32 {
	if x != nil {
		return x.QtyLowerLimit
	}
	return 0
}

func (x *SecContractElem) GetMarketQtyUpperLimit() uint32 {
	if x != nil {
		return x.MarketQtyUpperLimit
	}
	return 0
}

func (x *SecContractElem) GetMarketQtyLowerLimit() uint32 {
	if x != nil {
		return x.MarketQtyLowerLimit
	}
	return 0
}

func (x *SecContractElem) GetBuyQtyUnit() uint32 {
	if x != nil {
		return x.BuyQtyUnit
	}
	return 0
}

func (x *SecContractElem) GetSellQtyUnit() uint32 {
	if x != nil {
		return x.SellQtyUnit
	}
	return 0
}

func (x *SecContractElem) GetRoundLot() uint32 {
	if x != nil {
		return x.RoundLot
	}
	return 0
}

func (x *SecContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *SecContractElem) GetSecStatus() []ESecStockStatus {
	if x != nil {
		return x.SecStatus
	}
	return nil
}

func (x *SecContractElem) GetPublicFloatShareQty() uint64 {
	if x != nil {
		return x.PublicFloatShareQty
	}
	return 0
}

func (x *SecContractElem) GetParValue() float64 {
	if x != nil {
		return x.ParValue
	}
	return 0
}

func (x *SecContractElem) GetSortIndex() uint32 {
	if x != nil {
		return x.SortIndex
	}
	return 0
}

// 股票期权合约信息
type SecOptContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID           EExchgID         `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`             // 交易所id
	ContractID           string           `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                                  // 证券合约id
	SecType              ESecStockType    `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`              // 证券类型
	ContractName         string           `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`                              // 证券合约名称
	ShortName            string           `protobuf:"bytes,5,opt,name=shortName,proto3" json:"shortName,omitempty"`                                    // 证券合约简称
	UnderlyingSecurityID string           `protobuf:"bytes,6,opt,name=underlyingSecurityID,proto3" json:"underlyingSecurityID,omitempty"`              // 标的证券代码
	ExerciseType         ESecExerciseType `protobuf:"varint,7,opt,name=exerciseType,proto3,enum=fippb.ESecExerciseType" json:"exerciseType,omitempty"` // 行权方式
	CallOrPut            ESecCallOrPut    `protobuf:"varint,8,opt,name=callOrPut,proto3,enum=fippb.ESecCallOrPut" json:"callOrPut,omitempty"`          // 认购认沽
	QtyUpperLimit        uint32           `protobuf:"varint,9,opt,name=qtyUpperLimit,proto3" json:"qtyUpperLimit,omitempty"`                           // 限价委托的数量上限
	QtyLowerLimit        uint32           `protobuf:"varint,10,opt,name=qtyLowerLimit,proto3" json:"qtyLowerLimit,omitempty"`                          // 限价委托的数量下限(仅上证有效)
	MarketQtyUpperLimit  uint32           `protobuf:"varint,11,opt,name=marketQtyUpperLimit,proto3" json:"marketQtyUpperLimit,omitempty"`              // 市价买委托的数量上限
	MarketQtyLowerLimit  uint32           `protobuf:"varint,12,opt,name=marketQtyLowerLimit,proto3" json:"marketQtyLowerLimit,omitempty"`              // 市价卖委托的数量下限(仅上证有效)
	QuoteQtyUpperLimit   uint32           `protobuf:"varint,13,opt,name=quoteQtyUpperLimit,proto3" json:"quoteQtyUpperLimit,omitempty"`                // 报价委托的数量上限(仅深证有效)
	BuyQtyUnit           uint32           `protobuf:"varint,14,opt,name=buyQtyUnit,proto3" json:"buyQtyUnit,omitempty"`                                // 买委托的数量单位
	SellQtyUnit          uint32           `protobuf:"varint,15,opt,name=sellQtyUnit,proto3" json:"sellQtyUnit,omitempty"`                              // 卖委托的数量单位
	ContractUnit         uint32           `protobuf:"varint,16,opt,name=contractUnit,proto3" json:"contractUnit,omitempty"`                            // 合约单位
	RoundLot             uint32           `protobuf:"varint,17,opt,name=roundLot,proto3" json:"roundLot,omitempty"`                                    // 整手数
	Tick                 float64          `protobuf:"fixed64,18,opt,name=tick,proto3" json:"tick,omitempty"`                                           // 最小变动价位
	ExercisePrice        float64          `protobuf:"fixed64,19,opt,name=exercisePrice,proto3" json:"exercisePrice,omitempty"`                         // 期权行权价
	StartDate            string           `protobuf:"bytes,20,opt,name=startDate,proto3" json:"startDate,omitempty"`                                   // 首个交易日
	EndDate              string           `protobuf:"bytes,21,opt,name=endDate,proto3" json:"endDate,omitempty"`                                       // 最后交易日
	ExerciseDate         string           `protobuf:"bytes,22,opt,name=exerciseDate,proto3" json:"exerciseDate,omitempty"`                             // 期权行权日
	DeliveryDate         string           `protobuf:"bytes,23,opt,name=deliveryDate,proto3" json:"deliveryDate,omitempty"`                             // 行权交割日
	SeriesID             string           `protobuf:"bytes,24,opt,name=seriesID,proto3" json:"seriesID,omitempty"`                                     // 虚拟标的物id eg.510050ETF2018
}

func (x *SecOptContractElem) Reset() {
	*x = SecOptContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOptContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOptContractElem) ProtoMessage() {}

func (x *SecOptContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOptContractElem.ProtoReflect.Descriptor instead.
func (*SecOptContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{13}
}

func (x *SecOptContractElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecOptContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *SecOptContractElem) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *SecOptContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *SecOptContractElem) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *SecOptContractElem) GetUnderlyingSecurityID() string {
	if x != nil {
		return x.UnderlyingSecurityID
	}
	return ""
}

func (x *SecOptContractElem) GetExerciseType() ESecExerciseType {
	if x != nil {
		return x.ExerciseType
	}
	return ESecExerciseType_SecET_Amercia
}

func (x *SecOptContractElem) GetCallOrPut() ESecCallOrPut {
	if x != nil {
		return x.CallOrPut
	}
	return ESecCallOrPut_SecCOP_NULL
}

func (x *SecOptContractElem) GetQtyUpperLimit() uint32 {
	if x != nil {
		return x.QtyUpperLimit
	}
	return 0
}

func (x *SecOptContractElem) GetQtyLowerLimit() uint32 {
	if x != nil {
		return x.QtyLowerLimit
	}
	return 0
}

func (x *SecOptContractElem) GetMarketQtyUpperLimit() uint32 {
	if x != nil {
		return x.MarketQtyUpperLimit
	}
	return 0
}

func (x *SecOptContractElem) GetMarketQtyLowerLimit() uint32 {
	if x != nil {
		return x.MarketQtyLowerLimit
	}
	return 0
}

func (x *SecOptContractElem) GetQuoteQtyUpperLimit() uint32 {
	if x != nil {
		return x.QuoteQtyUpperLimit
	}
	return 0
}

func (x *SecOptContractElem) GetBuyQtyUnit() uint32 {
	if x != nil {
		return x.BuyQtyUnit
	}
	return 0
}

func (x *SecOptContractElem) GetSellQtyUnit() uint32 {
	if x != nil {
		return x.SellQtyUnit
	}
	return 0
}

func (x *SecOptContractElem) GetContractUnit() uint32 {
	if x != nil {
		return x.ContractUnit
	}
	return 0
}

func (x *SecOptContractElem) GetRoundLot() uint32 {
	if x != nil {
		return x.RoundLot
	}
	return 0
}

func (x *SecOptContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *SecOptContractElem) GetExercisePrice() float64 {
	if x != nil {
		return x.ExercisePrice
	}
	return 0
}

func (x *SecOptContractElem) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SecOptContractElem) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SecOptContractElem) GetExerciseDate() string {
	if x != nil {
		return x.ExerciseDate
	}
	return ""
}

func (x *SecOptContractElem) GetDeliveryDate() string {
	if x != nil {
		return x.DeliveryDate
	}
	return ""
}

func (x *SecOptContractElem) GetSeriesID() string {
	if x != nil {
		return x.SeriesID
	}
	return ""
}

// 证券静态数据版本信息
type SecStaticDataVersionElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID           `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	Type       ESecStaticDataType `protobuf:"varint,2,opt,name=type,proto3,enum=fippb.ESecStaticDataType" json:"type,omitempty"`   // 静态数据类型
	Version    uint64             `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                           // 时间戳，标记静态数据的标识
}

func (x *SecStaticDataVersionElem) Reset() {
	*x = SecStaticDataVersionElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecStaticDataVersionElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecStaticDataVersionElem) ProtoMessage() {}

func (x *SecStaticDataVersionElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecStaticDataVersionElem.ProtoReflect.Descriptor instead.
func (*SecStaticDataVersionElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{14}
}

func (x *SecStaticDataVersionElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecStaticDataVersionElem) GetType() ESecStaticDataType {
	if x != nil {
		return x.Type
	}
	return ESecStaticDataType_SecSDT_Exchange
}

func (x *SecStaticDataVersionElem) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 证券开盘收盘信息
type SecOpenCloseElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractID         string  `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`                   // 证券合约id
	PreSettlementPrice float64 `protobuf:"fixed64,2,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"` // 昨结算价(股票期权)
	PrePosition        uint64  `protobuf:"varint,3,opt,name=prePosition,proto3" json:"prePosition,omitempty"`                // 初始持仓量(股票期权)
	UpLimitPrice       float64 `protobuf:"fixed64,4,opt,name=upLimitPrice,proto3" json:"upLimitPrice,omitempty"`             // 涨停板价
	LowLimitPrice      float64 `protobuf:"fixed64,5,opt,name=lowLimitPrice,proto3" json:"lowLimitPrice,omitempty"`           // 跌停板价
	SettlementPrice    float64 `protobuf:"fixed64,6,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`       // 今结算价(股票期权)
	ClosePrice         float64 `protobuf:"fixed64,7,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                 // 今收盘价
}

func (x *SecOpenCloseElem) Reset() {
	*x = SecOpenCloseElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOpenCloseElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOpenCloseElem) ProtoMessage() {}

func (x *SecOpenCloseElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOpenCloseElem.ProtoReflect.Descriptor instead.
func (*SecOpenCloseElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{15}
}

func (x *SecOpenCloseElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *SecOpenCloseElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SecOpenCloseElem) GetPrePosition() uint64 {
	if x != nil {
		return x.PrePosition
	}
	return 0
}

func (x *SecOpenCloseElem) GetUpLimitPrice() float64 {
	if x != nil {
		return x.UpLimitPrice
	}
	return 0
}

func (x *SecOpenCloseElem) GetLowLimitPrice() float64 {
	if x != nil {
		return x.LowLimitPrice
	}
	return 0
}

func (x *SecOpenCloseElem) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *SecOpenCloseElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

// 证券期权品种信息
type SecOptVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	VarietyID         string   `protobuf:"bytes,2,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                        // 品种代码 eg.510050、510300、159919
	VarietyName       string   `protobuf:"bytes,3,opt,name=varietyName,proto3" json:"varietyName,omitempty"`                    // 品种名称 eg.上证50ETF、上证300ETF、深证300ETF
	ExercisePriceTick float64  `protobuf:"fixed64,4,opt,name=exercisePriceTick,proto3" json:"exercisePriceTick,omitempty"`      // 行权价最小变动价位
}

func (x *SecOptVarietyElem) Reset() {
	*x = SecOptVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOptVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOptVarietyElem) ProtoMessage() {}

func (x *SecOptVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOptVarietyElem.ProtoReflect.Descriptor instead.
func (*SecOptVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{16}
}

func (x *SecOptVarietyElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecOptVarietyElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *SecOptVarietyElem) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *SecOptVarietyElem) GetExercisePriceTick() float64 {
	if x != nil {
		return x.ExercisePriceTick
	}
	return 0
}

// 证券期权标的物信息
type SecOptUnderlyingElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID     EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 标的物交易所id
	UnderlyingId   string   `protobuf:"bytes,2,opt,name=underlyingId,proto3" json:"underlyingId,omitempty"`                  // 标的物合约编码 eg.510050ETF2109
	UnderlyingName string   `protobuf:"bytes,3,opt,name=underlyingName,proto3" json:"underlyingName,omitempty"`              // 标的物合约名称 eg.50ETF2109
	VarietyId      string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                        // 标的物品种代码 eg.510050
	EndDate        string   `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`                            // 标的物最后交易日
}

func (x *SecOptUnderlyingElem) Reset() {
	*x = SecOptUnderlyingElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecOptUnderlyingElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecOptUnderlyingElem) ProtoMessage() {}

func (x *SecOptUnderlyingElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecOptUnderlyingElem.ProtoReflect.Descriptor instead.
func (*SecOptUnderlyingElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{17}
}

func (x *SecOptUnderlyingElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *SecOptUnderlyingElem) GetUnderlyingId() string {
	if x != nil {
		return x.UnderlyingId
	}
	return ""
}

func (x *SecOptUnderlyingElem) GetUnderlyingName() string {
	if x != nil {
		return x.UnderlyingName
	}
	return ""
}

func (x *SecOptUnderlyingElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *SecOptUnderlyingElem) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// APP证券功能入口的描述参数
type SecEntranceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntranceLabel string            `protobuf:"bytes,1,opt,name=entranceLabel,proto3" json:"entranceLabel,omitempty"`                            // 标签名称
	ExchangeID    []EExchgID        `protobuf:"varint,2,rep,packed,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`      // 交易所ID
	SecStatus     []ESecStockStatus `protobuf:"varint,3,rep,packed,name=secStatus,proto3,enum=fippb.ESecStockStatus" json:"secStatus,omitempty"` // 股票状态 如果不设置，默认未SecSS_Normal，正常交易
	SecStockType  ESecStockType     `protobuf:"varint,4,opt,name=secStockType,proto3,enum=fippb.ESecStockType" json:"secStockType,omitempty"`    // 股票类型 如果不设置，默认为SecST_All，所有类型
	Region        string            `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`                                          // 地域标签 预留，缺省为""
	Industry      string            `protobuf:"bytes,6,opt,name=industry,proto3" json:"industry,omitempty"`                                      // 行业标签 预留，缺省为""
}

func (x *SecEntranceElem) Reset() {
	*x = SecEntranceElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_sec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecEntranceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecEntranceElem) ProtoMessage() {}

func (x *SecEntranceElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_sec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecEntranceElem.ProtoReflect.Descriptor instead.
func (*SecEntranceElem) Descriptor() ([]byte, []int) {
	return file_fip_def_sec_proto_rawDescGZIP(), []int{18}
}

func (x *SecEntranceElem) GetEntranceLabel() string {
	if x != nil {
		return x.EntranceLabel
	}
	return ""
}

func (x *SecEntranceElem) GetExchangeID() []EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return nil
}

func (x *SecEntranceElem) GetSecStatus() []ESecStockStatus {
	if x != nil {
		return x.SecStatus
	}
	return nil
}

func (x *SecEntranceElem) GetSecStockType() ESecStockType {
	if x != nil {
		return x.SecStockType
	}
	return ESecStockType_SecST_All
}

func (x *SecEntranceElem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SecEntranceElem) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

var File_fip_def_sec_proto protoreflect.FileDescriptor

var file_fip_def_sec_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0xa0, 0x01, 0x0a,
	0x10, 0x53, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc4, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x6f,
	0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x6f, 0x6e,
	0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x6f, 0x6e,
	0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x41, 0x76, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x41, 0x76, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x61, 0x6d, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x68, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x72, 0x68, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x22, 0xab, 0x02,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65,
	0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x53, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd5, 0x09, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53,
	0x65, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x93, 0x06,
	0x0a, 0x0f, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x53, 0x65, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x74,
	0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x51, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65,
	0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xb4, 0x07, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x53, 0x65, 0x63, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x74, 0x79, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x71, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x51, 0x74, 0x79, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x51, 0x74, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x51, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x98, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x11, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x8c, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x2a, 0xe6,
	0x03, 0x0a, 0x0d, 0x45, 0x53, 0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x5f, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x65, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x5f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x48, 0x69,
	0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10,
	0xc9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x6f, 0x72, 0x65, 0x10, 0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x48,
	0x69, 0x73, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0xcb, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0xcc, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73,
	0x5f, 0x4d, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xcd, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xce, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xcf, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x10, 0xd0, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x4d, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd1, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xd2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f,
	0x50, 0x42, 0x55, 0x6e, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xd3, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x48, 0x69, 0x73, 0x5f, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xab, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x65, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x10, 0xac, 0x02, 0x12, 0x18, 0x0a,
	0x13, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x10, 0xad, 0x02, 0x2a, 0xf4, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x65, 0x63,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x4f, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65,
	0x63, 0x4f, 0x46, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f, 0x4f,
	0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x4f,
	0x46, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x69, 0x6c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63,
	0x4f, 0x46, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4f, 0x46, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x4f, 0x46, 0x5f, 0x4e, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x2a, 0xda,
	0x02, 0x0a, 0x0d, 0x45, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x4b, 0x4c,
	0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e,
	0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x30, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x31, 0x35, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e,
	0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x30, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x31,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48,
	0x6f, 0x75, 0x72, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4b, 0x4c,
	0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x33, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x34, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x44, 0x61,
	0x79, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f,
	0x57, 0x65, 0x65, 0x6b, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x31, 0x10, 0x0c, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x51, 0x75, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x31, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x31, 0x10, 0x0e, 0x2a, 0x55, 0x0a, 0x11, 0x45,
	0x53, 0x65, 0x63, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x41, 0x56, 0x54, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x79, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x41, 0x56, 0x54, 0x5f, 0x46,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x63, 0x41, 0x56, 0x54, 0x5f, 0x46, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x79,
	0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0d, 0x45, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x4e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x42, 0x75, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4d, 0x54,
	0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x0f,
	0x45, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x2a,
	0x4d, 0x0a, 0x0e, 0x45, 0x53, 0x65, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x48, 0x54, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x48, 0x54, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x65, 0x63, 0x48, 0x54, 0x5f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0xe9,
	0x04, 0x0a, 0x0d, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x6c,
	0x6c, 0x10, 0xf2, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x41, 0x10, 0xf3, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x54,
	0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x10, 0xf4, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65,
	0x63, 0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4b, 0x53, 0x48, 0x10, 0xf5, 0x07, 0x12,
	0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x4d,
	0x45, 0x10, 0xf6, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x47, 0x45, 0x4d, 0x10, 0xf7, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63,
	0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x53, 0x10, 0xf8, 0x07, 0x12, 0x14, 0x0a,
	0x0f, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65,
	0x10, 0xf9, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x4e, 0x4e, 0x4f, 0x10, 0xfa, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63,
	0x53, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x45, 0x51, 0x10, 0xfb, 0x07, 0x12, 0x11,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x10, 0xfc,
	0x07, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x10, 0xfd, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f,
	0x4f, 0x70, 0x74, 0x45, 0x54, 0x46, 0x10, 0xfe, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63,
	0x53, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x10, 0x86, 0x08, 0x12, 0x12, 0x0a,
	0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x45, 0x46, 0x10, 0x87,
	0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x4f,
	0x45, 0x46, 0x10, 0x88, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x46,
	0x75, 0x6e, 0x64, 0x45, 0x54, 0x46, 0x10, 0x89, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63,
	0x53, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x4f, 0x46, 0x4e, 0x10, 0x8f, 0x08, 0x12, 0x12, 0x0a,
	0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x10, 0x90,
	0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x44,
	0x69, 0x73, 0x10, 0x91, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x42,
	0x6f, 0x6e, 0x64, 0x10, 0x92, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f,
	0x42, 0x6f, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x93, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x53,
	0x65, 0x63, 0x53, 0x54, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x99,
	0x08, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x6c, 0x6c, 0x10, 0x9a, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x53, 0x10, 0x9b, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65,
	0x63, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x48, 0x10, 0x9c, 0x08, 0x12, 0x12,
	0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x5a, 0x10,
	0x9d, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x45, 0x45, 0x51, 0x10, 0x9e, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x53,
	0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0xa4, 0x08, 0x2a, 0x59, 0x0a, 0x0b, 0x45, 0x53,
	0x65, 0x63, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63,
	0x53, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x53,
	0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c,
	0x6c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x54, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x13, 0x45, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x53, 0x43, 0x54, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x43, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x53, 0x43, 0x54,
	0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x65, 0x63, 0x53, 0x43, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x10, 0x45, 0x53, 0x65, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x43, 0x54,
	0x5f, 0x52, 0x4d, 0x42, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x43, 0x54, 0x5f,
	0x48, 0x4b, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x43, 0x54, 0x5f, 0x55,
	0x53, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x43, 0x54, 0x5f, 0x54, 0x57,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x43, 0x54, 0x5f, 0x4a, 0x50, 0x59,
	0x10, 0x04, 0x2a, 0x4c, 0x0a, 0x10, 0x45, 0x53, 0x65, 0x63, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x45, 0x54, 0x5f,
	0x41, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x63,
	0x45, 0x54, 0x5f, 0x42, 0x65, 0x72, 0x6d, 0x75, 0x64, 0x61, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x65, 0x63, 0x45, 0x54, 0x5f, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x10, 0x02,
	0x2a, 0x41, 0x0a, 0x0d, 0x45, 0x53, 0x65, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75,
	0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x43, 0x4f, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x43, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x43, 0x4f, 0x50, 0x5f, 0x50, 0x55,
	0x54, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x4d,
	0x54, 0x5f, 0x53, 0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f,
	0x53, 0x5a, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x48, 0x53,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x48, 0x4b, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x41, 0x50, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x4d, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x51, 0x10, 0x08, 0x2a,
	0xe4, 0x02, 0x0a, 0x0f, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x48,
	0x61, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x45,
	0x78, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x53,
	0x53, 0x5f, 0x45, 0x78, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x41, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x44, 0x61, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x65, 0x63, 0x53, 0x53, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x41, 0x74,
	0x74, 0x6f, 0x72, 0x6e, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x53, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x79, 0x10, 0x11, 0x2a, 0x3d, 0x0a, 0x11, 0x45, 0x53, 0x65, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x65, 0x63, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x10, 0x02, 0x2a, 0xd8, 0x01, 0x0a, 0x12, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x53,
	0x44, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f,
	0x42, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x53, 0x44, 0x54,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x07,
	0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_sec_proto_rawDescOnce sync.Once
	file_fip_def_sec_proto_rawDescData = file_fip_def_sec_proto_rawDesc
)

func file_fip_def_sec_proto_rawDescGZIP() []byte {
	file_fip_def_sec_proto_rawDescOnce.Do(func() {
		file_fip_def_sec_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_sec_proto_rawDescData)
	})
	return file_fip_def_sec_proto_rawDescData
}

var file_fip_def_sec_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_fip_def_sec_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_fip_def_sec_proto_goTypes = []interface{}{
	(ESecErrorCode)(0),               // 0: fippb.ESecErrorCode
	(ESecOffsetFlag)(0),              // 1: fippb.ESecOffsetFlag
	(ESecKLineType)(0),               // 2: fippb.ESecKLineType
	(ESecAvgVolumeType)(0),           // 3: fippb.ESecAvgVolumeType
	(ESecMatchType)(0),               // 4: fippb.ESecMatchType
	(ESecSubDataType)(0),             // 5: fippb.ESecSubDataType
	(ESecHandleType)(0),              // 6: fippb.ESecHandleType
	(ESecStockType)(0),               // 7: fippb.ESecStockType
	(ESecSubType)(0),                 // 8: fippb.ESecSubType
	(ESecSubContractType)(0),         // 9: fippb.ESecSubContractType
	(ESecCurrencyType)(0),            // 10: fippb.ESecCurrencyType
	(ESecExerciseType)(0),            // 11: fippb.ESecExerciseType
	(ESecCallOrPut)(0),               // 12: fippb.ESecCallOrPut
	(ESecMarketType)(0),              // 13: fippb.ESecMarketType
	(ESecStockStatus)(0),             // 14: fippb.ESecStockStatus
	(ESecServiceStatus)(0),           // 15: fippb.ESecServiceStatus
	(ESecStaticDataType)(0),          // 16: fippb.ESecStaticDataType
	(*SecTSChartElem)(nil),           // 17: fippb.SecTSChartElem
	(*SecMatchDetailElem)(nil),       // 18: fippb.SecMatchDetailElem
	(*SecKLineElem)(nil),             // 19: fippb.SecKLineElem
	(*SecTimePriceElem)(nil),         // 20: fippb.SecTimePriceElem
	(*SecOffsetStaElem)(nil),         // 21: fippb.SecOffsetStaElem
	(*SecAvgVolumeElem)(nil),         // 22: fippb.SecAvgVolumeElem
	(*SecExchangeElem)(nil),          // 23: fippb.SecExchangeElem
	(*SecSubElem)(nil),               // 24: fippb.SecSubElem
	(*SecOptParaElem)(nil),           // 25: fippb.SecOptParaElem
	(*SecExtraQuot)(nil),             // 26: fippb.SecExtraQuot
	(*SecBestQuotElem)(nil),          // 27: fippb.SecBestQuotElem
	(*SecIndexContractElem)(nil),     // 28: fippb.SecIndexContractElem
	(*SecContractElem)(nil),          // 29: fippb.SecContractElem
	(*SecOptContractElem)(nil),       // 30: fippb.SecOptContractElem
	(*SecStaticDataVersionElem)(nil), // 31: fippb.SecStaticDataVersionElem
	(*SecOpenCloseElem)(nil),         // 32: fippb.SecOpenCloseElem
	(*SecOptVarietyElem)(nil),        // 33: fippb.SecOptVarietyElem
	(*SecOptUnderlyingElem)(nil),     // 34: fippb.SecOptUnderlyingElem
	(*SecEntranceElem)(nil),          // 35: fippb.SecEntranceElem
	(EExchgID)(0),                    // 36: fippb.EExchgID
}
var file_fip_def_sec_proto_depIdxs = []int32{
	1,  // 0: fippb.SecMatchDetailElem.offsetFlag:type_name -> fippb.ESecOffsetFlag
	4,  // 1: fippb.SecMatchDetailElem.matchType:type_name -> fippb.ESecMatchType
	3,  // 2: fippb.SecAvgVolumeElem.avgVolumeType:type_name -> fippb.ESecAvgVolumeType
	36, // 3: fippb.SecExchangeElem.exchangeID:type_name -> fippb.EExchgID
	36, // 4: fippb.SecSubElem.exchangeID:type_name -> fippb.EExchgID
	9,  // 5: fippb.SecSubElem.contractType:type_name -> fippb.ESecSubContractType
	1,  // 6: fippb.SecExtraQuot.offsetFlag:type_name -> fippb.ESecOffsetFlag
	4,  // 7: fippb.SecExtraQuot.matchType:type_name -> fippb.ESecMatchType
	36, // 8: fippb.SecIndexContractElem.exchangeID:type_name -> fippb.EExchgID
	7,  // 9: fippb.SecIndexContractElem.secType:type_name -> fippb.ESecStockType
	13, // 10: fippb.SecIndexContractElem.marketType:type_name -> fippb.ESecMarketType
	10, // 11: fippb.SecIndexContractElem.currencyType:type_name -> fippb.ESecCurrencyType
	36, // 12: fippb.SecContractElem.exchangeID:type_name -> fippb.EExchgID
	7,  // 13: fippb.SecContractElem.secType:type_name -> fippb.ESecStockType
	10, // 14: fippb.SecContractElem.currencyType:type_name -> fippb.ESecCurrencyType
	14, // 15: fippb.SecContractElem.secStatus:type_name -> fippb.ESecStockStatus
	36, // 16: fippb.SecOptContractElem.exchangeID:type_name -> fippb.EExchgID
	7,  // 17: fippb.SecOptContractElem.secType:type_name -> fippb.ESecStockType
	11, // 18: fippb.SecOptContractElem.exerciseType:type_name -> fippb.ESecExerciseType
	12, // 19: fippb.SecOptContractElem.callOrPut:type_name -> fippb.ESecCallOrPut
	36, // 20: fippb.SecStaticDataVersionElem.exchangeID:type_name -> fippb.EExchgID
	16, // 21: fippb.SecStaticDataVersionElem.type:type_name -> fippb.ESecStaticDataType
	36, // 22: fippb.SecOptVarietyElem.exchangeID:type_name -> fippb.EExchgID
	36, // 23: fippb.SecOptUnderlyingElem.exchangeID:type_name -> fippb.EExchgID
	36, // 24: fippb.SecEntranceElem.exchangeID:type_name -> fippb.EExchgID
	14, // 25: fippb.SecEntranceElem.secStatus:type_name -> fippb.ESecStockStatus
	7,  // 26: fippb.SecEntranceElem.secStockType:type_name -> fippb.ESecStockType
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_fip_def_sec_proto_init() }
func file_fip_def_sec_proto_init() {
	if File_fip_def_sec_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_def_sec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecTSChartElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecMatchDetailElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecKLineElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecTimePriceElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOffsetStaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecAvgVolumeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecExchangeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecSubElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOptParaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecExtraQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecBestQuotElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecIndexContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOptContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecStaticDataVersionElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOpenCloseElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOptVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecOptUnderlyingElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_sec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecEntranceElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_sec_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_sec_proto_goTypes,
		DependencyIndexes: file_fip_def_sec_proto_depIdxs,
		EnumInfos:         file_fip_def_sec_proto_enumTypes,
		MessageInfos:      file_fip_def_sec_proto_msgTypes,
	}.Build()
	File_fip_def_sec_proto = out.File
	file_fip_def_sec_proto_rawDesc = nil
	file_fip_def_sec_proto_goTypes = nil
	file_fip_def_sec_proto_depIdxs = nil
}
