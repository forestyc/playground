//*
// Version: 1.0  (高位用于不兼容的proto发布时提升, 低位用于兼容的proto发布时提升)
//
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 协议号与错误码定义 For CEM外盘行情
//
// @author <mengxin>
// @date 2021-10-21
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

//*
// 协议段使用规则(OPCODE分配区间)：
//   client-proxy： 1000 ~ 3999,其中:
//               1000-2999 : 控制指令;
//               3000-3199 : 国内期货/OTC/基差/互换/财讯通套利;
//               3200-3299 : 场外仓单;
//               3300-3399 : 场外互换;
//               3500~3599 : 国内证券;
//               3613-3699 : 路孚特CME外盘使用;
//               3700~3799 : 上海黄金交易所使用;
//
//   user-proxy交互：4000 ~ 4999,其中：
//               4001~4010 : 在线用户控制、请求所有期货合约等；fip_const.proto；
//               4011~4014 : 用户授权鉴权、权限通知等；fip_const_cme.proto；
//               4015~4016 : 请求查询路孚特CME全部合约列表；fip_const_cme.protoc；
//               4017~4018 : 请求查询证券SEC全部合约列表；fip_const_cme.protoc；
//               4019~4020 : 请求查询上金所SGE全部合约列表；fip_const_cme.protoc；
//
//   real-* 实时行情服务：5000~6999，其中：
//               5000~5099 : 期货实时服务；
//               5150~5169 : OTC场外行情、基差服务；
//               5170~5169 : OTC场外仓单服务；
//               5200~5212 : 场外海港大宗；
//               5213~5222 : 场外陕储粮；
//               5223~5234 : 场外互换；
//               5235~5238 : 场外陕储粮库点请求、场外互换成交行情快照；
//               5500~5599 : 证券实时行情使用；
//               5600~5699 : 上海黄金交易所使用；
//
//   history-* 历史行情服务：7000~8999，其中：
//               7000~7009 : 期货历史服务(历史服务对外接口，查询K、分时、明细)；
//               7010~7011 : 期货历史服务内部交互协议；
//               7020~7029 : 基差/仓单成交行情列表；
//               7100~7115 : 场外仓单 海港；
//               7401~7403 : 场外实时行情统计；
//               7500~7599 : 证券历史行情使用；
//               7600~7699 : 上海黄金交易所使用；
//
//   contract mgr-* 合约管理服务：
//               9000~9999 : 国内期货、财讯通套利；
//               9500~9599 : 证券使合约管理用；
//               9600~9699 : 上海黄金交易所合约管理使用；
//
//   collector-* 采集服务：
//               10000~10999 : 期货行情采集服务使用；
//               10500~10599 : 证券采集服务使用；
//               10600~10699 : 上海黄金交易所采集服务使用；
//
//   交易相关(TProxy): 20000~30000，外盘、证券，上海黄金交易未涉及
//
// 协议号书写规则：
//   外部接口规则：OPCODE_{请求REQ，响应RSP，通知NTF}_{业务名称}_{具体业务协议名称}
//   内部接口规则：OP_{请求REQ，响应RSP，通知NTF}_{业务名称}_{模块名称}_{具体业务协议名称}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_const_cme.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Protocol_CME int32

const (
	Protocol_CME_OPCODE_CME_Begin Protocol_CME = 0 // CME定义从3600开始;
	// /////////////////////CME client-proxy 交互协议 ////////////////////////
	Protocol_CME_OPCODE_CME_REQ_TIME_INFO                     Protocol_CME = 3613 ///< 日期时间信息请求
	Protocol_CME_OPCODE_CME_RSP_TIME_INFO                     Protocol_CME = 3614 ///< 日期时间信息响应
	Protocol_CME_OPCODE_CME_REQ_SUBSCRIBE                     Protocol_CME = 3615 ///< 订阅行情请求  //REQ
	Protocol_CME_OPCODE_CME_RSP_SUBSCRIBE                     Protocol_CME = 3616 ///< 订阅行情响应
	Protocol_CME_OPCODE_CME_ON_RTN_Quot                       Protocol_CME = 3621 ///< 行情推送
	Protocol_CME_OPCODE_CME_REQ_LIST_SRC                      Protocol_CME = 3622 ///< 请求列表详情 ////REQ
	Protocol_CME_OPCODE_CME_RSP_EXCHANGE_LIST                 Protocol_CME = 3623 ///< 交易所(市场)列表
	Protocol_CME_OPCODE_CME_RSP_FTR_VARIETY_LIST              Protocol_CME = 3624 ///< 期货品种列表
	Protocol_CME_OPCODE_CME_RSP_FTR_CONTRACT_LIST             Protocol_CME = 3625 ///< 期货合约列表
	Protocol_CME_OPCODE_CME_RSP_OPT_VARIETY_LIST              Protocol_CME = 3626 ///< 期权品种列表
	Protocol_CME_OPCODE_CME_RSP_OPT_CONTRACT_LIST             Protocol_CME = 3627 ///< 某标的物下的期权列表
	Protocol_CME_OPCODE_CME_RSP_MAIN_CONTRACT_LIST            Protocol_CME = 3628 ///< 主力合约
	Protocol_CME_OPCODE_CME_RSP_FTR_CONTRACT_Var_LIST         Protocol_CME = 3629 ///< 某品种的期货合约列表
	Protocol_CME_OPCODE_CME_RSP_UNDERLYING_LIST               Protocol_CME = 3630 ///< 期权标的物列表
	Protocol_CME_OPCODE_CME_RSP_RTN_EXTRA_QUOT_RealTimePrice  Protocol_CME = 3631 ///< 增值行情服务：实时结算价
	Protocol_CME_OPCODE_CME_RSP_RTN_EXTRA_QUOT_OrderStatistic Protocol_CME = 3632 ///< 增值行情服务：委托统计行情
	Protocol_CME_OPCODE_CME_RSP_RTN_EXTRA_QUOT_MatchPriceQty  Protocol_CME = 3633 ///< 增值行情服务：分价成交量
	Protocol_CME_OPCODE_CME_RSP_RTN_QUOT_TotalStatistic       Protocol_CME = 3634 ///< 推送品种统计
	Protocol_CME_OPCODE_CME_NOTIFY_STATUS                     Protocol_CME = 3635 ///< 服务状态通知
	Protocol_CME_OPCODE_CME_REQ_HISTORY_MATCH_DETAIL          Protocol_CME = 3636 ///< 历史成交明细
	Protocol_CME_OPCODE_CME_RSP_HISTORY_MATCH_DETAIL          Protocol_CME = 3637 ///< 历史成交明细
	Protocol_CME_OPCODE_CME_REQ_SERVICE_STATUS                Protocol_CME = 3638 ///< 查询某交易所的行情状态 //REQ
	Protocol_CME_OPCODE_CME_RSP_LIST_SRC                      Protocol_CME = 3639 ///< 列表详情响应
	Protocol_CME_OPCODE_CME_RSP_Query_SUBSCRIBE               Protocol_CME = 3640 ///< 当前订阅的查询结果
	Protocol_CME_OPCODE_CME_REQ_TS_CHART                      Protocol_CME = 3641 ///< 请求分时图数据
	Protocol_CME_OPCODE_CME_RSP_TS_CHART                      Protocol_CME = 3642 ///< 响应分时图数据
	Protocol_CME_OPCODE_CME_REQ_TIME_PRICE                    Protocol_CME = 3643 ///< 请求分价数据
	Protocol_CME_OPCODE_CME_RSP_TIME_PRICE                    Protocol_CME = 3644 ///< 响应分价数据
	Protocol_CME_OPCODE_CME_REQ_TIME_VOLUMN                   Protocol_CME = 3645 ///< 请求分笔数据
	Protocol_CME_OPCODE_CME_RSP_TIME_VOLUMN                   Protocol_CME = 3646 ///< 响应分笔数据
	Protocol_CME_OPCODE_CME_REQ_KLINE                         Protocol_CME = 3652 ///< 请求K线数据
	Protocol_CME_OPCODE_CME_RSP_KLINE                         Protocol_CME = 3653 ///< 响应K线数据
	Protocol_CME_OPCODE_CME_ON_RTN_INC_QUOT                   Protocol_CME = 3654 ///< 增量行情推送
	Protocol_CME_OPCODE_CME_ON_RTN_QUOT_BRIEF                 Protocol_CME = 3655 ///< 行情推送(简要信息)
	Protocol_CME_OPCODE_CME_RSP_IDX_CAT_LIST                  Protocol_CME = 3056 ///< 某交易所指数合约分类
	Protocol_CME_OPCODE_CME_RSP_IDX_CONTRACT_LIST             Protocol_CME = 3057 ///< 某交易所指数合约
	Protocol_CME_OPCODE_CME_REQ_SNAPSHOT                      Protocol_CME = 3658 ///< 申请快照
	Protocol_CME_OPCODE_CME_RSP_SNAPSHOT                      Protocol_CME = 3659 ///< 快照发送完成
	Protocol_CME_OPCODE_CME_RSP_NIGHT_CONTRACT_LIST           Protocol_CME = 3660 ///< 夜盘合约
	Protocol_CME_OPCODE_CME_RSP_SUB_MAIN_CONTRACT_LIST        Protocol_CME = 3661 ///< 次主力合约
	Protocol_CME_OPCODE_CME_RSP_RTN_QUOT_OptionStatistic      Protocol_CME = 3662 ///< 推送期权统计
	Protocol_CME_OPCODE_CME_REQ_AVGVOL                        Protocol_CME = 3663 ///< 请求均量
	Protocol_CME_OPCODE_CME_RSP_AVGVOL                        Protocol_CME = 3664 ///< 响应均量
	Protocol_CME_OPCODE_CME_RSP_ARBITRAGE_CONTRACT_LIST       Protocol_CME = 3665 ///< 套利合约
	Protocol_CME_OPCODE_CME_RSP_OPT_UNDERLYING_LIST           Protocol_CME = 3677 ///< (新)期权标的物列表, 包括非期货标的期权
	Protocol_CME_OPCODE_SEND_NOTIFICATION_TO_CLIENT           Protocol_CME = 3695 ///< 向客户端发送事务通知 proxy->client
	Protocol_CME_OPCODE_REQ_QRY_CME_AUTH                      Protocol_CME = 3696 ///< 客户端向proxy查询CME授权信息 client->proxy
	Protocol_CME_OPCODE_RSP_QRY_CME_AUTH                      Protocol_CME = 3697 ///< proxy向客户端响应CME授权信息查询 proxy->client
	// ---------------------- user <-> proxy protocol opcode -------------------//
	Protocol_CME_OP_REQ_USER_AUTH          Protocol_CME = 4011 // proxy->user 向管理端user服务请求查询用户权限
	Protocol_CME_OP_RSP_USER_AUTH          Protocol_CME = 4012 // user->prxoxy user服务响应授权查询 rsp all contract
	Protocol_CME_OP_NTF_USER_AUTH_UPDATE   Protocol_CME = 4013 // user->proxy user服务向Proxy推送授权变化信息
	Protocol_CME_OP_NTF_USER_DEVICE_CHANGE Protocol_CME = 4014 // user->proxy user服务向Proxy推送设备变化信息
	Protocol_CME_OP_REQ_CME_CONTRACT_ALL   Protocol_CME = 4015 // user->proxy, req all contract for cme ,类似期货的4009处理
	Protocol_CME_OP_RSP_CME_CONTRACT_ALL   Protocol_CME = 4016 // user->proxy, rsp all contract for cme ,类似期货的4010处理
)

// Enum value maps for Protocol_CME.
var (
	Protocol_CME_name = map[int32]string{
		0:    "OPCODE_CME_Begin",
		3613: "OPCODE_CME_REQ_TIME_INFO",
		3614: "OPCODE_CME_RSP_TIME_INFO",
		3615: "OPCODE_CME_REQ_SUBSCRIBE",
		3616: "OPCODE_CME_RSP_SUBSCRIBE",
		3621: "OPCODE_CME_ON_RTN_Quot",
		3622: "OPCODE_CME_REQ_LIST_SRC",
		3623: "OPCODE_CME_RSP_EXCHANGE_LIST",
		3624: "OPCODE_CME_RSP_FTR_VARIETY_LIST",
		3625: "OPCODE_CME_RSP_FTR_CONTRACT_LIST",
		3626: "OPCODE_CME_RSP_OPT_VARIETY_LIST",
		3627: "OPCODE_CME_RSP_OPT_CONTRACT_LIST",
		3628: "OPCODE_CME_RSP_MAIN_CONTRACT_LIST",
		3629: "OPCODE_CME_RSP_FTR_CONTRACT_Var_LIST",
		3630: "OPCODE_CME_RSP_UNDERLYING_LIST",
		3631: "OPCODE_CME_RSP_RTN_EXTRA_QUOT_RealTimePrice",
		3632: "OPCODE_CME_RSP_RTN_EXTRA_QUOT_OrderStatistic",
		3633: "OPCODE_CME_RSP_RTN_EXTRA_QUOT_MatchPriceQty",
		3634: "OPCODE_CME_RSP_RTN_QUOT_TotalStatistic",
		3635: "OPCODE_CME_NOTIFY_STATUS",
		3636: "OPCODE_CME_REQ_HISTORY_MATCH_DETAIL",
		3637: "OPCODE_CME_RSP_HISTORY_MATCH_DETAIL",
		3638: "OPCODE_CME_REQ_SERVICE_STATUS",
		3639: "OPCODE_CME_RSP_LIST_SRC",
		3640: "OPCODE_CME_RSP_Query_SUBSCRIBE",
		3641: "OPCODE_CME_REQ_TS_CHART",
		3642: "OPCODE_CME_RSP_TS_CHART",
		3643: "OPCODE_CME_REQ_TIME_PRICE",
		3644: "OPCODE_CME_RSP_TIME_PRICE",
		3645: "OPCODE_CME_REQ_TIME_VOLUMN",
		3646: "OPCODE_CME_RSP_TIME_VOLUMN",
		3652: "OPCODE_CME_REQ_KLINE",
		3653: "OPCODE_CME_RSP_KLINE",
		3654: "OPCODE_CME_ON_RTN_INC_QUOT",
		3655: "OPCODE_CME_ON_RTN_QUOT_BRIEF",
		3056: "OPCODE_CME_RSP_IDX_CAT_LIST",
		3057: "OPCODE_CME_RSP_IDX_CONTRACT_LIST",
		3658: "OPCODE_CME_REQ_SNAPSHOT",
		3659: "OPCODE_CME_RSP_SNAPSHOT",
		3660: "OPCODE_CME_RSP_NIGHT_CONTRACT_LIST",
		3661: "OPCODE_CME_RSP_SUB_MAIN_CONTRACT_LIST",
		3662: "OPCODE_CME_RSP_RTN_QUOT_OptionStatistic",
		3663: "OPCODE_CME_REQ_AVGVOL",
		3664: "OPCODE_CME_RSP_AVGVOL",
		3665: "OPCODE_CME_RSP_ARBITRAGE_CONTRACT_LIST",
		3677: "OPCODE_CME_RSP_OPT_UNDERLYING_LIST",
		3695: "OPCODE_SEND_NOTIFICATION_TO_CLIENT",
		3696: "OPCODE_REQ_QRY_CME_AUTH",
		3697: "OPCODE_RSP_QRY_CME_AUTH",
		4011: "OP_REQ_USER_AUTH",
		4012: "OP_RSP_USER_AUTH",
		4013: "OP_NTF_USER_AUTH_UPDATE",
		4014: "OP_NTF_USER_DEVICE_CHANGE",
		4015: "OP_REQ_CME_CONTRACT_ALL",
		4016: "OP_RSP_CME_CONTRACT_ALL",
	}
	Protocol_CME_value = map[string]int32{
		"OPCODE_CME_Begin":                             0,
		"OPCODE_CME_REQ_TIME_INFO":                     3613,
		"OPCODE_CME_RSP_TIME_INFO":                     3614,
		"OPCODE_CME_REQ_SUBSCRIBE":                     3615,
		"OPCODE_CME_RSP_SUBSCRIBE":                     3616,
		"OPCODE_CME_ON_RTN_Quot":                       3621,
		"OPCODE_CME_REQ_LIST_SRC":                      3622,
		"OPCODE_CME_RSP_EXCHANGE_LIST":                 3623,
		"OPCODE_CME_RSP_FTR_VARIETY_LIST":              3624,
		"OPCODE_CME_RSP_FTR_CONTRACT_LIST":             3625,
		"OPCODE_CME_RSP_OPT_VARIETY_LIST":              3626,
		"OPCODE_CME_RSP_OPT_CONTRACT_LIST":             3627,
		"OPCODE_CME_RSP_MAIN_CONTRACT_LIST":            3628,
		"OPCODE_CME_RSP_FTR_CONTRACT_Var_LIST":         3629,
		"OPCODE_CME_RSP_UNDERLYING_LIST":               3630,
		"OPCODE_CME_RSP_RTN_EXTRA_QUOT_RealTimePrice":  3631,
		"OPCODE_CME_RSP_RTN_EXTRA_QUOT_OrderStatistic": 3632,
		"OPCODE_CME_RSP_RTN_EXTRA_QUOT_MatchPriceQty":  3633,
		"OPCODE_CME_RSP_RTN_QUOT_TotalStatistic":       3634,
		"OPCODE_CME_NOTIFY_STATUS":                     3635,
		"OPCODE_CME_REQ_HISTORY_MATCH_DETAIL":          3636,
		"OPCODE_CME_RSP_HISTORY_MATCH_DETAIL":          3637,
		"OPCODE_CME_REQ_SERVICE_STATUS":                3638,
		"OPCODE_CME_RSP_LIST_SRC":                      3639,
		"OPCODE_CME_RSP_Query_SUBSCRIBE":               3640,
		"OPCODE_CME_REQ_TS_CHART":                      3641,
		"OPCODE_CME_RSP_TS_CHART":                      3642,
		"OPCODE_CME_REQ_TIME_PRICE":                    3643,
		"OPCODE_CME_RSP_TIME_PRICE":                    3644,
		"OPCODE_CME_REQ_TIME_VOLUMN":                   3645,
		"OPCODE_CME_RSP_TIME_VOLUMN":                   3646,
		"OPCODE_CME_REQ_KLINE":                         3652,
		"OPCODE_CME_RSP_KLINE":                         3653,
		"OPCODE_CME_ON_RTN_INC_QUOT":                   3654,
		"OPCODE_CME_ON_RTN_QUOT_BRIEF":                 3655,
		"OPCODE_CME_RSP_IDX_CAT_LIST":                  3056,
		"OPCODE_CME_RSP_IDX_CONTRACT_LIST":             3057,
		"OPCODE_CME_REQ_SNAPSHOT":                      3658,
		"OPCODE_CME_RSP_SNAPSHOT":                      3659,
		"OPCODE_CME_RSP_NIGHT_CONTRACT_LIST":           3660,
		"OPCODE_CME_RSP_SUB_MAIN_CONTRACT_LIST":        3661,
		"OPCODE_CME_RSP_RTN_QUOT_OptionStatistic":      3662,
		"OPCODE_CME_REQ_AVGVOL":                        3663,
		"OPCODE_CME_RSP_AVGVOL":                        3664,
		"OPCODE_CME_RSP_ARBITRAGE_CONTRACT_LIST":       3665,
		"OPCODE_CME_RSP_OPT_UNDERLYING_LIST":           3677,
		"OPCODE_SEND_NOTIFICATION_TO_CLIENT":           3695,
		"OPCODE_REQ_QRY_CME_AUTH":                      3696,
		"OPCODE_RSP_QRY_CME_AUTH":                      3697,
		"OP_REQ_USER_AUTH":                             4011,
		"OP_RSP_USER_AUTH":                             4012,
		"OP_NTF_USER_AUTH_UPDATE":                      4013,
		"OP_NTF_USER_DEVICE_CHANGE":                    4014,
		"OP_REQ_CME_CONTRACT_ALL":                      4015,
		"OP_RSP_CME_CONTRACT_ALL":                      4016,
	}
)

func (x Protocol_CME) Enum() *Protocol_CME {
	p := new(Protocol_CME)
	*p = x
	return p
}

func (x Protocol_CME) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_CME) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_const_cme_proto_enumTypes[0].Descriptor()
}

func (Protocol_CME) Type() protoreflect.EnumType {
	return &file_fip_const_cme_proto_enumTypes[0]
}

func (x Protocol_CME) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_CME.Descriptor instead.
func (Protocol_CME) EnumDescriptor() ([]byte, []int) {
	return file_fip_const_cme_proto_rawDescGZIP(), []int{0}
}

var File_fip_const_cme_proto protoreflect.FileDescriptor

var file_fip_const_cme_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2a, 0x89, 0x0f, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x43, 0x4d, 0x45, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x9d, 0x1c, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x9e,
	0x1c, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x9f, 0x1c,
	0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52,
	0x53, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0xa0, 0x1c, 0x12,
	0x1b, 0x0a, 0x16, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x4f, 0x4e,
	0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x10, 0xa5, 0x1c, 0x12, 0x1c, 0x0a, 0x17,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x53, 0x52, 0x43, 0x10, 0xa6, 0x1c, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xa7, 0x1c, 0x12, 0x24, 0x0a,
	0x1f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f,
	0x46, 0x54, 0x52, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0xa8, 0x1c, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d,
	0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x46, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xa9, 0x1c, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4f, 0x50, 0x54,
	0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xaa, 0x1c,
	0x12, 0x25, 0x0a, 0x20, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52,
	0x53, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0xab, 0x1c, 0x12, 0x26, 0x0a, 0x21, 0x4f, 0x50, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xac, 0x1c, 0x12,
	0x29, 0x0a, 0x24, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x46, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x56,
	0x61, 0x72, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xad, 0x1c, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xae, 0x1c, 0x12,
	0x30, 0x0a, 0x2b, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x5f, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0xaf,
	0x1c, 0x12, 0x31, 0x0a, 0x2c, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x10, 0xb0, 0x1c, 0x12, 0x30, 0x0a, 0x2b, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x51, 0x74, 0x79, 0x10, 0xb1, 0x1c, 0x12, 0x2b, 0x0a, 0x26, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x10, 0xb2, 0x1c, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0xb3, 0x1c, 0x12, 0x28, 0x0a, 0x23, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xb4, 0x1c, 0x12, 0x28, 0x0a, 0x23,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x10, 0xb5, 0x1c, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xb6, 0x1c, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x53, 0x52, 0x43, 0x10, 0xb7, 0x1c, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x50, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0xb8, 0x1c, 0x12, 0x1c, 0x0a,
	0x17, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x54, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x10, 0xb9, 0x1c, 0x12, 0x1c, 0x0a, 0x17, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x54, 0x53,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x10, 0xba, 0x1c, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0xbb, 0x1c, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0xbc, 0x1c, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0xbd, 0x1c, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0xbe, 0x1c, 0x12, 0x19, 0x0a, 0x14, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4b, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0xc4, 0x1c, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4b, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0xc5,
	0x1c, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f,
	0x4f, 0x4e, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x10,
	0xc6, 0x1c, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45,
	0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x5f, 0x42, 0x52, 0x49,
	0x45, 0x46, 0x10, 0xc7, 0x1c, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x49, 0x44, 0x58, 0x5f, 0x43, 0x41, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0xf0, 0x17, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x50, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x49, 0x44, 0x58, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xf1, 0x17, 0x12, 0x1c,
	0x0a, 0x17, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0xca, 0x1c, 0x12, 0x1c, 0x0a, 0x17,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0xcb, 0x1c, 0x12, 0x27, 0x0a, 0x22, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0xcc, 0x1c, 0x12, 0x2a, 0x0a, 0x25, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d,
	0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xcd, 0x1c, 0x12,
	0x2c, 0x0a, 0x27, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x10, 0xce, 0x1c, 0x12, 0x1a, 0x0a,
	0x15, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x41, 0x56, 0x47, 0x56, 0x4f, 0x4c, 0x10, 0xcf, 0x1c, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x41, 0x56, 0x47, 0x56,
	0x4f, 0x4c, 0x10, 0xd0, 0x1c, 0x12, 0x2b, 0x0a, 0x26, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0xd1, 0x1c, 0x12, 0x27, 0x0a, 0x22, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x45,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x59,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xdd, 0x1c, 0x12, 0x27, 0x0a, 0x22, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0xef, 0x1c, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x51, 0x52, 0x59, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10,
	0xf0, 0x1c, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53, 0x50,
	0x5f, 0x51, 0x52, 0x59, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xf1, 0x1c,
	0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x10, 0xab, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xac, 0x1f, 0x12, 0x1c,
	0x0a, 0x17, 0x4f, 0x50, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xad, 0x1f, 0x12, 0x1e, 0x0a, 0x19,
	0x4f, 0x50, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xae, 0x1f, 0x12, 0x1c, 0x0a, 0x17,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xaf, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xb0, 0x1f, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_const_cme_proto_rawDescOnce sync.Once
	file_fip_const_cme_proto_rawDescData = file_fip_const_cme_proto_rawDesc
)

func file_fip_const_cme_proto_rawDescGZIP() []byte {
	file_fip_const_cme_proto_rawDescOnce.Do(func() {
		file_fip_const_cme_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_const_cme_proto_rawDescData)
	})
	return file_fip_const_cme_proto_rawDescData
}

var file_fip_const_cme_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fip_const_cme_proto_goTypes = []interface{}{
	(Protocol_CME)(0), // 0: fippb.Protocol_CME
}
var file_fip_const_cme_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fip_const_cme_proto_init() }
func file_fip_const_cme_proto_init() {
	if File_fip_const_cme_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_const_cme_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_const_cme_proto_goTypes,
		DependencyIndexes: file_fip_const_cme_proto_depIdxs,
		EnumInfos:         file_fip_const_cme_proto_enumTypes,
	}.Build()
	File_fip_const_cme_proto = out.File
	file_fip_const_cme_proto_rawDesc = nil
	file_fip_const_cme_proto_goTypes = nil
	file_fip_const_cme_proto_depIdxs = nil
}
