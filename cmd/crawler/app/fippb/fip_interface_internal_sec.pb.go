//*
// Copyright (C) 2017-2021，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 中继端内部接口proto定义
//
// @author fengbaoxin@dce.com.cn
//
// @date 2021-9-10
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_internal_sec.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 历史数据写入完成通知
// @date 2021-6-23
// @note 协议号
type NotifySecHandleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32         `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                     //消息ID
	HandleType ESecHandleType `protobuf:"varint,3,opt,name=handleType,proto3,enum=fippb.ESecHandleType" json:"handleType,omitempty"` //服务处理事件类型
	ErrorID    uint32         `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                                 //数据写入结果
}

func (x *NotifySecHandleResult) Reset() {
	*x = NotifySecHandleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecHandleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecHandleResult) ProtoMessage() {}

func (x *NotifySecHandleResult) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecHandleResult.ProtoReflect.Descriptor instead.
func (*NotifySecHandleResult) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{0}
}

func (x *NotifySecHandleResult) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *NotifySecHandleResult) GetHandleType() ESecHandleType {
	if x != nil {
		return x.HandleType
	}
	return ESecHandleType_SecHT_TimeChart
}

func (x *NotifySecHandleResult) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 请求订阅全部证券行情
// @date 2022-3-23
// @note 协议号：client-proxy:<>
type ReqSubSecAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(非必填)
}

func (x *ReqSubSecAllQuot) Reset() {
	*x = ReqSubSecAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubSecAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubSecAllQuot) ProtoMessage() {}

func (x *ReqSubSecAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubSecAllQuot.ProtoReflect.Descriptor instead.
func (*ReqSubSecAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{1}
}

func (x *ReqSubSecAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubSecAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求订阅全部证券行情响应
// @date 2022-3-23
// @note 协议号：client-proxy:<>
type RspSubSecAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ErrorID    uint32   `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	ExchangeID EExchgID `protobuf:"varint,3,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(非必填)
}

func (x *RspSubSecAllQuot) Reset() {
	*x = RspSubSecAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubSecAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubSecAllQuot) ProtoMessage() {}

func (x *RspSubSecAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubSecAllQuot.ProtoReflect.Descriptor instead.
func (*RspSubSecAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{2}
}

func (x *RspSubSecAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubSecAllQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSubSecAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求取消订阅全部证券行情
// @date 2022-3-23
// @note 协议号：client-proxy:<>
type ReqUnSubSecAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(非必填)
}

func (x *ReqUnSubSecAllQuot) Reset() {
	*x = ReqUnSubSecAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUnSubSecAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUnSubSecAllQuot) ProtoMessage() {}

func (x *ReqUnSubSecAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUnSubSecAllQuot.ProtoReflect.Descriptor instead.
func (*ReqUnSubSecAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{3}
}

func (x *ReqUnSubSecAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqUnSubSecAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求取消订阅全部证券行情响应
// @date 2022-3-23
// @note 协议号：client-proxy:<>
type RspUnSubSecAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ErrorID    uint32   `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	ExchangeID EExchgID `protobuf:"varint,3,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(非必填)
}

func (x *RspUnSubSecAllQuot) Reset() {
	*x = RspUnSubSecAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUnSubSecAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUnSubSecAllQuot) ProtoMessage() {}

func (x *RspUnSubSecAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUnSubSecAllQuot.ProtoReflect.Descriptor instead.
func (*RspUnSubSecAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{4}
}

func (x *RspUnSubSecAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspUnSubSecAllQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspUnSubSecAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求订阅交易所开盘收盘信息
// @date 2021-10-15
// @note 协议号：client-proxy:<>
type ReqSubSecOpenClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqSubSecOpenClose) Reset() {
	*x = ReqSubSecOpenClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubSecOpenClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubSecOpenClose) ProtoMessage() {}

func (x *ReqSubSecOpenClose) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubSecOpenClose.ProtoReflect.Descriptor instead.
func (*ReqSubSecOpenClose) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{5}
}

func (x *ReqSubSecOpenClose) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubSecOpenClose) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求订阅交易所开盘收盘信息响应
// @date 2021-10-15
// @note 协议号：client-proxy:<>
type RspSubSecOpenClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ErrorID    uint32   `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
}

func (x *RspSubSecOpenClose) Reset() {
	*x = RspSubSecOpenClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubSecOpenClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubSecOpenClose) ProtoMessage() {}

func (x *RspSubSecOpenClose) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubSecOpenClose.ProtoReflect.Descriptor instead.
func (*RspSubSecOpenClose) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{6}
}

func (x *RspSubSecOpenClose) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubSecOpenClose) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspSubSecOpenClose) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 推送交易所开盘收盘信息通知
// @date 2021-10-15
// @note 协议号：client-proxy:<>
type NotifySecOpenClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID            `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	TradeDate  string              `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 当前交易日，格式年月日，例如"20170802"。
	Elem       []*SecOpenCloseElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 开盘收盘信息
}

func (x *NotifySecOpenClose) Reset() {
	*x = NotifySecOpenClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecOpenClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecOpenClose) ProtoMessage() {}

func (x *NotifySecOpenClose) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecOpenClose.ProtoReflect.Descriptor instead.
func (*NotifySecOpenClose) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{7}
}

func (x *NotifySecOpenClose) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifySecOpenClose) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifySecOpenClose) GetElem() []*SecOpenCloseElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 请求交易日
// @date 2021-10-26
// @note 协议号：client-proxy:<>
type ReqSecTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"` // 请求id
}

func (x *ReqSecTradeDate) Reset() {
	*x = ReqSecTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecTradeDate) ProtoMessage() {}

func (x *ReqSecTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecTradeDate.ProtoReflect.Descriptor instead.
func (*ReqSecTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{8}
}

func (x *ReqSecTradeDate) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

// *
// @brief 请求交易日响应
// @date 2021-10-26
// @note 协议号：client-proxy:<>
type RspSecTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	TradeDate  string   `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 当前交易日，格式年月日，例如"20170802"。
	ErrorID    uint32   `protobuf:"varint,4,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
}

func (x *RspSecTradeDate) Reset() {
	*x = RspSecTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecTradeDate) ProtoMessage() {}

func (x *RspSecTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecTradeDate.ProtoReflect.Descriptor instead.
func (*RspSecTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{9}
}

func (x *RspSecTradeDate) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecTradeDate) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspSecTradeDate) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspSecTradeDate) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 交易日通知
// @date 2021-6-23
// @note 协议号
type NotifySecTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	TradeDate  string   `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 当前交易日，格式年月日，例如"20170802"。
}

func (x *NotifySecTradeDate) Reset() {
	*x = NotifySecTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecTradeDate) ProtoMessage() {}

func (x *NotifySecTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecTradeDate.ProtoReflect.Descriptor instead.
func (*NotifySecTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{10}
}

func (x *NotifySecTradeDate) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifySecTradeDate) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 请求订阅北交所合约列表
// @date 2022-3-21
// @note 协议号：
type ReqSubSecBJContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"` // 请求id
}

func (x *ReqSubSecBJContract) Reset() {
	*x = ReqSubSecBJContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubSecBJContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubSecBJContract) ProtoMessage() {}

func (x *ReqSubSecBJContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubSecBJContract.ProtoReflect.Descriptor instead.
func (*ReqSubSecBJContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{11}
}

func (x *ReqSubSecBJContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

// *
// @brief 请求订阅北交所合约列表响应
// @date 2022-3-21
// @note 协议号：
type RspSubSecBJContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubSecBJContract) Reset() {
	*x = RspSubSecBJContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubSecBJContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubSecBJContract) ProtoMessage() {}

func (x *RspSubSecBJContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubSecBJContract.ProtoReflect.Descriptor instead.
func (*RspSubSecBJContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{12}
}

func (x *RspSubSecBJContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubSecBJContract) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 北交所合约列表通知
// @date 2022-3-21
// @note 协议号：
type NotifySecBJContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate    string   `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	ContractList []string `protobuf:"bytes,2,rep,name=contractList,proto3" json:"contractList,omitempty"`            // 合约列表
	PkgType      EPkgType `protobuf:"varint,3,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *NotifySecBJContract) Reset() {
	*x = NotifySecBJContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_sec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecBJContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecBJContract) ProtoMessage() {}

func (x *NotifySecBJContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_sec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecBJContract.ProtoReflect.Descriptor instead.
func (*NotifySecBJContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_sec_proto_rawDescGZIP(), []int{13}
}

func (x *NotifySecBJContract) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifySecBJContract) GetContractList() []string {
	if x != nil {
		return x.ContractList
	}
	return nil
}

func (x *NotifySecBJContract) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

var File_fip_interface_internal_sec_proto protoreflect.FileDescriptor

var file_fip_interface_internal_sec_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x69, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e,
	0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x35, 0x0a,
	0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x59,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x10, 0x52, 0x73, 0x70,
	0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x5b,
	0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x41, 0x6c, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x12, 0x52,
	0x73, 0x70, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x22, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x75, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x53, 0x65, 0x63, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x42, 0x4a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x53, 0x75,
	0x62, 0x53, 0x65, 0x63, 0x42, 0x4a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x82,
	0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x42, 0x4a, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66,
	0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_internal_sec_proto_rawDescOnce sync.Once
	file_fip_interface_internal_sec_proto_rawDescData = file_fip_interface_internal_sec_proto_rawDesc
)

func file_fip_interface_internal_sec_proto_rawDescGZIP() []byte {
	file_fip_interface_internal_sec_proto_rawDescOnce.Do(func() {
		file_fip_interface_internal_sec_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_internal_sec_proto_rawDescData)
	})
	return file_fip_interface_internal_sec_proto_rawDescData
}

var file_fip_interface_internal_sec_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_fip_interface_internal_sec_proto_goTypes = []interface{}{
	(*NotifySecHandleResult)(nil), // 0: fippb.NotifySecHandleResult
	(*ReqSubSecAllQuot)(nil),      // 1: fippb.ReqSubSecAllQuot
	(*RspSubSecAllQuot)(nil),      // 2: fippb.RspSubSecAllQuot
	(*ReqUnSubSecAllQuot)(nil),    // 3: fippb.ReqUnSubSecAllQuot
	(*RspUnSubSecAllQuot)(nil),    // 4: fippb.RspUnSubSecAllQuot
	(*ReqSubSecOpenClose)(nil),    // 5: fippb.ReqSubSecOpenClose
	(*RspSubSecOpenClose)(nil),    // 6: fippb.RspSubSecOpenClose
	(*NotifySecOpenClose)(nil),    // 7: fippb.NotifySecOpenClose
	(*ReqSecTradeDate)(nil),       // 8: fippb.ReqSecTradeDate
	(*RspSecTradeDate)(nil),       // 9: fippb.RspSecTradeDate
	(*NotifySecTradeDate)(nil),    // 10: fippb.NotifySecTradeDate
	(*ReqSubSecBJContract)(nil),   // 11: fippb.ReqSubSecBJContract
	(*RspSubSecBJContract)(nil),   // 12: fippb.RspSubSecBJContract
	(*NotifySecBJContract)(nil),   // 13: fippb.NotifySecBJContract
	(ESecHandleType)(0),           // 14: fippb.ESecHandleType
	(EExchgID)(0),                 // 15: fippb.EExchgID
	(*SecOpenCloseElem)(nil),      // 16: fippb.SecOpenCloseElem
	(EPkgType)(0),                 // 17: fippb.EPkgType
}
var file_fip_interface_internal_sec_proto_depIdxs = []int32{
	14, // 0: fippb.NotifySecHandleResult.handleType:type_name -> fippb.ESecHandleType
	15, // 1: fippb.ReqSubSecAllQuot.exchangeID:type_name -> fippb.EExchgID
	15, // 2: fippb.RspSubSecAllQuot.exchangeID:type_name -> fippb.EExchgID
	15, // 3: fippb.ReqUnSubSecAllQuot.exchangeID:type_name -> fippb.EExchgID
	15, // 4: fippb.RspUnSubSecAllQuot.exchangeID:type_name -> fippb.EExchgID
	15, // 5: fippb.ReqSubSecOpenClose.exchangeID:type_name -> fippb.EExchgID
	15, // 6: fippb.RspSubSecOpenClose.exchangeID:type_name -> fippb.EExchgID
	15, // 7: fippb.NotifySecOpenClose.exchangeID:type_name -> fippb.EExchgID
	16, // 8: fippb.NotifySecOpenClose.elem:type_name -> fippb.SecOpenCloseElem
	15, // 9: fippb.RspSecTradeDate.exchangeID:type_name -> fippb.EExchgID
	15, // 10: fippb.NotifySecTradeDate.exchangeID:type_name -> fippb.EExchgID
	17, // 11: fippb.NotifySecBJContract.pkgType:type_name -> fippb.EPkgType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_fip_interface_internal_sec_proto_init() }
func file_fip_interface_internal_sec_proto_init() {
	if File_fip_interface_internal_sec_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_sec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_internal_sec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecHandleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubSecAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubSecAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUnSubSecAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUnSubSecAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubSecOpenClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubSecOpenClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecOpenClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubSecBJContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubSecBJContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_sec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecBJContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_internal_sec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_internal_sec_proto_goTypes,
		DependencyIndexes: file_fip_interface_internal_sec_proto_depIdxs,
		MessageInfos:      file_fip_interface_internal_sec_proto_msgTypes,
	}.Build()
	File_fip_interface_internal_sec_proto = out.File
	file_fip_interface_internal_sec_proto_rawDesc = nil
	file_fip_interface_internal_sec_proto_goTypes = nil
	file_fip_interface_internal_sec_proto_depIdxs = nil
}
