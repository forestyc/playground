//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 所有proto通用的结构
//
// @author <zhaow>
//
// @date 2017-7-10
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_global.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / 交易所id类型.
type EExchgID int32

const (
	EExchgID_ExchNull              EExchgID = 0  //旧协议为ExchangeId_Begin
	EExchgID_DCE                   EExchgID = 1  // 大商所                   //旧协议为ExchangeId_DCE
	EExchgID_SHFE                  EExchgID = 2  // 上期所                   //旧协议为ExchangeId_SHFE
	EExchgID_CZCE                  EExchgID = 3  // 郑商所                   //旧协议为ExchangeId_CZCE
	EExchgID_CFFE                  EExchgID = 4  // 中金所                   //旧协议为ExchangeId_CFFE
	EExchgID_SGE                   EExchgID = 5  // 上金所
	EExchgID_INE                   EExchgID = 6  // 能源中心
	EExchgID_NYMEX                 EExchgID = 7  // 纽约NYMEX
	EExchgID_COMEX                 EExchgID = 8  // 纽约COMEX
	EExchgID_CBOT                  EExchgID = 9  // 芝加哥CBOT
	EExchgID_CME                   EExchgID = 10 // 芝加哥CME
	EExchgID_CBOE                  EExchgID = 11 // 芝加哥CBOE
	EExchgID_US_ICE                EExchgID = 12 // 美国ICE
	EExchgID_EUR_ICE               EExchgID = 13 // 欧洲ICE
	EExchgID_LME                   EExchgID = 14 // 伦敦LME
	EExchgID_HKEX                  EExchgID = 15 // 香港HKEX
	EExchgID_SGX                   EExchgID = 16 // 新加坡SGX
	EExchgID_TOCOM                 EExchgID = 17 // 东京TOCOM
	EExchgID_BMD                   EExchgID = 18 // 马来西亚BMD
	EExchgID_APEX                  EExchgID = 19 // 新加坡APEX
	EExchgID_FIP_ARBI              EExchgID = 20 // 财讯通套利，用于区别其他交易所的合约和品种
	EExchgID_CSI                   EExchgID = 21 // 证券-中证指数
	EExchgID_OTC_BASIS             EExchgID = 22 // 场外基差
	EExchgID_OTC_WBILL_TRANSACTION EExchgID = 23 // 场外仓单
	EExchgID_OTC_SWAP              EExchgID = 24 // 场外互换
	EExchgID_OTC_COMM_SEAPORT      EExchgID = 25 // 场外大宗-海港
	EExchgID_OTC_COMM_SHAANXIGRAIN EExchgID = 26 // 场外大宗-陕储粮
	EExchgID_ASX                   EExchgID = 27 // 澳大利亚证券交易所
	EExchgID_SFE                   EExchgID = 28 // 悉尼交易所（被ASX收购）
	EExchgID_DGCX                  EExchgID = 29 // 迪拜黄金与商品交易所
	EExchgID_DME                   EExchgID = 30 // 阿联酋迪拜商品交易所
	EExchgID_ICE_SG                EExchgID = 31 // 洲际交易所集团_新加坡
	EExchgID_TFEX                  EExchgID = 32 // 泰国期货交易所
	EExchgID_KRX                   EExchgID = 33 // 韩国交易所
	EExchgID_JPX                   EExchgID = 34 // 日本交易所
	EExchgID_XEUREX                EExchgID = 35 // 泛欧交易所
	EExchgID_SHSE                  EExchgID = 36 // 证券-上海证券交易所
	EExchgID_SZSE                  EExchgID = 37 // 证券-深圳证券交易所
	EExchgID_BJSE                  EExchgID = 38 // 证券-北京证券交易所
	EExchgID_CME_REAL_REFINITIV    EExchgID = 39 // CME实时(路透社数据源)
	EExchgID_NYMEX_REAL_REFINITIV  EExchgID = 40 // NYMEX实时(路透社数据源)
	EExchgID_CBOT_REAL_REFINITIV   EExchgID = 41 // CBOT实时(路透社数据源)
	EExchgID_COMEX_REAL_REFINITIV  EExchgID = 42 // COMEX实时(路透社数据源)
	EExchgID_CME_DELAY_REFINITIV   EExchgID = 43 // CME延时(路透社数据源)
	EExchgID_NYMEX_DELAY_REFINITIV EExchgID = 44 // NYMEX延时(路透社数据源)
	EExchgID_CBOT_DELAY_REFINITIV  EExchgID = 45 // CBOT延时(路透社数据源)
	EExchgID_COMEX_DELAY_REFINITIV EExchgID = 46 // COMEX延时(路透社数据源)
	EExchgID_CME_REFINITIV         EExchgID = 47 // 只用于合约列表（订阅操作传这个ID，不用实时/延迟ID）
	EExchgID_NYMEX_REFINITIV       EExchgID = 48 // 只用于合约列表
	EExchgID_CBOT_REFINITIV        EExchgID = 49 // 只用于合约列表
	EExchgID_COMEX_REFINITIV       EExchgID = 50 // 只用于合约列表
	EExchgID_NEEQ                  EExchgID = 51 // 证券-全国中小企业股份转让系统（全国股转系统）
	EExchgID_GFEX                  EExchgID = 52 // 广期所
	EExchgID_DCE_L2                EExchgID = 53 // 大商所 Level2
	EExchgID_SHFE_L2               EExchgID = 54 // 上期所 组播五档
	EExchgID_CZCE_L2               EExchgID = 55 // 郑商所 Level2
	EExchgID_CFFE_L2               EExchgID = 56 // 中金所 Level2
	EExchgID_INE_L2                EExchgID = 57 // 能源中心 组播五档
	EExchgID_GFEX_L2               EExchgID = 58 // 广期所 Level2
	EExchgID_End                   EExchgID = 59 // 结束值,方便校验有效性
)

// Enum value maps for EExchgID.
var (
	EExchgID_name = map[int32]string{
		0:  "ExchNull",
		1:  "DCE",
		2:  "SHFE",
		3:  "CZCE",
		4:  "CFFE",
		5:  "SGE",
		6:  "INE",
		7:  "NYMEX",
		8:  "COMEX",
		9:  "CBOT",
		10: "CME",
		11: "CBOE",
		12: "US_ICE",
		13: "EUR_ICE",
		14: "LME",
		15: "HKEX",
		16: "SGX",
		17: "TOCOM",
		18: "BMD",
		19: "APEX",
		20: "FIP_ARBI",
		21: "CSI",
		22: "OTC_BASIS",
		23: "OTC_WBILL_TRANSACTION",
		24: "OTC_SWAP",
		25: "OTC_COMM_SEAPORT",
		26: "OTC_COMM_SHAANXIGRAIN",
		27: "ASX",
		28: "SFE",
		29: "DGCX",
		30: "DME",
		31: "ICE_SG",
		32: "TFEX",
		33: "KRX",
		34: "JPX",
		35: "XEUREX",
		36: "SHSE",
		37: "SZSE",
		38: "BJSE",
		39: "CME_REAL_REFINITIV",
		40: "NYMEX_REAL_REFINITIV",
		41: "CBOT_REAL_REFINITIV",
		42: "COMEX_REAL_REFINITIV",
		43: "CME_DELAY_REFINITIV",
		44: "NYMEX_DELAY_REFINITIV",
		45: "CBOT_DELAY_REFINITIV",
		46: "COMEX_DELAY_REFINITIV",
		47: "CME_REFINITIV",
		48: "NYMEX_REFINITIV",
		49: "CBOT_REFINITIV",
		50: "COMEX_REFINITIV",
		51: "NEEQ",
		52: "GFEX",
		53: "DCE_L2",
		54: "SHFE_L2",
		55: "CZCE_L2",
		56: "CFFE_L2",
		57: "INE_L2",
		58: "GFEX_L2",
		59: "End",
	}
	EExchgID_value = map[string]int32{
		"ExchNull":              0,
		"DCE":                   1,
		"SHFE":                  2,
		"CZCE":                  3,
		"CFFE":                  4,
		"SGE":                   5,
		"INE":                   6,
		"NYMEX":                 7,
		"COMEX":                 8,
		"CBOT":                  9,
		"CME":                   10,
		"CBOE":                  11,
		"US_ICE":                12,
		"EUR_ICE":               13,
		"LME":                   14,
		"HKEX":                  15,
		"SGX":                   16,
		"TOCOM":                 17,
		"BMD":                   18,
		"APEX":                  19,
		"FIP_ARBI":              20,
		"CSI":                   21,
		"OTC_BASIS":             22,
		"OTC_WBILL_TRANSACTION": 23,
		"OTC_SWAP":              24,
		"OTC_COMM_SEAPORT":      25,
		"OTC_COMM_SHAANXIGRAIN": 26,
		"ASX":                   27,
		"SFE":                   28,
		"DGCX":                  29,
		"DME":                   30,
		"ICE_SG":                31,
		"TFEX":                  32,
		"KRX":                   33,
		"JPX":                   34,
		"XEUREX":                35,
		"SHSE":                  36,
		"SZSE":                  37,
		"BJSE":                  38,
		"CME_REAL_REFINITIV":    39,
		"NYMEX_REAL_REFINITIV":  40,
		"CBOT_REAL_REFINITIV":   41,
		"COMEX_REAL_REFINITIV":  42,
		"CME_DELAY_REFINITIV":   43,
		"NYMEX_DELAY_REFINITIV": 44,
		"CBOT_DELAY_REFINITIV":  45,
		"COMEX_DELAY_REFINITIV": 46,
		"CME_REFINITIV":         47,
		"NYMEX_REFINITIV":       48,
		"CBOT_REFINITIV":        49,
		"COMEX_REFINITIV":       50,
		"NEEQ":                  51,
		"GFEX":                  52,
		"DCE_L2":                53,
		"SHFE_L2":               54,
		"CZCE_L2":               55,
		"CFFE_L2":               56,
		"INE_L2":                57,
		"GFEX_L2":               58,
		"End":                   59,
	}
)

func (x EExchgID) Enum() *EExchgID {
	p := new(EExchgID)
	*p = x
	return p
}

func (x EExchgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExchgID) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_global_proto_enumTypes[0].Descriptor()
}

func (EExchgID) Type() protoreflect.EnumType {
	return &file_fip_global_proto_enumTypes[0]
}

func (x EExchgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EExchgID.Descriptor instead.
func (EExchgID) EnumDescriptor() ([]byte, []int) {
	return file_fip_global_proto_rawDescGZIP(), []int{0}
}

// / 分包标志
type EPkgType int32

const (
	EPkgType_PkgSingle EPkgType = 0 //单包
	EPkgType_PkgFirst  EPkgType = 1 //分包第一个包
	EPkgType_PkgMid    EPkgType = 2 //分包中间包
	EPkgType_PkgLast   EPkgType = 3 //分包最后包
)

// Enum value maps for EPkgType.
var (
	EPkgType_name = map[int32]string{
		0: "PkgSingle",
		1: "PkgFirst",
		2: "PkgMid",
		3: "PkgLast",
	}
	EPkgType_value = map[string]int32{
		"PkgSingle": 0,
		"PkgFirst":  1,
		"PkgMid":    2,
		"PkgLast":   3,
	}
)

func (x EPkgType) Enum() *EPkgType {
	p := new(EPkgType)
	*p = x
	return p
}

func (x EPkgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPkgType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_global_proto_enumTypes[1].Descriptor()
}

func (EPkgType) Type() protoreflect.EnumType {
	return &file_fip_global_proto_enumTypes[1]
}

func (x EPkgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPkgType.Descriptor instead.
func (EPkgType) EnumDescriptor() ([]byte, []int) {
	return file_fip_global_proto_rawDescGZIP(), []int{1}
}

// *
// @brief 权限应答错误码
// @author <jinfulin>
// @date 2021-10-19
type AuthResultCode int32

const (
	AuthResultCode_AuthUnknow       AuthResultCode = 0 // 授权未知
	AuthResultCode_AuthSucceed      AuthResultCode = 1 // 成功（有授权）
	AuthResultCode_NoSubscribe      AuthResultCode = 2 // 未找到授权信息（无授权）
	AuthResultCode_AuthExpired      AuthResultCode = 3 // 授权已过期（按无授权处理）
	AuthResultCode_InvalidToKen     AuthResultCode = 4 // token无效（按无授权处理）
	AuthResultCode_InvalidUserId    AuthResultCode = 5 // userId无效（按无授权处理）
	AuthResultCode_DeviceNoNotFound AuthResultCode = 6 // 设备id不匹配（有授权）
	AuthResultCode_ServerErr        AuthResultCode = 7 // 服务端内部错误（按无授权处理）
)

// Enum value maps for AuthResultCode.
var (
	AuthResultCode_name = map[int32]string{
		0: "AuthUnknow",
		1: "AuthSucceed",
		2: "NoSubscribe",
		3: "AuthExpired",
		4: "InvalidToKen",
		5: "InvalidUserId",
		6: "DeviceNoNotFound",
		7: "ServerErr",
	}
	AuthResultCode_value = map[string]int32{
		"AuthUnknow":       0,
		"AuthSucceed":      1,
		"NoSubscribe":      2,
		"AuthExpired":      3,
		"InvalidToKen":     4,
		"InvalidUserId":    5,
		"DeviceNoNotFound": 6,
		"ServerErr":        7,
	}
)

func (x AuthResultCode) Enum() *AuthResultCode {
	p := new(AuthResultCode)
	*p = x
	return p
}

func (x AuthResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_global_proto_enumTypes[2].Descriptor()
}

func (AuthResultCode) Type() protoreflect.EnumType {
	return &file_fip_global_proto_enumTypes[2]
}

func (x AuthResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthResultCode.Descriptor instead.
func (AuthResultCode) EnumDescriptor() ([]byte, []int) {
	return file_fip_global_proto_rawDescGZIP(), []int{2}
}

// *
// @brief 权限类型
// @author <daihouda>
// @date 2021-10-21
type EAuthType int32

const (
	EAuthType_unkown     EAuthType = 0
	EAuthType_AuthCme    EAuthType = 1 // CME外盘行情
	EAuthType_AuthDa     EAuthType = 2 // 直达外盘行情
	EAuthType_AuthLevel2 EAuthType = 3 // 深度行情
)

// Enum value maps for EAuthType.
var (
	EAuthType_name = map[int32]string{
		0: "unkown",
		1: "AuthCme",
		2: "AuthDa",
		3: "AuthLevel2",
	}
	EAuthType_value = map[string]int32{
		"unkown":     0,
		"AuthCme":    1,
		"AuthDa":     2,
		"AuthLevel2": 3,
	}
)

func (x EAuthType) Enum() *EAuthType {
	p := new(EAuthType)
	*p = x
	return p
}

func (x EAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_global_proto_enumTypes[3].Descriptor()
}

func (EAuthType) Type() protoreflect.EnumType {
	return &file_fip_global_proto_enumTypes[3]
}

func (x EAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAuthType.Descriptor instead.
func (EAuthType) EnumDescriptor() ([]byte, []int) {
	return file_fip_global_proto_rawDescGZIP(), []int{3}
}

var File_fip_global_proto protoreflect.FileDescriptor

var file_fip_global_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2a, 0xd6, 0x06, 0x0a, 0x08, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x48, 0x46, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x5a, 0x43, 0x45, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x46, 0x46, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x59, 0x4d, 0x45, 0x58, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4d, 0x45,
	0x58, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x42, 0x4f, 0x54, 0x10, 0x09, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x42, 0x4f, 0x45, 0x10, 0x0b,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x53, 0x5f, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x55, 0x52, 0x5f, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4d, 0x45,
	0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4b, 0x45, 0x58, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x47, 0x58, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x43, 0x4f, 0x4d, 0x10, 0x11,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x44, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x50, 0x45,
	0x58, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x50, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x10,
	0x14, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x49, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x54,
	0x43, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x53, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x54, 0x43,
	0x5f, 0x57, 0x42, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x54, 0x43, 0x5f, 0x53, 0x57, 0x41, 0x50,
	0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x54, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x53,
	0x45, 0x41, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x54, 0x43, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x41, 0x4e, 0x58, 0x49, 0x47, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x58, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x46, 0x45, 0x10, 0x1c, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x47, 0x43, 0x58, 0x10, 0x1d, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x4d, 0x45, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x47, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x46, 0x45, 0x58, 0x10, 0x20, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x52, 0x58, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x58, 0x10, 0x22,
	0x12, 0x0a, 0x0a, 0x06, 0x58, 0x45, 0x55, 0x52, 0x45, 0x58, 0x10, 0x23, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x48, 0x53, 0x45, 0x10, 0x24, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x5a, 0x53, 0x45, 0x10, 0x25,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4a, 0x53, 0x45, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56,
	0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x59, 0x4d, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x28, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x42, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x56, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x45, 0x58, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x2a, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x59, 0x4d, 0x45,
	0x58, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x56, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x2d, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4d, 0x45, 0x58, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x59, 0x4d, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x30,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x42, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x56, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x45, 0x58, 0x5f, 0x52, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x56, 0x10, 0x32, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x45,
	0x51, 0x10, 0x33, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x46, 0x45, 0x58, 0x10, 0x34, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x43, 0x45, 0x5f, 0x4c, 0x32, 0x10, 0x35, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x46,
	0x45, 0x5f, 0x4c, 0x32, 0x10, 0x36, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x5a, 0x43, 0x45, 0x5f, 0x4c,
	0x32, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x46, 0x46, 0x45, 0x5f, 0x4c, 0x32, 0x10, 0x38,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x32, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07,
	0x47, 0x46, 0x45, 0x58, 0x5f, 0x4c, 0x32, 0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64,
	0x10, 0x3b, 0x2a, 0x40, 0x0a, 0x08, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x6b, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x6b, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x6b, 0x67, 0x4d, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x6b, 0x67, 0x4c, 0x61,
	0x73, 0x74, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x75, 0x74,
	0x68, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x4b, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x10, 0x07, 0x2a, 0x40, 0x0a, 0x09, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x10, 0x03, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76,
	0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_global_proto_rawDescOnce sync.Once
	file_fip_global_proto_rawDescData = file_fip_global_proto_rawDesc
)

func file_fip_global_proto_rawDescGZIP() []byte {
	file_fip_global_proto_rawDescOnce.Do(func() {
		file_fip_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_global_proto_rawDescData)
	})
	return file_fip_global_proto_rawDescData
}

var file_fip_global_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fip_global_proto_goTypes = []interface{}{
	(EExchgID)(0),       // 0: fippb.EExchgID
	(EPkgType)(0),       // 1: fippb.EPkgType
	(AuthResultCode)(0), // 2: fippb.AuthResultCode
	(EAuthType)(0),      // 3: fippb.EAuthType
}
var file_fip_global_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fip_global_proto_init() }
func file_fip_global_proto_init() {
	if File_fip_global_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_global_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_global_proto_goTypes,
		DependencyIndexes: file_fip_global_proto_depIdxs,
		EnumInfos:         file_fip_global_proto_enumTypes,
	}.Build()
	File_fip_global_proto = out.File
	file_fip_global_proto_rawDesc = nil
	file_fip_global_proto_goTypes = nil
	file_fip_global_proto_depIdxs = nil
}
