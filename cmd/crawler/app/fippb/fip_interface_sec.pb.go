//*
// Copyright (C) 2017-2021，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 行情对外接口proto定义
//
// @author fengbaoxin@dce.com.cn,houyahui@dce.com.cn
//
// @date 2021-9-10
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_sec.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 请求查询证券分时数据
// @date 2021-6-23
// @note 协议号：proxy-his:<3041> proxy-his:<7001>
// @note 使用场景1：请求某个交易日的一段分时数据，使用start、end和date，date必须填写某个交易日，
//
//	           如果start不填充，则表示从date所在交易日的开始时间到end结束。如果end和start
//	           都没有数值，则表示获取date所表示交易日的数据。
//	使用场景2：请求最近N个交易日数据，date、count字段表示，例如date为20170802，count为1，
//	           获取20170802和20170802上一个交易日的数据。
//
// @note 请求参数优先级：date > start，end > count。
type ReqQrySecTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Date       string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                  // 请求某个交易日分时数据，格式年月日，例如"20170802"
	Start      uint64   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                               // (可选) date中表示的交易日的开始时间，时间戳，可以为0，表示从开盘时间开始
	End        uint64   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                   // (可选) date中表示的交易日的结束时间，时间戳
	Count      int32    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                               // (可选) 请求最近N个交易日，如果count为0，则按照date、start和end计算
}

func (x *ReqQrySecTSChart) Reset() {
	*x = ReqQrySecTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecTSChart) ProtoMessage() {}

func (x *ReqQrySecTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecTSChart.ProtoReflect.Descriptor instead.
func (*ReqQrySecTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{0}
}

func (x *ReqQrySecTSChart) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecTSChart) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQrySecTSChart) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqQrySecTSChart) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQrySecTSChart) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqQrySecTSChart) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询证券分时数据响应
// @date 2021-6-23
// @note 协议号：his-proxy:<3042> proxy-his:<7002>
type RspQrySecTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID          `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string            `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Elem       []*SecTSChartElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 分时数据
	ErrorID    uint32            `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType          `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQrySecTSChart) Reset() {
	*x = RspQrySecTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecTSChart) ProtoMessage() {}

func (x *RspQrySecTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecTSChart.ProtoReflect.Descriptor instead.
func (*RspQrySecTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{1}
}

func (x *RspQrySecTSChart) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecTSChart) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQrySecTSChart) GetElem() []*SecTSChartElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQrySecTSChart) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecTSChart) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券成交明细
// @date 2021-6-23
// @note 协议号：client-proxy:<3036> proxy-his:<>
// @note start不设置的情况，则从当前交易日返回最新的count（正值）条记录，如果当前交易日数据不足count条，则按照实际条数返回。
//
//	start设置的情况，count如果为正，则表示向后查询（比start更旧的数据）。如果为负值，表示向前查询（比start更新的数据）。
type ReqQrySecMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Start      uint64   `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`                               //（可选) 如果不指定，则从当前交易日最多返回count条数最新的数据
	Count      int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                               // 按条数查。如果start不为0，则以start为起点，向前/向后最多查Cnt条（不存在跨交易日查询）
}

func (x *ReqQrySecMatchDetail) Reset() {
	*x = ReqQrySecMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecMatchDetail) ProtoMessage() {}

func (x *ReqQrySecMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecMatchDetail.ProtoReflect.Descriptor instead.
func (*ReqQrySecMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{2}
}

func (x *ReqQrySecMatchDetail) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecMatchDetail) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQrySecMatchDetail) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQrySecMatchDetail) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询证券成交明细响应
// @date 2021-6-23
// @note 协议号：client-proxy:<> proxy-real:<>
type RspQrySecMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32                `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID              `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string                `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Elem       []*SecMatchDetailElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 成交明细数据
	ErrorID    uint32                `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType              `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQrySecMatchDetail) Reset() {
	*x = RspQrySecMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecMatchDetail) ProtoMessage() {}

func (x *RspQrySecMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecMatchDetail.ProtoReflect.Descriptor instead.
func (*RspQrySecMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{3}
}

func (x *RspQrySecMatchDetail) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecMatchDetail) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQrySecMatchDetail) GetElem() []*SecMatchDetailElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQrySecMatchDetail) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecMatchDetail) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券K线数据
// @date 2021-6-23
// @note 协议号：his-proxy:<7008> proxy-real:<> proxy-his:<7008> real-mgr:<> client-proxy:<3052>
type ReqQrySecKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID      `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string        `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Type       ESecKLineType `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.ESecKLineType" json:"type,omitempty"`        // K线类型，例如1分钟K线，日线等
	Start      uint64        `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                               // 开始时间戳
	End        uint64        `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                   // (可选) 结束时间戳，可以为0
	Count      int32         `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                               // (可选) 按调试查询时使用，当end不为0时，该字段无效。即start-end查询优先级高于start-count查询
}

func (x *ReqQrySecKLine) Reset() {
	*x = ReqQrySecKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecKLine) ProtoMessage() {}

func (x *ReqQrySecKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecKLine.ProtoReflect.Descriptor instead.
func (*ReqQrySecKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{4}
}

func (x *ReqQrySecKLine) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecKLine) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqQrySecKLine) GetType() ESecKLineType {
	if x != nil {
		return x.Type
	}
	return ESecKLineType_SecKLine_Minute_1
}

func (x *ReqQrySecKLine) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqQrySecKLine) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqQrySecKLine) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 请求查询证券K线数据响应
// @date 2021-6-23
// @note 协议号：his-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<> real-his:<> client-proxy:<>
type RspQrySecKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32          `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID        `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string          `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Type       ESecKLineType   `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.ESecKLineType" json:"type,omitempty"`        // K线类型
	Elem       []*SecKLineElem `protobuf:"bytes,5,rep,name=elem,proto3" json:"elem,omitempty"`                                  // Kline数据
	ErrorID    uint32          `protobuf:"varint,6,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType        `protobuf:"varint,7,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQrySecKLine) Reset() {
	*x = RspQrySecKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecKLine) ProtoMessage() {}

func (x *RspQrySecKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecKLine.ProtoReflect.Descriptor instead.
func (*RspQrySecKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{5}
}

func (x *RspQrySecKLine) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecKLine) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQrySecKLine) GetType() ESecKLineType {
	if x != nil {
		return x.Type
	}
	return ESecKLineType_SecKLine_Minute_1
}

func (x *RspQrySecKLine) GetElem() []*SecKLineElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQrySecKLine) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecKLine) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券分价数据
// @date 2021-6-23
// @note 协议号：proxy-real:<>
type ReqQrySecTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
}

func (x *ReqQrySecTimePrice) Reset() {
	*x = ReqQrySecTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecTimePrice) ProtoMessage() {}

func (x *ReqQrySecTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecTimePrice.ProtoReflect.Descriptor instead.
func (*ReqQrySecTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{6}
}

func (x *ReqQrySecTimePrice) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecTimePrice) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询证券分价数据响应
// @date 2021-6-23
// @note 协议号：real-proxy:<>
type RspQrySecTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32              `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID            `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string              `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	TradeDate  string              `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期，例如20170808（todo：是否可以去掉）
	Timestamp  uint64              `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime    string              `protobuf:"bytes,6,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	Elem       []*SecTimePriceElem `protobuf:"bytes,7,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 分价数据
	ErrorID    uint32              `protobuf:"varint,8,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType            `protobuf:"varint,9,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQrySecTimePrice) Reset() {
	*x = RspQrySecTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecTimePrice) ProtoMessage() {}

func (x *RspQrySecTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecTimePrice.ProtoReflect.Descriptor instead.
func (*RspQrySecTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{7}
}

func (x *RspQrySecTimePrice) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecTimePrice) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQrySecTimePrice) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspQrySecTimePrice) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspQrySecTimePrice) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspQrySecTimePrice) GetElem() []*SecTimePriceElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQrySecTimePrice) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecTimePrice) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券分笔数据请求
// @date 2021-6-23
// @note 协议号：proxy-real:<>
type ReqQrySecTimeVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
}

func (x *ReqQrySecTimeVolume) Reset() {
	*x = ReqQrySecTimeVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecTimeVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecTimeVolume) ProtoMessage() {}

func (x *ReqQrySecTimeVolume) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecTimeVolume.ProtoReflect.Descriptor instead.
func (*ReqQrySecTimeVolume) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{8}
}

func (x *ReqQrySecTimeVolume) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecTimeVolume) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecTimeVolume) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询证券分笔数据响应
// @date 2021-6-23
// @note 协议号：real-proxy:<>
type RspQrySecTimeVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID           uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID      EExchgID          `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID      string            `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	Timestamp       uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime         string            `protobuf:"bytes,5,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	BigBuyVolume    uint64            `protobuf:"varint,6,opt,name=bigBuyVolume,proto3" json:"bigBuyVolume,omitempty"`                 // 大单买量
	BigSellVolume   uint64            `protobuf:"varint,7,opt,name=bigSellVolume,proto3" json:"bigSellVolume,omitempty"`               // 大单卖量
	SmallBuyVolume  uint64            `protobuf:"varint,8,opt,name=smallBuyVolume,proto3" json:"smallBuyVolume,omitempty"`             // 散单买量
	SmallSellVolume uint64            `protobuf:"varint,9,opt,name=smallSellVolume,proto3" json:"smallSellVolume,omitempty"`           // 散单卖量
	TradeCount      uint64            `protobuf:"varint,10,opt,name=tradeCount,proto3" json:"tradeCount,omitempty"`                    // 统计成交次数
	BuyTurnover     float64           `protobuf:"fixed64,11,opt,name=buyTurnover,proto3" json:"buyTurnover,omitempty"`                 // 买方成交额
	SellTurnover    float64           `protobuf:"fixed64,12,opt,name=sellTurnover,proto3" json:"sellTurnover,omitempty"`               // 卖方成交额
	OffsetSta       *SecOffsetStaElem `protobuf:"bytes,13,opt,name=offsetSta,proto3" json:"offsetSta,omitempty"`                       // 开平类别统计量
	BigOffsetSta    *SecOffsetStaElem `protobuf:"bytes,14,opt,name=bigOffsetSta,proto3" json:"bigOffsetSta,omitempty"`                 // 开平类别大单统计量
	AvgVolome       *SecAvgVolumeElem `protobuf:"bytes,15,opt,name=avgVolome,proto3" json:"avgVolome,omitempty"`                       // 当前均量及类型（todo：是否可以去掉）
	ErrorID         uint32            `protobuf:"varint,16,opt,name=errorID,proto3" json:"errorID,omitempty"`                          // 错误码
	PkgType         EPkgType          `protobuf:"varint,17,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`      // 分包标志
}

func (x *RspQrySecTimeVolume) Reset() {
	*x = RspQrySecTimeVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecTimeVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecTimeVolume) ProtoMessage() {}

func (x *RspQrySecTimeVolume) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecTimeVolume.ProtoReflect.Descriptor instead.
func (*RspQrySecTimeVolume) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{9}
}

func (x *RspQrySecTimeVolume) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecTimeVolume) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspQrySecTimeVolume) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspQrySecTimeVolume) GetBigBuyVolume() uint64 {
	if x != nil {
		return x.BigBuyVolume
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetBigSellVolume() uint64 {
	if x != nil {
		return x.BigSellVolume
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetSmallBuyVolume() uint64 {
	if x != nil {
		return x.SmallBuyVolume
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetSmallSellVolume() uint64 {
	if x != nil {
		return x.SmallSellVolume
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetTradeCount() uint64 {
	if x != nil {
		return x.TradeCount
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetBuyTurnover() float64 {
	if x != nil {
		return x.BuyTurnover
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetSellTurnover() float64 {
	if x != nil {
		return x.SellTurnover
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetOffsetSta() *SecOffsetStaElem {
	if x != nil {
		return x.OffsetSta
	}
	return nil
}

func (x *RspQrySecTimeVolume) GetBigOffsetSta() *SecOffsetStaElem {
	if x != nil {
		return x.BigOffsetSta
	}
	return nil
}

func (x *RspQrySecTimeVolume) GetAvgVolome() *SecAvgVolumeElem {
	if x != nil {
		return x.AvgVolome
	}
	return nil
}

func (x *RspQrySecTimeVolume) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecTimeVolume) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券服务状态
// @date 2021-6-23
// @note 协议号
type ReqSecServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"` // 请求id
}

func (x *ReqSecServiceStatus) Reset() {
	*x = ReqSecServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecServiceStatus) ProtoMessage() {}

func (x *ReqSecServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecServiceStatus.ProtoReflect.Descriptor instead.
func (*ReqSecServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{10}
}

func (x *ReqSecServiceStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

// *
// @brief 请求查询证券服务状态响应
// @date 2021-6-23
// @note 协议号
type RspSecServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID  uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                // 请求id
	Status ESecServiceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=fippb.ESecServiceStatus" json:"status,omitempty"` // 服务状态
}

func (x *RspSecServiceStatus) Reset() {
	*x = RspSecServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecServiceStatus) ProtoMessage() {}

func (x *RspSecServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecServiceStatus.ProtoReflect.Descriptor instead.
func (*RspSecServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{11}
}

func (x *RspSecServiceStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecServiceStatus) GetStatus() ESecServiceStatus {
	if x != nil {
		return x.Status
	}
	return ESecServiceStatus_SecBegin
}

// *
// @brief 证券服务状态通知
// @date 2021-6-23
// @note 协议号
type NotifySecServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ESecServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=fippb.ESecServiceStatus" json:"status,omitempty"` // 服务状态
}

func (x *NotifySecServiceStatus) Reset() {
	*x = NotifySecServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecServiceStatus) ProtoMessage() {}

func (x *NotifySecServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecServiceStatus.ProtoReflect.Descriptor instead.
func (*NotifySecServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{12}
}

func (x *NotifySecServiceStatus) GetStatus() ESecServiceStatus {
	if x != nil {
		return x.Status
	}
	return ESecServiceStatus_SecBegin
}

// *
// @brief 请求查询证券交易所信息
// @date 2021-6-23
// @note 协议号：proxy-real:<>
type ReqQrySecExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id(为0则查询所有交易所)
}

func (x *ReqQrySecExchange) Reset() {
	*x = ReqQrySecExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecExchange) ProtoMessage() {}

func (x *ReqQrySecExchange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecExchange.ProtoReflect.Descriptor instead.
func (*ReqQrySecExchange) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{13}
}

func (x *ReqQrySecExchange) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecExchange) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求查询证券交易所信息响应
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type RspQrySecExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32             `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	Elem    []*SecExchangeElem `protobuf:"bytes,2,rep,name=elem,proto3" json:"elem,omitempty"`                            // 交易所信息
	ErrorID uint32             `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	PkgType EPkgType           `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspQrySecExchange) Reset() {
	*x = RspQrySecExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecExchange) ProtoMessage() {}

func (x *RspQrySecExchange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecExchange.ProtoReflect.Descriptor instead.
func (*RspQrySecExchange) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{14}
}

func (x *RspQrySecExchange) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecExchange) GetElem() []*SecExchangeElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspQrySecExchange) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecExchange) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求查询证券合约信息
// @date 2021-6-23
// @note 协议号：proxy-real:<>
type ReqQrySecContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID      `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	SecType    ESecStockType `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`  // 证券类型
	ContractID string        `protobuf:"bytes,4,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id(为空则查询对应条件下的所有合约)
}

func (x *ReqQrySecContract) Reset() {
	*x = ReqQrySecContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQrySecContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQrySecContract) ProtoMessage() {}

func (x *ReqQrySecContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQrySecContract.ProtoReflect.Descriptor instead.
func (*ReqQrySecContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{15}
}

func (x *ReqQrySecContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQrySecContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqQrySecContract) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *ReqQrySecContract) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 请求查询证券合约信息响应
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type RspQrySecContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32                  `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID                `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，该字段与请求接口里的exchangeID一样
	TradeDate  string                  `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	IndexElem  []*SecIndexContractElem `protobuf:"bytes,4,rep,name=indexElem,proto3" json:"indexElem,omitempty"`                        // 指数合约信息
	SecElem    []*SecContractElem      `protobuf:"bytes,5,rep,name=secElem,proto3" json:"secElem,omitempty"`                            // 股票、ETF合约信息
	OptElem    []*SecOptContractElem   `protobuf:"bytes,6,rep,name=optElem,proto3" json:"optElem,omitempty"`                            // 期权合约信息
	ErrorID    uint32                  `protobuf:"varint,7,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType                `protobuf:"varint,8,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspQrySecContract) Reset() {
	*x = RspQrySecContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQrySecContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQrySecContract) ProtoMessage() {}

func (x *RspQrySecContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQrySecContract.ProtoReflect.Descriptor instead.
func (*RspQrySecContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{16}
}

func (x *RspQrySecContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQrySecContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspQrySecContract) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspQrySecContract) GetIndexElem() []*SecIndexContractElem {
	if x != nil {
		return x.IndexElem
	}
	return nil
}

func (x *RspQrySecContract) GetSecElem() []*SecContractElem {
	if x != nil {
		return x.SecElem
	}
	return nil
}

func (x *RspQrySecContract) GetOptElem() []*SecOptContractElem {
	if x != nil {
		return x.OptElem
	}
	return nil
}

func (x *RspQrySecContract) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQrySecContract) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求订阅证券行情
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type ReqSubSecQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                            // 请求id
	SubType ESecSubType   `protobuf:"varint,2,opt,name=subType,proto3,enum=fippb.ESecSubType" json:"subType,omitempty"` // 订阅类型
	Elem    []*SecSubElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`                               // 订阅消息体
}

func (x *ReqSubSecQuot) Reset() {
	*x = ReqSubSecQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubSecQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubSecQuot) ProtoMessage() {}

func (x *ReqSubSecQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubSecQuot.ProtoReflect.Descriptor instead.
func (*ReqSubSecQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{17}
}

func (x *ReqSubSecQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubSecQuot) GetSubType() ESecSubType {
	if x != nil {
		return x.SubType
	}
	return ESecSubType_SecST_Add
}

func (x *ReqSubSecQuot) GetElem() []*SecSubElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 请求订阅证券行情响应
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type RspSubSecQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubSecQuot) Reset() {
	*x = RspSubSecQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubSecQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubSecQuot) ProtoMessage() {}

func (x *RspSubSecQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubSecQuot.ProtoReflect.Descriptor instead.
func (*RspSubSecQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{18}
}

func (x *RspSubSecQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubSecQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 证券行情通知
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type NotifySecQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID         `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID string           `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	SecType    ESecStockType    `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`  // 证券类型
	TradeDate  string           `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	BestElem   *SecBestQuotElem `protobuf:"bytes,5,opt,name=bestElem,proto3" json:"bestElem,omitempty"`                          // 最优行情
	Elem       *SecOptParaElem  `protobuf:"bytes,6,opt,name=elem,proto3" json:"elem,omitempty"`                                  // 期权参数(股票期权)(当前版本不支持)
	Extra      *SecExtraQuot    `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`                                // 其他额外参数，由原始行情计算得到
}

func (x *NotifySecQuot) Reset() {
	*x = NotifySecQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecQuot) ProtoMessage() {}

func (x *NotifySecQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecQuot.ProtoReflect.Descriptor instead.
func (*NotifySecQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{19}
}

func (x *NotifySecQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifySecQuot) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifySecQuot) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *NotifySecQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifySecQuot) GetBestElem() *SecBestQuotElem {
	if x != nil {
		return x.BestElem
	}
	return nil
}

func (x *NotifySecQuot) GetElem() *SecOptParaElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *NotifySecQuot) GetExtra() *SecExtraQuot {
	if x != nil {
		return x.Extra
	}
	return nil
}

// *
// @brief 请求订阅证券简要行情
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type ReqSubSecBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32        `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                            // 请求id
	SubType ESecSubType   `protobuf:"varint,2,opt,name=subType,proto3,enum=fippb.ESecSubType" json:"subType,omitempty"` // 订阅类型
	Elem    []*SecSubElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`                               // 订阅消息体
}

func (x *ReqSubSecBriefQuot) Reset() {
	*x = ReqSubSecBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubSecBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubSecBriefQuot) ProtoMessage() {}

func (x *ReqSubSecBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubSecBriefQuot.ProtoReflect.Descriptor instead.
func (*ReqSubSecBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{20}
}

func (x *ReqSubSecBriefQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubSecBriefQuot) GetSubType() ESecSubType {
	if x != nil {
		return x.SubType
	}
	return ESecSubType_SecST_Add
}

func (x *ReqSubSecBriefQuot) GetElem() []*SecSubElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 请求订阅证券简要行情响应
// @date 2021-6-23
// @note 协议号：client-proxy:<>
type RspSubSecBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubSecBriefQuot) Reset() {
	*x = RspSubSecBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubSecBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubSecBriefQuot) ProtoMessage() {}

func (x *RspSubSecBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubSecBriefQuot.ProtoReflect.Descriptor instead.
func (*RspSubSecBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{21}
}

func (x *RspSubSecBriefQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubSecBriefQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 证券简要行情通知
// @date 2021-6-23
// @date 2021-10-26 根据需求，补充简要行情的字段。尚有部分字段不能满足需求
// @note 协议号：client-proxy:<>
type NotifySecBriefQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID         EExchgID      `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	ContractID         string        `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约id
	SecType            ESecStockType `protobuf:"varint,3,opt,name=secType,proto3,enum=fippb.ESecStockType" json:"secType,omitempty"`  // 证券类型
	TradeDate          string        `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	PreSettlementPrice float64       `protobuf:"fixed64,5,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`    // 昨结算价
	OpenPrice          float64       `protobuf:"fixed64,6,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                      // 今开盘价
	LastPrice          float64       `protobuf:"fixed64,7,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                      // 最新价
	TotalVolume        uint64        `protobuf:"varint,8,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`                   // 总成交量
	TotalPosition      uint64        `protobuf:"varint,10,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`              // 总持仓量
	PositionChange     int64         `protobuf:"varint,11,opt,name=positionChange,proto3" json:"positionChange,omitempty"`            // 持仓量变化
	AvgPrice           float64       `protobuf:"fixed64,12,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                       // 当日均价
	Turnover           float64       `protobuf:"fixed64,13,opt,name=turnover,proto3" json:"turnover,omitempty"`                       // 总成交金额
	PreClosePrice      float64       `protobuf:"fixed64,14,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`             // 昨收盘价
	HighPrice          float64       `protobuf:"fixed64,15,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                     // 最高价
	LowPrice           float64       `protobuf:"fixed64,16,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                       // 最低价
}

func (x *NotifySecBriefQuot) Reset() {
	*x = NotifySecBriefQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecBriefQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecBriefQuot) ProtoMessage() {}

func (x *NotifySecBriefQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecBriefQuot.ProtoReflect.Descriptor instead.
func (*NotifySecBriefQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{22}
}

func (x *NotifySecBriefQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifySecBriefQuot) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifySecBriefQuot) GetSecType() ESecStockType {
	if x != nil {
		return x.SecType
	}
	return ESecStockType_SecST_All
}

func (x *NotifySecBriefQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifySecBriefQuot) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *NotifySecBriefQuot) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *NotifySecBriefQuot) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *NotifySecBriefQuot) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *NotifySecBriefQuot) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *NotifySecBriefQuot) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

// *
// @brief 请求查询证券静态数据版本
// @date 2021-10-13
// @note 协议号
type ReqSecStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqSecStaticDataVersion) Reset() {
	*x = ReqSecStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecStaticDataVersion) ProtoMessage() {}

func (x *ReqSecStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecStaticDataVersion.ProtoReflect.Descriptor instead.
func (*ReqSecStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{23}
}

func (x *ReqSecStaticDataVersion) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSecStaticDataVersion) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求查询证券静态数据版本响应
// @date 2021-10-13
// @note 协议号
type RspSecStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                      `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	Elem    []*SecStaticDataVersionElem `protobuf:"bytes,2,rep,name=elem,proto3" json:"elem,omitempty"`                            // 证券静态数据版本信息
	ErrorID uint32                      `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	PkgType EPkgType                    `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspSecStaticDataVersion) Reset() {
	*x = RspSecStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecStaticDataVersion) ProtoMessage() {}

func (x *RspSecStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecStaticDataVersion.ProtoReflect.Descriptor instead.
func (*RspSecStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{24}
}

func (x *RspSecStaticDataVersion) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecStaticDataVersion) GetElem() []*SecStaticDataVersionElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspSecStaticDataVersion) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSecStaticDataVersion) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 证券静态数据版本变动通知
// @date 2021-10-13
// @note 协议号
type NotifySecStaticDataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elem []*SecStaticDataVersionElem `protobuf:"bytes,1,rep,name=elem,proto3" json:"elem,omitempty"` // 证券静态数据版本信息
}

func (x *NotifySecStaticDataVersion) Reset() {
	*x = NotifySecStaticDataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySecStaticDataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySecStaticDataVersion) ProtoMessage() {}

func (x *NotifySecStaticDataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySecStaticDataVersion.ProtoReflect.Descriptor instead.
func (*NotifySecStaticDataVersion) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{25}
}

func (x *NotifySecStaticDataVersion) GetElem() []*SecStaticDataVersionElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 查询某证券交易所期权品种列表请求
// @date 2021-10-20
// @note 协议号：client-proxy:<OPCODE_REQ_SEC_OPT_VARIETY_LIST = 3530>
type ReqSecOptVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，如果为0，则不限定交易所，输出所有证券交易所的期权品种信息
	VarietyID  string   `protobuf:"bytes,3,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                        // 指定品种ID，未指定则全部
}

func (x *ReqSecOptVarietyList) Reset() {
	*x = ReqSecOptVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecOptVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecOptVarietyList) ProtoMessage() {}

func (x *ReqSecOptVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecOptVarietyList.ProtoReflect.Descriptor instead.
func (*ReqSecOptVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{26}
}

func (x *ReqSecOptVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSecOptVarietyList) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqSecOptVarietyList) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

// *
// @brief 查询某证券交易所期权品种列表响应（即：ETF50、沪深300期权、沪深300ETF）
// @date 2021-10-20
// @note 协议号：proxy-client:<OPCODE_RSP_SEC_OPT_VARIETY_LIST = 3531>
type RspSecOptVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32               `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID             `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，该字段与请求接口里的exchangeID一样
	TradeDate  string               `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	Elem       []*SecOptVarietyElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 期权品种信息列表
	ErrorID    uint32               `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType             `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspSecOptVarietyList) Reset() {
	*x = RspSecOptVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecOptVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecOptVarietyList) ProtoMessage() {}

func (x *RspSecOptVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecOptVarietyList.ProtoReflect.Descriptor instead.
func (*RspSecOptVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{27}
}

func (x *RspSecOptVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecOptVarietyList) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspSecOptVarietyList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspSecOptVarietyList) GetElem() []*SecOptVarietyElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspSecOptVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSecOptVarietyList) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 查询某证券交易所期权标的物列表请求（含虚拟标的物）
// @date 2021-10-20
// @note 协议号：client-proxy:<OPCODE_REQ_SEC_OPT_UNDERLYING_LIST = 3532>
type ReqSecOptUnderlyingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，如果为0，则不限定交易所。
	VarietyID  string   `protobuf:"bytes,3,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                        // 期权品种，如果为空则不限定期权品种，输出所有的标的物
}

func (x *ReqSecOptUnderlyingList) Reset() {
	*x = ReqSecOptUnderlyingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecOptUnderlyingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecOptUnderlyingList) ProtoMessage() {}

func (x *ReqSecOptUnderlyingList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecOptUnderlyingList.ProtoReflect.Descriptor instead.
func (*ReqSecOptUnderlyingList) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{28}
}

func (x *ReqSecOptUnderlyingList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSecOptUnderlyingList) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqSecOptUnderlyingList) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

// *
// @brief 查询某证券交易所期权标的物列表响应
// @date 2021-10-20
// @note 协议号：proxy-client:<OPCODE_RSP_SEC_OPT_UNDERLYING_LIST = 3533>
type RspSecOptUnderlyingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32                  `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID                `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id，该字段与请求接口里的exchangeID一样
	TradeDate  string                  `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期
	Elem       []*SecOptUnderlyingElem `protobuf:"bytes,4,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 期权标的物信息列表
	ErrorID    uint32                  `protobuf:"varint,5,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	PkgType    EPkgType                `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *RspSecOptUnderlyingList) Reset() {
	*x = RspSecOptUnderlyingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecOptUnderlyingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecOptUnderlyingList) ProtoMessage() {}

func (x *RspSecOptUnderlyingList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecOptUnderlyingList.ProtoReflect.Descriptor instead.
func (*RspSecOptUnderlyingList) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{29}
}

func (x *RspSecOptUnderlyingList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecOptUnderlyingList) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspSecOptUnderlyingList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspSecOptUnderlyingList) GetElem() []*SecOptUnderlyingElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspSecOptUnderlyingList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSecOptUnderlyingList) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 查询某证券功能入口列表列表请求
// @date 2021-10-20
// @note 协议号：client-proxy:<OPCODE_REQ_SEC_FUN_ENTRANCES = 3534>
type ReqSecFunEntrances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqSecFunEntrances) Reset() {
	*x = ReqSecFunEntrances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSecFunEntrances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSecFunEntrances) ProtoMessage() {}

func (x *ReqSecFunEntrances) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSecFunEntrances.ProtoReflect.Descriptor instead.
func (*ReqSecFunEntrances) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{30}
}

func (x *ReqSecFunEntrances) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSecFunEntrances) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 查询某证券功能入口列表列表响应
// @date 2021-10-20
// @note 协议号：proxy-client:<OPCODE_RSP_SEC_FUN_ENTRANCES = 3535>
type RspSecFunEntrances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID     uint32             `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	Entrances []*SecEntranceElem `protobuf:"bytes,2,rep,name=entrances,proto3" json:"entrances,omitempty"`                  // 入口信息列表（含：标签名称、交易所ID、股票状态标志ESecStockStatus、股票类型ESecStockType、地域标签、行业标签）
	ErrorID   uint32             `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	PkgType   EPkgType           `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspSecFunEntrances) Reset() {
	*x = RspSecFunEntrances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_sec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSecFunEntrances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSecFunEntrances) ProtoMessage() {}

func (x *RspSecFunEntrances) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_sec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSecFunEntrances.ProtoReflect.Descriptor instead.
func (*RspSecFunEntrances) Descriptor() ([]byte, []int) {
	return file_fip_interface_sec_proto_rawDescGZIP(), []int{31}
}

func (x *RspSecFunEntrances) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSecFunEntrances) GetEntrances() []*SecEntranceElem {
	if x != nil {
		return x.Entrances
	}
	return nil
}

func (x *RspSecFunEntrances) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSecFunEntrances) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

var File_fip_interface_sec_proto protoreflect.FileDescriptor

var file_fip_interface_sec_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65,
	0x63, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x14,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x65,
	0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xdf, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x22, 0xc3, 0x02, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x22, 0xa6, 0x05, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x69, 0x67, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x69, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x6f, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63,
	0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x61,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x13, 0x52, 0x73,
	0x70, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x16, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53,
	0x65, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0xdf, 0x02, 0x0a, 0x11,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63,
	0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53,
	0x65, 0x63, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x3f, 0x0a, 0x0d, 0x52, 0x73, 0x70,
	0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62,
	0x65, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x29, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x53,
	0x65, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x65, 0x63, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x53, 0x75, 0x62, 0x45, 0x6c, 0x65, 0x6d,
	0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62,
	0x53, 0x65, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xa7, 0x04, 0x0a,
	0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53,
	0x65, 0x63, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x70,
	0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x6c,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x7b, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x63, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x44, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x53, 0x65, 0x63, 0x4f,
	0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x63, 0x4f,
	0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x44, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x65, 0x63,
	0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63,
	0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x52, 0x73,
	0x70, 0x53, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74,
	0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_sec_proto_rawDescOnce sync.Once
	file_fip_interface_sec_proto_rawDescData = file_fip_interface_sec_proto_rawDesc
)

func file_fip_interface_sec_proto_rawDescGZIP() []byte {
	file_fip_interface_sec_proto_rawDescOnce.Do(func() {
		file_fip_interface_sec_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_sec_proto_rawDescData)
	})
	return file_fip_interface_sec_proto_rawDescData
}

var file_fip_interface_sec_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_fip_interface_sec_proto_goTypes = []interface{}{
	(*ReqQrySecTSChart)(nil),           // 0: fippb.ReqQrySecTSChart
	(*RspQrySecTSChart)(nil),           // 1: fippb.RspQrySecTSChart
	(*ReqQrySecMatchDetail)(nil),       // 2: fippb.ReqQrySecMatchDetail
	(*RspQrySecMatchDetail)(nil),       // 3: fippb.RspQrySecMatchDetail
	(*ReqQrySecKLine)(nil),             // 4: fippb.ReqQrySecKLine
	(*RspQrySecKLine)(nil),             // 5: fippb.RspQrySecKLine
	(*ReqQrySecTimePrice)(nil),         // 6: fippb.ReqQrySecTimePrice
	(*RspQrySecTimePrice)(nil),         // 7: fippb.RspQrySecTimePrice
	(*ReqQrySecTimeVolume)(nil),        // 8: fippb.ReqQrySecTimeVolume
	(*RspQrySecTimeVolume)(nil),        // 9: fippb.RspQrySecTimeVolume
	(*ReqSecServiceStatus)(nil),        // 10: fippb.ReqSecServiceStatus
	(*RspSecServiceStatus)(nil),        // 11: fippb.RspSecServiceStatus
	(*NotifySecServiceStatus)(nil),     // 12: fippb.NotifySecServiceStatus
	(*ReqQrySecExchange)(nil),          // 13: fippb.ReqQrySecExchange
	(*RspQrySecExchange)(nil),          // 14: fippb.RspQrySecExchange
	(*ReqQrySecContract)(nil),          // 15: fippb.ReqQrySecContract
	(*RspQrySecContract)(nil),          // 16: fippb.RspQrySecContract
	(*ReqSubSecQuot)(nil),              // 17: fippb.ReqSubSecQuot
	(*RspSubSecQuot)(nil),              // 18: fippb.RspSubSecQuot
	(*NotifySecQuot)(nil),              // 19: fippb.NotifySecQuot
	(*ReqSubSecBriefQuot)(nil),         // 20: fippb.ReqSubSecBriefQuot
	(*RspSubSecBriefQuot)(nil),         // 21: fippb.RspSubSecBriefQuot
	(*NotifySecBriefQuot)(nil),         // 22: fippb.NotifySecBriefQuot
	(*ReqSecStaticDataVersion)(nil),    // 23: fippb.ReqSecStaticDataVersion
	(*RspSecStaticDataVersion)(nil),    // 24: fippb.RspSecStaticDataVersion
	(*NotifySecStaticDataVersion)(nil), // 25: fippb.NotifySecStaticDataVersion
	(*ReqSecOptVarietyList)(nil),       // 26: fippb.ReqSecOptVarietyList
	(*RspSecOptVarietyList)(nil),       // 27: fippb.RspSecOptVarietyList
	(*ReqSecOptUnderlyingList)(nil),    // 28: fippb.ReqSecOptUnderlyingList
	(*RspSecOptUnderlyingList)(nil),    // 29: fippb.RspSecOptUnderlyingList
	(*ReqSecFunEntrances)(nil),         // 30: fippb.ReqSecFunEntrances
	(*RspSecFunEntrances)(nil),         // 31: fippb.RspSecFunEntrances
	(EExchgID)(0),                      // 32: fippb.EExchgID
	(*SecTSChartElem)(nil),             // 33: fippb.SecTSChartElem
	(EPkgType)(0),                      // 34: fippb.EPkgType
	(*SecMatchDetailElem)(nil),         // 35: fippb.SecMatchDetailElem
	(ESecKLineType)(0),                 // 36: fippb.ESecKLineType
	(*SecKLineElem)(nil),               // 37: fippb.SecKLineElem
	(*SecTimePriceElem)(nil),           // 38: fippb.SecTimePriceElem
	(*SecOffsetStaElem)(nil),           // 39: fippb.SecOffsetStaElem
	(*SecAvgVolumeElem)(nil),           // 40: fippb.SecAvgVolumeElem
	(ESecServiceStatus)(0),             // 41: fippb.ESecServiceStatus
	(*SecExchangeElem)(nil),            // 42: fippb.SecExchangeElem
	(ESecStockType)(0),                 // 43: fippb.ESecStockType
	(*SecIndexContractElem)(nil),       // 44: fippb.SecIndexContractElem
	(*SecContractElem)(nil),            // 45: fippb.SecContractElem
	(*SecOptContractElem)(nil),         // 46: fippb.SecOptContractElem
	(ESecSubType)(0),                   // 47: fippb.ESecSubType
	(*SecSubElem)(nil),                 // 48: fippb.SecSubElem
	(*SecBestQuotElem)(nil),            // 49: fippb.SecBestQuotElem
	(*SecOptParaElem)(nil),             // 50: fippb.SecOptParaElem
	(*SecExtraQuot)(nil),               // 51: fippb.SecExtraQuot
	(*SecStaticDataVersionElem)(nil),   // 52: fippb.SecStaticDataVersionElem
	(*SecOptVarietyElem)(nil),          // 53: fippb.SecOptVarietyElem
	(*SecOptUnderlyingElem)(nil),       // 54: fippb.SecOptUnderlyingElem
	(*SecEntranceElem)(nil),            // 55: fippb.SecEntranceElem
}
var file_fip_interface_sec_proto_depIdxs = []int32{
	32, // 0: fippb.ReqQrySecTSChart.exchangeID:type_name -> fippb.EExchgID
	32, // 1: fippb.RspQrySecTSChart.exchangeID:type_name -> fippb.EExchgID
	33, // 2: fippb.RspQrySecTSChart.elem:type_name -> fippb.SecTSChartElem
	34, // 3: fippb.RspQrySecTSChart.pkgType:type_name -> fippb.EPkgType
	32, // 4: fippb.ReqQrySecMatchDetail.exchangeID:type_name -> fippb.EExchgID
	32, // 5: fippb.RspQrySecMatchDetail.exchangeID:type_name -> fippb.EExchgID
	35, // 6: fippb.RspQrySecMatchDetail.elem:type_name -> fippb.SecMatchDetailElem
	34, // 7: fippb.RspQrySecMatchDetail.pkgType:type_name -> fippb.EPkgType
	32, // 8: fippb.ReqQrySecKLine.exchangeID:type_name -> fippb.EExchgID
	36, // 9: fippb.ReqQrySecKLine.type:type_name -> fippb.ESecKLineType
	32, // 10: fippb.RspQrySecKLine.exchangeID:type_name -> fippb.EExchgID
	36, // 11: fippb.RspQrySecKLine.type:type_name -> fippb.ESecKLineType
	37, // 12: fippb.RspQrySecKLine.elem:type_name -> fippb.SecKLineElem
	34, // 13: fippb.RspQrySecKLine.pkgType:type_name -> fippb.EPkgType
	32, // 14: fippb.ReqQrySecTimePrice.exchangeID:type_name -> fippb.EExchgID
	32, // 15: fippb.RspQrySecTimePrice.exchangeID:type_name -> fippb.EExchgID
	38, // 16: fippb.RspQrySecTimePrice.elem:type_name -> fippb.SecTimePriceElem
	34, // 17: fippb.RspQrySecTimePrice.pkgType:type_name -> fippb.EPkgType
	32, // 18: fippb.ReqQrySecTimeVolume.exchangeID:type_name -> fippb.EExchgID
	32, // 19: fippb.RspQrySecTimeVolume.exchangeID:type_name -> fippb.EExchgID
	39, // 20: fippb.RspQrySecTimeVolume.offsetSta:type_name -> fippb.SecOffsetStaElem
	39, // 21: fippb.RspQrySecTimeVolume.bigOffsetSta:type_name -> fippb.SecOffsetStaElem
	40, // 22: fippb.RspQrySecTimeVolume.avgVolome:type_name -> fippb.SecAvgVolumeElem
	34, // 23: fippb.RspQrySecTimeVolume.pkgType:type_name -> fippb.EPkgType
	41, // 24: fippb.RspSecServiceStatus.status:type_name -> fippb.ESecServiceStatus
	41, // 25: fippb.NotifySecServiceStatus.status:type_name -> fippb.ESecServiceStatus
	32, // 26: fippb.ReqQrySecExchange.exchangeID:type_name -> fippb.EExchgID
	42, // 27: fippb.RspQrySecExchange.elem:type_name -> fippb.SecExchangeElem
	34, // 28: fippb.RspQrySecExchange.pkgType:type_name -> fippb.EPkgType
	32, // 29: fippb.ReqQrySecContract.exchangeID:type_name -> fippb.EExchgID
	43, // 30: fippb.ReqQrySecContract.secType:type_name -> fippb.ESecStockType
	32, // 31: fippb.RspQrySecContract.exchangeID:type_name -> fippb.EExchgID
	44, // 32: fippb.RspQrySecContract.indexElem:type_name -> fippb.SecIndexContractElem
	45, // 33: fippb.RspQrySecContract.secElem:type_name -> fippb.SecContractElem
	46, // 34: fippb.RspQrySecContract.optElem:type_name -> fippb.SecOptContractElem
	34, // 35: fippb.RspQrySecContract.pkgType:type_name -> fippb.EPkgType
	47, // 36: fippb.ReqSubSecQuot.subType:type_name -> fippb.ESecSubType
	48, // 37: fippb.ReqSubSecQuot.elem:type_name -> fippb.SecSubElem
	32, // 38: fippb.NotifySecQuot.exchangeID:type_name -> fippb.EExchgID
	43, // 39: fippb.NotifySecQuot.secType:type_name -> fippb.ESecStockType
	49, // 40: fippb.NotifySecQuot.bestElem:type_name -> fippb.SecBestQuotElem
	50, // 41: fippb.NotifySecQuot.elem:type_name -> fippb.SecOptParaElem
	51, // 42: fippb.NotifySecQuot.extra:type_name -> fippb.SecExtraQuot
	47, // 43: fippb.ReqSubSecBriefQuot.subType:type_name -> fippb.ESecSubType
	48, // 44: fippb.ReqSubSecBriefQuot.elem:type_name -> fippb.SecSubElem
	32, // 45: fippb.NotifySecBriefQuot.exchangeID:type_name -> fippb.EExchgID
	43, // 46: fippb.NotifySecBriefQuot.secType:type_name -> fippb.ESecStockType
	32, // 47: fippb.ReqSecStaticDataVersion.exchangeID:type_name -> fippb.EExchgID
	52, // 48: fippb.RspSecStaticDataVersion.elem:type_name -> fippb.SecStaticDataVersionElem
	34, // 49: fippb.RspSecStaticDataVersion.pkgType:type_name -> fippb.EPkgType
	52, // 50: fippb.NotifySecStaticDataVersion.elem:type_name -> fippb.SecStaticDataVersionElem
	32, // 51: fippb.ReqSecOptVarietyList.exchangeID:type_name -> fippb.EExchgID
	32, // 52: fippb.RspSecOptVarietyList.exchangeID:type_name -> fippb.EExchgID
	53, // 53: fippb.RspSecOptVarietyList.elem:type_name -> fippb.SecOptVarietyElem
	34, // 54: fippb.RspSecOptVarietyList.pkgType:type_name -> fippb.EPkgType
	32, // 55: fippb.ReqSecOptUnderlyingList.exchangeID:type_name -> fippb.EExchgID
	32, // 56: fippb.RspSecOptUnderlyingList.exchangeID:type_name -> fippb.EExchgID
	54, // 57: fippb.RspSecOptUnderlyingList.elem:type_name -> fippb.SecOptUnderlyingElem
	34, // 58: fippb.RspSecOptUnderlyingList.pkgType:type_name -> fippb.EPkgType
	32, // 59: fippb.ReqSecFunEntrances.exchangeID:type_name -> fippb.EExchgID
	55, // 60: fippb.RspSecFunEntrances.entrances:type_name -> fippb.SecEntranceElem
	34, // 61: fippb.RspSecFunEntrances.pkgType:type_name -> fippb.EPkgType
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_fip_interface_sec_proto_init() }
func file_fip_interface_sec_proto_init() {
	if File_fip_interface_sec_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_sec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_sec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecTimeVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecTimeVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQrySecContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQrySecContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubSecQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubSecQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubSecBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubSecBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecBriefQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySecStaticDataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecOptVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecOptVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecOptUnderlyingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecOptUnderlyingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSecFunEntrances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_sec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSecFunEntrances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_sec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_sec_proto_goTypes,
		DependencyIndexes: file_fip_interface_sec_proto_depIdxs,
		MessageInfos:      file_fip_interface_sec_proto_msgTypes,
	}.Build()
	File_fip_interface_sec_proto = out.File
	file_fip_interface_sec_proto_rawDesc = nil
	file_fip_interface_sec_proto_goTypes = nil
	file_fip_interface_sec_proto_depIdxs = nil
}
