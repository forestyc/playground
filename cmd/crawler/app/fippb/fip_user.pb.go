//*
// Copyright (C) 2018-2019，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 用户接口proto定义
//
// @author <xiahl>
//
// @date 2018-5-2
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_user.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 登陆结果
type LoginResult int32

const (
	LoginResult_Succeed      LoginResult = 0 // 登陆成功
	LoginResult_AlreadyLogin LoginResult = 1 // 已经登陆
	LoginResult_Fail         LoginResult = 2 // 登陆失败
	LoginResult_NotFound     LoginResult = 3 // 未找到，可能已下线
	LoginResult_Busy         LoginResult = 4 // 服务器忙，请尝试其它服务器
	LoginResult_NumLimited   LoginResult = 5 // 数量达到限制
	LoginResult_NeedLogin    LoginResult = 6 // 需要进行登陆
	LoginResult_Risk         LoginResult = 7 // Token泄露，需要重新获取新Token进行登陆
	LoginResult_Logout       LoginResult = 8 // 正常退出登录
	LoginResult_TokenExpire  LoginResult = 9 // Token 过期错误
)

// Enum value maps for LoginResult.
var (
	LoginResult_name = map[int32]string{
		0: "Succeed",
		1: "AlreadyLogin",
		2: "Fail",
		3: "NotFound",
		4: "Busy",
		5: "NumLimited",
		6: "NeedLogin",
		7: "Risk",
		8: "Logout",
		9: "TokenExpire",
	}
	LoginResult_value = map[string]int32{
		"Succeed":      0,
		"AlreadyLogin": 1,
		"Fail":         2,
		"NotFound":     3,
		"Busy":         4,
		"NumLimited":   5,
		"NeedLogin":    6,
		"Risk":         7,
		"Logout":       8,
		"TokenExpire":  9,
	}
)

func (x LoginResult) Enum() *LoginResult {
	p := new(LoginResult)
	*p = x
	return p
}

func (x LoginResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginResult) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_user_proto_enumTypes[0].Descriptor()
}

func (LoginResult) Type() protoreflect.EnumType {
	return &file_fip_user_proto_enumTypes[0]
}

func (x LoginResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginResult.Descriptor instead.
func (LoginResult) EnumDescriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{0}
}

// *
// @brief 登陆请求
// @author <xiahl>
// @date 2018-5-2
// @date 2023-8-20  补充推送信息所需参数
type ReqLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`               // 流水号
	UserId       string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`              // 用户唯一ID
	Token        string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`                // 用户登陆Token
	ProxyId      uint32 `protobuf:"varint,4,opt,name=ProxyId,proto3" json:"ProxyId,omitempty"`           // Proxy标识 （客户端不需要填写,由所连接的代理补充该字段）
	SessionId    string `protobuf:"bytes,5,opt,name=SessionId,proto3" json:"SessionId,omitempty"`        // 会话Id （客户端不需要填写,由所连接的代理补充该字段）
	LoginId      string `protobuf:"bytes,6,opt,name=LoginId,proto3" json:"LoginId,omitempty"`            // 登录Id （需要客户端填写）
	CustomerId   string `protobuf:"bytes,7,opt,name=CustomerId,proto3" json:"CustomerId,omitempty"`      // 会员Id （设计只有在user不校验的情况下使用）
	AuthCode     string `protobuf:"bytes,8,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`          // 会员识别码 （设计只有在user不校验的情况下使用）
	Gm           bool   `protobuf:"varint,9,opt,name=Gm,proto3" json:"Gm,omitempty"`                     // 是否国密加密，true为国密，false非国密
	DeviceNo     string `protobuf:"bytes,10,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`         // 客户端设备号
	JgRid        string `protobuf:"bytes,11,opt,name=JgRid,proto3" json:"JgRid,omitempty"`               // 极光推送的注册ID（RegID）
	JgAlias      string `protobuf:"bytes,12,opt,name=JgAlias,proto3" json:"JgAlias,omitempty"`           // 极光推送Alias( AppPackageId+UserID )
	XmRid        string `protobuf:"bytes,13,opt,name=XmRid,proto3" json:"XmRid,omitempty"`               // 小米推送的注册ID（RegID）
	XmAlias      string `protobuf:"bytes,14,opt,name=XmAlias,proto3" json:"XmAlias,omitempty"`           // 小米推送的Alias
	HwToken      string `protobuf:"bytes,15,opt,name=HwToken,proto3" json:"HwToken,omitempty"`           // 华为每天设备上每个应用的唯一标识
	AppPackageId string `protobuf:"bytes,16,opt,name=AppPackageId,proto3" json:"AppPackageId,omitempty"` // 应用包名（不通应用包名不同）
}

func (x *ReqLogin) Reset() {
	*x = ReqLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLogin) ProtoMessage() {}

func (x *ReqLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLogin.ProtoReflect.Descriptor instead.
func (*ReqLogin) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{0}
}

func (x *ReqLogin) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReqLogin) GetProxyId() uint32 {
	if x != nil {
		return x.ProxyId
	}
	return 0
}

func (x *ReqLogin) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReqLogin) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

func (x *ReqLogin) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReqLogin) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *ReqLogin) GetGm() bool {
	if x != nil {
		return x.Gm
	}
	return false
}

func (x *ReqLogin) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *ReqLogin) GetJgRid() string {
	if x != nil {
		return x.JgRid
	}
	return ""
}

func (x *ReqLogin) GetJgAlias() string {
	if x != nil {
		return x.JgAlias
	}
	return ""
}

func (x *ReqLogin) GetXmRid() string {
	if x != nil {
		return x.XmRid
	}
	return ""
}

func (x *ReqLogin) GetXmAlias() string {
	if x != nil {
		return x.XmAlias
	}
	return ""
}

func (x *ReqLogin) GetHwToken() string {
	if x != nil {
		return x.HwToken
	}
	return ""
}

func (x *ReqLogin) GetAppPackageId() string {
	if x != nil {
		return x.AppPackageId
	}
	return ""
}

// *
// @brief 登陆应答
// @author <xiahl>
// @date 2018-5-2
type RspLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint32      `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                          // 流水号
	Result   LoginResult `protobuf:"varint,2,opt,name=Result,proto3,enum=fippb.LoginResult" json:"Result,omitempty"` // 登陆结果
	ClientIp string      `protobuf:"bytes,3,opt,name=ClientIp,proto3" json:"ClientIp,omitempty"`                     // 终端IP地址
	List     []EExchgID  `protobuf:"varint,4,rep,packed,name=List,proto3,enum=fippb.EExchgID" json:"List,omitempty"` // 有行情权限的交易所
	UserId   string      `protobuf:"bytes,5,opt,name=UserId,proto3" json:"UserId,omitempty"`                         // 用户唯一ID
}

func (x *RspLogin) Reset() {
	*x = RspLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLogin) ProtoMessage() {}

func (x *RspLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLogin.ProtoReflect.Descriptor instead.
func (*RspLogin) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{1}
}

func (x *RspLogin) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspLogin) GetResult() LoginResult {
	if x != nil {
		return x.Result
	}
	return LoginResult_Succeed
}

func (x *RspLogin) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RspLogin) GetList() []EExchgID {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 断线通知（Token不失效）
// @author <xiahl>
// @date 2018-5-2
type NotifyOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=SessionId,proto3" json:"SessionId,omitempty"` // 会话Id
}

func (x *NotifyOffline) Reset() {
	*x = NotifyOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOffline) ProtoMessage() {}

func (x *NotifyOffline) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOffline.ProtoReflect.Descriptor instead.
func (*NotifyOffline) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyOffline) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// *
// @brief 踢除用户请求
// @author <xiahl>
// @date 2018-5-2
type ReqKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     uint32      `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                          // 流水号
	SessionId []string    `protobuf:"bytes,2,rep,name=SessionId,proto3" json:"SessionId,omitempty"`                   // 会话ID
	Result    LoginResult `protobuf:"varint,3,opt,name=Result,proto3,enum=fippb.LoginResult" json:"Result,omitempty"` // NumLimited：数量达到限制被踢除  Risk：Token泄露被踢除
}

func (x *ReqKick) Reset() {
	*x = ReqKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKick) ProtoMessage() {}

func (x *ReqKick) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKick.ProtoReflect.Descriptor instead.
func (*ReqKick) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{3}
}

func (x *ReqKick) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqKick) GetSessionId() []string {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *ReqKick) GetResult() LoginResult {
	if x != nil {
		return x.Result
	}
	return LoginResult_Succeed
}

// *
// @brief 踢除用户应答
// @author <xiahl>
// @date 2018-5-2
type RspKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  uint32      `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                          // 流水号
	Result LoginResult `protobuf:"varint,2,opt,name=Result,proto3,enum=fippb.LoginResult" json:"Result,omitempty"` // 踢除结果
}

func (x *RspKick) Reset() {
	*x = RspKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspKick) ProtoMessage() {}

func (x *RspKick) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspKick.ProtoReflect.Descriptor instead.
func (*RspKick) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{4}
}

func (x *RspKick) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspKick) GetResult() LoginResult {
	if x != nil {
		return x.Result
	}
	return LoginResult_Succeed
}

// *
// @brief 通知Token失效
// @author <xiahl>
// @date 2018-6-4
type NotifyInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     uint32   `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`        // 流水号
	TokenList []string `protobuf:"bytes,2,rep,name=TokenList,proto3" json:"TokenList,omitempty"` // Token
}

func (x *NotifyInvalid) Reset() {
	*x = NotifyInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyInvalid) ProtoMessage() {}

func (x *NotifyInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyInvalid.ProtoReflect.Descriptor instead.
func (*NotifyInvalid) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{5}
}

func (x *NotifyInvalid) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyInvalid) GetTokenList() []string {
	if x != nil {
		return x.TokenList
	}
	return nil
}

// *
// @brief 用户登录数量请求
// @author <ciys>
// @date 2018-7-18
type ReqLoginNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId  uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`  // 流水号
	UserId string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户唯一ID
}

func (x *ReqLoginNum) Reset() {
	*x = ReqLoginNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoginNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoginNum) ProtoMessage() {}

func (x *ReqLoginNum) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoginNum.ProtoReflect.Descriptor instead.
func (*ReqLoginNum) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{6}
}

func (x *ReqLoginNum) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqLoginNum) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// *
// @brief 用户登录数量应答
// @author <ciys>
// @date 2018-7-18
type RspLoginNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId       uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`             // 流水号
	CanLoginNum uint32 `protobuf:"varint,2,opt,name=CanLoginNum,proto3" json:"CanLoginNum,omitempty"` // 还可登录数量(如果是单点登录总是返回1,如果是多点登录返回还可登录的数量,如果返回0就不允许在登录了)
}

func (x *RspLoginNum) Reset() {
	*x = RspLoginNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLoginNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLoginNum) ProtoMessage() {}

func (x *RspLoginNum) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLoginNum.ProtoReflect.Descriptor instead.
func (*RspLoginNum) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{7}
}

func (x *RspLoginNum) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspLoginNum) GetCanLoginNum() uint32 {
	if x != nil {
		return x.CanLoginNum
	}
	return 0
}

// *
// @brief 登录日志统计汇总
// @author <ciys>
// @date 2019-1-10
type RspLoginLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*LoginLog `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Num     *NumInfo    `protobuf:"bytes,2,opt,name=Num,proto3" json:"Num,omitempty"`
	ListNum uint32      `protobuf:"varint,3,opt,name=ListNum,proto3" json:"ListNum,omitempty"`
}

func (x *RspLoginLog) Reset() {
	*x = RspLoginLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspLoginLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspLoginLog) ProtoMessage() {}

func (x *RspLoginLog) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspLoginLog.ProtoReflect.Descriptor instead.
func (*RspLoginLog) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{8}
}

func (x *RspLoginLog) GetList() []*LoginLog {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspLoginLog) GetNum() *NumInfo {
	if x != nil {
		return x.Num
	}
	return nil
}

func (x *RspLoginLog) GetListNum() uint32 {
	if x != nil {
		return x.ListNum
	}
	return 0
}

// *
// @brief 登录日志统计
// @author <ciys>
// @date 2019-1-10
type LoginLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        //用户id
	UserName  string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`    //用户名
	Activity  uint32 `protobuf:"varint,3,opt,name=Activity,proto3" json:"Activity,omitempty"`   //活跃度
	MaxOnline uint32 `protobuf:"varint,4,opt,name=MaxOnline,proto3" json:"MaxOnline,omitempty"` //最大在线时长
	MinOnline uint32 `protobuf:"varint,5,opt,name=MinOnline,proto3" json:"MinOnline,omitempty"` //最小在线时长
	MaxTime   string `protobuf:"bytes,6,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`      //峰值发生时期
	MinTime   string `protobuf:"bytes,7,opt,name=MinTime,proto3" json:"MinTime,omitempty"`      //谷值发生时期
}

func (x *LoginLog) Reset() {
	*x = LoginLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLog) ProtoMessage() {}

func (x *LoginLog) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLog.ProtoReflect.Descriptor instead.
func (*LoginLog) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{9}
}

func (x *LoginLog) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginLog) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginLog) GetActivity() uint32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *LoginLog) GetMaxOnline() uint32 {
	if x != nil {
		return x.MaxOnline
	}
	return 0
}

func (x *LoginLog) GetMinOnline() uint32 {
	if x != nil {
		return x.MinOnline
	}
	return 0
}

func (x *LoginLog) GetMaxTime() string {
	if x != nil {
		return x.MaxTime
	}
	return ""
}

func (x *LoginLog) GetMinTime() string {
	if x != nil {
		return x.MinTime
	}
	return ""
}

// *
// @brief 注册人数/在线人数/下载次数等数量信息
// @author <ciys>
// @date 2019-1-10
type NumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegNum    uint32 `protobuf:"varint,1,opt,name=RegNum,proto3" json:"RegNum,omitempty"`       //注册数量
	OnlineNum uint32 `protobuf:"varint,2,opt,name=OnlineNum,proto3" json:"OnlineNum,omitempty"` //在线人数
	DownNum   uint32 `protobuf:"varint,3,opt,name=DownNum,proto3" json:"DownNum,omitempty"`     //下载次数
}

func (x *NumInfo) Reset() {
	*x = NumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumInfo) ProtoMessage() {}

func (x *NumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumInfo.ProtoReflect.Descriptor instead.
func (*NumInfo) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{10}
}

func (x *NumInfo) GetRegNum() uint32 {
	if x != nil {
		return x.RegNum
	}
	return 0
}

func (x *NumInfo) GetOnlineNum() uint32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *NumInfo) GetDownNum() uint32 {
	if x != nil {
		return x.DownNum
	}
	return 0
}

// *
// @brief 登录日志请求
// @author <ciys>
// @date 2019-1-10
type ReqLoginLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`   //用户名
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     //结束时间
	PageSize  uint32 `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`  //每页显示数量
	Page      uint32 `protobuf:"varint,5,opt,name=Page,proto3" json:"Page,omitempty"`          //页数
}

func (x *ReqLoginLog) Reset() {
	*x = ReqLoginLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoginLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoginLog) ProtoMessage() {}

func (x *ReqLoginLog) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoginLog.ProtoReflect.Descriptor instead.
func (*ReqLoginLog) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{11}
}

func (x *ReqLoginLog) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqLoginLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReqLoginLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReqLoginLog) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReqLoginLog) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// *
// @brief req all contract
// @author <xiahl>
// @date 20190114
type ReqContractAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (x *ReqContractAll) Reset() {
	*x = ReqContractAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqContractAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqContractAll) ProtoMessage() {}

func (x *ReqContractAll) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqContractAll.ProtoReflect.Descriptor instead.
func (*ReqContractAll) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{12}
}

func (x *ReqContractAll) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// *
// @brief 合约信息
// @author <daihouda>
// @date 20220111
type ContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgID    EExchgID `protobuf:"varint,1,opt,name=ExchgID,proto3,enum=fippb.EExchgID" json:"ExchgID,omitempty"`
	ContractID string   `protobuf:"bytes,2,opt,name=ContractID,proto3" json:"ContractID,omitempty"`
}

func (x *ContractElem) Reset() {
	*x = ContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractElem) ProtoMessage() {}

func (x *ContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractElem.ProtoReflect.Descriptor instead.
func (*ContractElem) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{13}
}

func (x *ContractElem) GetExchgID() EExchgID {
	if x != nil {
		return x.ExchgID
	}
	return EExchgID_ExchNull
}

func (x *ContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief rsp all contract
// @author <xiahl>
// @date 20190114
type RspContractAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        uint32          `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ErrorId      uint32          `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`
	Finish       bool            `protobuf:"varint,3,opt,name=Finish,proto3" json:"Finish,omitempty"`
	List         []string        `protobuf:"bytes,4,rep,name=List,proto3" json:"List,omitempty"`
	ContractList []*ContractElem `protobuf:"bytes,5,rep,name=ContractList,proto3" json:"ContractList,omitempty"`
}

func (x *RspContractAll) Reset() {
	*x = RspContractAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspContractAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspContractAll) ProtoMessage() {}

func (x *RspContractAll) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspContractAll.ProtoReflect.Descriptor instead.
func (*RspContractAll) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{14}
}

func (x *RspContractAll) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspContractAll) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspContractAll) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspContractAll) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspContractAll) GetContractList() []*ContractElem {
	if x != nil {
		return x.ContractList
	}
	return nil
}

// *
// @brief 权限请求
// @author <jinfulin>
// @note 协议号 proxy-user
// @date 2021-10-19
type ReqQuotAuths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string      `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                 // 用户Id（需要客户端填写）
	MsgId          uint32      `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                  // 流水号 ,旧字段名称为requestId
	FuturesCoLtdId string      `protobuf:"bytes,3,opt,name=FuturesCoLtdId,proto3" json:"FuturesCoLtdId,omitempty"` // 公司编号（需要客户端填写）
	ExChgIDs       []*ReqExchg `protobuf:"bytes,4,rep,name=ExChgIDs,proto3" json:"ExChgIDs,omitempty"`             // 交易所id列表  1,2,3
	DeviceNo       string      `protobuf:"bytes,6,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`             // 设备号（需要客户端填写）
	Gm             bool        `protobuf:"varint,7,opt,name=Gm,proto3" json:"Gm,omitempty"`                        // 是否国密加密，true为国密，false非国密,无此字段按非国密处理。
}

func (x *ReqQuotAuths) Reset() {
	*x = ReqQuotAuths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotAuths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotAuths) ProtoMessage() {}

func (x *ReqQuotAuths) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotAuths.ProtoReflect.Descriptor instead.
func (*ReqQuotAuths) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{15}
}

func (x *ReqQuotAuths) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReqQuotAuths) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqQuotAuths) GetFuturesCoLtdId() string {
	if x != nil {
		return x.FuturesCoLtdId
	}
	return ""
}

func (x *ReqQuotAuths) GetExChgIDs() []*ReqExchg {
	if x != nil {
		return x.ExChgIDs
	}
	return nil
}

func (x *ReqQuotAuths) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *ReqQuotAuths) GetGm() bool {
	if x != nil {
		return x.Gm
	}
	return false
}

type ReqExchg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId EExchgID  `protobuf:"varint,1,opt,name=ExchangeId,proto3,enum=fippb.EExchgID" json:"ExchangeId,omitempty"` // 交易所id
	AuthType   EAuthType `protobuf:"varint,2,opt,name=AuthType,proto3,enum=fippb.EAuthType" json:"AuthType,omitempty"`    // 行情类型
}

func (x *ReqExchg) Reset() {
	*x = ReqExchg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqExchg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqExchg) ProtoMessage() {}

func (x *ReqExchg) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqExchg.ProtoReflect.Descriptor instead.
func (*ReqExchg) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{16}
}

func (x *ReqExchg) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ReqExchg) GetAuthType() EAuthType {
	if x != nil {
		return x.AuthType
	}
	return EAuthType_unkown
}

// *
// @brief 权限应答
// @author <jinfulin>
// @note 协议号 user-proxy
// @date 2021-10-19
type RspQuotAuths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId            uint32         `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                             // 流水号
	UserId           string         `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                            // UserId
	ExchgAuthResults []*AuthResult  `protobuf:"bytes,3,rep,name=ExchgAuthResults,proto3" json:"ExchgAuthResults,omitempty"`        // 分交易所权限应答
	Result           AuthResultCode `protobuf:"varint,4,opt,name=Result,proto3,enum=fippb.AuthResultCode" json:"Result,omitempty"` // 权限应答结果
}

func (x *RspQuotAuths) Reset() {
	*x = RspQuotAuths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQuotAuths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQuotAuths) ProtoMessage() {}

func (x *RspQuotAuths) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQuotAuths.ProtoReflect.Descriptor instead.
func (*RspQuotAuths) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{17}
}

func (x *RspQuotAuths) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspQuotAuths) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspQuotAuths) GetExchgAuthResults() []*AuthResult {
	if x != nil {
		return x.ExchgAuthResults
	}
	return nil
}

func (x *RspQuotAuths) GetResult() AuthResultCode {
	if x != nil {
		return x.Result
	}
	return AuthResultCode_AuthUnknow
}

// *
// @brief 权限应答结果
// @author <jinfulin>
// @note 协议号 user-proxy
// @date 2022-11-3
type AuthResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId EExchgID       `protobuf:"varint,1,opt,name=ExchangeId,proto3,enum=fippb.EExchgID" json:"ExchangeId,omitempty"`       //交易所id
	ResultCode AuthResultCode `protobuf:"varint,2,opt,name=ResultCode,proto3,enum=fippb.AuthResultCode" json:"ResultCode,omitempty"` //返回状态码
	ErrMsg     string         `protobuf:"bytes,3,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`                                    //错误原因
}

func (x *AuthResult) Reset() {
	*x = AuthResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResult) ProtoMessage() {}

func (x *AuthResult) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResult.ProtoReflect.Descriptor instead.
func (*AuthResult) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{18}
}

func (x *AuthResult) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *AuthResult) GetResultCode() AuthResultCode {
	if x != nil {
		return x.ResultCode
	}
	return AuthResultCode_AuthUnknow
}

func (x *AuthResult) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// *
// @brief 权限变更通知
// @author <libin>
// @note 协议号 user-proxy
// @date 2021-11-10
type NotifyAuthChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string        `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                           // 用户唯一ID
	AuthType         EAuthType     `protobuf:"varint,2,opt,name=AuthType,proto3,enum=fippb.EAuthType" json:"AuthType,omitempty"` // 行情类型
	ExchgAuthResults []*AuthResult `protobuf:"bytes,3,rep,name=ExchgAuthResults,proto3" json:"ExchgAuthResults,omitempty"`       // 权限变更结果
}

func (x *NotifyAuthChange) Reset() {
	*x = NotifyAuthChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyAuthChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyAuthChange) ProtoMessage() {}

func (x *NotifyAuthChange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAuthChange.ProtoReflect.Descriptor instead.
func (*NotifyAuthChange) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{19}
}

func (x *NotifyAuthChange) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotifyAuthChange) GetAuthType() EAuthType {
	if x != nil {
		return x.AuthType
	}
	return EAuthType_unkown
}

func (x *NotifyAuthChange) GetExchgAuthResults() []*AuthResult {
	if x != nil {
		return x.ExchgAuthResults
	}
	return nil
}

// *
// @brief 设备变更通知
// @author <libin>
// @note 协议号 user-proxy
// @date 2021-11-12
type NotifyDeviceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string    `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                           // 用户唯一ID
	FuturesCoLtdId string    `protobuf:"bytes,2,opt,name=FuturesCoLtdId,proto3" json:"FuturesCoLtdId,omitempty"`           // 公司编号
	AuthType       EAuthType `protobuf:"varint,3,opt,name=AuthType,proto3,enum=fippb.EAuthType" json:"AuthType,omitempty"` // 行情类型
	NewDeviceNo    string    `protobuf:"bytes,4,opt,name=NewDeviceNo,proto3" json:"NewDeviceNo,omitempty"`                 //新设备号
	OldDeviceNo    string    `protobuf:"bytes,5,opt,name=OldDeviceNo,proto3" json:"OldDeviceNo,omitempty"`                 //旧设备号
}

func (x *NotifyDeviceChange) Reset() {
	*x = NotifyDeviceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDeviceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDeviceChange) ProtoMessage() {}

func (x *NotifyDeviceChange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDeviceChange.ProtoReflect.Descriptor instead.
func (*NotifyDeviceChange) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{20}
}

func (x *NotifyDeviceChange) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotifyDeviceChange) GetFuturesCoLtdId() string {
	if x != nil {
		return x.FuturesCoLtdId
	}
	return ""
}

func (x *NotifyDeviceChange) GetAuthType() EAuthType {
	if x != nil {
		return x.AuthType
	}
	return EAuthType_unkown
}

func (x *NotifyDeviceChange) GetNewDeviceNo() string {
	if x != nil {
		return x.NewDeviceNo
	}
	return ""
}

func (x *NotifyDeviceChange) GetOldDeviceNo() string {
	if x != nil {
		return x.OldDeviceNo
	}
	return ""
}

// *
// @brief Token
// @author <daihodua>
// @note 协议号 user-login grpc
// @date 2021-11-22
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"` // token
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{21}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// *
// @brief Token的payload
// @author <daihodua>
// @note 协议号 user-login grpc
// @date 2021-11-22
type PayLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户唯一ID
}

func (x *PayLoad) Reset() {
	*x = PayLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayLoad) ProtoMessage() {}

func (x *PayLoad) ProtoReflect() protoreflect.Message {
	mi := &file_fip_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayLoad.ProtoReflect.Descriptor instead.
func (*PayLoad) Descriptor() ([]byte, []int) {
	return file_fip_user_proto_rawDescGZIP(), []int{22}
}

func (x *PayLoad) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_fip_user_proto protoreflect.FileDescriptor

var file_fip_user_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x69, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x03, 0x0a, 0x08, 0x52, 0x65,
	0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x47, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x67, 0x52, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x67, 0x52, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x67,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a, 0x67, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x58, 0x6d, 0x52, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x58, 0x6d, 0x52, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x58, 0x6d,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x58, 0x6d, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x52, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x23, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x4b, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x43, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43,
	0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x6e, 0x0a, 0x0b, 0x52, 0x73,
	0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x77, 0x6e,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x6f, 0x77, 0x6e, 0x4e,
	0x75, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29,
	0x0a, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x73,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x4c, 0x74, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x4c, 0x74, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x45, 0x78, 0x43, 0x68,
	0x67, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x78, 0x63, 0x68, 0x67, 0x52, 0x08, 0x45, 0x78, 0x43,
	0x68, 0x67, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x47,
	0x6d, 0x22, 0x69, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x45, 0x78, 0x63, 0x68, 0x67, 0x12, 0x2f, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x0c, 0x52, 0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x67, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x4c, 0x74,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x43, 0x6f, 0x4c, 0x74, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65,
	0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6c, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x21, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x94, 0x01,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x69, 0x73, 0x6b, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x10, 0x09, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64,
	0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_user_proto_rawDescOnce sync.Once
	file_fip_user_proto_rawDescData = file_fip_user_proto_rawDesc
)

func file_fip_user_proto_rawDescGZIP() []byte {
	file_fip_user_proto_rawDescOnce.Do(func() {
		file_fip_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_user_proto_rawDescData)
	})
	return file_fip_user_proto_rawDescData
}

var file_fip_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fip_user_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_fip_user_proto_goTypes = []interface{}{
	(LoginResult)(0),           // 0: fippb.LoginResult
	(*ReqLogin)(nil),           // 1: fippb.ReqLogin
	(*RspLogin)(nil),           // 2: fippb.RspLogin
	(*NotifyOffline)(nil),      // 3: fippb.NotifyOffline
	(*ReqKick)(nil),            // 4: fippb.ReqKick
	(*RspKick)(nil),            // 5: fippb.RspKick
	(*NotifyInvalid)(nil),      // 6: fippb.NotifyInvalid
	(*ReqLoginNum)(nil),        // 7: fippb.ReqLoginNum
	(*RspLoginNum)(nil),        // 8: fippb.RspLoginNum
	(*RspLoginLog)(nil),        // 9: fippb.RspLoginLog
	(*LoginLog)(nil),           // 10: fippb.LoginLog
	(*NumInfo)(nil),            // 11: fippb.NumInfo
	(*ReqLoginLog)(nil),        // 12: fippb.ReqLoginLog
	(*ReqContractAll)(nil),     // 13: fippb.ReqContractAll
	(*ContractElem)(nil),       // 14: fippb.ContractElem
	(*RspContractAll)(nil),     // 15: fippb.RspContractAll
	(*ReqQuotAuths)(nil),       // 16: fippb.ReqQuotAuths
	(*ReqExchg)(nil),           // 17: fippb.ReqExchg
	(*RspQuotAuths)(nil),       // 18: fippb.RspQuotAuths
	(*AuthResult)(nil),         // 19: fippb.AuthResult
	(*NotifyAuthChange)(nil),   // 20: fippb.NotifyAuthChange
	(*NotifyDeviceChange)(nil), // 21: fippb.NotifyDeviceChange
	(*Token)(nil),              // 22: fippb.Token
	(*PayLoad)(nil),            // 23: fippb.PayLoad
	(EExchgID)(0),              // 24: fippb.EExchgID
	(EAuthType)(0),             // 25: fippb.EAuthType
	(AuthResultCode)(0),        // 26: fippb.AuthResultCode
}
var file_fip_user_proto_depIdxs = []int32{
	0,  // 0: fippb.RspLogin.Result:type_name -> fippb.LoginResult
	24, // 1: fippb.RspLogin.List:type_name -> fippb.EExchgID
	0,  // 2: fippb.ReqKick.Result:type_name -> fippb.LoginResult
	0,  // 3: fippb.RspKick.Result:type_name -> fippb.LoginResult
	10, // 4: fippb.RspLoginLog.List:type_name -> fippb.LoginLog
	11, // 5: fippb.RspLoginLog.Num:type_name -> fippb.NumInfo
	24, // 6: fippb.ContractElem.ExchgID:type_name -> fippb.EExchgID
	14, // 7: fippb.RspContractAll.ContractList:type_name -> fippb.ContractElem
	17, // 8: fippb.ReqQuotAuths.ExChgIDs:type_name -> fippb.ReqExchg
	24, // 9: fippb.ReqExchg.ExchangeId:type_name -> fippb.EExchgID
	25, // 10: fippb.ReqExchg.AuthType:type_name -> fippb.EAuthType
	19, // 11: fippb.RspQuotAuths.ExchgAuthResults:type_name -> fippb.AuthResult
	26, // 12: fippb.RspQuotAuths.Result:type_name -> fippb.AuthResultCode
	24, // 13: fippb.AuthResult.ExchangeId:type_name -> fippb.EExchgID
	26, // 14: fippb.AuthResult.ResultCode:type_name -> fippb.AuthResultCode
	25, // 15: fippb.NotifyAuthChange.AuthType:type_name -> fippb.EAuthType
	19, // 16: fippb.NotifyAuthChange.ExchgAuthResults:type_name -> fippb.AuthResult
	25, // 17: fippb.NotifyDeviceChange.AuthType:type_name -> fippb.EAuthType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_fip_user_proto_init() }
func file_fip_user_proto_init() {
	if File_fip_user_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoginNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLoginNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspLoginLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoginLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqContractAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspContractAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotAuths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqExchg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQuotAuths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyAuthChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDeviceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_user_proto_goTypes,
		DependencyIndexes: file_fip_user_proto_depIdxs,
		EnumInfos:         file_fip_user_proto_enumTypes,
		MessageInfos:      file_fip_user_proto_msgTypes,
	}.Build()
	File_fip_user_proto = out.File
	file_fip_user_proto_rawDesc = nil
	file_fip_user_proto_goTypes = nil
	file_fip_user_proto_depIdxs = nil
}
