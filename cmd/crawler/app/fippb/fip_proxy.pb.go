// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_proxy.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// 协议段使用规则
// 服务端内部交互： 500 ~ 999
type Svr_Protocol int32

const (
	Svr_Protocol_OP_Begin Svr_Protocol = 0
	// ///////////////////// 服务端内部交互协议 ////////////////////////
	Svr_Protocol_OP_Q_SVR_OPCODES Svr_Protocol = 500 //< 服务端支持的协议请求
	Svr_Protocol_OP_A_SVR_OPCODES Svr_Protocol = 501 //< 服务端支持的协议响应
	Svr_Protocol_OP_Q_SVR_PING    Svr_Protocol = 502 //< 服务端ping请求
	Svr_Protocol_OP_A_SVR_PING    Svr_Protocol = 503 //< 服务端ping响应
)

// Enum value maps for Svr_Protocol.
var (
	Svr_Protocol_name = map[int32]string{
		0:   "OP_Begin",
		500: "OP_Q_SVR_OPCODES",
		501: "OP_A_SVR_OPCODES",
		502: "OP_Q_SVR_PING",
		503: "OP_A_SVR_PING",
	}
	Svr_Protocol_value = map[string]int32{
		"OP_Begin":         0,
		"OP_Q_SVR_OPCODES": 500,
		"OP_A_SVR_OPCODES": 501,
		"OP_Q_SVR_PING":    502,
		"OP_A_SVR_PING":    503,
	}
)

func (x Svr_Protocol) Enum() *Svr_Protocol {
	p := new(Svr_Protocol)
	*p = x
	return p
}

func (x Svr_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Svr_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_proxy_proto_enumTypes[0].Descriptor()
}

func (Svr_Protocol) Type() protoreflect.EnumType {
	return &file_fip_proxy_proto_enumTypes[0]
}

func (x Svr_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Svr_Protocol.Descriptor instead.
func (Svr_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{0}
}

// / 服务类型
type ESvrType int32

const (
	ESvrType_SvrTypeNull      ESvrType = 0  // 无
	ESvrType_Real             ESvrType = 1  // 实时行情服务
	ESvrType_His              ESvrType = 2  // 历史查询服务
	ESvrType_Proxy            ESvrType = 3  // 代理前置
	ESvrType_Data             ESvrType = 4  // 合约管理服务
	ESvrType_Login            ESvrType = 5  // 登录服务服务
	ESvrType_Real_TS          ESvrType = 6  // 分时数据计算服务
	ESvrType_Real_MatchDetail ESvrType = 7  // 逐笔成交明细计算服务
	ESvrType_OTC_REAL_STA     ESvrType = 8  // 场外实时行情统计服务
	ESvrType_User             ESvrType = 9  // 用户管理服务（财讯通业务管理端）
	ESvrType_RemoteUser       ESvrType = 10 // 远程用户管理服务（远程财讯通业务管理端）连接异地节点的主User服务
	ESvrType_QuotMonitor      ESvrType = 11 // 行情监控预警服务
)

// Enum value maps for ESvrType.
var (
	ESvrType_name = map[int32]string{
		0:  "SvrTypeNull",
		1:  "Real",
		2:  "His",
		3:  "Proxy",
		4:  "Data",
		5:  "Login",
		6:  "Real_TS",
		7:  "Real_MatchDetail",
		8:  "OTC_REAL_STA",
		9:  "User",
		10: "RemoteUser",
		11: "QuotMonitor",
	}
	ESvrType_value = map[string]int32{
		"SvrTypeNull":      0,
		"Real":             1,
		"His":              2,
		"Proxy":            3,
		"Data":             4,
		"Login":            5,
		"Real_TS":          6,
		"Real_MatchDetail": 7,
		"OTC_REAL_STA":     8,
		"User":             9,
		"RemoteUser":       10,
		"QuotMonitor":      11,
	}
)

func (x ESvrType) Enum() *ESvrType {
	p := new(ESvrType)
	*p = x
	return p
}

func (x ESvrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESvrType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_proxy_proto_enumTypes[1].Descriptor()
}

func (ESvrType) Type() protoreflect.EnumType {
	return &file_fip_proxy_proto_enumTypes[1]
}

func (x ESvrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESvrType.Descriptor instead.
func (ESvrType) EnumDescriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{1}
}

// / 财讯通数据业务类型(暂时 proxy 内部使用)
type EFipDataSvrType int32

const (
	EFipDataSvrType_DataSvrTypeNull        EFipDataSvrType = 0 // 无
	EFipDataSvrType_DomesticLevel1         EFipDataSvrType = 1 // 国内L1
	EFipDataSvrType_DceLevel2              EFipDataSvrType = 2 // 大商所L2
	EFipDataSvrType_DAForeignMarket        EFipDataSvrType = 3 // 直达外盘
	EFipDataSvrType_RefinitivForeignMarket EFipDataSvrType = 4 // EFINITIV （CME、NYMEX、CBOT、COMEX)
)

// Enum value maps for EFipDataSvrType.
var (
	EFipDataSvrType_name = map[int32]string{
		0: "DataSvrTypeNull",
		1: "DomesticLevel1",
		2: "DceLevel2",
		3: "DAForeignMarket",
		4: "RefinitivForeignMarket",
	}
	EFipDataSvrType_value = map[string]int32{
		"DataSvrTypeNull":        0,
		"DomesticLevel1":         1,
		"DceLevel2":              2,
		"DAForeignMarket":        3,
		"RefinitivForeignMarket": 4,
	}
)

func (x EFipDataSvrType) Enum() *EFipDataSvrType {
	p := new(EFipDataSvrType)
	*p = x
	return p
}

func (x EFipDataSvrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFipDataSvrType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_proxy_proto_enumTypes[2].Descriptor()
}

func (EFipDataSvrType) Type() protoreflect.EnumType {
	return &file_fip_proxy_proto_enumTypes[2]
}

func (x EFipDataSvrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFipDataSvrType.Descriptor instead.
func (EFipDataSvrType) EnumDescriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{2}
}

// *
// @brief 服务支持的协议号请求
// @author <wangharoan>
// @date 2017-8-1
// @note 协议号 500
// @modify
type ReqSubOpcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqSubOpcode) Reset() {
	*x = ReqSubOpcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubOpcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubOpcode) ProtoMessage() {}

func (x *ReqSubOpcode) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubOpcode.ProtoReflect.Descriptor instead.
func (*ReqSubOpcode) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{0}
}

// *
// @brief 服务支持的协议号响应
// @author <wangharoan>
// @date 2017-8-1
// @note 协议号 501
// @modify
type RspSubOpcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid    ESvrType `protobuf:"varint,1,opt,name=Bid,proto3,enum=fippb.ESvrType" json:"Bid,omitempty"`
	Opcode []int32  `protobuf:"varint,2,rep,packed,name=Opcode,proto3" json:"Opcode,omitempty"`
}

func (x *RspSubOpcode) Reset() {
	*x = RspSubOpcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubOpcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubOpcode) ProtoMessage() {}

func (x *RspSubOpcode) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubOpcode.ProtoReflect.Descriptor instead.
func (*RspSubOpcode) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *RspSubOpcode) GetBid() ESvrType {
	if x != nil {
		return x.Bid
	}
	return ESvrType_SvrTypeNull
}

func (x *RspSubOpcode) GetOpcode() []int32 {
	if x != nil {
		return x.Opcode
	}
	return nil
}

// *
// @brief 服务端ping请求
// @author <wangharoan>
// @date 2017-8-1
// @note 协议号 502
// @modify
type ReqPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ReqPing) Reset() {
	*x = ReqPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPing) ProtoMessage() {}

func (x *ReqPing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPing.ProtoReflect.Descriptor instead.
func (*ReqPing) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *ReqPing) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 服务端ping响应
// @author <wangharoan>
// @date 2017-8-1
// @note 协议号 503
// @modify
type RspPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RspPing) Reset() {
	*x = RspPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPing) ProtoMessage() {}

func (x *RspPing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPing.ProtoReflect.Descriptor instead.
func (*RspPing) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *RspPing) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 订阅行请求(服务端内部用)
// @author <suzhongpo，mengwen>
// @date 2017-8-2
// @note 协议号 client-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<> real-his:<5003/5006>
// @modify
type ReqSubscribeQuotItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64           `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`        // 账号ID
	MsgId     uint32           `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                // 流水号 ,旧字段名称为requestId
	Req       ReqType          `protobuf:"varint,3,opt,name=req,proto3,enum=fippb.ReqType" json:"req,omitempty"` // 请求类型,旧字段名称为type
	Sub       SubType          `protobuf:"varint,4,opt,name=sub,proto3,enum=fippb.SubType" json:"sub,omitempty"` // 订阅业务类型，例如实时行情/分时/成交明细（新增）
	List      []*SubscribeElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`                   // 订阅列表//旧协议定义中为repeated SubElem subList
}

func (x *ReqSubscribeQuotItem) Reset() {
	*x = ReqSubscribeQuotItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeQuotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeQuotItem) ProtoMessage() {}

func (x *ReqSubscribeQuotItem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeQuotItem.ProtoReflect.Descriptor instead.
func (*ReqSubscribeQuotItem) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *ReqSubscribeQuotItem) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ReqSubscribeQuotItem) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubscribeQuotItem) GetReq() ReqType {
	if x != nil {
		return x.Req
	}
	return ReqType_Add
}

func (x *ReqSubscribeQuotItem) GetSub() SubType {
	if x != nil {
		return x.Sub
	}
	return SubType_Quot
}

func (x *ReqSubscribeQuotItem) GetList() []*SubscribeElem {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 主力合约列表响应(服务端内部用)
// @author <suzhongpo，mengwen>
// @date 2017-9-21
// @note his内部协议
// @note his-his:<> <主力合约7010>
// @modify
type RspHstMajorContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32   `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ErrorId uint32   `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误
	Exchgid EExchgID `protobuf:"varint,3,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	Index   uint32   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool     `protobuf:"varint,5,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	Mclist  []string `protobuf:"bytes,6,rep,name=mclist,proto3" json:"mclist,omitempty"`
}

func (x *RspHstMajorContract) Reset() {
	*x = RspHstMajorContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHstMajorContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHstMajorContract) ProtoMessage() {}

func (x *RspHstMajorContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHstMajorContract.ProtoReflect.Descriptor instead.
func (*RspHstMajorContract) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *RspHstMajorContract) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspHstMajorContract) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspHstMajorContract) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *RspHstMajorContract) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspHstMajorContract) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspHstMajorContract) GetMclist() []string {
	if x != nil {
		return x.Mclist
	}
	return nil
}

// *
// @brief 品种分期列表响应(服务端内部用)
// @author <yinxiaobiao>
// @date 2018-02-27
// @note 内部协议
// @note his-his:<> <主力合约8001>
// @modify
type RspFtrVarietyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32                `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`     // 请求id
	ErrorId uint32                `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"` // 错误
	Finish  bool                  `protobuf:"varint,3,opt,name=Finish,proto3" json:"Finish,omitempty"`   // true:结束；false:分包
	List    []*FtrVarietyInfoElem `protobuf:"bytes,4,rep,name=List,proto3" json:"List,omitempty"`        // 品种分期信息，目前只有期货有分期合约
}

func (x *RspFtrVarietyInfo) Reset() {
	*x = RspFtrVarietyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFtrVarietyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFtrVarietyInfo) ProtoMessage() {}

func (x *RspFtrVarietyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFtrVarietyInfo.ProtoReflect.Descriptor instead.
func (*RspFtrVarietyInfo) Descriptor() ([]byte, []int) {
	return file_fip_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *RspFtrVarietyInfo) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspFtrVarietyInfo) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspFtrVarietyInfo) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFtrVarietyInfo) GetList() []*FtrVarietyInfoElem {
	if x != nil {
		return x.List
	}
	return nil
}

var File_fip_proxy_proto protoreflect.FileDescriptor

var file_fip_proxy_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x0d, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71,
	0x53, 0x75, 0x62, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0c, 0x52, 0x73, 0x70,
	0x53, 0x75, 0x62, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x42, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x53, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x42, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x27, 0x0a,
	0x07, 0x52, 0x73, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x48, 0x73, 0x74, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x52,
	0x73, 0x70, 0x46, 0x74, 0x72, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46,
	0x74, 0x72, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x72, 0x0a, 0x0c, 0x53, 0x76, 0x72, 0x5f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x5f, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x51, 0x5f, 0x53, 0x56,
	0x52, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x10, 0xf4, 0x03, 0x12, 0x15, 0x0a, 0x10,
	0x4f, 0x50, 0x5f, 0x41, 0x5f, 0x53, 0x56, 0x52, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x53,
	0x10, 0xf5, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x51, 0x5f, 0x53, 0x56, 0x52, 0x5f,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0xf6, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x41, 0x5f,
	0x53, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xf7, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x08,
	0x45, 0x53, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x76, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61,
	0x6c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x69, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x65, 0x61, 0x6c, 0x5f, 0x54, 0x53, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x6c, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x54, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x10,
	0x08, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x51,
	0x75, 0x6f, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x0b, 0x2a, 0x7a, 0x0a, 0x0f,
	0x45, 0x46, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x53, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x04, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_proxy_proto_rawDescOnce sync.Once
	file_fip_proxy_proto_rawDescData = file_fip_proxy_proto_rawDesc
)

func file_fip_proxy_proto_rawDescGZIP() []byte {
	file_fip_proxy_proto_rawDescOnce.Do(func() {
		file_fip_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_proxy_proto_rawDescData)
	})
	return file_fip_proxy_proto_rawDescData
}

var file_fip_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fip_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fip_proxy_proto_goTypes = []interface{}{
	(Svr_Protocol)(0),            // 0: fippb.Svr_Protocol
	(ESvrType)(0),                // 1: fippb.ESvrType
	(EFipDataSvrType)(0),         // 2: fippb.EFipDataSvrType
	(*ReqSubOpcode)(nil),         // 3: fippb.ReqSubOpcode
	(*RspSubOpcode)(nil),         // 4: fippb.RspSubOpcode
	(*ReqPing)(nil),              // 5: fippb.ReqPing
	(*RspPing)(nil),              // 6: fippb.RspPing
	(*ReqSubscribeQuotItem)(nil), // 7: fippb.ReqSubscribeQuotItem
	(*RspHstMajorContract)(nil),  // 8: fippb.RspHstMajorContract
	(*RspFtrVarietyInfo)(nil),    // 9: fippb.RspFtrVarietyInfo
	(ReqType)(0),                 // 10: fippb.ReqType
	(SubType)(0),                 // 11: fippb.SubType
	(*SubscribeElem)(nil),        // 12: fippb.SubscribeElem
	(EExchgID)(0),                // 13: fippb.EExchgID
	(*FtrVarietyInfoElem)(nil),   // 14: fippb.FtrVarietyInfoElem
}
var file_fip_proxy_proto_depIdxs = []int32{
	1,  // 0: fippb.RspSubOpcode.Bid:type_name -> fippb.ESvrType
	10, // 1: fippb.ReqSubscribeQuotItem.req:type_name -> fippb.ReqType
	11, // 2: fippb.ReqSubscribeQuotItem.sub:type_name -> fippb.SubType
	12, // 3: fippb.ReqSubscribeQuotItem.List:type_name -> fippb.SubscribeElem
	13, // 4: fippb.RspHstMajorContract.exchgid:type_name -> fippb.EExchgID
	14, // 5: fippb.RspFtrVarietyInfo.List:type_name -> fippb.FtrVarietyInfoElem
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_fip_proxy_proto_init() }
func file_fip_proxy_proto_init() {
	if File_fip_proxy_proto != nil {
		return
	}
	file_fip_def_proto_init()
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubOpcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubOpcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeQuotItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspHstMajorContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFtrVarietyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_proxy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_proxy_proto_goTypes,
		DependencyIndexes: file_fip_proxy_proto_depIdxs,
		EnumInfos:         file_fip_proxy_proto_enumTypes,
		MessageInfos:      file_fip_proxy_proto_msgTypes,
	}.Build()
	File_fip_proxy_proto = out.File
	file_fip_proxy_proto_rawDesc = nil
	file_fip_proxy_proto_goTypes = nil
	file_fip_proxy_proto_depIdxs = nil
}
