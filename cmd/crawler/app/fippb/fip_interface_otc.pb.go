//*
// Copyright (C) 2020-2023，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 场外行情接口proto定义
//
// @author <liuwei，liyu, lichaochao, daihouda>
//
// @date 2020-7-10
// @note 组内评审专家：
// @note 组外评审专家：
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_otc.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 场外行情登录请求
// @author <liuwei>
// @date 2020-7-20
// @note 采集服务内部使用
// @modify
type ReqOtcLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint32 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`      // 流水号
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"` // 用户名
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"` // 密码
}

func (x *ReqOtcLogin) Reset() {
	*x = ReqOtcLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOtcLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOtcLogin) ProtoMessage() {}

func (x *ReqOtcLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOtcLogin.ProtoReflect.Descriptor instead.
func (*ReqOtcLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{0}
}

func (x *ReqOtcLogin) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqOtcLogin) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqOtcLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// *
// @brief 场外行情登录响应
// @author <liuwei>
// @date 2020-7-20
// @note 采集服务内部使用
// @modify
type RspOtcLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint32 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`      // 流水号
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`       // 用户认证码
	ErrorId  uint32 `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；失败，其他，错误
	ErrorMsg string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
}

func (x *RspOtcLogin) Reset() {
	*x = RspOtcLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOtcLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOtcLogin) ProtoMessage() {}

func (x *RspOtcLogin) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOtcLogin.ProtoReflect.Descriptor instead.
func (*RspOtcLogin) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{1}
}

func (x *RspOtcLogin) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOtcLogin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RspOtcLogin) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOtcLogin) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 场外行情品级名称元素
// @author <lichaochao>
// @date 2020-7-10
// @note
// @modify 2020-8-11
type OtcGradeElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GradeId            string   `protobuf:"bytes,1,opt,name=gradeId,proto3" json:"gradeId,omitempty"`                       // 品级名称ID
	GradeName          string   `protobuf:"bytes,2,opt,name=gradeName,proto3" json:"gradeName,omitempty"`                   // 品级名称
	RelatedVarietyList []string `protobuf:"bytes,3,rep,name=relatedVarietyList,proto3" json:"relatedVarietyList,omitempty"` // 品级名称关联的期货品种
}

func (x *OtcGradeElement) Reset() {
	*x = OtcGradeElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcGradeElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcGradeElement) ProtoMessage() {}

func (x *OtcGradeElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcGradeElement.ProtoReflect.Descriptor instead.
func (*OtcGradeElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{2}
}

func (x *OtcGradeElement) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *OtcGradeElement) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *OtcGradeElement) GetRelatedVarietyList() []string {
	if x != nil {
		return x.RelatedVarietyList
	}
	return nil
}

// *
// @brief 场外行情品级名称列表请求
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<>
// @modify 2020-8-11
type ReqOtcGradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
}

func (x *ReqOtcGradeList) Reset() {
	*x = ReqOtcGradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOtcGradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOtcGradeList) ProtoMessage() {}

func (x *ReqOtcGradeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOtcGradeList.ProtoReflect.Descriptor instead.
func (*ReqOtcGradeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{3}
}

func (x *ReqOtcGradeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqOtcGradeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqOtcGradeList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqOtcGradeList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

// *
// @brief 场外行情品级名称列表响应
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<>
// @modify 2020-8-11
type RspOtcGradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID           `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32             `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string             `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	VarietyId string             `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	ErrorId   uint32             `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg  string             `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast    bool               `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	GradeList []*OtcGradeElement `protobuf:"bytes,8,rep,name=gradeList,proto3" json:"gradeList,omitempty"`                  // 场外行情品级名称列表
}

func (x *RspOtcGradeList) Reset() {
	*x = RspOtcGradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOtcGradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOtcGradeList) ProtoMessage() {}

func (x *RspOtcGradeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOtcGradeList.ProtoReflect.Descriptor instead.
func (*RspOtcGradeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{4}
}

func (x *RspOtcGradeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspOtcGradeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOtcGradeList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspOtcGradeList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspOtcGradeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOtcGradeList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspOtcGradeList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOtcGradeList) GetGradeList() []*OtcGradeElement {
	if x != nil {
		return x.GradeList
	}
	return nil
}

// *
// @brief 场外行情品级名称列表推送
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 proxy-real:<>
// @modify 2020-8-11
type NotifyOtcGradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID           `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32             `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string             `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	VarietyId string             `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	ErrorId   uint32             `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg  string             `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast    bool               `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	GradeList []*OtcGradeElement `protobuf:"bytes,8,rep,name=gradeList,proto3" json:"gradeList,omitempty"`                  // 场外行情品级名称列表
}

func (x *NotifyOtcGradeList) Reset() {
	*x = NotifyOtcGradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOtcGradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOtcGradeList) ProtoMessage() {}

func (x *NotifyOtcGradeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOtcGradeList.ProtoReflect.Descriptor instead.
func (*NotifyOtcGradeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{5}
}

func (x *NotifyOtcGradeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyOtcGradeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOtcGradeList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifyOtcGradeList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *NotifyOtcGradeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyOtcGradeList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyOtcGradeList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyOtcGradeList) GetGradeList() []*OtcGradeElement {
	if x != nil {
		return x.GradeList
	}
	return nil
}

// *
// @brief 场外区域名称元素（比如海港大宗的港口）
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 proxy-real:<>
// @modify 2020-8-11
type OtcRegionElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId   string `protobuf:"bytes,1,opt,name=regionId,proto3" json:"regionId,omitempty"`     // 区域名称ID
	RegionName string `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"` // 区域名称
}

func (x *OtcRegionElement) Reset() {
	*x = OtcRegionElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcRegionElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcRegionElement) ProtoMessage() {}

func (x *OtcRegionElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcRegionElement.ProtoReflect.Descriptor instead.
func (*OtcRegionElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{6}
}

func (x *OtcRegionElement) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *OtcRegionElement) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

// *
// @brief 场外区域列表请求
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<>
// @modify 2020-8-11
type ReqOtcRegionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
}

func (x *ReqOtcRegionList) Reset() {
	*x = ReqOtcRegionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOtcRegionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOtcRegionList) ProtoMessage() {}

func (x *ReqOtcRegionList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOtcRegionList.ProtoReflect.Descriptor instead.
func (*ReqOtcRegionList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{7}
}

func (x *ReqOtcRegionList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqOtcRegionList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqOtcRegionList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqOtcRegionList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

// *
// @brief 场外行情品级名称列表响应
// @author <lichaochao>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<>
// @modify 2020-8-11
type RspOtcRegionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID            `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32              `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId   string              `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	VarietyId  string              `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	ErrorId    uint32              `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string              `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast     bool                `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	RegionList []*OtcRegionElement `protobuf:"bytes,8,rep,name=regionList,proto3" json:"regionList,omitempty"`                // 场外行情区域列表
}

func (x *RspOtcRegionList) Reset() {
	*x = RspOtcRegionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOtcRegionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOtcRegionList) ProtoMessage() {}

func (x *RspOtcRegionList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOtcRegionList.ProtoReflect.Descriptor instead.
func (*RspOtcRegionList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{8}
}

func (x *RspOtcRegionList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspOtcRegionList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOtcRegionList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspOtcRegionList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspOtcRegionList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOtcRegionList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspOtcRegionList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOtcRegionList) GetRegionList() []*OtcRegionElement {
	if x != nil {
		return x.RegionList
	}
	return nil
}

// *
// @brief 场外行情品种元素
// @author <liuwei>
// @date 2020-7-10
// @note
// @modify 2020-8-7
type OtcVarietyElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId   string `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`     // 品种ID
	VarietyName string `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"` // 品种名称
}

func (x *OtcVarietyElement) Reset() {
	*x = OtcVarietyElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcVarietyElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcVarietyElement) ProtoMessage() {}

func (x *OtcVarietyElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcVarietyElement.ProtoReflect.Descriptor instead.
func (*OtcVarietyElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{9}
}

func (x *OtcVarietyElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *OtcVarietyElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

// *
// @brief 场外行情品种列表请求
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify 2020-8-7
type ReqOtcVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID     `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32       `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Type     EOtcQuotType `protobuf:"varint,3,opt,name=type,proto3,enum=fippb.EOtcQuotType" json:"type,omitempty"`   // 行情类型：基差，仓单，互换，大宗现货
	MarketId string       `protobuf:"bytes,4,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
}

func (x *ReqOtcVarietyList) Reset() {
	*x = ReqOtcVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOtcVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOtcVarietyList) ProtoMessage() {}

func (x *ReqOtcVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOtcVarietyList.ProtoReflect.Descriptor instead.
func (*ReqOtcVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{10}
}

func (x *ReqOtcVarietyList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqOtcVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqOtcVarietyList) GetType() EOtcQuotType {
	if x != nil {
		return x.Type
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *ReqOtcVarietyList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// *
// @brief 场外行情品种列表响应
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify 2020-8-7
type RspOtcVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId     EExchgID             `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId       uint32               `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Type        EOtcQuotType         `protobuf:"varint,3,opt,name=type,proto3,enum=fippb.EOtcQuotType" json:"type,omitempty"`   // 行情类型：基差，仓单，互换，大宗现货
	MarketId    string               `protobuf:"bytes,4,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	ErrorId     uint32               `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg    string               `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast      bool                 `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	VarietyList []*OtcVarietyElement `protobuf:"bytes,8,rep,name=varietyList,proto3" json:"varietyList,omitempty"`              // 场外行情品种列表
}

func (x *RspOtcVarietyList) Reset() {
	*x = RspOtcVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOtcVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOtcVarietyList) ProtoMessage() {}

func (x *RspOtcVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOtcVarietyList.ProtoReflect.Descriptor instead.
func (*RspOtcVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{11}
}

func (x *RspOtcVarietyList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspOtcVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOtcVarietyList) GetType() EOtcQuotType {
	if x != nil {
		return x.Type
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *RspOtcVarietyList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspOtcVarietyList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOtcVarietyList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspOtcVarietyList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOtcVarietyList) GetVarietyList() []*OtcVarietyElement {
	if x != nil {
		return x.VarietyList
	}
	return nil
}

// *
// @brief 基差行情品种列表的全量推送通知
// @author <liyu>
// @date 2020-7-28
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify 2020-8-7
type NotifyOtcVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId     EExchgID             `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId       uint32               `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Type        EOtcQuotType         `protobuf:"varint,3,opt,name=type,proto3,enum=fippb.EOtcQuotType" json:"type,omitempty"`   // 行情类型：基差，仓单，互换，大宗现货
	MarketId    string               `protobuf:"bytes,4,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 合作机构代码
	ErrorId     uint32               `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg    string               `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast      bool                 `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	VarietyList []*OtcVarietyElement `protobuf:"bytes,8,rep,name=varietyList,proto3" json:"varietyList,omitempty"`              // 场外行情品种列表
}

func (x *NotifyOtcVarietyList) Reset() {
	*x = NotifyOtcVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOtcVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOtcVarietyList) ProtoMessage() {}

func (x *NotifyOtcVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOtcVarietyList.ProtoReflect.Descriptor instead.
func (*NotifyOtcVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyOtcVarietyList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyOtcVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOtcVarietyList) GetType() EOtcQuotType {
	if x != nil {
		return x.Type
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *NotifyOtcVarietyList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifyOtcVarietyList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyOtcVarietyList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyOtcVarietyList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyOtcVarietyList) GetVarietyList() []*OtcVarietyElement {
	if x != nil {
		return x.VarietyList
	}
	return nil
}

// *
// @brief 基差行情订阅请求
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type ReqSubscribeBasisQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`         // 交易所id
	MsgId         uint32           `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                                 // 流水号
	ReqType       ReqSubscribeType `protobuf:"varint,3,opt,name=reqType,proto3,enum=fippb.ReqSubscribeType" json:"reqType,omitempty"` // 请求订阅行情类型
	VarietyIdList []string         `protobuf:"bytes,4,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`                  // 品种ID列表
}

func (x *ReqSubscribeBasisQuot) Reset() {
	*x = ReqSubscribeBasisQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeBasisQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeBasisQuot) ProtoMessage() {}

func (x *ReqSubscribeBasisQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeBasisQuot.ProtoReflect.Descriptor instead.
func (*ReqSubscribeBasisQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{13}
}

func (x *ReqSubscribeBasisQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSubscribeBasisQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubscribeBasisQuot) GetReqType() ReqSubscribeType {
	if x != nil {
		return x.ReqType
	}
	return ReqSubscribeType_RST_Add
}

func (x *ReqSubscribeBasisQuot) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

// *
// @brief 基差行情订阅响应
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type RspSubscribeBasisQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId  uint32   `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string   `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
}

func (x *RspSubscribeBasisQuot) Reset() {
	*x = RspSubscribeBasisQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeBasisQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeBasisQuot) ProtoMessage() {}

func (x *RspSubscribeBasisQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeBasisQuot.ProtoReflect.Descriptor instead.
func (*RspSubscribeBasisQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{14}
}

func (x *RspSubscribeBasisQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSubscribeBasisQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSubscribeBasisQuot) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSubscribeBasisQuot) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 基差行情元素
// @author <liuwei>
// @date 2020-7-14
// @note
// @modify
type BasisQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId              string  `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`                            // 市场编号
	ContractId            string  `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                        // 合同编号
	VarietyId             string  `protobuf:"bytes,3,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                          // 品种编号
	VarietyName           string  `protobuf:"bytes,4,opt,name=varietyName,proto3" json:"varietyName,omitempty"`                      // 品种
	RefContractId         string  `protobuf:"bytes,5,opt,name=refContractId,proto3" json:"refContractId,omitempty"`                  // 基准期货合约
	RefContractPrice      string  `protobuf:"bytes,6,opt,name=refContractPrice,proto3" json:"refContractPrice,omitempty"`            // 基差（基准期货合约+基差报价，如：i2009+10）
	RefPrice              float64 `protobuf:"fixed64,7,opt,name=refPrice,proto3" json:"refPrice,omitempty"`                          // 基差
	Price                 float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`                                // 实时一口价
	PricingBsFlagName     string  `protobuf:"bytes,9,opt,name=pricingBsFlagName,proto3" json:"pricingBsFlagName,omitempty"`          // 方向
	PricingBsFlag         string  `protobuf:"bytes,10,opt,name=pricingBsFlag,proto3" json:"pricingBsFlag,omitempty"`                 // 方向编号
	EndClearDate          string  `protobuf:"bytes,11,opt,name=endClearDate,proto3" json:"endClearDate,omitempty"`                   // 最后交收日
	EndTradeDate          string  `protobuf:"bytes,12,opt,name=endTradeDate,proto3" json:"endTradeDate,omitempty"`                   // 最后点价日
	Region                string  `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`                               // 交货地
	RegionId              string  `protobuf:"bytes,14,opt,name=regionId,proto3" json:"regionId,omitempty"`                           // 交货地编号
	Qty                   int64   `protobuf:"varint,15,opt,name=qty,proto3" json:"qty,omitempty"`                                    // 数量（吨）
	Grade                 string  `protobuf:"bytes,16,opt,name=grade,proto3" json:"grade,omitempty"`                                 // 品级
	GradeId               string  `protobuf:"bytes,17,opt,name=gradeId,proto3" json:"gradeId,omitempty"`                             // 品级编号
	Comments              string  `protobuf:"bytes,18,opt,name=comments,proto3" json:"comments,omitempty"`                           // 品级说明
	StatusName            string  `protobuf:"bytes,19,opt,name=statusName,proto3" json:"statusName,omitempty"`                       // 状态
	Status                string  `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`                               // 状态编号
	StartTradeDate        string  `protobuf:"bytes,21,opt,name=startTradeDate,proto3" json:"startTradeDate,omitempty"`               // 开始交易日
	IfFtsName             string  `protobuf:"bytes,22,opt,name=ifFtsName,proto3" json:"ifFtsName,omitempty"`                         // 是否期转现业务
	IfFts                 string  `protobuf:"bytes,23,opt,name=ifFts,proto3" json:"ifFts,omitempty"`                                 // 是否期转现业务编号
	IfDeliClearName       string  `protobuf:"bytes,24,opt,name=ifDeliClearName,proto3" json:"ifDeliClearName,omitempty"`             // 是否利用平台结算
	IfDeliClear           string  `protobuf:"bytes,25,opt,name=ifDeliClear,proto3" json:"ifDeliClear,omitempty"`                     // 是否利用平台结算编号
	PriceDeliveryTypeName string  `protobuf:"bytes,26,opt,name=priceDeliveryTypeName,proto3" json:"priceDeliveryTypeName,omitempty"` // 点价方
	PriceDeliveryType     string  `protobuf:"bytes,27,opt,name=priceDeliveryType,proto3" json:"priceDeliveryType,omitempty"`         // 点价方编号
	BuyMarginRate         float64 `protobuf:"fixed64,28,opt,name=buyMarginRate,proto3" json:"buyMarginRate,omitempty"`               // 买方交易保证金率
	SellMarginRate        float64 `protobuf:"fixed64,29,opt,name=sellMarginRate,proto3" json:"sellMarginRate,omitempty"`             // 卖方交易保证金率
	BuyDeliMarginRate     float64 `protobuf:"fixed64,30,opt,name=buyDeliMarginRate,proto3" json:"buyDeliMarginRate,omitempty"`       // 买方交收保证金率
	SellDeliMarginRate    float64 `protobuf:"fixed64,31,opt,name=sellDeliMarginRate,proto3" json:"sellDeliMarginRate,omitempty"`     // 卖方交收保证金率
	IfTransferName        string  `protobuf:"bytes,32,opt,name=ifTransferName,proto3" json:"ifTransferName,omitempty"`               // 是否可转让
	IfTransfer            string  `protobuf:"bytes,33,opt,name=ifTransfer,proto3" json:"ifTransfer,omitempty"`                       // 是否可转让编号
	PursuingInsuranceName string  `protobuf:"bytes,34,opt,name=pursuingInsuranceName,proto3" json:"pursuingInsuranceName,omitempty"` // 追保方
	PursuingInsurance     string  `protobuf:"bytes,35,opt,name=pursuingInsurance,proto3" json:"pursuingInsurance,omitempty"`         // 追保方编号
	TradeDate             string  `protobuf:"bytes,36,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                         // 报价日期
	OrderTime             string  `protobuf:"bytes,37,opt,name=orderTime,proto3" json:"orderTime,omitempty"`                         // 报价时间
	OrderNo               string  `protobuf:"bytes,38,opt,name=orderNo,proto3" json:"orderNo,omitempty"`                             // 系统委托号
	NominalMatchAmt       float64 `protobuf:"fixed64,39,opt,name=nominalMatchAmt,proto3" json:"nominalMatchAmt,omitempty"`           // 名义成交金额（万元）
	GenTime               uint64  `protobuf:"varint,40,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // 辅助字段，通过日期和时间计算得到毫秒值
}

func (x *BasisQuotElement) Reset() {
	*x = BasisQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasisQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasisQuotElement) ProtoMessage() {}

func (x *BasisQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasisQuotElement.ProtoReflect.Descriptor instead.
func (*BasisQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{15}
}

func (x *BasisQuotElement) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *BasisQuotElement) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *BasisQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *BasisQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *BasisQuotElement) GetRefContractId() string {
	if x != nil {
		return x.RefContractId
	}
	return ""
}

func (x *BasisQuotElement) GetRefContractPrice() string {
	if x != nil {
		return x.RefContractPrice
	}
	return ""
}

func (x *BasisQuotElement) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *BasisQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BasisQuotElement) GetPricingBsFlagName() string {
	if x != nil {
		return x.PricingBsFlagName
	}
	return ""
}

func (x *BasisQuotElement) GetPricingBsFlag() string {
	if x != nil {
		return x.PricingBsFlag
	}
	return ""
}

func (x *BasisQuotElement) GetEndClearDate() string {
	if x != nil {
		return x.EndClearDate
	}
	return ""
}

func (x *BasisQuotElement) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *BasisQuotElement) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BasisQuotElement) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *BasisQuotElement) GetQty() int64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

func (x *BasisQuotElement) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *BasisQuotElement) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *BasisQuotElement) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *BasisQuotElement) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *BasisQuotElement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BasisQuotElement) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *BasisQuotElement) GetIfFtsName() string {
	if x != nil {
		return x.IfFtsName
	}
	return ""
}

func (x *BasisQuotElement) GetIfFts() string {
	if x != nil {
		return x.IfFts
	}
	return ""
}

func (x *BasisQuotElement) GetIfDeliClearName() string {
	if x != nil {
		return x.IfDeliClearName
	}
	return ""
}

func (x *BasisQuotElement) GetIfDeliClear() string {
	if x != nil {
		return x.IfDeliClear
	}
	return ""
}

func (x *BasisQuotElement) GetPriceDeliveryTypeName() string {
	if x != nil {
		return x.PriceDeliveryTypeName
	}
	return ""
}

func (x *BasisQuotElement) GetPriceDeliveryType() string {
	if x != nil {
		return x.PriceDeliveryType
	}
	return ""
}

func (x *BasisQuotElement) GetBuyMarginRate() float64 {
	if x != nil {
		return x.BuyMarginRate
	}
	return 0
}

func (x *BasisQuotElement) GetSellMarginRate() float64 {
	if x != nil {
		return x.SellMarginRate
	}
	return 0
}

func (x *BasisQuotElement) GetBuyDeliMarginRate() float64 {
	if x != nil {
		return x.BuyDeliMarginRate
	}
	return 0
}

func (x *BasisQuotElement) GetSellDeliMarginRate() float64 {
	if x != nil {
		return x.SellDeliMarginRate
	}
	return 0
}

func (x *BasisQuotElement) GetIfTransferName() string {
	if x != nil {
		return x.IfTransferName
	}
	return ""
}

func (x *BasisQuotElement) GetIfTransfer() string {
	if x != nil {
		return x.IfTransfer
	}
	return ""
}

func (x *BasisQuotElement) GetPursuingInsuranceName() string {
	if x != nil {
		return x.PursuingInsuranceName
	}
	return ""
}

func (x *BasisQuotElement) GetPursuingInsurance() string {
	if x != nil {
		return x.PursuingInsurance
	}
	return ""
}

func (x *BasisQuotElement) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BasisQuotElement) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *BasisQuotElement) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *BasisQuotElement) GetNominalMatchAmt() float64 {
	if x != nil {
		return x.NominalMatchAmt
	}
	return 0
}

func (x *BasisQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 基差报价行情列表请求，报价只有当天的数据，响应全部报价数据
// @author <lichaochao>
// @date 2020-09-01
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type ReqBasisOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId         uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyIdList []string `protobuf:"bytes,3,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`          // 品种ID列表
}

func (x *ReqBasisOrderQuotList) Reset() {
	*x = ReqBasisOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBasisOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBasisOrderQuotList) ProtoMessage() {}

func (x *ReqBasisOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBasisOrderQuotList.ProtoReflect.Descriptor instead.
func (*ReqBasisOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{16}
}

func (x *ReqBasisOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqBasisOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqBasisOrderQuotList) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

// *
// @brief 基差成交行情列表请求，成交包含历史数据
// @author <lichaochao>
// @date 2020-09-01
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type ReqBasisMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId         uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyIdList []string `protobuf:"bytes,3,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`          // 品种ID列表
	GenTime       uint64   `protobuf:"varint,4,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 移动端分页的请求，数据必填
	Count         int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                         // 请求数量， count >0 查询 >genTime的数据 <0 查询<genTime的数据 =0 无数据
}

func (x *ReqBasisMatchQuotList) Reset() {
	*x = ReqBasisMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBasisMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBasisMatchQuotList) ProtoMessage() {}

func (x *ReqBasisMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBasisMatchQuotList.ProtoReflect.Descriptor instead.
func (*ReqBasisMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{17}
}

func (x *ReqBasisMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqBasisMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqBasisMatchQuotList) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

func (x *ReqBasisMatchQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqBasisMatchQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 基差行情列表响应
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type RspBasisQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId     EExchgID            `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId       uint32              `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	OrderStatus string              `protobuf:"bytes,3,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`              // 状态 o，报价；c，成交
	ErrorId     uint32              `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg    string              `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo     uint64              `protobuf:"varint,6,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo  uint64              `protobuf:"varint,7,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast      bool                `protobuf:"varint,8,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList    []*BasisQuotElement `protobuf:"bytes,9,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 基差行情列表
}

func (x *RspBasisQuotList) Reset() {
	*x = RspBasisQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspBasisQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspBasisQuotList) ProtoMessage() {}

func (x *RspBasisQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspBasisQuotList.ProtoReflect.Descriptor instead.
func (*RspBasisQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{18}
}

func (x *RspBasisQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspBasisQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspBasisQuotList) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *RspBasisQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspBasisQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspBasisQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspBasisQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspBasisQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspBasisQuotList) GetQuotList() []*BasisQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 基差行情增量行情
// @author <liuwei>
// @date 2020-7-10
// @note 主键为varietyId+tradeDate+marketId+orderNo
// @modify 2020-9-01
type BasisQuotIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreType   EElementIncrequotType `protobuf:"varint,1,opt,name=IncreType,proto3,enum=fippb.EElementIncrequotType" json:"IncreType,omitempty"` // 基差行情变化类型
	QuotElement *BasisQuotElement     `protobuf:"bytes,2,opt,name=quotElement,proto3" json:"quotElement,omitempty"`                               // 基差行情元素
}

func (x *BasisQuotIncrement) Reset() {
	*x = BasisQuotIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasisQuotIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasisQuotIncrement) ProtoMessage() {}

func (x *BasisQuotIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasisQuotIncrement.ProtoReflect.Descriptor instead.
func (*BasisQuotIncrement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{19}
}

func (x *BasisQuotIncrement) GetIncreType() EElementIncrequotType {
	if x != nil {
		return x.IncreType
	}
	return EElementIncrequotType_EIQT_Add
}

func (x *BasisQuotIncrement) GetQuotElement() *BasisQuotElement {
	if x != nil {
		return x.QuotElement
	}
	return nil
}

// *
// @brief 基差行情增量行情推送通知
// @author <liuwei>
// @date 2020-7-10
// @note 协议号 collector-real<>real-proxy:<> proxy-client<>
// @note 订阅的时候全量推送一次，后续进行增量推送
// @modify 2020-9-07
type NotifyBasisQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId     EExchgID              `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId       uint32                `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyId   string                `protobuf:"bytes,3,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	TradeDate   string                `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	OrderStatus string                `protobuf:"bytes,5,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`              // 状态 o，报价；c，成交
	ErrorId     uint32                `protobuf:"varint,6,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg    string                `protobuf:"bytes,7,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo     uint64                `protobuf:"varint,8,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo  uint64                `protobuf:"varint,9,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast      bool                  `protobuf:"varint,10,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // true:结束；false:分包
	QuotList    []*BasisQuotIncrement `protobuf:"bytes,11,rep,name=quotList,proto3" json:"quotList,omitempty"`                   // 基差行情列表
}

func (x *NotifyBasisQuotList) Reset() {
	*x = NotifyBasisQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyBasisQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyBasisQuotList) ProtoMessage() {}

func (x *NotifyBasisQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyBasisQuotList.ProtoReflect.Descriptor instead.
func (*NotifyBasisQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{20}
}

func (x *NotifyBasisQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyBasisQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyBasisQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *NotifyBasisQuotList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyBasisQuotList) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *NotifyBasisQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyBasisQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyBasisQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifyBasisQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifyBasisQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyBasisQuotList) GetQuotList() []*BasisQuotIncrement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单增量行情订阅请求
// @author <lichaochao>
// @date 2020-9-16
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type ReqSubscribeWbillQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`         // 交易所id
	MsgId         uint32           `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                                 // 流水号
	QuotType      WbillQuotType    `protobuf:"varint,3,opt,name=quotType,proto3,enum=fippb.WbillQuotType" json:"quotType,omitempty"`  // 仓单的行情类型
	ReqType       ReqSubscribeType `protobuf:"varint,4,opt,name=reqType,proto3,enum=fippb.ReqSubscribeType" json:"reqType,omitempty"` // 请求订阅行情类型
	VarietyIdList []string         `protobuf:"bytes,5,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`                  // 品种ID列表
}

func (x *ReqSubscribeWbillQuot) Reset() {
	*x = ReqSubscribeWbillQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeWbillQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeWbillQuot) ProtoMessage() {}

func (x *ReqSubscribeWbillQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeWbillQuot.ProtoReflect.Descriptor instead.
func (*ReqSubscribeWbillQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{21}
}

func (x *ReqSubscribeWbillQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSubscribeWbillQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubscribeWbillQuot) GetQuotType() WbillQuotType {
	if x != nil {
		return x.QuotType
	}
	return WbillQuotType_WQT_OrderQuot
}

func (x *ReqSubscribeWbillQuot) GetReqType() ReqSubscribeType {
	if x != nil {
		return x.ReqType
	}
	return ReqSubscribeType_RST_Add
}

func (x *ReqSubscribeWbillQuot) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

// *
// @brief 仓单增量行情订阅响应
// @author <lichaochao>
// @date 2020-9-16
// @note 协议号 client-proxy:<> proxy-real:<> real-collector
// @modify
type RspSubscribeWbillQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId  uint32   `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string   `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
}

func (x *RspSubscribeWbillQuot) Reset() {
	*x = RspSubscribeWbillQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeWbillQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeWbillQuot) ProtoMessage() {}

func (x *RspSubscribeWbillQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeWbillQuot.ProtoReflect.Descriptor instead.
func (*RspSubscribeWbillQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{22}
}

func (x *RspSubscribeWbillQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSubscribeWbillQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSubscribeWbillQuot) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSubscribeWbillQuot) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 仓单报价行情元素
// @author <liuwei>
// @date 2020-09-16
// @note
// @modify  2020-11-16
// @modify  2020-11-25 调整whCode:15->3
type WbillOrderQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId   string  `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`        // 品种Id
	VarietyName string  `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"`    // 品种
	WhCode      string  `protobuf:"bytes,3,opt,name=whCode,proto3" json:"whCode,omitempty"`              // 仓库号
	WhAbbr      string  `protobuf:"bytes,4,opt,name=whAbbr,proto3" json:"whAbbr,omitempty"`              // 仓库
	InQty       uint64  `protobuf:"varint,5,opt,name=inQty,proto3" json:"inQty,omitempty"`               // 数量(手)
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`              // 价格(元/吨)
	Status      string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`              // 状态编号    7-报价，8-成交
	StatusName  string  `protobuf:"bytes,8,opt,name=statusName,proto3" json:"statusName,omitempty"`      // 状态名称
	SeqNo       string  `protobuf:"bytes,9,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                // 流水号
	OpDate      string  `protobuf:"bytes,10,opt,name=opDate,proto3" json:"opDate,omitempty"`             // 日期
	OpTime      string  `protobuf:"bytes,11,opt,name=opTime,proto3" json:"opTime,omitempty"`             // 时间
	BsFlag      string  `protobuf:"bytes,12,opt,name=bsFlag,proto3" json:"bsFlag,omitempty"`             // 买卖方向
	BsFlagName  string  `protobuf:"bytes,13,opt,name=bsFlagName,proto3" json:"bsFlagName,omitempty"`     // 买卖方向名称
	ApplyWeight float64 `protobuf:"fixed64,14,opt,name=applyWeight,proto3" json:"applyWeight,omitempty"` // 报价量（吨）
	GenTime     uint64  `protobuf:"varint,15,opt,name=genTime,proto3" json:"genTime,omitempty"`          // 辅助字段，模拟一个时间戳
}

func (x *WbillOrderQuotElement) Reset() {
	*x = WbillOrderQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillOrderQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillOrderQuotElement) ProtoMessage() {}

func (x *WbillOrderQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillOrderQuotElement.ProtoReflect.Descriptor instead.
func (*WbillOrderQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{23}
}

func (x *WbillOrderQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *WbillOrderQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *WbillOrderQuotElement) GetWhCode() string {
	if x != nil {
		return x.WhCode
	}
	return ""
}

func (x *WbillOrderQuotElement) GetWhAbbr() string {
	if x != nil {
		return x.WhAbbr
	}
	return ""
}

func (x *WbillOrderQuotElement) GetInQty() uint64 {
	if x != nil {
		return x.InQty
	}
	return 0
}

func (x *WbillOrderQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WbillOrderQuotElement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WbillOrderQuotElement) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *WbillOrderQuotElement) GetSeqNo() string {
	if x != nil {
		return x.SeqNo
	}
	return ""
}

func (x *WbillOrderQuotElement) GetOpDate() string {
	if x != nil {
		return x.OpDate
	}
	return ""
}

func (x *WbillOrderQuotElement) GetOpTime() string {
	if x != nil {
		return x.OpTime
	}
	return ""
}

func (x *WbillOrderQuotElement) GetBsFlag() string {
	if x != nil {
		return x.BsFlag
	}
	return ""
}

func (x *WbillOrderQuotElement) GetBsFlagName() string {
	if x != nil {
		return x.BsFlagName
	}
	return ""
}

func (x *WbillOrderQuotElement) GetApplyWeight() float64 {
	if x != nil {
		return x.ApplyWeight
	}
	return 0
}

func (x *WbillOrderQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 仓单报价行情列表请求
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 client-proxy:<> proxy-real:<>real-collector
// @modify
type ReqWbillOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId         uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyIdList []string `protobuf:"bytes,3,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`          // 品种ID列表
}

func (x *ReqWbillOrderQuotList) Reset() {
	*x = ReqWbillOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWbillOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWbillOrderQuotList) ProtoMessage() {}

func (x *ReqWbillOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWbillOrderQuotList.ProtoReflect.Descriptor instead.
func (*ReqWbillOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{24}
}

func (x *ReqWbillOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqWbillOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqWbillOrderQuotList) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

// *
// @brief 仓单报价行情列表响应
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 client-proxy:<> proxy-real:<>real-collector
// @modify
type RspWbillOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                 `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId    uint32                   `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                   `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                   `protobuf:"varint,5,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                   `protobuf:"varint,6,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                     `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillOrderQuotElement `protobuf:"bytes,8,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 仓单报价行情列表
}

func (x *RspWbillOrderQuotList) Reset() {
	*x = RspWbillOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspWbillOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspWbillOrderQuotList) ProtoMessage() {}

func (x *RspWbillOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspWbillOrderQuotList.ProtoReflect.Descriptor instead.
func (*RspWbillOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{25}
}

func (x *RspWbillOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspWbillOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspWbillOrderQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspWbillOrderQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspWbillOrderQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspWbillOrderQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspWbillOrderQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspWbillOrderQuotList) GetQuotList() []*WbillOrderQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单报价增量行情元素
// @author <liuwei>
// @date 2020-09-16
// @note
// @modify
type WbillOrderQuotIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreType   EElementIncrequotType  `protobuf:"varint,1,opt,name=IncreType,proto3,enum=fippb.EElementIncrequotType" json:"IncreType,omitempty"` // 行情变化类型
	QuotElement *WbillOrderQuotElement `protobuf:"bytes,2,opt,name=quotElement,proto3" json:"quotElement,omitempty"`                               // 仓单报价行情元素
}

func (x *WbillOrderQuotIncrement) Reset() {
	*x = WbillOrderQuotIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillOrderQuotIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillOrderQuotIncrement) ProtoMessage() {}

func (x *WbillOrderQuotIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillOrderQuotIncrement.ProtoReflect.Descriptor instead.
func (*WbillOrderQuotIncrement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{26}
}

func (x *WbillOrderQuotIncrement) GetIncreType() EElementIncrequotType {
	if x != nil {
		return x.IncreType
	}
	return EElementIncrequotType_EIQT_Add
}

func (x *WbillOrderQuotIncrement) GetQuotElement() *WbillOrderQuotElement {
	if x != nil {
		return x.QuotElement
	}
	return nil
}

// *
// @brief 仓单报价行情列表推送通知
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 collector-real
// @note 定时推送，实时行情进行过滤
// @modify
type NotifyWbillOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	TradeDate  string                     `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	ErrorId    uint32                     `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                     `protobuf:"varint,6,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                     `protobuf:"varint,7,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                       `protobuf:"varint,8,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillOrderQuotIncrement `protobuf:"bytes,9,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 仓单报价行情列表
}

func (x *NotifyWbillOrderQuotList) Reset() {
	*x = NotifyWbillOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyWbillOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyWbillOrderQuotList) ProtoMessage() {}

func (x *NotifyWbillOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyWbillOrderQuotList.ProtoReflect.Descriptor instead.
func (*NotifyWbillOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{27}
}

func (x *NotifyWbillOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyWbillOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyWbillOrderQuotList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyWbillOrderQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyWbillOrderQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyWbillOrderQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifyWbillOrderQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifyWbillOrderQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyWbillOrderQuotList) GetQuotList() []*WbillOrderQuotIncrement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单成交汇总行情元素
// @author <liuwei>
// @date 2020-09-16
// @note
// @modify  2020-09-22
type WbillMatchQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId     string  `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`            // 品种ID
	VarietyName   string  `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"`        // 品种
	WhCode        string  `protobuf:"bytes,3,opt,name=whCode,proto3" json:"whCode,omitempty"`                  // 仓库编号
	WhAbbr        string  `protobuf:"bytes,4,opt,name=whAbbr,proto3" json:"whAbbr,omitempty"`                  // 仓库
	MatchTotQty   uint64  `protobuf:"varint,5,opt,name=matchTotQty,proto3" json:"matchTotQty,omitempty"`       // 成交量
	Turnover      float64 `protobuf:"fixed64,6,opt,name=turnover,proto3" json:"turnover,omitempty"`            // 成交额
	LastPrice     float64 `protobuf:"fixed64,7,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`          // 最新价
	OpenPrice     float64 `protobuf:"fixed64,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`          // 今开盘
	HighPrice     float64 `protobuf:"fixed64,9,opt,name=highPrice,proto3" json:"highPrice,omitempty"`          // 最高价
	LowPrice      float64 `protobuf:"fixed64,10,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`           // 最低价
	RiseFall      float64 `protobuf:"fixed64,11,opt,name=riseFall,proto3" json:"riseFall,omitempty"`           // 涨跌
	RiseFallRange float64 `protobuf:"fixed64,12,opt,name=riseFallRange,proto3" json:"riseFallRange,omitempty"` // 涨跌幅
	ConfirmDate   string  `protobuf:"bytes,13,opt,name=confirmDate,proto3" json:"confirmDate,omitempty"`       // 成交日期
	MatchWeight   float64 `protobuf:"fixed64,14,opt,name=matchWeight,proto3" json:"matchWeight,omitempty"`     // 成交量（吨）
	GenTime       uint64  `protobuf:"varint,15,opt,name=genTime,proto3" json:"genTime,omitempty"`              // 辅助字段，模拟一个时间戳
}

func (x *WbillMatchQuotElement) Reset() {
	*x = WbillMatchQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillMatchQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillMatchQuotElement) ProtoMessage() {}

func (x *WbillMatchQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillMatchQuotElement.ProtoReflect.Descriptor instead.
func (*WbillMatchQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{28}
}

func (x *WbillMatchQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *WbillMatchQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *WbillMatchQuotElement) GetWhCode() string {
	if x != nil {
		return x.WhCode
	}
	return ""
}

func (x *WbillMatchQuotElement) GetWhAbbr() string {
	if x != nil {
		return x.WhAbbr
	}
	return ""
}

func (x *WbillMatchQuotElement) GetMatchTotQty() uint64 {
	if x != nil {
		return x.MatchTotQty
	}
	return 0
}

func (x *WbillMatchQuotElement) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *WbillMatchQuotElement) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *WbillMatchQuotElement) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *WbillMatchQuotElement) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *WbillMatchQuotElement) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *WbillMatchQuotElement) GetRiseFall() float64 {
	if x != nil {
		return x.RiseFall
	}
	return 0
}

func (x *WbillMatchQuotElement) GetRiseFallRange() float64 {
	if x != nil {
		return x.RiseFallRange
	}
	return 0
}

func (x *WbillMatchQuotElement) GetConfirmDate() string {
	if x != nil {
		return x.ConfirmDate
	}
	return ""
}

func (x *WbillMatchQuotElement) GetMatchWeight() float64 {
	if x != nil {
		return x.MatchWeight
	}
	return 0
}

func (x *WbillMatchQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 仓单成交汇总行情列表请求
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 client-proxy:<> proxy-hist:<>hist-collector
// @modify
type ReqWbillMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId         uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyIdList []string `protobuf:"bytes,3,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`          // 品种ID列表
	GenTime       uint64   `protobuf:"varint,4,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 移动端分页的请求，数据必填
	Count         int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                         // 请求数量， count >0 查询 >genTime的数据 <0 查询<genTime的数据 =0 无数据
}

func (x *ReqWbillMatchQuotList) Reset() {
	*x = ReqWbillMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWbillMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWbillMatchQuotList) ProtoMessage() {}

func (x *ReqWbillMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWbillMatchQuotList.ProtoReflect.Descriptor instead.
func (*ReqWbillMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{29}
}

func (x *ReqWbillMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqWbillMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqWbillMatchQuotList) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

func (x *ReqWbillMatchQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqWbillMatchQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 仓单成交汇总行情列表响应
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 client-proxy:<> proxy-real:<>real-collector
// @modify
type RspWbillMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                 `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId    uint32                   `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                   `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                   `protobuf:"varint,5,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                   `protobuf:"varint,6,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                     `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillMatchQuotElement `protobuf:"bytes,8,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 仓单成交行情列表
}

func (x *RspWbillMatchQuotList) Reset() {
	*x = RspWbillMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspWbillMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspWbillMatchQuotList) ProtoMessage() {}

func (x *RspWbillMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspWbillMatchQuotList.ProtoReflect.Descriptor instead.
func (*RspWbillMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{30}
}

func (x *RspWbillMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspWbillMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspWbillMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspWbillMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspWbillMatchQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspWbillMatchQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspWbillMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspWbillMatchQuotList) GetQuotList() []*WbillMatchQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单成交增量汇总行情元素
// @author <liuwei>
// @date 2020-09-16
// @note
// @modify
type WbillMatchQuotIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreType   EElementIncrequotType  `protobuf:"varint,1,opt,name=IncreType,proto3,enum=fippb.EElementIncrequotType" json:"IncreType,omitempty"` // 行情变化类型
	QuotElement *WbillMatchQuotElement `protobuf:"bytes,2,opt,name=quotElement,proto3" json:"quotElement,omitempty"`                               // 仓单成交行情元素
}

func (x *WbillMatchQuotIncrement) Reset() {
	*x = WbillMatchQuotIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillMatchQuotIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillMatchQuotIncrement) ProtoMessage() {}

func (x *WbillMatchQuotIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillMatchQuotIncrement.ProtoReflect.Descriptor instead.
func (*WbillMatchQuotIncrement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{31}
}

func (x *WbillMatchQuotIncrement) GetIncreType() EElementIncrequotType {
	if x != nil {
		return x.IncreType
	}
	return EElementIncrequotType_EIQT_Add
}

func (x *WbillMatchQuotIncrement) GetQuotElement() *WbillMatchQuotElement {
	if x != nil {
		return x.QuotElement
	}
	return nil
}

// *
// @brief 仓单成交汇总行情列表推送通知
// @author <liuwei>
// @date 2020-09-16
// @note 协议号 collector-hist
// @note 定时推送，实时行情进行过滤
// @modify  20201023 增加结果数据类型
type NotifyWbillMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	TradeDate  string                     `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	ResultType string                     `protobuf:"bytes,4,opt,name=resultType,proto3" json:"resultType,omitempty"`                // 结果数据类型
	ErrorId    uint32                     `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                     `protobuf:"varint,7,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                     `protobuf:"varint,8,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                       `protobuf:"varint,9,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillMatchQuotIncrement `protobuf:"bytes,10,rep,name=quotList,proto3" json:"quotList,omitempty"`                   // 仓单成交行情列表
}

func (x *NotifyWbillMatchQuotList) Reset() {
	*x = NotifyWbillMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyWbillMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyWbillMatchQuotList) ProtoMessage() {}

func (x *NotifyWbillMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyWbillMatchQuotList.ProtoReflect.Descriptor instead.
func (*NotifyWbillMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{32}
}

func (x *NotifyWbillMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyWbillMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyWbillMatchQuotList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyWbillMatchQuotList) GetResultType() string {
	if x != nil {
		return x.ResultType
	}
	return ""
}

func (x *NotifyWbillMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyWbillMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyWbillMatchQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifyWbillMatchQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifyWbillMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyWbillMatchQuotList) GetQuotList() []*WbillMatchQuotIncrement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单成交逐笔行情元素
// @author <liuwei>
// @date 2020-09-22
// @note
// @modify
type WbillMatchDetailQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId   string  `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`        // 品种ID
	VarietyName string  `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"`    // 品种
	WhCode      string  `protobuf:"bytes,3,opt,name=whCode,proto3" json:"whCode,omitempty"`              // 仓库编号
	WhAbbr      string  `protobuf:"bytes,4,opt,name=whAbbr,proto3" json:"whAbbr,omitempty"`              // 仓库
	InQty       uint64  `protobuf:"varint,5,opt,name=inQty,proto3" json:"inQty,omitempty"`               // 数量(手)
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`              // 价格(元/吨)
	Status      string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`              // 状态编号
	StatusName  string  `protobuf:"bytes,8,opt,name=statusName,proto3" json:"statusName,omitempty"`      // 状态名称
	SeqNo       string  `protobuf:"bytes,9,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                // 流水号
	OpDate      string  `protobuf:"bytes,10,opt,name=opDate,proto3" json:"opDate,omitempty"`             // 日期
	OpTime      string  `protobuf:"bytes,11,opt,name=opTime,proto3" json:"opTime,omitempty"`             // 时间
	MatchWeight float64 `protobuf:"fixed64,12,opt,name=matchWeight,proto3" json:"matchWeight,omitempty"` // 成交量（吨）
	GenTime     uint64  `protobuf:"varint,13,opt,name=genTime,proto3" json:"genTime,omitempty"`          // 辅助字段，模拟一个时间戳
}

func (x *WbillMatchDetailQuotElement) Reset() {
	*x = WbillMatchDetailQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillMatchDetailQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillMatchDetailQuotElement) ProtoMessage() {}

func (x *WbillMatchDetailQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillMatchDetailQuotElement.ProtoReflect.Descriptor instead.
func (*WbillMatchDetailQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{33}
}

func (x *WbillMatchDetailQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetWhCode() string {
	if x != nil {
		return x.WhCode
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetWhAbbr() string {
	if x != nil {
		return x.WhAbbr
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetInQty() uint64 {
	if x != nil {
		return x.InQty
	}
	return 0
}

func (x *WbillMatchDetailQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WbillMatchDetailQuotElement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetSeqNo() string {
	if x != nil {
		return x.SeqNo
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetOpDate() string {
	if x != nil {
		return x.OpDate
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetOpTime() string {
	if x != nil {
		return x.OpTime
	}
	return ""
}

func (x *WbillMatchDetailQuotElement) GetMatchWeight() float64 {
	if x != nil {
		return x.MatchWeight
	}
	return 0
}

func (x *WbillMatchDetailQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 仓单成交逐笔行情列表请求
// @author <liuwei>
// @date 2020-09-22
// @note 协议号 client-proxy:<> proxy-hist:<>hist-collector
// @modify
type ReqWbillMatchDetailQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId         uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	VarietyIdList []string `protobuf:"bytes,3,rep,name=varietyIdList,proto3" json:"varietyIdList,omitempty"`          // 品种ID列表
	GenTime       uint64   `protobuf:"varint,4,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 移动端分页的请求，数据必填
	Count         int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                         // 请求数量， count >0 查询 >genTime的数据 <0 查询<genTime的数据 =0 无数据
}

func (x *ReqWbillMatchDetailQuotList) Reset() {
	*x = ReqWbillMatchDetailQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWbillMatchDetailQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWbillMatchDetailQuotList) ProtoMessage() {}

func (x *ReqWbillMatchDetailQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWbillMatchDetailQuotList.ProtoReflect.Descriptor instead.
func (*ReqWbillMatchDetailQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{34}
}

func (x *ReqWbillMatchDetailQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqWbillMatchDetailQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqWbillMatchDetailQuotList) GetVarietyIdList() []string {
	if x != nil {
		return x.VarietyIdList
	}
	return nil
}

func (x *ReqWbillMatchDetailQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqWbillMatchDetailQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// @brief 仓单成交逐笔行情列表响应
// @author <liuwei>
// @date 2020-09-22
// @note 协议号 client-proxy:<> proxy-real:<>real-collector
// @modify
type RspWbillMatchDetailQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                       `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                         `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId    uint32                         `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                         `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                         `protobuf:"varint,5,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                         `protobuf:"varint,6,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                           `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillMatchDetailQuotElement `protobuf:"bytes,8,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 仓单成交行情列表
}

func (x *RspWbillMatchDetailQuotList) Reset() {
	*x = RspWbillMatchDetailQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspWbillMatchDetailQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspWbillMatchDetailQuotList) ProtoMessage() {}

func (x *RspWbillMatchDetailQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspWbillMatchDetailQuotList.ProtoReflect.Descriptor instead.
func (*RspWbillMatchDetailQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{35}
}

func (x *RspWbillMatchDetailQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspWbillMatchDetailQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspWbillMatchDetailQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspWbillMatchDetailQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspWbillMatchDetailQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspWbillMatchDetailQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspWbillMatchDetailQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspWbillMatchDetailQuotList) GetQuotList() []*WbillMatchDetailQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 仓单成交增量逐笔行情元素
// @author <liuwei>
// @date 2020-09-22
// @note
// @modify
type WbillMatchDetailQuotIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncreType   EElementIncrequotType        `protobuf:"varint,1,opt,name=IncreType,proto3,enum=fippb.EElementIncrequotType" json:"IncreType,omitempty"` // 行情变化类型
	QuotElement *WbillMatchDetailQuotElement `protobuf:"bytes,2,opt,name=quotElement,proto3" json:"quotElement,omitempty"`                               // 仓单成交逐笔行情元素
}

func (x *WbillMatchDetailQuotIncrement) Reset() {
	*x = WbillMatchDetailQuotIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WbillMatchDetailQuotIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WbillMatchDetailQuotIncrement) ProtoMessage() {}

func (x *WbillMatchDetailQuotIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WbillMatchDetailQuotIncrement.ProtoReflect.Descriptor instead.
func (*WbillMatchDetailQuotIncrement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{36}
}

func (x *WbillMatchDetailQuotIncrement) GetIncreType() EElementIncrequotType {
	if x != nil {
		return x.IncreType
	}
	return EElementIncrequotType_EIQT_Add
}

func (x *WbillMatchDetailQuotIncrement) GetQuotElement() *WbillMatchDetailQuotElement {
	if x != nil {
		return x.QuotElement
	}
	return nil
}

// *
// @brief 仓单成交逐笔行情列表推送通知
// @author <liuwei>
// @date 2020-09-22
// @note 协议号 collector-hist
// @note 定时推送，实时行情进行过滤
// @modify
type NotifyWbillMatchDetailQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                           `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	TradeDate  string                           `protobuf:"bytes,3,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	ErrorId    uint32                           `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                           `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                           `protobuf:"varint,6,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                           `protobuf:"varint,7,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`               // 序列号
	IsLast     bool                             `protobuf:"varint,8,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	QuotList   []*WbillMatchDetailQuotIncrement `protobuf:"bytes,9,rep,name=quotList,proto3" json:"quotList,omitempty"`                    // 仓单成交增量逐笔行情列表
}

func (x *NotifyWbillMatchDetailQuotList) Reset() {
	*x = NotifyWbillMatchDetailQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyWbillMatchDetailQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyWbillMatchDetailQuotList) ProtoMessage() {}

func (x *NotifyWbillMatchDetailQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyWbillMatchDetailQuotList.ProtoReflect.Descriptor instead.
func (*NotifyWbillMatchDetailQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{37}
}

func (x *NotifyWbillMatchDetailQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyWbillMatchDetailQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyWbillMatchDetailQuotList) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyWbillMatchDetailQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyWbillMatchDetailQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyWbillMatchDetailQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifyWbillMatchDetailQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifyWbillMatchDetailQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyWbillMatchDetailQuotList) GetQuotList() []*WbillMatchDetailQuotIncrement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 通知客户端清除行情缓存，需求有固定时间清除缓存的设计
// @author <lichaochao>
// @date 2020-08-31
// @note 协议号 real-proxy:<> proxy-client<>
// @note 实时行情产生通知，经proxy推送给移动端
// @modify
type NotifyClearClientCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID       `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`     // 交易所id
	MsgId     uint32         `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                             // 流水号
	MarketId  string         `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                        // 合作机构代码
	Type      EOtcQuotType   `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.EOtcQuotType" json:"type,omitempty"`       // 行情类型：基差，仓单，互换，大宗现货
	Status    EOtcQuotStatus `protobuf:"varint,5,opt,name=status,proto3,enum=fippb.EOtcQuotStatus" json:"status,omitempty"` // 待清理的行情缓存种类，是报价还是详情盘面
	TradeDate string         `protobuf:"bytes,6,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                      // 当前交易日期
}

func (x *NotifyClearClientCache) Reset() {
	*x = NotifyClearClientCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyClearClientCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyClearClientCache) ProtoMessage() {}

func (x *NotifyClearClientCache) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyClearClientCache.ProtoReflect.Descriptor instead.
func (*NotifyClearClientCache) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{38}
}

func (x *NotifyClearClientCache) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyClearClientCache) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyClearClientCache) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifyClearClientCache) GetType() EOtcQuotType {
	if x != nil {
		return x.Type
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *NotifyClearClientCache) GetStatus() EOtcQuotStatus {
	if x != nil {
		return x.Status
	}
	return EOtcQuotStatus_OQS_detailMktQuot
}

func (x *NotifyClearClientCache) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 海港大宗报盘行情元素
// @author <liuwei>
// @date 2020-8-7
// @note
// @modify
type SeaPortOrderQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderDate   string  `protobuf:"bytes,1,opt,name=orderDate,proto3" json:"orderDate,omitempty"`     // 报盘日期
	MarketId    string  `protobuf:"bytes,2,opt,name=marketId,proto3" json:"marketId,omitempty"`       // 合作机构代码
	MarketName  string  `protobuf:"bytes,3,opt,name=marketName,proto3" json:"marketName,omitempty"`   // 合作机构名称
	OrderNo     string  `protobuf:"bytes,4,opt,name=orderNo,proto3" json:"orderNo,omitempty"`         // 报盘唯一标识
	OrderTime   string  `protobuf:"bytes,5,opt,name=orderTime,proto3" json:"orderTime,omitempty"`     // 报盘时间
	VarietyId   string  `protobuf:"bytes,6,opt,name=varietyId,proto3" json:"varietyId,omitempty"`     // 品种代码
	VarietyName string  `protobuf:"bytes,7,opt,name=varietyName,proto3" json:"varietyName,omitempty"` // 品种名称
	RegionId    string  `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`       // 区域代码
	RegionName  string  `protobuf:"bytes,9,opt,name=regionName,proto3" json:"regionName,omitempty"`   // 区域名称
	GradeId     string  `protobuf:"bytes,10,opt,name=gradeId,proto3" json:"gradeId,omitempty"`        // 品级代码
	GradeName   string  `protobuf:"bytes,11,opt,name=gradeName,proto3" json:"gradeName,omitempty"`    // 品级名称
	Bidder      string  `protobuf:"bytes,12,opt,name=bidder,proto3" json:"bidder,omitempty"`          // 报价方
	Price       float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`          // 报价
	RefPrice    float64 `protobuf:"fixed64,14,opt,name=refPrice,proto3" json:"refPrice,omitempty"`    // 基差价格
	Info        string  `protobuf:"bytes,15,opt,name=info,proto3" json:"info,omitempty"`              // 铁（Fe）含量
	GenTime     uint64  `protobuf:"varint,16,opt,name=genTime,proto3" json:"genTime,omitempty"`       // 辅助字段，通过日期和时间计算得到毫秒值
}

func (x *SeaPortOrderQuotElement) Reset() {
	*x = SeaPortOrderQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaPortOrderQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaPortOrderQuotElement) ProtoMessage() {}

func (x *SeaPortOrderQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaPortOrderQuotElement.ProtoReflect.Descriptor instead.
func (*SeaPortOrderQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{39}
}

func (x *SeaPortOrderQuotElement) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetBidder() string {
	if x != nil {
		return x.Bidder
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeaPortOrderQuotElement) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *SeaPortOrderQuotElement) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *SeaPortOrderQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 海港大宗报盘行情列表请求
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 client-proxy:<> proxy-hist:<> hist-real:<>real-collector
// @modify
type ReqSeaPortOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 海港大宗"1001"
	StartDate string   `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`                  // 开始日期,格式"20200101"
	EndDate   string   `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`                      // 结束日期,格式"20200101"
	Count     int32    `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                         // (可选)按条数查。当endDate不为0时，该字段无效。即startDate-endDate查询优先级高于startDate-cnt查询。
	VarietyId string   `protobuf:"bytes,7,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID，如铁矿石
	RegionId  string   `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`                    // 区域Id
	GenTime   uint64   `protobuf:"varint,9,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 用于分页请求的起始时间，优先级最高和count组合使用
}

func (x *ReqSeaPortOrderQuotList) Reset() {
	*x = ReqSeaPortOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSeaPortOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSeaPortOrderQuotList) ProtoMessage() {}

func (x *ReqSeaPortOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSeaPortOrderQuotList.ProtoReflect.Descriptor instead.
func (*ReqSeaPortOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{40}
}

func (x *ReqSeaPortOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSeaPortOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSeaPortOrderQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqSeaPortOrderQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ReqSeaPortOrderQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ReqSeaPortOrderQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqSeaPortOrderQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqSeaPortOrderQuotList) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ReqSeaPortOrderQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 海港大宗报盘行情列表响应
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 client-proxy:<> proxy-hist:<> hist-real:<>real-collector
// @modify
type RspSeaPortOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId   string                     `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 海港大宗"1001"
	StartDate  string                     `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`                  // 开始日期,格式"20200101"
	EndDate    string                     `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`                      // 结束日期,格式"20200101"
	VarietyId  string                     `protobuf:"bytes,6,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID，如铁矿石
	ErrorId    uint32                     `protobuf:"varint,7,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,8,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                     `protobuf:"varint,9,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                     `protobuf:"varint,10,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`              // 序列号
	IsLast     bool                       `protobuf:"varint,11,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // true:结束；false:分包
	QuotList   []*SeaPortOrderQuotElement `protobuf:"bytes,12,rep,name=quotList,proto3" json:"quotList,omitempty"`                   // 海港大宗报盘行情列表
}

func (x *RspSeaPortOrderQuotList) Reset() {
	*x = RspSeaPortOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSeaPortOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSeaPortOrderQuotList) ProtoMessage() {}

func (x *RspSeaPortOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSeaPortOrderQuotList.ProtoReflect.Descriptor instead.
func (*RspSeaPortOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{41}
}

func (x *RspSeaPortOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSeaPortOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSeaPortOrderQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspSeaPortOrderQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *RspSeaPortOrderQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *RspSeaPortOrderQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspSeaPortOrderQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSeaPortOrderQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspSeaPortOrderQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspSeaPortOrderQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspSeaPortOrderQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspSeaPortOrderQuotList) GetQuotList() []*SeaPortOrderQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 海港大宗报盘行情列表全量推送通知
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 collector-real
// @note 定时推送，实时行情进行过滤
// @modify
type NotifySeaPortOrderQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId   string                     `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 海港大宗"1001"
	StartDate  string                     `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`                  // 开始日期,格式"20200101"
	EndDate    string                     `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`                      // 结束日期,格式"20200101"
	VarietyId  string                     `protobuf:"bytes,6,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID，如铁矿石
	ErrorId    uint32                     `protobuf:"varint,7,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,8,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	BatchNo    uint64                     `protobuf:"varint,9,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                     // 批次号
	SequenceNo uint64                     `protobuf:"varint,10,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`              // 序列号
	IsLast     bool                       `protobuf:"varint,11,opt,name=isLast,proto3" json:"isLast,omitempty"`                      // true:结束；false:分包
	QuotList   []*SeaPortOrderQuotElement `protobuf:"bytes,12,rep,name=quotList,proto3" json:"quotList,omitempty"`                   // 海港大宗报盘行情列表
}

func (x *NotifySeaPortOrderQuotList) Reset() {
	*x = NotifySeaPortOrderQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySeaPortOrderQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySeaPortOrderQuotList) ProtoMessage() {}

func (x *NotifySeaPortOrderQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySeaPortOrderQuotList.ProtoReflect.Descriptor instead.
func (*NotifySeaPortOrderQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{42}
}

func (x *NotifySeaPortOrderQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifySeaPortOrderQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifySeaPortOrderQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifySeaPortOrderQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NotifySeaPortOrderQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *NotifySeaPortOrderQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *NotifySeaPortOrderQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifySeaPortOrderQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifySeaPortOrderQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifySeaPortOrderQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifySeaPortOrderQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifySeaPortOrderQuotList) GetQuotList() []*SeaPortOrderQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 海港大宗成交行情元素
// @author <liuwei>
// @date 2020-8-7
// @note
// @modify
type SeaPortMatchQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDate   string  `protobuf:"bytes,1,opt,name=matchDate,proto3" json:"matchDate,omitempty"`     // 成交日期,格式"20200101"
	MarketId    string  `protobuf:"bytes,2,opt,name=marketId,proto3" json:"marketId,omitempty"`       // 合作机构代码,海港大宗="1001"
	MarketName  string  `protobuf:"bytes,3,opt,name=marketName,proto3" json:"marketName,omitempty"`   // 合作机构名称,"海港大宗"
	MatchNo     string  `protobuf:"bytes,4,opt,name=matchNo,proto3" json:"matchNo,omitempty"`         // 成交唯一标识
	MatchTime   string  `protobuf:"bytes,5,opt,name=matchTime,proto3" json:"matchTime,omitempty"`     // 成交时间,格式19:01:03
	VarietyId   string  `protobuf:"bytes,6,opt,name=varietyId,proto3" json:"varietyId,omitempty"`     // 品种代码
	VarietyName string  `protobuf:"bytes,7,opt,name=varietyName,proto3" json:"varietyName,omitempty"` // 品种名称
	RegionId    string  `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`       // 区域代码
	RegionName  string  `protobuf:"bytes,9,opt,name=regionName,proto3" json:"regionName,omitempty"`   // 区域名称
	GradeId     string  `protobuf:"bytes,10,opt,name=gradeId,proto3" json:"gradeId,omitempty"`        // 品级代码
	GradeName   string  `protobuf:"bytes,11,opt,name=gradeName,proto3" json:"gradeName,omitempty"`    // 品级名称
	Price       float64 `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`          // 成交价
	RefPrice    float64 `protobuf:"fixed64,13,opt,name=refPrice,proto3" json:"refPrice,omitempty"`    // 基差价格
	GenTime     uint64  `protobuf:"varint,14,opt,name=genTime,proto3" json:"genTime,omitempty"`       // 辅助字段，通过日期和时间计算得到毫秒值
}

func (x *SeaPortMatchQuotElement) Reset() {
	*x = SeaPortMatchQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeaPortMatchQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeaPortMatchQuotElement) ProtoMessage() {}

func (x *SeaPortMatchQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeaPortMatchQuotElement.ProtoReflect.Descriptor instead.
func (*SeaPortMatchQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{43}
}

func (x *SeaPortMatchQuotElement) GetMatchDate() string {
	if x != nil {
		return x.MatchDate
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetMatchNo() string {
	if x != nil {
		return x.MatchNo
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *SeaPortMatchQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeaPortMatchQuotElement) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *SeaPortMatchQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 海港大宗成交行情列表请求
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 client-proxy:<> proxy-hist
// @modify
type ReqSeaPortMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID           `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`        // 交易所id
	MsgId     uint32             `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                                // 流水号
	MarketId  string             `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                           // 海港大宗"1001"
	VarietyId string             `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                         // 品种ID
	Type      EOTCQuotPeriodType `protobuf:"varint,5,opt,name=type,proto3,enum=fippb.EOTCQuotPeriodType" json:"type,omitempty"`    // 周期类型
	StartDate string             `protobuf:"bytes,6,opt,name=startDate,proto3" json:"startDate,omitempty"`                         // 开始时间,格式"20200101"
	EndDate   string             `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`                             // 结束时间,格式"20200101"
	Count     int32              `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`                                // (可选)按条数查。当endDate不为0时，该字段无效。即startDate-endDate查询优先级高于startDate-cnt查询。
	RegionId  string             `protobuf:"bytes,9,opt,name=regionId,proto3" json:"regionId,omitempty"`                           // 查询按区域代码,即港口名对应的ID
	GradeId   string             `protobuf:"bytes,10,opt,name=gradeId,proto3" json:"gradeId,omitempty"`                            // 查询按品级代码，如杨迪粉对应的Id等
	GenTime   uint64             `protobuf:"varint,11,opt,name=genTime,proto3" json:"genTime,omitempty"`                           // 用于分页请求的起始时间，优先级最高和count组合使用
	SortType  EOtcSortType       `protobuf:"varint,12,opt,name=sortType,proto3,enum=fippb.EOtcSortType" json:"sortType,omitempty"` // 排序类型
}

func (x *ReqSeaPortMatchQuotList) Reset() {
	*x = ReqSeaPortMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSeaPortMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSeaPortMatchQuotList) ProtoMessage() {}

func (x *ReqSeaPortMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSeaPortMatchQuotList.ProtoReflect.Descriptor instead.
func (*ReqSeaPortMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{44}
}

func (x *ReqSeaPortMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSeaPortMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSeaPortMatchQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetType() EOTCQuotPeriodType {
	if x != nil {
		return x.Type
	}
	return EOTCQuotPeriodType_OTCQuotPeriod_Day
}

func (x *ReqSeaPortMatchQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqSeaPortMatchQuotList) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *ReqSeaPortMatchQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqSeaPortMatchQuotList) GetSortType() EOtcSortType {
	if x != nil {
		return x.SortType
	}
	return EOtcSortType_SortNotNeed
}

// *
// @brief 海港大宗成交行情列表历史服务内部请求
// @author <lichaochao>
// @date 2020-9-23
// @note 协议号 hist
// @modify
type InnerReqSeaPortMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid       uint32                   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`            // 标识客户端连接的id
	VmId      uint32                   `protobuf:"varint,2,opt,name=vmId,proto3" json:"vmId,omitempty"`          // 用于通信使用的id
	ClientReq *ReqSeaPortMatchQuotList `protobuf:"bytes,3,opt,name=clientReq,proto3" json:"clientReq,omitempty"` // 客户端发过来的请求消息
}

func (x *InnerReqSeaPortMatchQuotList) Reset() {
	*x = InnerReqSeaPortMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerReqSeaPortMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerReqSeaPortMatchQuotList) ProtoMessage() {}

func (x *InnerReqSeaPortMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerReqSeaPortMatchQuotList.ProtoReflect.Descriptor instead.
func (*InnerReqSeaPortMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{45}
}

func (x *InnerReqSeaPortMatchQuotList) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *InnerReqSeaPortMatchQuotList) GetVmId() uint32 {
	if x != nil {
		return x.VmId
	}
	return 0
}

func (x *InnerReqSeaPortMatchQuotList) GetClientReq() *ReqSeaPortMatchQuotList {
	if x != nil {
		return x.ClientReq
	}
	return nil
}

// *
// @brief 海港大宗成交行情列表响应
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 client-proxy:<> proxy-hist
// @modify
type RspSeaPortMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`     // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                             // 流水号
	MarketId   string                     `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                        // 海港大宗"1001"
	VarietyId  string                     `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                      // 品种ID
	Type       EOTCQuotPeriodType         `protobuf:"varint,5,opt,name=type,proto3,enum=fippb.EOTCQuotPeriodType" json:"type,omitempty"` // 周期类型
	StartDate  string                     `protobuf:"bytes,6,opt,name=startDate,proto3" json:"startDate,omitempty"`                      // 开始时间
	EndDate    string                     `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`                          // 结束时间
	ErrorId    uint32                     `protobuf:"varint,8,opt,name=errorId,proto3" json:"errorId,omitempty"`                         // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,9,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                        // 信息描述
	BatchNo    uint64                     `protobuf:"varint,10,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                        // 批次号
	SequenceNo uint64                     `protobuf:"varint,11,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`                  // 序列号
	IsLast     bool                       `protobuf:"varint,12,opt,name=isLast,proto3" json:"isLast,omitempty"`                          // true:结束；false:分包
	QuotList   []*SeaPortMatchQuotElement `protobuf:"bytes,13,rep,name=quotList,proto3" json:"quotList,omitempty"`                       // 海港大宗成交行情列表
}

func (x *RspSeaPortMatchQuotList) Reset() {
	*x = RspSeaPortMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSeaPortMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSeaPortMatchQuotList) ProtoMessage() {}

func (x *RspSeaPortMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSeaPortMatchQuotList.ProtoReflect.Descriptor instead.
func (*RspSeaPortMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{46}
}

func (x *RspSeaPortMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSeaPortMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSeaPortMatchQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspSeaPortMatchQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspSeaPortMatchQuotList) GetType() EOTCQuotPeriodType {
	if x != nil {
		return x.Type
	}
	return EOTCQuotPeriodType_OTCQuotPeriod_Day
}

func (x *RspSeaPortMatchQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *RspSeaPortMatchQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *RspSeaPortMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSeaPortMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspSeaPortMatchQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspSeaPortMatchQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspSeaPortMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspSeaPortMatchQuotList) GetQuotList() []*SeaPortMatchQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 海港大宗成交行情列表响应
// @author <liuwei>
// @date 2020-8-7
// @note 协议号 collector-real
// @modify
type NotifySeaPortMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`     // 交易所id
	MsgId      uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                             // 流水号
	MarketId   string                     `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                        // 海港大宗"1001"
	VarietyId  string                     `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                      // 品种ID
	Type       EOTCQuotPeriodType         `protobuf:"varint,5,opt,name=type,proto3,enum=fippb.EOTCQuotPeriodType" json:"type,omitempty"` // 周期类型
	StartDate  string                     `protobuf:"bytes,6,opt,name=startDate,proto3" json:"startDate,omitempty"`                      // 开始时间
	EndDate    string                     `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`                          // 结束时间
	ErrorId    uint32                     `protobuf:"varint,8,opt,name=errorId,proto3" json:"errorId,omitempty"`                         // 结果0，成功；其他，失败
	ErrorMsg   string                     `protobuf:"bytes,9,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                        // 信息描述
	BatchNo    uint64                     `protobuf:"varint,10,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                        // 批次号
	SequenceNo uint64                     `protobuf:"varint,11,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`                  // 序列号
	IsLast     bool                       `protobuf:"varint,12,opt,name=isLast,proto3" json:"isLast,omitempty"`                          // true:结束；false:分包
	QuotList   []*SeaPortMatchQuotElement `protobuf:"bytes,13,rep,name=quotList,proto3" json:"quotList,omitempty"`                       // 海港大宗成交行情列表
}

func (x *NotifySeaPortMatchQuotList) Reset() {
	*x = NotifySeaPortMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySeaPortMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySeaPortMatchQuotList) ProtoMessage() {}

func (x *NotifySeaPortMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySeaPortMatchQuotList.ProtoReflect.Descriptor instead.
func (*NotifySeaPortMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{47}
}

func (x *NotifySeaPortMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifySeaPortMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifySeaPortMatchQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifySeaPortMatchQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *NotifySeaPortMatchQuotList) GetType() EOTCQuotPeriodType {
	if x != nil {
		return x.Type
	}
	return EOTCQuotPeriodType_OTCQuotPeriod_Day
}

func (x *NotifySeaPortMatchQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NotifySeaPortMatchQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *NotifySeaPortMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifySeaPortMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifySeaPortMatchQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *NotifySeaPortMatchQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *NotifySeaPortMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifySeaPortMatchQuotList) GetQuotList() []*SeaPortMatchQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 陕储粮成交行情元素
// @author <lichaochao>
// @date 2020-8-24
// @note
// @modify
type ShaanxiGrainMatchQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDate         string  `protobuf:"bytes,1,opt,name=matchDate,proto3" json:"matchDate,omitempty"`                    // 成交日期,格式"20200101"
	MarketId          string  `protobuf:"bytes,2,opt,name=marketId,proto3" json:"marketId,omitempty"`                      // 合作机构代码,陕储粮="1002"
	MarketName        string  `protobuf:"bytes,3,opt,name=marketName,proto3" json:"marketName,omitempty"`                  // 合作机构名称,"陕储粮"
	MatchNo           string  `protobuf:"bytes,4,opt,name=matchNo,proto3" json:"matchNo,omitempty"`                        // 成交唯一标识
	MatchTime         string  `protobuf:"bytes,5,opt,name=matchTime,proto3" json:"matchTime,omitempty"`                    // 成交时间,格式19:01:03
	VarietyId         string  `protobuf:"bytes,6,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                    // 品种代码
	VarietyName       string  `protobuf:"bytes,7,opt,name=varietyName,proto3" json:"varietyName,omitempty"`                // 品种名称
	RegionId          string  `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`                      // 区域代码
	RegionName        string  `protobuf:"bytes,9,opt,name=regionName,proto3" json:"regionName,omitempty"`                  // 区域名称
	GradeId           string  `protobuf:"bytes,10,opt,name=gradeId,proto3" json:"gradeId,omitempty"`                       // 品级代码
	GradeName         string  `protobuf:"bytes,11,opt,name=gradeName,proto3" json:"gradeName,omitempty"`                   // 品级名称
	Area              string  `protobuf:"bytes,12,opt,name=area,proto3" json:"area,omitempty"`                             // 地区
	ProductionArea    string  `protobuf:"bytes,13,opt,name=productionArea,proto3" json:"productionArea,omitempty"`         // 产地（比如 黑龙江）
	DeliveryArea      string  `protobuf:"bytes,14,opt,name=deliveryArea,proto3" json:"deliveryArea,omitempty"`             // 交货地
	StorageArea       string  `protobuf:"bytes,15,opt,name=storageArea,proto3" json:"storageArea,omitempty"`               // 储存地
	OtherQuality      string  `protobuf:"bytes,16,opt,name=otherQuality,proto3" json:"otherQuality,omitempty"`             // 其他品质说明
	ProductionDate    string  `protobuf:"bytes,17,opt,name=productionDate,proto3" json:"productionDate,omitempty"`         // 生产年份
	MatchQty          float64 `protobuf:"fixed64,18,opt,name=matchQty,proto3" json:"matchQty,omitempty"`                   // 成交量
	Bs                string  `protobuf:"bytes,19,opt,name=bs,proto3" json:"bs,omitempty"`                                 // 买卖方向
	WaterContent      float64 `protobuf:"fixed64,20,opt,name=waterContent,proto3" json:"waterContent,omitempty"`           // 水分 （%）
	Volume            float64 `protobuf:"fixed64,21,opt,name=volume,proto3" json:"volume,omitempty"`                       // 容量 （g/L）
	ImpurityContent   float64 `protobuf:"fixed64,22,opt,name=impurityContent,proto3" json:"impurityContent,omitempty"`     // 杂质 （%）
	IncompleteContent float64 `protobuf:"fixed64,23,opt,name=incompleteContent,proto3" json:"incompleteContent,omitempty"` // 不完善粒 （%）
	ChangeLastDate    float64 `protobuf:"fixed64,24,opt,name=changeLastDate,proto3" json:"changeLastDate,omitempty"`       // 较上日变化
	Price             float64 `protobuf:"fixed64,25,opt,name=price,proto3" json:"price,omitempty"`                         // 成交价
	RefPrice          float64 `protobuf:"fixed64,26,opt,name=refPrice,proto3" json:"refPrice,omitempty"`                   // 基差价格
	GenTime           uint64  `protobuf:"varint,27,opt,name=genTime,proto3" json:"genTime,omitempty"`                      // 辅助字段，通过日期和时间计算得到毫秒值
}

func (x *ShaanxiGrainMatchQuotElement) Reset() {
	*x = ShaanxiGrainMatchQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShaanxiGrainMatchQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShaanxiGrainMatchQuotElement) ProtoMessage() {}

func (x *ShaanxiGrainMatchQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShaanxiGrainMatchQuotElement.ProtoReflect.Descriptor instead.
func (*ShaanxiGrainMatchQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{48}
}

func (x *ShaanxiGrainMatchQuotElement) GetMatchDate() string {
	if x != nil {
		return x.MatchDate
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetMatchNo() string {
	if x != nil {
		return x.MatchNo
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetProductionArea() string {
	if x != nil {
		return x.ProductionArea
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetDeliveryArea() string {
	if x != nil {
		return x.DeliveryArea
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetStorageArea() string {
	if x != nil {
		return x.StorageArea
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetOtherQuality() string {
	if x != nil {
		return x.OtherQuality
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetProductionDate() string {
	if x != nil {
		return x.ProductionDate
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetMatchQty() float64 {
	if x != nil {
		return x.MatchQty
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetBs() string {
	if x != nil {
		return x.Bs
	}
	return ""
}

func (x *ShaanxiGrainMatchQuotElement) GetWaterContent() float64 {
	if x != nil {
		return x.WaterContent
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetImpurityContent() float64 {
	if x != nil {
		return x.ImpurityContent
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetIncompleteContent() float64 {
	if x != nil {
		return x.IncompleteContent
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetChangeLastDate() float64 {
	if x != nil {
		return x.ChangeLastDate
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *ShaanxiGrainMatchQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

// *
// @brief 陕储粮成交行情列表请求
// @author <lichaochao>
// @date 2020-8-24
// @note 协议号 client-proxy:<3111> proxy-hist
// @modify <daihouda>
type ReqShaanxiGrainMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id（必填）
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号（必填）
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"（必填）
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID（必填）
	Count     int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                         // 按条数查（必填）
	// 筛选条件
	FilterTradeDate string `protobuf:"bytes,6,opt,name=filter_trade_date,json=filterTradeDate,proto3" json:"filter_trade_date,omitempty"` // 查询筛选条件--交易日
	FilterArea      string `protobuf:"bytes,7,opt,name=filter_area,json=filterArea,proto3" json:"filter_area,omitempty"`                  // 查询筛选条件--省份
	FilterRegionId  string `protobuf:"bytes,8,opt,name=filter_regionId,json=filterRegionId,proto3" json:"filter_regionId,omitempty"`      // 查询筛选条件--区域代码,即库点对应的Id
	// 续查条件
	IsFurther        bool   `protobuf:"varint,9,opt,name=is_further,json=isFurther,proto3" json:"is_further,omitempty"`                        // true:续查；false:非续查
	FurtherTradeDate string `protobuf:"bytes,10,opt,name=further_trade_date,json=furtherTradeDate,proto3" json:"further_trade_date,omitempty"` // 续查条件--交易日
	FurtherArea      string `protobuf:"bytes,11,opt,name=further_area,json=furtherArea,proto3" json:"further_area,omitempty"`                  // 续查条件--省份
	FurtherRegionId  string `protobuf:"bytes,12,opt,name=further_regionId,json=furtherRegionId,proto3" json:"further_regionId,omitempty"`      // 续查条件--区域代码,即库点对应的Id
	FurtherGenTime   uint64 `protobuf:"varint,13,opt,name=further_genTime,json=furtherGenTime,proto3" json:"further_genTime,omitempty"`        // 续查条件--用于分页续查请求的起始时间
}

func (x *ReqShaanxiGrainMatchQuotList) Reset() {
	*x = ReqShaanxiGrainMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShaanxiGrainMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShaanxiGrainMatchQuotList) ProtoMessage() {}

func (x *ReqShaanxiGrainMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShaanxiGrainMatchQuotList.ProtoReflect.Descriptor instead.
func (*ReqShaanxiGrainMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{49}
}

func (x *ReqShaanxiGrainMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqShaanxiGrainMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqShaanxiGrainMatchQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqShaanxiGrainMatchQuotList) GetFilterTradeDate() string {
	if x != nil {
		return x.FilterTradeDate
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetFilterArea() string {
	if x != nil {
		return x.FilterArea
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetFilterRegionId() string {
	if x != nil {
		return x.FilterRegionId
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetIsFurther() bool {
	if x != nil {
		return x.IsFurther
	}
	return false
}

func (x *ReqShaanxiGrainMatchQuotList) GetFurtherTradeDate() string {
	if x != nil {
		return x.FurtherTradeDate
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetFurtherArea() string {
	if x != nil {
		return x.FurtherArea
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetFurtherRegionId() string {
	if x != nil {
		return x.FurtherRegionId
	}
	return ""
}

func (x *ReqShaanxiGrainMatchQuotList) GetFurtherGenTime() uint64 {
	if x != nil {
		return x.FurtherGenTime
	}
	return 0
}

// *
// @brief 陕储粮成交行情列表响应
// @author <lichaochao>
// @date 2020-8-24
// @note 协议号 client-proxy:<3112> proxy-hist
// @modify <daihouda>
type RspShaanxiGrainMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID                        `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`     // 交易所id
	MsgId      uint32                          `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                             // 流水号
	MarketId   string                          `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                        // 陕储粮"1002"
	VarietyId  string                          `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                      // 品种ID
	Type       EOTCQuotPeriodType              `protobuf:"varint,5,opt,name=type,proto3,enum=fippb.EOTCQuotPeriodType" json:"type,omitempty"` // 周期类型
	StartDate  string                          `protobuf:"bytes,6,opt,name=startDate,proto3" json:"startDate,omitempty"`                      // 开始时间
	EndDate    string                          `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`                          // 结束时间
	ErrorId    uint32                          `protobuf:"varint,8,opt,name=errorId,proto3" json:"errorId,omitempty"`                         // 结果0，成功；其他，失败
	ErrorMsg   string                          `protobuf:"bytes,9,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                        // 信息描述
	BatchNo    uint64                          `protobuf:"varint,10,opt,name=batchNo,proto3" json:"batchNo,omitempty"`                        // 批次号
	SequenceNo uint64                          `protobuf:"varint,11,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`                  // 序列号
	IsLast     bool                            `protobuf:"varint,12,opt,name=isLast,proto3" json:"isLast,omitempty"`                          // true:结束；false:分包
	QuotList   []*ShaanxiGrainMatchQuotElement `protobuf:"bytes,13,rep,name=quotList,proto3" json:"quotList,omitempty"`                       // 陕储粮成交行情列表
}

func (x *RspShaanxiGrainMatchQuotList) Reset() {
	*x = RspShaanxiGrainMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShaanxiGrainMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShaanxiGrainMatchQuotList) ProtoMessage() {}

func (x *RspShaanxiGrainMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShaanxiGrainMatchQuotList.ProtoReflect.Descriptor instead.
func (*RspShaanxiGrainMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{50}
}

func (x *RspShaanxiGrainMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspShaanxiGrainMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspShaanxiGrainMatchQuotList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspShaanxiGrainMatchQuotList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspShaanxiGrainMatchQuotList) GetType() EOTCQuotPeriodType {
	if x != nil {
		return x.Type
	}
	return EOTCQuotPeriodType_OTCQuotPeriod_Day
}

func (x *RspShaanxiGrainMatchQuotList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *RspShaanxiGrainMatchQuotList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *RspShaanxiGrainMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspShaanxiGrainMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspShaanxiGrainMatchQuotList) GetBatchNo() uint64 {
	if x != nil {
		return x.BatchNo
	}
	return 0
}

func (x *RspShaanxiGrainMatchQuotList) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *RspShaanxiGrainMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspShaanxiGrainMatchQuotList) GetQuotList() []*ShaanxiGrainMatchQuotElement {
	if x != nil {
		return x.QuotList
	}
	return nil
}

// *
// @brief 陕储粮成交价格列表请求
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 client-proxy:<3115> proxy-real<5213>
// @modify
type ReqShaanxiGrainPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	StartDate string   `protobuf:"bytes,5,opt,name=startDate,proto3" json:"startDate,omitempty"`                  // 开始时间
	EndDate   string   `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate,omitempty"`                      // 结束时间
	Area      string   `protobuf:"bytes,7,opt,name=area,proto3" json:"area,omitempty"`                            // 省份，查询某个省份的数据
	RegionId  string   `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`                    // 查询按区域代码,即库点对应的Id
	GradeId   string   `protobuf:"bytes,9,opt,name=gradeId,proto3" json:"gradeId,omitempty"`                      // 品级（空时返回所有品级列表）
}

func (x *ReqShaanxiGrainPriceList) Reset() {
	*x = ReqShaanxiGrainPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShaanxiGrainPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShaanxiGrainPriceList) ProtoMessage() {}

func (x *ReqShaanxiGrainPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShaanxiGrainPriceList.ProtoReflect.Descriptor instead.
func (*ReqShaanxiGrainPriceList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{51}
}

func (x *ReqShaanxiGrainPriceList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqShaanxiGrainPriceList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqShaanxiGrainPriceList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ReqShaanxiGrainPriceList) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

// *
// @brief 陕储粮成交价格信息
// @author <daihouda>
// @date 2020-9-1
// @note
// @modify
type OtcPriceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`     // 成交日期
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"` // 成交均价
}

func (x *OtcPriceElement) Reset() {
	*x = OtcPriceElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcPriceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcPriceElement) ProtoMessage() {}

func (x *OtcPriceElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcPriceElement.ProtoReflect.Descriptor instead.
func (*OtcPriceElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{52}
}

func (x *OtcPriceElement) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *OtcPriceElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// *
// @brief 陕储粮价格列表
// @author <daihouda>
// @date 2020-9-1
// @note
// @modify
type ShaanxiGrainPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GradeId   string             `protobuf:"bytes,1,opt,name=gradeId,proto3" json:"gradeId,omitempty"`
	GradeName string             `protobuf:"bytes,2,opt,name=gradeName,proto3" json:"gradeName,omitempty"` // 品级
	PriceList []*OtcPriceElement `protobuf:"bytes,3,rep,name=priceList,proto3" json:"priceList,omitempty"` // 价格列表
}

func (x *ShaanxiGrainPriceList) Reset() {
	*x = ShaanxiGrainPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShaanxiGrainPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShaanxiGrainPriceList) ProtoMessage() {}

func (x *ShaanxiGrainPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShaanxiGrainPriceList.ProtoReflect.Descriptor instead.
func (*ShaanxiGrainPriceList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{53}
}

func (x *ShaanxiGrainPriceList) GetGradeId() string {
	if x != nil {
		return x.GradeId
	}
	return ""
}

func (x *ShaanxiGrainPriceList) GetGradeName() string {
	if x != nil {
		return x.GradeName
	}
	return ""
}

func (x *ShaanxiGrainPriceList) GetPriceList() []*OtcPriceElement {
	if x != nil {
		return x.PriceList
	}
	return nil
}

// *
// @brief 陕储粮成交价格列表应答
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 client-proxy:<3116> real-proxy<5214>
// @modify 2020-9-3
type RspShaanxiGrainPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID                 `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32                   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string                   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string                   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	ErrorId   uint32                   `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg  string                   `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	Area      string                   `protobuf:"bytes,7,opt,name=area,proto3" json:"area,omitempty"`                            // 省份，查询某个省份的数据
	RegionId  string                   `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`                    // 查询按区域代码,即库点对应的Id
	IsLast    bool                     `protobuf:"varint,9,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	List      []*ShaanxiGrainPriceList `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`                           // 价格列表、按品级区分
}

func (x *RspShaanxiGrainPriceList) Reset() {
	*x = RspShaanxiGrainPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShaanxiGrainPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShaanxiGrainPriceList) ProtoMessage() {}

func (x *RspShaanxiGrainPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShaanxiGrainPriceList.ProtoReflect.Descriptor instead.
func (*RspShaanxiGrainPriceList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{54}
}

func (x *RspShaanxiGrainPriceList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspShaanxiGrainPriceList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspShaanxiGrainPriceList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspShaanxiGrainPriceList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspShaanxiGrainPriceList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspShaanxiGrainPriceList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspShaanxiGrainPriceList) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *RspShaanxiGrainPriceList) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *RspShaanxiGrainPriceList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspShaanxiGrainPriceList) GetList() []*ShaanxiGrainPriceList {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 陕储粮成交行情列表推送
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 collector-real<5215> real-hist<5215>
// @modify
type NotifyShaanxiGrainMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId   uint32                          `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`    // 结果0，成功；其他，失败
	ErrorMsg  string                          `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`   // 信息描述
	IsLast    bool                            `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`      // true:结束；false:分包
	MatchList []*ShaanxiGrainMatchQuotElement `protobuf:"bytes,4,rep,name=matchList,proto3" json:"matchList,omitempty"` // 陕储粮成交行情列表
}

func (x *NotifyShaanxiGrainMatchQuotList) Reset() {
	*x = NotifyShaanxiGrainMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyShaanxiGrainMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyShaanxiGrainMatchQuotList) ProtoMessage() {}

func (x *NotifyShaanxiGrainMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyShaanxiGrainMatchQuotList.ProtoReflect.Descriptor instead.
func (*NotifyShaanxiGrainMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{55}
}

func (x *NotifyShaanxiGrainMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyShaanxiGrainMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyShaanxiGrainMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyShaanxiGrainMatchQuotList) GetMatchList() []*ShaanxiGrainMatchQuotElement {
	if x != nil {
		return x.MatchList
	}
	return nil
}

// *
// @brief 陕储粮成价格信息推送
// @author <daihouda>
// @date 2020-9-4
// @note 协议号 real-proxy<5222>
// @modify
type NotifyShaanxiGrainPriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId  string                   `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`   // 陕储粮"1002"
	VarietyId string                   `protobuf:"bytes,2,opt,name=varietyId,proto3" json:"varietyId,omitempty"` // 品种ID
	Area      string                   `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`           // 省份，查询某个省份的数据
	RegionId  string                   `protobuf:"bytes,4,opt,name=regionId,proto3" json:"regionId,omitempty"`   // 查询按区域代码,即库点对应的Id
	IsLast    bool                     `protobuf:"varint,5,opt,name=isLast,proto3" json:"isLast,omitempty"`      // true:结束；false:分包
	List      []*ShaanxiGrainPriceList `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`           // 陕储粮成交行情列表
}

func (x *NotifyShaanxiGrainPriceInfo) Reset() {
	*x = NotifyShaanxiGrainPriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyShaanxiGrainPriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyShaanxiGrainPriceInfo) ProtoMessage() {}

func (x *NotifyShaanxiGrainPriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyShaanxiGrainPriceInfo.ProtoReflect.Descriptor instead.
func (*NotifyShaanxiGrainPriceInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{56}
}

func (x *NotifyShaanxiGrainPriceInfo) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *NotifyShaanxiGrainPriceInfo) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *NotifyShaanxiGrainPriceInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *NotifyShaanxiGrainPriceInfo) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *NotifyShaanxiGrainPriceInfo) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyShaanxiGrainPriceInfo) GetList() []*ShaanxiGrainPriceList {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 陕储粮库点简称列表请求
// @author <fengwei>
// @date 2020-11-18
// @note 协议号  hist-real<5235>
// @modify
type ReqShaaxiGrainRegionAbbrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
}

func (x *ReqShaaxiGrainRegionAbbrList) Reset() {
	*x = ReqShaaxiGrainRegionAbbrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShaaxiGrainRegionAbbrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShaaxiGrainRegionAbbrList) ProtoMessage() {}

func (x *ReqShaaxiGrainRegionAbbrList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShaaxiGrainRegionAbbrList.ProtoReflect.Descriptor instead.
func (*ReqShaaxiGrainRegionAbbrList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{57}
}

func (x *ReqShaaxiGrainRegionAbbrList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqShaaxiGrainRegionAbbrList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqShaaxiGrainRegionAbbrList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// *
// @brief 陕储粮库点名称简称信息
// @author <fengwei>
// @date 2020-11-18
// @note
// @modify
type ShaanxiGrainRegionAbbrElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName  string `protobuf:"bytes,1,opt,name=fullName,proto3" json:"fullName,omitempty"`   // 全称
	ShortName string `protobuf:"bytes,2,opt,name=shortName,proto3" json:"shortName,omitempty"` // 简称
}

func (x *ShaanxiGrainRegionAbbrElem) Reset() {
	*x = ShaanxiGrainRegionAbbrElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShaanxiGrainRegionAbbrElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShaanxiGrainRegionAbbrElem) ProtoMessage() {}

func (x *ShaanxiGrainRegionAbbrElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShaanxiGrainRegionAbbrElem.ProtoReflect.Descriptor instead.
func (*ShaanxiGrainRegionAbbrElem) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{58}
}

func (x *ShaanxiGrainRegionAbbrElem) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ShaanxiGrainRegionAbbrElem) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

// *
// @brief 陕储粮库点简称列表应答
// @author <fengwei>
// @date 2020-11-18
// @note 协议号  real-hist<5236>
// @modify
type RspShaaxiGrainRegionAbbrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID                      `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32                        `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId string                        `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	ErrorId  uint32                        `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string                        `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast   bool                          `protobuf:"varint,6,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	AbbrList []*ShaanxiGrainRegionAbbrElem `protobuf:"bytes,7,rep,name=abbrList,proto3" json:"abbrList,omitempty"`                    // 库点简称列表
}

func (x *RspShaaxiGrainRegionAbbrList) Reset() {
	*x = RspShaaxiGrainRegionAbbrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShaaxiGrainRegionAbbrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShaaxiGrainRegionAbbrList) ProtoMessage() {}

func (x *RspShaaxiGrainRegionAbbrList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShaaxiGrainRegionAbbrList.ProtoReflect.Descriptor instead.
func (*RspShaaxiGrainRegionAbbrList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{59}
}

func (x *RspShaaxiGrainRegionAbbrList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspShaaxiGrainRegionAbbrList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspShaaxiGrainRegionAbbrList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspShaaxiGrainRegionAbbrList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspShaaxiGrainRegionAbbrList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspShaaxiGrainRegionAbbrList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspShaaxiGrainRegionAbbrList) GetAbbrList() []*ShaanxiGrainRegionAbbrElem {
	if x != nil {
		return x.AbbrList
	}
	return nil
}

// *
// @brief 陕储粮地区列表请求
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 client-proxy<3113> proxy-real<5216>
// @modify
type ReqShaaxiGrainAreaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种文件
}

func (x *ReqShaaxiGrainAreaList) Reset() {
	*x = ReqShaaxiGrainAreaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShaaxiGrainAreaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShaaxiGrainAreaList) ProtoMessage() {}

func (x *ReqShaaxiGrainAreaList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShaaxiGrainAreaList.ProtoReflect.Descriptor instead.
func (*ReqShaaxiGrainAreaList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{60}
}

func (x *ReqShaaxiGrainAreaList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqShaaxiGrainAreaList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqShaaxiGrainAreaList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqShaaxiGrainAreaList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

// *
// @brief 陕储粮地区
// @author <daihouda>
// @date 2020-9-3
// @note
// @modify
type ShaanxiGrainAreaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Area       string              `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`             // 地区
	RegionList []*OtcRegionElement `protobuf:"bytes,2,rep,name=regionList,proto3" json:"regionList,omitempty"` // 库点列表
}

func (x *ShaanxiGrainAreaElem) Reset() {
	*x = ShaanxiGrainAreaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShaanxiGrainAreaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShaanxiGrainAreaElem) ProtoMessage() {}

func (x *ShaanxiGrainAreaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShaanxiGrainAreaElem.ProtoReflect.Descriptor instead.
func (*ShaanxiGrainAreaElem) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{61}
}

func (x *ShaanxiGrainAreaElem) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ShaanxiGrainAreaElem) GetRegionList() []*OtcRegionElement {
	if x != nil {
		return x.RegionList
	}
	return nil
}

// *
// @brief 陕储粮地区列表应答
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 client-proxy<3114> proxy-real<5217>
// @modify 2020-9-3
type RspShaaxiGrainAreaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID                `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32                  `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string                  `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string                  `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种文件
	ErrorId   uint32                  `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg  string                  `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast    bool                    `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	AreaList  []*ShaanxiGrainAreaElem `protobuf:"bytes,8,rep,name=areaList,proto3" json:"areaList,omitempty"`                    // 地区列表（省份）
}

func (x *RspShaaxiGrainAreaList) Reset() {
	*x = RspShaaxiGrainAreaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShaaxiGrainAreaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShaaxiGrainAreaList) ProtoMessage() {}

func (x *RspShaaxiGrainAreaList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShaaxiGrainAreaList.ProtoReflect.Descriptor instead.
func (*RspShaaxiGrainAreaList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{62}
}

func (x *RspShaaxiGrainAreaList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspShaaxiGrainAreaList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspShaaxiGrainAreaList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspShaaxiGrainAreaList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspShaaxiGrainAreaList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspShaaxiGrainAreaList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspShaaxiGrainAreaList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspShaaxiGrainAreaList) GetAreaList() []*ShaanxiGrainAreaElem {
	if x != nil {
		return x.AreaList
	}
	return nil
}

// *
// @brief 陕储粮地品级列表请求
// @author <daihouda>
// @date 2020-9-1
// @note 协议号 client-proxy<3117> proxy-real<5218>
//
//	area和regionId要么都传值，要么都为空，其余情况服务端认为报文非法：
//	1.area和regionId都为空时应答返回全量品级;
//	2.area和regionId都有值时应答返回该地区下该库点下的所有品级
//
// @modify 2020-9-3
type ReqShaaxiGrainGradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string   `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string   `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种文件
	Area      string   `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`                            // 地区
	RegionId  string   `protobuf:"bytes,6,opt,name=regionId,proto3" json:"regionId,omitempty"`                    // 库点id
}

func (x *ReqShaaxiGrainGradeList) Reset() {
	*x = ReqShaaxiGrainGradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShaaxiGrainGradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShaaxiGrainGradeList) ProtoMessage() {}

func (x *ReqShaaxiGrainGradeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShaaxiGrainGradeList.ProtoReflect.Descriptor instead.
func (*ReqShaaxiGrainGradeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{63}
}

func (x *ReqShaaxiGrainGradeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqShaaxiGrainGradeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqShaaxiGrainGradeList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ReqShaaxiGrainGradeList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqShaaxiGrainGradeList) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ReqShaaxiGrainGradeList) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// *
// @brief 陕储粮地品级
// @author <daihouda>
// @date 2020-9-3
// @note
// @modify
type ShaaxiGrainGradeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Area     string           `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`         // 地区
	RegionId string           `protobuf:"bytes,2,opt,name=regionId,proto3" json:"regionId,omitempty"` // 库点id
	Grade    *OtcGradeElement `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`       // 品级
}

func (x *ShaaxiGrainGradeElem) Reset() {
	*x = ShaaxiGrainGradeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShaaxiGrainGradeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShaaxiGrainGradeElem) ProtoMessage() {}

func (x *ShaaxiGrainGradeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShaaxiGrainGradeElem.ProtoReflect.Descriptor instead.
func (*ShaaxiGrainGradeElem) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{64}
}

func (x *ShaaxiGrainGradeElem) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *ShaaxiGrainGradeElem) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ShaaxiGrainGradeElem) GetGrade() *OtcGradeElement {
	if x != nil {
		return x.Grade
	}
	return nil
}

// *
// @brief 陕储粮品级列表应答
// @author <daihouda>
// @date 2020-9-3
// @note 协议号 client-proxy<3118> proxy-real<5219>
// @modify
type RspShaaxiGrainGradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId   EExchgID                `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId     uint32                  `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	MarketId  string                  `protobuf:"bytes,3,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 陕储粮"1002"
	VarietyId string                  `protobuf:"bytes,4,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种文件
	ErrorId   uint32                  `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg  string                  `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast    bool                    `protobuf:"varint,7,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	GradeList []*ShaaxiGrainGradeElem `protobuf:"bytes,8,rep,name=gradeList,proto3" json:"gradeList,omitempty"`                  // 品级列表
}

func (x *RspShaaxiGrainGradeList) Reset() {
	*x = RspShaaxiGrainGradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspShaaxiGrainGradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspShaaxiGrainGradeList) ProtoMessage() {}

func (x *RspShaaxiGrainGradeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspShaaxiGrainGradeList.ProtoReflect.Descriptor instead.
func (*RspShaaxiGrainGradeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{65}
}

func (x *RspShaaxiGrainGradeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspShaaxiGrainGradeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspShaaxiGrainGradeList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RspShaaxiGrainGradeList) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *RspShaaxiGrainGradeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspShaaxiGrainGradeList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspShaaxiGrainGradeList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspShaaxiGrainGradeList) GetGradeList() []*ShaaxiGrainGradeElem {
	if x != nil {
		return x.GradeList
	}
	return nil
}

// *
// @brief 场外互换合约类型
// @author <daihouda>
// @date 2020-9-21
// @note
// @modify
type OtcSwapContractType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // 类型
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 类型名称
}

func (x *OtcSwapContractType) Reset() {
	*x = OtcSwapContractType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcSwapContractType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcSwapContractType) ProtoMessage() {}

func (x *OtcSwapContractType) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcSwapContractType.ProtoReflect.Descriptor instead.
func (*OtcSwapContractType) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{66}
}

func (x *OtcSwapContractType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OtcSwapContractType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// @brief 场外互换成交行情
// @author <daihouda>
// @date 2020-9-21
// @note matchDate + matchNo能确定数据唯一
// @modify 2020-10-26
type OtcSwapMatchQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDate         string   `protobuf:"bytes,1,opt,name=matchDate,proto3" json:"matchDate,omitempty"`                 // 成交日期
	ContractTypeName  string   `protobuf:"bytes,2,opt,name=contractTypeName,proto3" json:"contractTypeName,omitempty"`   // 合约类型
	ContractType      string   `protobuf:"bytes,3,opt,name=contractType,proto3" json:"contractType,omitempty"`           // 合约类型编号
	SubjectContractId string   `protobuf:"bytes,4,opt,name=subjectContractId,proto3" json:"subjectContractId,omitempty"` // 标的
	Price             float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`                       // 成交价格
	MatchNo           string   `protobuf:"bytes,6,opt,name=matchNo,proto3" json:"matchNo,omitempty"`                     // 成交序号
	GenTime           uint64   `protobuf:"varint,7,opt,name=genTime,proto3" json:"genTime,omitempty"`                    // 辅助字段，通过日期和时间计算得到毫秒值
	Variety           []string `protobuf:"bytes,8,rep,name=variety,proto3" json:"variety,omitempty"`                     // 品种id列表，指数标的、价差互换对应多品种。目前只是服务端内部使用，后续客户端如果需要使用请和服务端联系
}

func (x *OtcSwapMatchQuotElement) Reset() {
	*x = OtcSwapMatchQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcSwapMatchQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcSwapMatchQuotElement) ProtoMessage() {}

func (x *OtcSwapMatchQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcSwapMatchQuotElement.ProtoReflect.Descriptor instead.
func (*OtcSwapMatchQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{67}
}

func (x *OtcSwapMatchQuotElement) GetMatchDate() string {
	if x != nil {
		return x.MatchDate
	}
	return ""
}

func (x *OtcSwapMatchQuotElement) GetContractTypeName() string {
	if x != nil {
		return x.ContractTypeName
	}
	return ""
}

func (x *OtcSwapMatchQuotElement) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *OtcSwapMatchQuotElement) GetSubjectContractId() string {
	if x != nil {
		return x.SubjectContractId
	}
	return ""
}

func (x *OtcSwapMatchQuotElement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OtcSwapMatchQuotElement) GetMatchNo() string {
	if x != nil {
		return x.MatchNo
	}
	return ""
}

func (x *OtcSwapMatchQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *OtcSwapMatchQuotElement) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 场外互换持仓行情
// @author <daihouda>
// @date 2020-9-21
// @note matchDate + subjectContractId + contractType能确定数据唯一
// @modify 2020-10-26
type OtcSwapPositionQuotElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDate         string   `protobuf:"bytes,1,opt,name=matchDate,proto3" json:"matchDate,omitempty"`                 // 成交日期
	ContractTypeName  string   `protobuf:"bytes,2,opt,name=contractTypeName,proto3" json:"contractTypeName,omitempty"`   // 合约类型
	ContractType      string   `protobuf:"bytes,3,opt,name=contractType,proto3" json:"contractType,omitempty"`           // 合约类型编号
	SubjectContractId string   `protobuf:"bytes,4,opt,name=subjectContractId,proto3" json:"subjectContractId,omitempty"` // 标的
	MatchAmt          float64  `protobuf:"fixed64,5,opt,name=matchAmt,proto3" json:"matchAmt,omitempty"`                 // 成交金额
	GenTime           uint64   `protobuf:"varint,6,opt,name=genTime,proto3" json:"genTime,omitempty"`                    // 辅助字段，通过日期和时间计算得到毫秒值
	Variety           []string `protobuf:"bytes,7,rep,name=variety,proto3" json:"variety,omitempty"`                     // 品种id列表，指数标的、价差互换对应多品种。目前只是服务端内部使用，后续客户端如果需要使用请和服务端联系
}

func (x *OtcSwapPositionQuotElement) Reset() {
	*x = OtcSwapPositionQuotElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcSwapPositionQuotElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcSwapPositionQuotElement) ProtoMessage() {}

func (x *OtcSwapPositionQuotElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcSwapPositionQuotElement.ProtoReflect.Descriptor instead.
func (*OtcSwapPositionQuotElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{68}
}

func (x *OtcSwapPositionQuotElement) GetMatchDate() string {
	if x != nil {
		return x.MatchDate
	}
	return ""
}

func (x *OtcSwapPositionQuotElement) GetContractTypeName() string {
	if x != nil {
		return x.ContractTypeName
	}
	return ""
}

func (x *OtcSwapPositionQuotElement) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *OtcSwapPositionQuotElement) GetSubjectContractId() string {
	if x != nil {
		return x.SubjectContractId
	}
	return ""
}

func (x *OtcSwapPositionQuotElement) GetMatchAmt() float64 {
	if x != nil {
		return x.MatchAmt
	}
	return 0
}

func (x *OtcSwapPositionQuotElement) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *OtcSwapPositionQuotElement) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 场外互换合约类型列表请求
// @author <daihouda>
// @date 2020-9-21
// @note client-proxy<3305> proxy-real<5227> real-collecotr<5227>
// @modify
type ReqOtcSwapContractTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId   uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
}

func (x *ReqOtcSwapContractTypeList) Reset() {
	*x = ReqOtcSwapContractTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqOtcSwapContractTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqOtcSwapContractTypeList) ProtoMessage() {}

func (x *ReqOtcSwapContractTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqOtcSwapContractTypeList.ProtoReflect.Descriptor instead.
func (*ReqOtcSwapContractTypeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{69}
}

func (x *ReqOtcSwapContractTypeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqOtcSwapContractTypeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// *
// @brief 场外互换合约类型列表应答
// @author <daihouda>
// @date 2020-9-21
// @note client-proxy<3306> proxy-real<5228> real-collecotr<5228>
// @modify
type RspOtcSwapContractTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID               `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32                 `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	ErrorId  uint32                 `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string                 `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast   bool                   `protobuf:"varint,5,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // 结束标志
	List     []*OtcSwapContractType `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`                            // 合约类型列表
}

func (x *RspOtcSwapContractTypeList) Reset() {
	*x = RspOtcSwapContractTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOtcSwapContractTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOtcSwapContractTypeList) ProtoMessage() {}

func (x *RspOtcSwapContractTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOtcSwapContractTypeList.ProtoReflect.Descriptor instead.
func (*RspOtcSwapContractTypeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{70}
}

func (x *RspOtcSwapContractTypeList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspOtcSwapContractTypeList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOtcSwapContractTypeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOtcSwapContractTypeList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspOtcSwapContractTypeList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspOtcSwapContractTypeList) GetList() []*OtcSwapContractType {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 场外互换合约类型列表推送
// @author <daihouda>
// @date 2020-10-17
// @note real-proxy<5233> collecotr-real<5233> real-hist<5233>
// @modify
type NotifyOtcSwapContractTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  uint32                 `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；其他，失败
	ErrorMsg string                 `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
	IsLast   bool                   `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`    // 结束标志
	List     []*OtcSwapContractType `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`         // 合约类型列表
}

func (x *NotifyOtcSwapContractTypeList) Reset() {
	*x = NotifyOtcSwapContractTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOtcSwapContractTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOtcSwapContractTypeList) ProtoMessage() {}

func (x *NotifyOtcSwapContractTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOtcSwapContractTypeList.ProtoReflect.Descriptor instead.
func (*NotifyOtcSwapContractTypeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{71}
}

func (x *NotifyOtcSwapContractTypeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyOtcSwapContractTypeList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifyOtcSwapContractTypeList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyOtcSwapContractTypeList) GetList() []*OtcSwapContractType {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 订阅场外互换行情请求
// @author <daihouda>
// @date 2020-9-21
// @note client-proxy<3307> proxy-real<5229> real-collecotr<5229> hist-real<5229>
// @modify 2020-10-28
type ReqSubscribeOtcSwapQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`         // 交易所id
	MsgId    uint32           `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                                 // 流水号
	QuotType EOtcQuotType     `protobuf:"varint,3,opt,name=quotType,proto3,enum=fippb.EOtcQuotType" json:"quotType,omitempty"`   // 行情类型，如果为OQT_swapAll则订阅全部
	ReqType  ReqSubscribeType `protobuf:"varint,4,opt,name=reqType,proto3,enum=fippb.ReqSubscribeType" json:"reqType,omitempty"` // 订阅类型，新增、修改、取消
	Variety  []string         `protobuf:"bytes,5,rep,name=variety,proto3" json:"variety,omitempty"`                              // 品种id列表，空时为全部
}

func (x *ReqSubscribeOtcSwapQuot) Reset() {
	*x = ReqSubscribeOtcSwapQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeOtcSwapQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeOtcSwapQuot) ProtoMessage() {}

func (x *ReqSubscribeOtcSwapQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeOtcSwapQuot.ProtoReflect.Descriptor instead.
func (*ReqSubscribeOtcSwapQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{72}
}

func (x *ReqSubscribeOtcSwapQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSubscribeOtcSwapQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubscribeOtcSwapQuot) GetQuotType() EOtcQuotType {
	if x != nil {
		return x.QuotType
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *ReqSubscribeOtcSwapQuot) GetReqType() ReqSubscribeType {
	if x != nil {
		return x.ReqType
	}
	return ReqSubscribeType_RST_Add
}

func (x *ReqSubscribeOtcSwapQuot) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 订阅场外互换行情应答
// @author <daihouda>
// @date 2020-9-21
// @note client-proxy<3308> proxy-real<5230> real-collecotr<5230> hist-real<5230>
// @modify 2020-10-26
type RspSubscribeOtcSwapQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`         // 交易所id
	MsgId    uint32           `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                                 // 流水号
	QuotType EOtcQuotType     `protobuf:"varint,3,opt,name=quotType,proto3,enum=fippb.EOtcQuotType" json:"quotType,omitempty"`   // 行情类型
	ReqType  ReqSubscribeType `protobuf:"varint,4,opt,name=reqType,proto3,enum=fippb.ReqSubscribeType" json:"reqType,omitempty"` // 请求订阅行情类型
	Variety  []string         `protobuf:"bytes,5,rep,name=variety,proto3" json:"variety,omitempty"`                              // 品种id列表
	ErrorId  uint32           `protobuf:"varint,6,opt,name=errorId,proto3" json:"errorId,omitempty"`                             // 结果0，成功；其他，失败
	ErrorMsg string           `protobuf:"bytes,7,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                            // 信息描述
}

func (x *RspSubscribeOtcSwapQuot) Reset() {
	*x = RspSubscribeOtcSwapQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeOtcSwapQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeOtcSwapQuot) ProtoMessage() {}

func (x *RspSubscribeOtcSwapQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeOtcSwapQuot.ProtoReflect.Descriptor instead.
func (*RspSubscribeOtcSwapQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{73}
}

func (x *RspSubscribeOtcSwapQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSubscribeOtcSwapQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSubscribeOtcSwapQuot) GetQuotType() EOtcQuotType {
	if x != nil {
		return x.QuotType
	}
	return EOtcQuotType_OQT_basisStatus
}

func (x *RspSubscribeOtcSwapQuot) GetReqType() ReqSubscribeType {
	if x != nil {
		return x.ReqType
	}
	return ReqSubscribeType_RST_Add
}

func (x *RspSubscribeOtcSwapQuot) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

func (x *RspSubscribeOtcSwapQuot) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSubscribeOtcSwapQuot) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 场外互换成交行情
// @author <daihouda>
// @date 2020-9-21
// @note 协议号
// @note proxy-client<3309> real-proxy<5231> collecotr-real<5231> real-hist<5231>
// @modify
type NotifySwapMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  uint32                     `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；其他，失败
	ErrorMsg string                     `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
	IsLast   bool                       `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`    // true:结束；false:分包
	List     []*OtcSwapMatchQuotElement `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`         // 互换成交行情
}

func (x *NotifySwapMatchQuotList) Reset() {
	*x = NotifySwapMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySwapMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySwapMatchQuotList) ProtoMessage() {}

func (x *NotifySwapMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySwapMatchQuotList.ProtoReflect.Descriptor instead.
func (*NotifySwapMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{74}
}

func (x *NotifySwapMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifySwapMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifySwapMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifySwapMatchQuotList) GetList() []*OtcSwapMatchQuotElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 场外互换持仓行情
// @author <daihouda>
// @date 2020-9-21
// @note 协议号
// @note proxy-client<3310> real-proxy<5232> collecotr-real<5232> real-hist<5232>
// @modify
type NotifySwapPositionQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  uint32                        `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；其他，失败
	ErrorMsg string                        `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
	IsLast   bool                          `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`    // true:结束；false:分包
	List     []*OtcSwapPositionQuotElement `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`         // 互换成交行情
}

func (x *NotifySwapPositionQuotList) Reset() {
	*x = NotifySwapPositionQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySwapPositionQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySwapPositionQuotList) ProtoMessage() {}

func (x *NotifySwapPositionQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySwapPositionQuotList.ProtoReflect.Descriptor instead.
func (*NotifySwapPositionQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{75}
}

func (x *NotifySwapPositionQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifySwapPositionQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifySwapPositionQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifySwapPositionQuotList) GetList() []*OtcSwapPositionQuotElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 互换历史成交行情列表请求
// @author <daihouda>
// @date 2020-09-23
// @note 协议号 client-proxy:<3301> proxy-hist:<5223>
// @modify  2020-10-26
type ReqSwapMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId          EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId            uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	GenTime          uint64   `protobuf:"varint,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 移动端分页的请求，数据必填
	Count            int32    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                         // 请求数量， count >0 查询 >genTime的数据 <0 查询<genTime的数据 =0 无数据
	LastContractType string   `protobuf:"bytes,5,opt,name=lastContractType,proto3" json:"lastContractType,omitempty"`    // 上次结果集中最后一条的合约类型，第一次请求时填空，其余填上次结果集中最后一个合约类型
	Variety          []string `protobuf:"bytes,6,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表，指数标的、价差互换对应多品种
}

func (x *ReqSwapMatchQuotList) Reset() {
	*x = ReqSwapMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSwapMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSwapMatchQuotList) ProtoMessage() {}

func (x *ReqSwapMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSwapMatchQuotList.ProtoReflect.Descriptor instead.
func (*ReqSwapMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{76}
}

func (x *ReqSwapMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSwapMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSwapMatchQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqSwapMatchQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqSwapMatchQuotList) GetLastContractType() string {
	if x != nil {
		return x.LastContractType
	}
	return ""
}

func (x *ReqSwapMatchQuotList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 互换历史成交行情列表响应
// @author <daihouda>
// @date 2020-09-23
// @note 协议号 proxy-client:<3302> hist-proxy:<5224>
// @modify 2020-10-26
type RspSwapMatchQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID                   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32                     `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Variety  []string                   `protobuf:"bytes,3,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表，指数标的、价差互换对应多品种
	ErrorId  uint32                     `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string                     `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast   bool                       `protobuf:"varint,6,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	List     []*OtcSwapMatchQuotElement `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`                            // 行情列表
}

func (x *RspSwapMatchQuotList) Reset() {
	*x = RspSwapMatchQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSwapMatchQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSwapMatchQuotList) ProtoMessage() {}

func (x *RspSwapMatchQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSwapMatchQuotList.ProtoReflect.Descriptor instead.
func (*RspSwapMatchQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{77}
}

func (x *RspSwapMatchQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSwapMatchQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSwapMatchQuotList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

func (x *RspSwapMatchQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSwapMatchQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspSwapMatchQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspSwapMatchQuotList) GetList() []*OtcSwapMatchQuotElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 互换历史持仓行情列表请求
// @author <daihouda>
// @date 2020-09-23
// @note 协议号 client-proxy:<3303> proxy-hist:<5225>
// @modify 2020-10-26
type ReqSwapPositionQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId          EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId            uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	GenTime          uint64   `protobuf:"varint,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                     // 移动端分页的请求，数据必填
	Count            int32    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                         // 请求数量， count >0 查询 >genTime的数据 <0 查询<genTime的数据 =0 无数据
	LastContractType string   `protobuf:"bytes,5,opt,name=lastContractType,proto3" json:"lastContractType,omitempty"`    // 上次结果集中最后一条的合约类型，第一次请求时填空，其余填上次结果集中最后一个合约类型
	Variety          []string `protobuf:"bytes,6,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表，指数标的、价差互换对应多品种
}

func (x *ReqSwapPositionQuotList) Reset() {
	*x = ReqSwapPositionQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSwapPositionQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSwapPositionQuotList) ProtoMessage() {}

func (x *ReqSwapPositionQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSwapPositionQuotList.ProtoReflect.Descriptor instead.
func (*ReqSwapPositionQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{78}
}

func (x *ReqSwapPositionQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSwapPositionQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSwapPositionQuotList) GetGenTime() uint64 {
	if x != nil {
		return x.GenTime
	}
	return 0
}

func (x *ReqSwapPositionQuotList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqSwapPositionQuotList) GetLastContractType() string {
	if x != nil {
		return x.LastContractType
	}
	return ""
}

func (x *ReqSwapPositionQuotList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 互换历史持仓行情列表响应
// @author <daihouda>
// @date 2020-09-23
// @note 协议号 proxy-client:<3304> hist-proxy:<5226>
// @modify 2020-10-26
type RspSwapPositionQuotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID                      `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32                        `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Variety  []string                      `protobuf:"bytes,3,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表，指数标的、价差互换对应多品种
	ErrorId  uint32                        `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string                        `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast   bool                          `protobuf:"varint,6,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	List     []*OtcSwapPositionQuotElement `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`                            // 行情列表
}

func (x *RspSwapPositionQuotList) Reset() {
	*x = RspSwapPositionQuotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSwapPositionQuotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSwapPositionQuotList) ProtoMessage() {}

func (x *RspSwapPositionQuotList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSwapPositionQuotList.ProtoReflect.Descriptor instead.
func (*RspSwapPositionQuotList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{79}
}

func (x *RspSwapPositionQuotList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSwapPositionQuotList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSwapPositionQuotList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

func (x *RspSwapPositionQuotList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSwapPositionQuotList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspSwapPositionQuotList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspSwapPositionQuotList) GetList() []*OtcSwapPositionQuotElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 场外互换品种信息
// @author <wangyanlong>
// @date 2020-10-27
// @note
// @modify
type OtcSwapVarietyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId   string `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`     // 品种ID
	VarietyName string `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"` // 品种名称
}

func (x *OtcSwapVarietyInfo) Reset() {
	*x = OtcSwapVarietyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcSwapVarietyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcSwapVarietyInfo) ProtoMessage() {}

func (x *OtcSwapVarietyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcSwapVarietyInfo.ProtoReflect.Descriptor instead.
func (*OtcSwapVarietyInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{80}
}

func (x *OtcSwapVarietyInfo) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *OtcSwapVarietyInfo) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

// *
// @brief 场外互换品种关联关系
// @author <wangyanlong>
// @date 2020-10-27
// @note
// @modify
type OtcSwapUnderlyingVarietyElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Underlying  string                `protobuf:"bytes,1,opt,name=underlying,proto3" json:"underlying,omitempty"`   // 标的名
	Alias       []string              `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"`             // 别名
	VarietyList []*OtcSwapVarietyInfo `protobuf:"bytes,3,rep,name=varietyList,proto3" json:"varietyList,omitempty"` // 关联品种列表
}

func (x *OtcSwapUnderlyingVarietyElement) Reset() {
	*x = OtcSwapUnderlyingVarietyElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcSwapUnderlyingVarietyElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcSwapUnderlyingVarietyElement) ProtoMessage() {}

func (x *OtcSwapUnderlyingVarietyElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcSwapUnderlyingVarietyElement.ProtoReflect.Descriptor instead.
func (*OtcSwapUnderlyingVarietyElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{81}
}

func (x *OtcSwapUnderlyingVarietyElement) GetUnderlying() string {
	if x != nil {
		return x.Underlying
	}
	return ""
}

func (x *OtcSwapUnderlyingVarietyElement) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *OtcSwapUnderlyingVarietyElement) GetVarietyList() []*OtcSwapVarietyInfo {
	if x != nil {
		return x.VarietyList
	}
	return nil
}

// *
// @brief 场外品种对应列表
// @author <wangyanlong>
// @date 2020-10-27
// @note real-hist<5234>
// @modify
type NotifySwapUnderlyingVarietylist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  uint32                             `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；其他，失败
	ErrorMsg string                             `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
	IsLast   bool                               `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`    // true:结束；false:分包
	List     []*OtcSwapUnderlyingVarietyElement `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`         // 互换品种关联关系列表
}

func (x *NotifySwapUnderlyingVarietylist) Reset() {
	*x = NotifySwapUnderlyingVarietylist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySwapUnderlyingVarietylist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySwapUnderlyingVarietylist) ProtoMessage() {}

func (x *NotifySwapUnderlyingVarietylist) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySwapUnderlyingVarietylist.ProtoReflect.Descriptor instead.
func (*NotifySwapUnderlyingVarietylist) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{82}
}

func (x *NotifySwapUnderlyingVarietylist) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifySwapUnderlyingVarietylist) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *NotifySwapUnderlyingVarietylist) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifySwapUnderlyingVarietylist) GetList() []*OtcSwapUnderlyingVarietyElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 互换历史持仓行情快照请求
// @author <daihouda>
// @date 2020-11-25
// @note 协议号 client-real:<5237>
// @modify
type ReqSwapPositionSnapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId   uint32   `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Variety []string `protobuf:"bytes,3,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表，空为全部
}

func (x *ReqSwapPositionSnapList) Reset() {
	*x = ReqSwapPositionSnapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSwapPositionSnapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSwapPositionSnapList) ProtoMessage() {}

func (x *ReqSwapPositionSnapList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSwapPositionSnapList.ProtoReflect.Descriptor instead.
func (*ReqSwapPositionSnapList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{83}
}

func (x *ReqSwapPositionSnapList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqSwapPositionSnapList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSwapPositionSnapList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

// *
// @brief 互换历史持仓行情快照响应
// @author <daihouda>
// @date 2020-11-25
// @note 协议号 real-cliient:<5238>
// @modify
type RspSwapPositionSnapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID                      `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32                        `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`                         // 流水号
	Variety  []string                      `protobuf:"bytes,3,rep,name=variety,proto3" json:"variety,omitempty"`                      // 品种id列表
	ErrorId  uint32                        `protobuf:"varint,4,opt,name=errorId,proto3" json:"errorId,omitempty"`                     // 结果0，成功；其他，失败
	ErrorMsg string                        `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 信息描述
	IsLast   bool                          `protobuf:"varint,6,opt,name=isLast,proto3" json:"isLast,omitempty"`                       // true:结束；false:分包
	List     []*OtcSwapPositionQuotElement `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`                            // 行情列表
}

func (x *RspSwapPositionSnapList) Reset() {
	*x = RspSwapPositionSnapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSwapPositionSnapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSwapPositionSnapList) ProtoMessage() {}

func (x *RspSwapPositionSnapList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSwapPositionSnapList.ProtoReflect.Descriptor instead.
func (*RspSwapPositionSnapList) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{84}
}

func (x *RspSwapPositionSnapList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspSwapPositionSnapList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSwapPositionSnapList) GetVariety() []string {
	if x != nil {
		return x.Variety
	}
	return nil
}

func (x *RspSwapPositionSnapList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSwapPositionSnapList) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspSwapPositionSnapList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspSwapPositionSnapList) GetList() []*OtcSwapPositionQuotElement {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 场外实时行情统计订阅请求
// @author <houyahui>
// @date 2021-04-27
// @note 协议号 client-proxy:<>     周期类型和业务类型就可以唯一确认数据
// @modify
type ReqSubOtcRealStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32            `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`                                        // 流水号
	ReqType    ReqSubscribeType  `protobuf:"varint,2,opt,name=reqType,proto3,enum=fippb.ReqSubscribeType" json:"reqType,omitempty"`        // 订阅类型 新增、取消部分、取消全部、更新, 对于场外实时统计来说，不需要取消部分
	PeriodType EOTCStaPeriodType `protobuf:"varint,3,opt,name=periodType,proto3,enum=fippb.EOTCStaPeriodType" json:"periodType,omitempty"` // 订阅的周期类型
	ExchgId    EExchgID          `protobuf:"varint,4,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`                // ID是NULL代表请求全部
}

func (x *ReqSubOtcRealStatistics) Reset() {
	*x = ReqSubOtcRealStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubOtcRealStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubOtcRealStatistics) ProtoMessage() {}

func (x *ReqSubOtcRealStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubOtcRealStatistics.ProtoReflect.Descriptor instead.
func (*ReqSubOtcRealStatistics) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{85}
}

func (x *ReqSubOtcRealStatistics) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubOtcRealStatistics) GetReqType() ReqSubscribeType {
	if x != nil {
		return x.ReqType
	}
	return ReqSubscribeType_RST_Add
}

func (x *ReqSubOtcRealStatistics) GetPeriodType() EOTCStaPeriodType {
	if x != nil {
		return x.PeriodType
	}
	return EOTCStaPeriodType_OTCStaPeriodAll
}

func (x *ReqSubOtcRealStatistics) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

// *
// @brief 场外实时行情统计订阅响应
// @author <houyahui>
// @date 2021-04-27
// @note 协议号 client-proxy:<>
// @modify
type RspSubOtcRealStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint32 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`      // 流水号
	ErrorId  uint32 `protobuf:"varint,2,opt,name=errorId,proto3" json:"errorId,omitempty"`  // 结果0，成功；其他，失败
	ErrorMsg string `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 信息描述
}

func (x *RspSubOtcRealStatistics) Reset() {
	*x = RspSubOtcRealStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubOtcRealStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubOtcRealStatistics) ProtoMessage() {}

func (x *RspSubOtcRealStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubOtcRealStatistics.ProtoReflect.Descriptor instead.
func (*RspSubOtcRealStatistics) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{86}
}

func (x *RspSubOtcRealStatistics) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSubOtcRealStatistics) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSubOtcRealStatistics) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 场外实时行情统计元素
// @author <houyahui>
// @date 2021-04-27
// @note 协议号 client-proxy:<> proxy-real:<> real-statistics
// @modify
type OtcRealStatisticsElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId       EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id （ID是NULL的情况下数据是同一品种的加和）
	VarietyId     string   `protobuf:"bytes,2,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种ID
	VarietyName   string   `protobuf:"bytes,3,opt,name=varietyName,proto3" json:"varietyName,omitempty"`              // 品种名称
	MatchCount    uint32   `protobuf:"varint,4,opt,name=matchCount,proto3" json:"matchCount,omitempty"`               // 成交笔数
	MatchTotQty   float64  `protobuf:"fixed64,5,opt,name=matchTotQty,proto3" json:"matchTotQty,omitempty"`            // 成交量(万吨)
	Turnover      float64  `protobuf:"fixed64,6,opt,name=turnover,proto3" json:"turnover,omitempty"`                  // 成交额(万元)
	LastMatchDate string   `protobuf:"bytes,7,opt,name=lastMatchDate,proto3" json:"lastMatchDate,omitempty"`          // 该品种数据的最后成交日期
}

func (x *OtcRealStatisticsElement) Reset() {
	*x = OtcRealStatisticsElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtcRealStatisticsElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcRealStatisticsElement) ProtoMessage() {}

func (x *OtcRealStatisticsElement) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcRealStatisticsElement.ProtoReflect.Descriptor instead.
func (*OtcRealStatisticsElement) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{87}
}

func (x *OtcRealStatisticsElement) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *OtcRealStatisticsElement) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *OtcRealStatisticsElement) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *OtcRealStatisticsElement) GetMatchCount() uint32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *OtcRealStatisticsElement) GetMatchTotQty() float64 {
	if x != nil {
		return x.MatchTotQty
	}
	return 0
}

func (x *OtcRealStatisticsElement) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *OtcRealStatisticsElement) GetLastMatchDate() string {
	if x != nil {
		return x.LastMatchDate
	}
	return ""
}

// *
// @brief 场外实时行情统计数据推送
// @author <houyahui>
// @date 2021-04-27
// @note 协议号 client-proxy:<>
// @modify
type NotifyOtcRealStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32                      `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`                                        // 流水号
	PeriodType EOTCStaPeriodType           `protobuf:"varint,2,opt,name=periodType,proto3,enum=fippb.EOTCStaPeriodType" json:"periodType,omitempty"` // 周期类型
	StartDate  string                      `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`                                 // 这一批数据的开始成交日期（包含全部的数据包）
	EndDate    string                      `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`                                     // 这一批数据的结束成交日期
	IsLast     bool                        `protobuf:"varint,5,opt,name=isLast,proto3" json:"isLast,omitempty"`                                      // true:结束； false:分包（每种周期类型发送完成置为true）
	List       []*OtcRealStatisticsElement `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`                                           // 响应实时行情统计列表
}

func (x *NotifyOtcRealStatistics) Reset() {
	*x = NotifyOtcRealStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_otc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOtcRealStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOtcRealStatistics) ProtoMessage() {}

func (x *NotifyOtcRealStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_otc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOtcRealStatistics.ProtoReflect.Descriptor instead.
func (*NotifyOtcRealStatistics) Descriptor() ([]byte, []int) {
	return file_fip_interface_otc_proto_rawDescGZIP(), []int{88}
}

func (x *NotifyOtcRealStatistics) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOtcRealStatistics) GetPeriodType() EOTCStaPeriodType {
	if x != nil {
		return x.PeriodType
	}
	return EOTCStaPeriodType_OTCStaPeriodAll
}

func (x *NotifyOtcRealStatistics) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NotifyOtcRealStatistics) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *NotifyOtcRealStatistics) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *NotifyOtcRealStatistics) GetList() []*OtcRealStatisticsElement {
	if x != nil {
		return x.List
	}
	return nil
}

var File_fip_interface_otc_proto protoreflect.FileDescriptor

var file_fip_interface_otc_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6f, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6f, 0x74, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x4f, 0x74, 0x63, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x4f, 0x74, 0x63, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0x79, 0x0a, 0x0f, 0x4f, 0x74, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x4f, 0x74, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x90, 0x02,
	0x0a, 0x0f, 0x52, 0x73, 0x70, 0x4f, 0x74, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x93, 0x02, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x63, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x4f, 0x74,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x4f, 0x74,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a,
	0x11, 0x4f, 0x74, 0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x4f, 0x74, 0x63, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa3,
	0x02, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x4f, 0x74, 0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x74, 0x63,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x74, 0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f,
	0x74, 0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61,
	0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0xf6, 0x0a, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x42, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x42, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x66, 0x46, 0x74, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x66, 0x46, 0x74, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x46, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x66, 0x46, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x66, 0x44,
	0x65, 0x6c, 0x69, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x66, 0x44, 0x65, 0x6c, 0x69,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x44, 0x65,
	0x6c, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x62, 0x75, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x6c,
	0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x15, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x75,
	0x72, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6d,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x42, 0x61, 0x73, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x42, 0x61, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x02, 0x0a,
	0x10, 0x52, 0x73, 0x70, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xf3, 0x02, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51,
	0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x51, 0x75,
	0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x15,
	0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x62, 0x69, 0x6c,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xa5, 0x03, 0x0a,
	0x15, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x68, 0x41, 0x62, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x68, 0x41, 0x62, 0x62, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x57, 0x62, 0x69, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x52, 0x73, 0x70, 0x57, 0x62, 0x69, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x71, 0x75, 0x6f,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x71, 0x75,
	0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x18, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x15, 0x57, 0x62,
	0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x68, 0x41, 0x62, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x68, 0x41,
	0x62, 0x62, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x6f, 0x74, 0x51, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x69, 0x73, 0x65, 0x46,
	0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x69, 0x73, 0x65, 0x46,
	0x61, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x65,
	0x46, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x57,
	0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x52, 0x73, 0x70,
	0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x71,
	0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdd, 0x02,
	0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf3, 0x02,
	0x0a, 0x1b, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x68, 0x41, 0x62, 0x62, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x68, 0x41, 0x62, 0x62, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e,
	0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x57, 0x62, 0x69, 0x6c, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x1b, 0x52,
	0x73, 0x70, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62,
	0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x71, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57,
	0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x1e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x57, 0x62, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x57, 0x62, 0x69, 0x6c,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x6f, 0x74,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x74,
	0x63, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xd7, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x1a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xab, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x03,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x51,
	0x75, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x74, 0x63,
	0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0xbf, 0x03, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53,
	0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x51, 0x75,
	0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe6,
	0x06, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x53,
	0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x75, 0x72, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x75, 0x72, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75,
	0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x1c, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x61, 0x6e,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69,
	0x47, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x97, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x4f, 0x74, 0x63,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x61, 0x6e,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc5,
	0x02, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x73, 0x68, 0x61, 0x61, 0x6e,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x1b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x73, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x7b, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x62, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a,
	0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x41, 0x62, 0x62, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1c, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x61,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x62,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x61, 0x62, 0x62, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x61, 0x6e,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x62,
	0x72, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x61, 0x62, 0x62, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x93, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x53, 0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69,
	0x47, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x52,
	0x73, 0x70, 0x53, 0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x65,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x61, 0x6e, 0x78, 0x69,
	0x47, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53,
	0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x74,
	0x0a, 0x14, 0x53, 0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74,
	0x63, 0x47, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x68, 0x61, 0x61,
	0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x61, 0x78, 0x69, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x17, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x22,
	0x88, 0x02, 0x0a, 0x1a, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x22, 0x5d, 0x0a, 0x1a, 0x52, 0x65,
	0x71, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1a, 0x52, 0x73,
	0x70, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74,
	0x63, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74,
	0x63, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x74, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x74, 0x63, 0x51, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x77,
	0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x53, 0x77, 0x61,
	0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x53, 0x77, 0x61,
	0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74,
	0x63, 0x53, 0x77, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x22, 0xf9,
	0x01, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61,
	0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x12, 0x4f, 0x74,
	0x63, 0x53, 0x77, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x1f, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x17,
	0x52, 0x73, 0x70, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53,
	0x75, 0x62, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x53, 0x74, 0x61,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x22, 0x65, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x4f, 0x74, 0x63, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x89, 0x02, 0x0a, 0x18, 0x4f, 0x74, 0x63,
	0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x74, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x4f, 0x54, 0x43, 0x53, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e,
	0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_otc_proto_rawDescOnce sync.Once
	file_fip_interface_otc_proto_rawDescData = file_fip_interface_otc_proto_rawDesc
)

func file_fip_interface_otc_proto_rawDescGZIP() []byte {
	file_fip_interface_otc_proto_rawDescOnce.Do(func() {
		file_fip_interface_otc_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_otc_proto_rawDescData)
	})
	return file_fip_interface_otc_proto_rawDescData
}

var file_fip_interface_otc_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_fip_interface_otc_proto_goTypes = []interface{}{
	(*ReqOtcLogin)(nil),                     // 0: fippb.ReqOtcLogin
	(*RspOtcLogin)(nil),                     // 1: fippb.RspOtcLogin
	(*OtcGradeElement)(nil),                 // 2: fippb.OtcGradeElement
	(*ReqOtcGradeList)(nil),                 // 3: fippb.ReqOtcGradeList
	(*RspOtcGradeList)(nil),                 // 4: fippb.RspOtcGradeList
	(*NotifyOtcGradeList)(nil),              // 5: fippb.NotifyOtcGradeList
	(*OtcRegionElement)(nil),                // 6: fippb.OtcRegionElement
	(*ReqOtcRegionList)(nil),                // 7: fippb.ReqOtcRegionList
	(*RspOtcRegionList)(nil),                // 8: fippb.RspOtcRegionList
	(*OtcVarietyElement)(nil),               // 9: fippb.OtcVarietyElement
	(*ReqOtcVarietyList)(nil),               // 10: fippb.ReqOtcVarietyList
	(*RspOtcVarietyList)(nil),               // 11: fippb.RspOtcVarietyList
	(*NotifyOtcVarietyList)(nil),            // 12: fippb.NotifyOtcVarietyList
	(*ReqSubscribeBasisQuot)(nil),           // 13: fippb.ReqSubscribeBasisQuot
	(*RspSubscribeBasisQuot)(nil),           // 14: fippb.RspSubscribeBasisQuot
	(*BasisQuotElement)(nil),                // 15: fippb.BasisQuotElement
	(*ReqBasisOrderQuotList)(nil),           // 16: fippb.ReqBasisOrderQuotList
	(*ReqBasisMatchQuotList)(nil),           // 17: fippb.ReqBasisMatchQuotList
	(*RspBasisQuotList)(nil),                // 18: fippb.RspBasisQuotList
	(*BasisQuotIncrement)(nil),              // 19: fippb.BasisQuotIncrement
	(*NotifyBasisQuotList)(nil),             // 20: fippb.NotifyBasisQuotList
	(*ReqSubscribeWbillQuot)(nil),           // 21: fippb.ReqSubscribeWbillQuot
	(*RspSubscribeWbillQuot)(nil),           // 22: fippb.RspSubscribeWbillQuot
	(*WbillOrderQuotElement)(nil),           // 23: fippb.WbillOrderQuotElement
	(*ReqWbillOrderQuotList)(nil),           // 24: fippb.ReqWbillOrderQuotList
	(*RspWbillOrderQuotList)(nil),           // 25: fippb.RspWbillOrderQuotList
	(*WbillOrderQuotIncrement)(nil),         // 26: fippb.WbillOrderQuotIncrement
	(*NotifyWbillOrderQuotList)(nil),        // 27: fippb.NotifyWbillOrderQuotList
	(*WbillMatchQuotElement)(nil),           // 28: fippb.WbillMatchQuotElement
	(*ReqWbillMatchQuotList)(nil),           // 29: fippb.ReqWbillMatchQuotList
	(*RspWbillMatchQuotList)(nil),           // 30: fippb.RspWbillMatchQuotList
	(*WbillMatchQuotIncrement)(nil),         // 31: fippb.WbillMatchQuotIncrement
	(*NotifyWbillMatchQuotList)(nil),        // 32: fippb.NotifyWbillMatchQuotList
	(*WbillMatchDetailQuotElement)(nil),     // 33: fippb.WbillMatchDetailQuotElement
	(*ReqWbillMatchDetailQuotList)(nil),     // 34: fippb.ReqWbillMatchDetailQuotList
	(*RspWbillMatchDetailQuotList)(nil),     // 35: fippb.RspWbillMatchDetailQuotList
	(*WbillMatchDetailQuotIncrement)(nil),   // 36: fippb.WbillMatchDetailQuotIncrement
	(*NotifyWbillMatchDetailQuotList)(nil),  // 37: fippb.NotifyWbillMatchDetailQuotList
	(*NotifyClearClientCache)(nil),          // 38: fippb.NotifyClearClientCache
	(*SeaPortOrderQuotElement)(nil),         // 39: fippb.SeaPortOrderQuotElement
	(*ReqSeaPortOrderQuotList)(nil),         // 40: fippb.ReqSeaPortOrderQuotList
	(*RspSeaPortOrderQuotList)(nil),         // 41: fippb.RspSeaPortOrderQuotList
	(*NotifySeaPortOrderQuotList)(nil),      // 42: fippb.NotifySeaPortOrderQuotList
	(*SeaPortMatchQuotElement)(nil),         // 43: fippb.SeaPortMatchQuotElement
	(*ReqSeaPortMatchQuotList)(nil),         // 44: fippb.ReqSeaPortMatchQuotList
	(*InnerReqSeaPortMatchQuotList)(nil),    // 45: fippb.InnerReqSeaPortMatchQuotList
	(*RspSeaPortMatchQuotList)(nil),         // 46: fippb.RspSeaPortMatchQuotList
	(*NotifySeaPortMatchQuotList)(nil),      // 47: fippb.NotifySeaPortMatchQuotList
	(*ShaanxiGrainMatchQuotElement)(nil),    // 48: fippb.ShaanxiGrainMatchQuotElement
	(*ReqShaanxiGrainMatchQuotList)(nil),    // 49: fippb.ReqShaanxiGrainMatchQuotList
	(*RspShaanxiGrainMatchQuotList)(nil),    // 50: fippb.RspShaanxiGrainMatchQuotList
	(*ReqShaanxiGrainPriceList)(nil),        // 51: fippb.ReqShaanxiGrainPriceList
	(*OtcPriceElement)(nil),                 // 52: fippb.OtcPriceElement
	(*ShaanxiGrainPriceList)(nil),           // 53: fippb.shaanxiGrainPriceList
	(*RspShaanxiGrainPriceList)(nil),        // 54: fippb.RspShaanxiGrainPriceList
	(*NotifyShaanxiGrainMatchQuotList)(nil), // 55: fippb.NotifyShaanxiGrainMatchQuotList
	(*NotifyShaanxiGrainPriceInfo)(nil),     // 56: fippb.NotifyShaanxiGrainPriceInfo
	(*ReqShaaxiGrainRegionAbbrList)(nil),    // 57: fippb.ReqShaaxiGrainRegionAbbrList
	(*ShaanxiGrainRegionAbbrElem)(nil),      // 58: fippb.ShaanxiGrainRegionAbbrElem
	(*RspShaaxiGrainRegionAbbrList)(nil),    // 59: fippb.RspShaaxiGrainRegionAbbrList
	(*ReqShaaxiGrainAreaList)(nil),          // 60: fippb.ReqShaaxiGrainAreaList
	(*ShaanxiGrainAreaElem)(nil),            // 61: fippb.ShaanxiGrainAreaElem
	(*RspShaaxiGrainAreaList)(nil),          // 62: fippb.RspShaaxiGrainAreaList
	(*ReqShaaxiGrainGradeList)(nil),         // 63: fippb.ReqShaaxiGrainGradeList
	(*ShaaxiGrainGradeElem)(nil),            // 64: fippb.ShaaxiGrainGradeElem
	(*RspShaaxiGrainGradeList)(nil),         // 65: fippb.RspShaaxiGrainGradeList
	(*OtcSwapContractType)(nil),             // 66: fippb.OtcSwapContractType
	(*OtcSwapMatchQuotElement)(nil),         // 67: fippb.OtcSwapMatchQuotElement
	(*OtcSwapPositionQuotElement)(nil),      // 68: fippb.OtcSwapPositionQuotElement
	(*ReqOtcSwapContractTypeList)(nil),      // 69: fippb.ReqOtcSwapContractTypeList
	(*RspOtcSwapContractTypeList)(nil),      // 70: fippb.RspOtcSwapContractTypeList
	(*NotifyOtcSwapContractTypeList)(nil),   // 71: fippb.NotifyOtcSwapContractTypeList
	(*ReqSubscribeOtcSwapQuot)(nil),         // 72: fippb.ReqSubscribeOtcSwapQuot
	(*RspSubscribeOtcSwapQuot)(nil),         // 73: fippb.RspSubscribeOtcSwapQuot
	(*NotifySwapMatchQuotList)(nil),         // 74: fippb.NotifySwapMatchQuotList
	(*NotifySwapPositionQuotList)(nil),      // 75: fippb.NotifySwapPositionQuotList
	(*ReqSwapMatchQuotList)(nil),            // 76: fippb.ReqSwapMatchQuotList
	(*RspSwapMatchQuotList)(nil),            // 77: fippb.RspSwapMatchQuotList
	(*ReqSwapPositionQuotList)(nil),         // 78: fippb.ReqSwapPositionQuotList
	(*RspSwapPositionQuotList)(nil),         // 79: fippb.RspSwapPositionQuotList
	(*OtcSwapVarietyInfo)(nil),              // 80: fippb.OtcSwapVarietyInfo
	(*OtcSwapUnderlyingVarietyElement)(nil), // 81: fippb.OtcSwapUnderlyingVarietyElement
	(*NotifySwapUnderlyingVarietylist)(nil), // 82: fippb.NotifySwapUnderlyingVarietylist
	(*ReqSwapPositionSnapList)(nil),         // 83: fippb.ReqSwapPositionSnapList
	(*RspSwapPositionSnapList)(nil),         // 84: fippb.RspSwapPositionSnapList
	(*ReqSubOtcRealStatistics)(nil),         // 85: fippb.ReqSubOtcRealStatistics
	(*RspSubOtcRealStatistics)(nil),         // 86: fippb.RspSubOtcRealStatistics
	(*OtcRealStatisticsElement)(nil),        // 87: fippb.OtcRealStatisticsElement
	(*NotifyOtcRealStatistics)(nil),         // 88: fippb.NotifyOtcRealStatistics
	(EExchgID)(0),                           // 89: fippb.EExchgID
	(EOtcQuotType)(0),                       // 90: fippb.EOtcQuotType
	(ReqSubscribeType)(0),                   // 91: fippb.ReqSubscribeType
	(EElementIncrequotType)(0),              // 92: fippb.EElementIncrequotType
	(WbillQuotType)(0),                      // 93: fippb.WbillQuotType
	(EOtcQuotStatus)(0),                     // 94: fippb.EOtcQuotStatus
	(EOTCQuotPeriodType)(0),                 // 95: fippb.EOTCQuotPeriodType
	(EOtcSortType)(0),                       // 96: fippb.EOtcSortType
	(EOTCStaPeriodType)(0),                  // 97: fippb.EOTCStaPeriodType
}
var file_fip_interface_otc_proto_depIdxs = []int32{
	89,  // 0: fippb.ReqOtcGradeList.exchgId:type_name -> fippb.EExchgID
	89,  // 1: fippb.RspOtcGradeList.exchgId:type_name -> fippb.EExchgID
	2,   // 2: fippb.RspOtcGradeList.gradeList:type_name -> fippb.OtcGradeElement
	89,  // 3: fippb.NotifyOtcGradeList.exchgId:type_name -> fippb.EExchgID
	2,   // 4: fippb.NotifyOtcGradeList.gradeList:type_name -> fippb.OtcGradeElement
	89,  // 5: fippb.ReqOtcRegionList.exchgId:type_name -> fippb.EExchgID
	89,  // 6: fippb.RspOtcRegionList.exchgId:type_name -> fippb.EExchgID
	6,   // 7: fippb.RspOtcRegionList.regionList:type_name -> fippb.OtcRegionElement
	89,  // 8: fippb.ReqOtcVarietyList.exchgId:type_name -> fippb.EExchgID
	90,  // 9: fippb.ReqOtcVarietyList.type:type_name -> fippb.EOtcQuotType
	89,  // 10: fippb.RspOtcVarietyList.exchgId:type_name -> fippb.EExchgID
	90,  // 11: fippb.RspOtcVarietyList.type:type_name -> fippb.EOtcQuotType
	9,   // 12: fippb.RspOtcVarietyList.varietyList:type_name -> fippb.OtcVarietyElement
	89,  // 13: fippb.NotifyOtcVarietyList.exchgId:type_name -> fippb.EExchgID
	90,  // 14: fippb.NotifyOtcVarietyList.type:type_name -> fippb.EOtcQuotType
	9,   // 15: fippb.NotifyOtcVarietyList.varietyList:type_name -> fippb.OtcVarietyElement
	89,  // 16: fippb.ReqSubscribeBasisQuot.exchgId:type_name -> fippb.EExchgID
	91,  // 17: fippb.ReqSubscribeBasisQuot.reqType:type_name -> fippb.ReqSubscribeType
	89,  // 18: fippb.RspSubscribeBasisQuot.exchgId:type_name -> fippb.EExchgID
	89,  // 19: fippb.ReqBasisOrderQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 20: fippb.ReqBasisMatchQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 21: fippb.RspBasisQuotList.exchgId:type_name -> fippb.EExchgID
	15,  // 22: fippb.RspBasisQuotList.quotList:type_name -> fippb.BasisQuotElement
	92,  // 23: fippb.BasisQuotIncrement.IncreType:type_name -> fippb.EElementIncrequotType
	15,  // 24: fippb.BasisQuotIncrement.quotElement:type_name -> fippb.BasisQuotElement
	89,  // 25: fippb.NotifyBasisQuotList.exchgId:type_name -> fippb.EExchgID
	19,  // 26: fippb.NotifyBasisQuotList.quotList:type_name -> fippb.BasisQuotIncrement
	89,  // 27: fippb.ReqSubscribeWbillQuot.exchgId:type_name -> fippb.EExchgID
	93,  // 28: fippb.ReqSubscribeWbillQuot.quotType:type_name -> fippb.WbillQuotType
	91,  // 29: fippb.ReqSubscribeWbillQuot.reqType:type_name -> fippb.ReqSubscribeType
	89,  // 30: fippb.RspSubscribeWbillQuot.exchgId:type_name -> fippb.EExchgID
	89,  // 31: fippb.ReqWbillOrderQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 32: fippb.RspWbillOrderQuotList.exchgId:type_name -> fippb.EExchgID
	23,  // 33: fippb.RspWbillOrderQuotList.quotList:type_name -> fippb.WbillOrderQuotElement
	92,  // 34: fippb.WbillOrderQuotIncrement.IncreType:type_name -> fippb.EElementIncrequotType
	23,  // 35: fippb.WbillOrderQuotIncrement.quotElement:type_name -> fippb.WbillOrderQuotElement
	89,  // 36: fippb.NotifyWbillOrderQuotList.exchgId:type_name -> fippb.EExchgID
	26,  // 37: fippb.NotifyWbillOrderQuotList.quotList:type_name -> fippb.WbillOrderQuotIncrement
	89,  // 38: fippb.ReqWbillMatchQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 39: fippb.RspWbillMatchQuotList.exchgId:type_name -> fippb.EExchgID
	28,  // 40: fippb.RspWbillMatchQuotList.quotList:type_name -> fippb.WbillMatchQuotElement
	92,  // 41: fippb.WbillMatchQuotIncrement.IncreType:type_name -> fippb.EElementIncrequotType
	28,  // 42: fippb.WbillMatchQuotIncrement.quotElement:type_name -> fippb.WbillMatchQuotElement
	89,  // 43: fippb.NotifyWbillMatchQuotList.exchgId:type_name -> fippb.EExchgID
	31,  // 44: fippb.NotifyWbillMatchQuotList.quotList:type_name -> fippb.WbillMatchQuotIncrement
	89,  // 45: fippb.ReqWbillMatchDetailQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 46: fippb.RspWbillMatchDetailQuotList.exchgId:type_name -> fippb.EExchgID
	33,  // 47: fippb.RspWbillMatchDetailQuotList.quotList:type_name -> fippb.WbillMatchDetailQuotElement
	92,  // 48: fippb.WbillMatchDetailQuotIncrement.IncreType:type_name -> fippb.EElementIncrequotType
	33,  // 49: fippb.WbillMatchDetailQuotIncrement.quotElement:type_name -> fippb.WbillMatchDetailQuotElement
	89,  // 50: fippb.NotifyWbillMatchDetailQuotList.exchgId:type_name -> fippb.EExchgID
	36,  // 51: fippb.NotifyWbillMatchDetailQuotList.quotList:type_name -> fippb.WbillMatchDetailQuotIncrement
	89,  // 52: fippb.NotifyClearClientCache.exchgId:type_name -> fippb.EExchgID
	90,  // 53: fippb.NotifyClearClientCache.type:type_name -> fippb.EOtcQuotType
	94,  // 54: fippb.NotifyClearClientCache.status:type_name -> fippb.EOtcQuotStatus
	89,  // 55: fippb.ReqSeaPortOrderQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 56: fippb.RspSeaPortOrderQuotList.exchgId:type_name -> fippb.EExchgID
	39,  // 57: fippb.RspSeaPortOrderQuotList.quotList:type_name -> fippb.SeaPortOrderQuotElement
	89,  // 58: fippb.NotifySeaPortOrderQuotList.exchgId:type_name -> fippb.EExchgID
	39,  // 59: fippb.NotifySeaPortOrderQuotList.quotList:type_name -> fippb.SeaPortOrderQuotElement
	89,  // 60: fippb.ReqSeaPortMatchQuotList.exchgId:type_name -> fippb.EExchgID
	95,  // 61: fippb.ReqSeaPortMatchQuotList.type:type_name -> fippb.EOTCQuotPeriodType
	96,  // 62: fippb.ReqSeaPortMatchQuotList.sortType:type_name -> fippb.EOtcSortType
	44,  // 63: fippb.InnerReqSeaPortMatchQuotList.clientReq:type_name -> fippb.ReqSeaPortMatchQuotList
	89,  // 64: fippb.RspSeaPortMatchQuotList.exchgId:type_name -> fippb.EExchgID
	95,  // 65: fippb.RspSeaPortMatchQuotList.type:type_name -> fippb.EOTCQuotPeriodType
	43,  // 66: fippb.RspSeaPortMatchQuotList.quotList:type_name -> fippb.SeaPortMatchQuotElement
	89,  // 67: fippb.NotifySeaPortMatchQuotList.exchgId:type_name -> fippb.EExchgID
	95,  // 68: fippb.NotifySeaPortMatchQuotList.type:type_name -> fippb.EOTCQuotPeriodType
	43,  // 69: fippb.NotifySeaPortMatchQuotList.quotList:type_name -> fippb.SeaPortMatchQuotElement
	89,  // 70: fippb.ReqShaanxiGrainMatchQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 71: fippb.RspShaanxiGrainMatchQuotList.exchgId:type_name -> fippb.EExchgID
	95,  // 72: fippb.RspShaanxiGrainMatchQuotList.type:type_name -> fippb.EOTCQuotPeriodType
	48,  // 73: fippb.RspShaanxiGrainMatchQuotList.quotList:type_name -> fippb.ShaanxiGrainMatchQuotElement
	89,  // 74: fippb.ReqShaanxiGrainPriceList.exchgId:type_name -> fippb.EExchgID
	52,  // 75: fippb.shaanxiGrainPriceList.priceList:type_name -> fippb.OtcPriceElement
	89,  // 76: fippb.RspShaanxiGrainPriceList.exchgId:type_name -> fippb.EExchgID
	53,  // 77: fippb.RspShaanxiGrainPriceList.list:type_name -> fippb.shaanxiGrainPriceList
	48,  // 78: fippb.NotifyShaanxiGrainMatchQuotList.matchList:type_name -> fippb.ShaanxiGrainMatchQuotElement
	53,  // 79: fippb.NotifyShaanxiGrainPriceInfo.list:type_name -> fippb.shaanxiGrainPriceList
	89,  // 80: fippb.ReqShaaxiGrainRegionAbbrList.exchgId:type_name -> fippb.EExchgID
	89,  // 81: fippb.RspShaaxiGrainRegionAbbrList.exchgId:type_name -> fippb.EExchgID
	58,  // 82: fippb.RspShaaxiGrainRegionAbbrList.abbrList:type_name -> fippb.ShaanxiGrainRegionAbbrElem
	89,  // 83: fippb.ReqShaaxiGrainAreaList.exchgId:type_name -> fippb.EExchgID
	6,   // 84: fippb.ShaanxiGrainAreaElem.regionList:type_name -> fippb.OtcRegionElement
	89,  // 85: fippb.RspShaaxiGrainAreaList.exchgId:type_name -> fippb.EExchgID
	61,  // 86: fippb.RspShaaxiGrainAreaList.areaList:type_name -> fippb.ShaanxiGrainAreaElem
	89,  // 87: fippb.ReqShaaxiGrainGradeList.exchgId:type_name -> fippb.EExchgID
	2,   // 88: fippb.ShaaxiGrainGradeElem.grade:type_name -> fippb.OtcGradeElement
	89,  // 89: fippb.RspShaaxiGrainGradeList.exchgId:type_name -> fippb.EExchgID
	64,  // 90: fippb.RspShaaxiGrainGradeList.gradeList:type_name -> fippb.ShaaxiGrainGradeElem
	89,  // 91: fippb.ReqOtcSwapContractTypeList.exchgId:type_name -> fippb.EExchgID
	89,  // 92: fippb.RspOtcSwapContractTypeList.exchgId:type_name -> fippb.EExchgID
	66,  // 93: fippb.RspOtcSwapContractTypeList.list:type_name -> fippb.OtcSwapContractType
	66,  // 94: fippb.NotifyOtcSwapContractTypeList.list:type_name -> fippb.OtcSwapContractType
	89,  // 95: fippb.ReqSubscribeOtcSwapQuot.exchgId:type_name -> fippb.EExchgID
	90,  // 96: fippb.ReqSubscribeOtcSwapQuot.quotType:type_name -> fippb.EOtcQuotType
	91,  // 97: fippb.ReqSubscribeOtcSwapQuot.reqType:type_name -> fippb.ReqSubscribeType
	89,  // 98: fippb.RspSubscribeOtcSwapQuot.exchgId:type_name -> fippb.EExchgID
	90,  // 99: fippb.RspSubscribeOtcSwapQuot.quotType:type_name -> fippb.EOtcQuotType
	91,  // 100: fippb.RspSubscribeOtcSwapQuot.reqType:type_name -> fippb.ReqSubscribeType
	67,  // 101: fippb.NotifySwapMatchQuotList.list:type_name -> fippb.OtcSwapMatchQuotElement
	68,  // 102: fippb.NotifySwapPositionQuotList.list:type_name -> fippb.OtcSwapPositionQuotElement
	89,  // 103: fippb.ReqSwapMatchQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 104: fippb.RspSwapMatchQuotList.exchgId:type_name -> fippb.EExchgID
	67,  // 105: fippb.RspSwapMatchQuotList.list:type_name -> fippb.OtcSwapMatchQuotElement
	89,  // 106: fippb.ReqSwapPositionQuotList.exchgId:type_name -> fippb.EExchgID
	89,  // 107: fippb.RspSwapPositionQuotList.exchgId:type_name -> fippb.EExchgID
	68,  // 108: fippb.RspSwapPositionQuotList.list:type_name -> fippb.OtcSwapPositionQuotElement
	80,  // 109: fippb.OtcSwapUnderlyingVarietyElement.varietyList:type_name -> fippb.OtcSwapVarietyInfo
	81,  // 110: fippb.NotifySwapUnderlyingVarietylist.list:type_name -> fippb.OtcSwapUnderlyingVarietyElement
	89,  // 111: fippb.ReqSwapPositionSnapList.exchgId:type_name -> fippb.EExchgID
	89,  // 112: fippb.RspSwapPositionSnapList.exchgId:type_name -> fippb.EExchgID
	68,  // 113: fippb.RspSwapPositionSnapList.list:type_name -> fippb.OtcSwapPositionQuotElement
	91,  // 114: fippb.ReqSubOtcRealStatistics.reqType:type_name -> fippb.ReqSubscribeType
	97,  // 115: fippb.ReqSubOtcRealStatistics.periodType:type_name -> fippb.EOTCStaPeriodType
	89,  // 116: fippb.ReqSubOtcRealStatistics.exchgId:type_name -> fippb.EExchgID
	89,  // 117: fippb.OtcRealStatisticsElement.exchgId:type_name -> fippb.EExchgID
	97,  // 118: fippb.NotifyOtcRealStatistics.periodType:type_name -> fippb.EOTCStaPeriodType
	87,  // 119: fippb.NotifyOtcRealStatistics.list:type_name -> fippb.OtcRealStatisticsElement
	120, // [120:120] is the sub-list for method output_type
	120, // [120:120] is the sub-list for method input_type
	120, // [120:120] is the sub-list for extension type_name
	120, // [120:120] is the sub-list for extension extendee
	0,   // [0:120] is the sub-list for field type_name
}

func init() { file_fip_interface_otc_proto_init() }
func file_fip_interface_otc_proto_init() {
	if File_fip_interface_otc_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_otc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_otc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOtcLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOtcLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcGradeElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOtcGradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOtcGradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOtcGradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcRegionElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOtcRegionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOtcRegionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcVarietyElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOtcVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOtcVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOtcVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeBasisQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeBasisQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasisQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBasisOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBasisMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspBasisQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasisQuotIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyBasisQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeWbillQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeWbillQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillOrderQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWbillOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspWbillOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillOrderQuotIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyWbillOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillMatchQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWbillMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspWbillMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillMatchQuotIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyWbillMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillMatchDetailQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWbillMatchDetailQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspWbillMatchDetailQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WbillMatchDetailQuotIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyWbillMatchDetailQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyClearClientCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaPortOrderQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSeaPortOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSeaPortOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySeaPortOrderQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeaPortMatchQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSeaPortMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerReqSeaPortMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSeaPortMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySeaPortMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShaanxiGrainMatchQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShaanxiGrainMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShaanxiGrainMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShaanxiGrainPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcPriceElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShaanxiGrainPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShaanxiGrainPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyShaanxiGrainMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyShaanxiGrainPriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShaaxiGrainRegionAbbrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShaanxiGrainRegionAbbrElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShaaxiGrainRegionAbbrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShaaxiGrainAreaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShaanxiGrainAreaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShaaxiGrainAreaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShaaxiGrainGradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShaaxiGrainGradeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspShaaxiGrainGradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcSwapContractType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcSwapMatchQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcSwapPositionQuotElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqOtcSwapContractTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOtcSwapContractTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOtcSwapContractTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeOtcSwapQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeOtcSwapQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySwapMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySwapPositionQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSwapMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSwapMatchQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSwapPositionQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSwapPositionQuotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcSwapVarietyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcSwapUnderlyingVarietyElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySwapUnderlyingVarietylist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSwapPositionSnapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSwapPositionSnapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubOtcRealStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubOtcRealStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtcRealStatisticsElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_otc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOtcRealStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_otc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_otc_proto_goTypes,
		DependencyIndexes: file_fip_interface_otc_proto_depIdxs,
		MessageInfos:      file_fip_interface_otc_proto_msgTypes,
	}.Build()
	File_fip_interface_otc_proto = out.File
	file_fip_interface_otc_proto_rawDesc = nil
	file_fip_interface_otc_proto_goTypes = nil
	file_fip_interface_otc_proto_depIdxs = nil
}
