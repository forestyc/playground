//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 实时行情接口proto定义
//
// @author <suzhongpo，mengwen>
//
// @date 2017-7-10
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / 日期时间类型
type EDataTimeType int32

const (
	EDataTimeType_Null       EDataTimeType = 0
	EDataTimeType_ServerTime EDataTimeType = 1 // 服务器时间
	EDataTimeType_TradeDate  EDataTimeType = 2 // 交易日时间
)

// Enum value maps for EDataTimeType.
var (
	EDataTimeType_name = map[int32]string{
		0: "Null",
		1: "ServerTime",
		2: "TradeDate",
	}
	EDataTimeType_value = map[string]int32{
		"Null":       0,
		"ServerTime": 1,
		"TradeDate":  2,
	}
)

func (x EDataTimeType) Enum() *EDataTimeType {
	p := new(EDataTimeType)
	*p = x
	return p
}

func (x EDataTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDataTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[0].Descriptor()
}

func (EDataTimeType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[0]
}

func (x EDataTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDataTimeType.Descriptor instead.
func (EDataTimeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{0}
}

// / 行情属性
type EQuotAttr int32

const (
	EQuotAttr_QANull    EQuotAttr = 0
	EQuotAttr_trade     EQuotAttr = 1 // 交易行情
	EQuotAttr_calc      EQuotAttr = 2 // 结算行情
	EQuotAttr_clear     EQuotAttr = 3 // 清盘行情
	EQuotAttr_arbitrage EQuotAttr = 4
)

// Enum value maps for EQuotAttr.
var (
	EQuotAttr_name = map[int32]string{
		0: "QANull",
		1: "trade",
		2: "calc",
		3: "clear",
		4: "arbitrage",
	}
	EQuotAttr_value = map[string]int32{
		"QANull":    0,
		"trade":     1,
		"calc":      2,
		"clear":     3,
		"arbitrage": 4,
	}
)

func (x EQuotAttr) Enum() *EQuotAttr {
	p := new(EQuotAttr)
	*p = x
	return p
}

func (x EQuotAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuotAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[1].Descriptor()
}

func (EQuotAttr) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[1]
}

func (x EQuotAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQuotAttr.Descriptor instead.
func (EQuotAttr) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{1}
}

// / 行情单双边类型
type EQuotLateralType int32

const (
	EQuotLateralType_INDISCRIMINATE EQuotLateralType = 0 // 不区分单双边
	EQuotLateralType_UNILATERAL     EQuotLateralType = 1 // 单边行情
	EQuotLateralType_BILATERAL      EQuotLateralType = 2 // 双边行情
)

// Enum value maps for EQuotLateralType.
var (
	EQuotLateralType_name = map[int32]string{
		0: "INDISCRIMINATE",
		1: "UNILATERAL",
		2: "BILATERAL",
	}
	EQuotLateralType_value = map[string]int32{
		"INDISCRIMINATE": 0,
		"UNILATERAL":     1,
		"BILATERAL":      2,
	}
)

func (x EQuotLateralType) Enum() *EQuotLateralType {
	p := new(EQuotLateralType)
	*p = x
	return p
}

func (x EQuotLateralType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuotLateralType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[2].Descriptor()
}

func (EQuotLateralType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[2]
}

func (x EQuotLateralType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQuotLateralType.Descriptor instead.
func (EQuotLateralType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{2}
}

// / 行情类型
type EQuotType int32

const (
	EQuotType_QTNull     EQuotType = 0 //旧协议为EQuotType_Begin
	EQuotType_Level1Ftr  EQuotType = 1 // Level1期货行情    //旧协议为EQuotType_Level1Ftr
	EQuotType_Level1Opt  EQuotType = 2 // Level1期权行情    //旧协议为EQuotType_Level1Opt
	EQuotType_Level2Ftr  EQuotType = 3 // Level2期货行情    //旧协议为EQuotType_Level2Ftr
	EQuotType_Level2Opt  EQuotType = 4 // Level2期权行情    //旧协议为EQuotType_Level2Opt
	EQuotType_Level1Arbi EQuotType = 5 // Level1套利行情    //旧协议为EQuotType_Level1Arbi
	EQuotType_Level2Arbi EQuotType = 6 // Level2套利行情    //旧协议为EQuotType_Level2Arbi
	EQuotType_IndexQuot  EQuotType = 7 // 指数行情          ///<xuandanw for index quot
	EQuotType_Irbitrage  EQuotType = 8
	EQuotType_OtcWbill   EQuotType = 9 // 场外仓单行情
)

// Enum value maps for EQuotType.
var (
	EQuotType_name = map[int32]string{
		0: "QTNull",
		1: "Level1Ftr",
		2: "Level1Opt",
		3: "Level2Ftr",
		4: "Level2Opt",
		5: "Level1Arbi",
		6: "Level2Arbi",
		7: "IndexQuot",
		8: "Irbitrage",
		9: "OtcWbill",
	}
	EQuotType_value = map[string]int32{
		"QTNull":     0,
		"Level1Ftr":  1,
		"Level1Opt":  2,
		"Level2Ftr":  3,
		"Level2Opt":  4,
		"Level1Arbi": 5,
		"Level2Arbi": 6,
		"IndexQuot":  7,
		"Irbitrage":  8,
		"OtcWbill":   9,
	}
)

func (x EQuotType) Enum() *EQuotType {
	p := new(EQuotType)
	*p = x
	return p
}

func (x EQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[3].Descriptor()
}

func (EQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[3]
}

func (x EQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQuotType.Descriptor instead.
func (EQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{3}
}

type MatchType int32

const (
	MatchType_MatNull    MatchType = 0
	MatchType_InnerMatch MatchType = 1
	MatchType_ExtraMatch MatchType = 2
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MatNull",
		1: "InnerMatch",
		2: "ExtraMatch",
	}
	MatchType_value = map[string]int32{
		"MatNull":    0,
		"InnerMatch": 1,
		"ExtraMatch": 2,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[4].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[4]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{4}
}

// 实时行情交易类型
type RealQuotType int32

const (
	RealQuotType_QutNull    RealQuotType = 0
	RealQuotType_QuotFuture RealQuotType = 1
	RealQuotType_QuotIndex  RealQuotType = 2
)

// Enum value maps for RealQuotType.
var (
	RealQuotType_name = map[int32]string{
		0: "QutNull",
		1: "QuotFuture",
		2: "QuotIndex",
	}
	RealQuotType_value = map[string]int32{
		"QutNull":    0,
		"QuotFuture": 1,
		"QuotIndex":  2,
	}
)

func (x RealQuotType) Enum() *RealQuotType {
	p := new(RealQuotType)
	*p = x
	return p
}

func (x RealQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[5].Descriptor()
}

func (RealQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[5]
}

func (x RealQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealQuotType.Descriptor instead.
func (RealQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{5}
}

// / 增量行情一级分类（一级分类是根据业务数据类型进行分类，二级分类是对一级分类中行情字段再进行划分）
type EIncQuotType int32

const (
	EIncQuotType_IQTNull          EIncQuotType = 0 //包含全部分类
	EIncQuotType_IQTBestQuot      EIncQuotType = 1 //最优行情，对应BestQuot
	EIncQuotType_IQTBestPrcOrdQty EIncQuotType = 2 //最优报价委托数量行情域(level2),对应BestPrcOrdQty
	EIncQuotType_IQTOptProperty   EIncQuotType = 3 //期权增值计算(服务端计算)，对应NotifyOptProperty
	EIncQuotType_IQTOptPara       EIncQuotType = 4 //期权参数（盘中服务端计算，盘后结算交易所推送）,对应OptPara
	EIncQuotType_IQTMBLQuot       EIncQuotType = 5 //深度行情，对应MBLQuot
	EIncQuotType_IQTRealTimePrice EIncQuotType = 6 //实时结算价,对应NotifyRTPrice
	EIncQuotType_IQTOrderStatics  EIncQuotType = 7 //委托统计行情域NotifyOrderSta
	EIncQuotType_IQTMatchPrcQty   EIncQuotType = 8 //分价成交量，对应NotifyMatchPrcQty
	EIncQuotType_IQTMax           EIncQuotType = 9 //分类数量
)

// Enum value maps for EIncQuotType.
var (
	EIncQuotType_name = map[int32]string{
		0: "IQTNull",
		1: "IQTBestQuot",
		2: "IQTBestPrcOrdQty",
		3: "IQTOptProperty",
		4: "IQTOptPara",
		5: "IQTMBLQuot",
		6: "IQTRealTimePrice",
		7: "IQTOrderStatics",
		8: "IQTMatchPrcQty",
		9: "IQTMax",
	}
	EIncQuotType_value = map[string]int32{
		"IQTNull":          0,
		"IQTBestQuot":      1,
		"IQTBestPrcOrdQty": 2,
		"IQTOptProperty":   3,
		"IQTOptPara":       4,
		"IQTMBLQuot":       5,
		"IQTRealTimePrice": 6,
		"IQTOrderStatics":  7,
		"IQTMatchPrcQty":   8,
		"IQTMax":           9,
	}
)

func (x EIncQuotType) Enum() *EIncQuotType {
	p := new(EIncQuotType)
	*p = x
	return p
}

func (x EIncQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIncQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[6].Descriptor()
}

func (EIncQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[6]
}

func (x EIncQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIncQuotType.Descriptor instead.
func (EIncQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{6}
}

// / 增量行情二级BestQuot
type EIncBestQuotType int32

const (
	EIncBestQuotType_IBQT_ExchgId                      EIncBestQuotType = 0
	EIncBestQuotType_IBQT_ContractID                   EIncBestQuotType = 1
	EIncBestQuotType_IBQT_NoChg_LastSettlePrice        EIncBestQuotType = 2
	EIncBestQuotType_IBQT_NoChg_LastClosePrice         EIncBestQuotType = 3
	EIncBestQuotType_IBQT_NoChg_OpenPrice              EIncBestQuotType = 4
	EIncBestQuotType_IBQT_NoChg_PriceUpLimit           EIncBestQuotType = 5
	EIncBestQuotType_IBQT_NoChg_PriceDownLimit         EIncBestQuotType = 6
	EIncBestQuotType_IBQT_NoChg_TradeDate              EIncBestQuotType = 7
	EIncBestQuotType_IBQT_NoChg_InitPosition           EIncBestQuotType = 8
	EIncBestQuotType_IBQT_Chg_SettlePrice              EIncBestQuotType = 9
	EIncBestQuotType_IBQT_Chg_Turnover                 EIncBestQuotType = 10
	EIncBestQuotType_IBQT_Chg_BidPrice                 EIncBestQuotType = 11
	EIncBestQuotType_IBQT_Chg_AskPrice                 EIncBestQuotType = 12
	EIncBestQuotType_IBQT_Chg_HighPrice                EIncBestQuotType = 13
	EIncBestQuotType_IBQT_Chg_LowPrice                 EIncBestQuotType = 14
	EIncBestQuotType_IBQT_Chg_LastPrice                EIncBestQuotType = 15
	EIncBestQuotType_IBQT_Chg_AvgPrice                 EIncBestQuotType = 16
	EIncBestQuotType_IBQT_Chg_BidQty                   EIncBestQuotType = 17
	EIncBestQuotType_IBQT_Chg_AskQyt                   EIncBestQuotType = 18
	EIncBestQuotType_IBQT_Chg_BidImplyQty              EIncBestQuotType = 19
	EIncBestQuotType_IBQT_Chg_AskImplyQty              EIncBestQuotType = 20
	EIncBestQuotType_IBQT_Chg_TotalPosition            EIncBestQuotType = 21
	EIncBestQuotType_IBQT_Chg_PositionChg              EIncBestQuotType = 22
	EIncBestQuotType_IBQT_Chg_LastMatchQty             EIncBestQuotType = 23
	EIncBestQuotType_IBQT_Chg_UpdateTime               EIncBestQuotType = 24
	EIncBestQuotType_IBQT_Chg_LifeLowPrice             EIncBestQuotType = 25
	EIncBestQuotType_IBQT_Chg_LifeHighPrice            EIncBestQuotType = 26
	EIncBestQuotType_IBQT_Chg_GenTime                  EIncBestQuotType = 27
	EIncBestQuotType_IBQT_Chg_ClosePrice               EIncBestQuotType = 28
	EIncBestQuotType_IBQT_Chg_MatchTotQty              EIncBestQuotType = 29
	EIncBestQuotType_IBQT_Chg_BitIndex                 EIncBestQuotType = 30
	EIncBestQuotType_IBQT_ExtraBest_DeltaMatchQty      EIncBestQuotType = 31
	EIncBestQuotType_IBQT_ExtraBest_DeltaMatchPrice    EIncBestQuotType = 32
	EIncBestQuotType_IBQT_ExtraBest_OE                 EIncBestQuotType = 33
	EIncBestQuotType_IBQT_ExtraBest_DeltaPosition      EIncBestQuotType = 34
	EIncBestQuotType_IBQT_ExtraBest_DeltaTotalMatchQty EIncBestQuotType = 35
	EIncBestQuotType_IBQT_ExtraBest_MatType            EIncBestQuotType = 36
	EIncBestQuotType_IBQT_Max                          EIncBestQuotType = 37
)

// Enum value maps for EIncBestQuotType.
var (
	EIncBestQuotType_name = map[int32]string{
		0:  "IBQT_ExchgId",
		1:  "IBQT_ContractID",
		2:  "IBQT_NoChg_LastSettlePrice",
		3:  "IBQT_NoChg_LastClosePrice",
		4:  "IBQT_NoChg_OpenPrice",
		5:  "IBQT_NoChg_PriceUpLimit",
		6:  "IBQT_NoChg_PriceDownLimit",
		7:  "IBQT_NoChg_TradeDate",
		8:  "IBQT_NoChg_InitPosition",
		9:  "IBQT_Chg_SettlePrice",
		10: "IBQT_Chg_Turnover",
		11: "IBQT_Chg_BidPrice",
		12: "IBQT_Chg_AskPrice",
		13: "IBQT_Chg_HighPrice",
		14: "IBQT_Chg_LowPrice",
		15: "IBQT_Chg_LastPrice",
		16: "IBQT_Chg_AvgPrice",
		17: "IBQT_Chg_BidQty",
		18: "IBQT_Chg_AskQyt",
		19: "IBQT_Chg_BidImplyQty",
		20: "IBQT_Chg_AskImplyQty",
		21: "IBQT_Chg_TotalPosition",
		22: "IBQT_Chg_PositionChg",
		23: "IBQT_Chg_LastMatchQty",
		24: "IBQT_Chg_UpdateTime",
		25: "IBQT_Chg_LifeLowPrice",
		26: "IBQT_Chg_LifeHighPrice",
		27: "IBQT_Chg_GenTime",
		28: "IBQT_Chg_ClosePrice",
		29: "IBQT_Chg_MatchTotQty",
		30: "IBQT_Chg_BitIndex",
		31: "IBQT_ExtraBest_DeltaMatchQty",
		32: "IBQT_ExtraBest_DeltaMatchPrice",
		33: "IBQT_ExtraBest_OE",
		34: "IBQT_ExtraBest_DeltaPosition",
		35: "IBQT_ExtraBest_DeltaTotalMatchQty",
		36: "IBQT_ExtraBest_MatType",
		37: "IBQT_Max",
	}
	EIncBestQuotType_value = map[string]int32{
		"IBQT_ExchgId":                      0,
		"IBQT_ContractID":                   1,
		"IBQT_NoChg_LastSettlePrice":        2,
		"IBQT_NoChg_LastClosePrice":         3,
		"IBQT_NoChg_OpenPrice":              4,
		"IBQT_NoChg_PriceUpLimit":           5,
		"IBQT_NoChg_PriceDownLimit":         6,
		"IBQT_NoChg_TradeDate":              7,
		"IBQT_NoChg_InitPosition":           8,
		"IBQT_Chg_SettlePrice":              9,
		"IBQT_Chg_Turnover":                 10,
		"IBQT_Chg_BidPrice":                 11,
		"IBQT_Chg_AskPrice":                 12,
		"IBQT_Chg_HighPrice":                13,
		"IBQT_Chg_LowPrice":                 14,
		"IBQT_Chg_LastPrice":                15,
		"IBQT_Chg_AvgPrice":                 16,
		"IBQT_Chg_BidQty":                   17,
		"IBQT_Chg_AskQyt":                   18,
		"IBQT_Chg_BidImplyQty":              19,
		"IBQT_Chg_AskImplyQty":              20,
		"IBQT_Chg_TotalPosition":            21,
		"IBQT_Chg_PositionChg":              22,
		"IBQT_Chg_LastMatchQty":             23,
		"IBQT_Chg_UpdateTime":               24,
		"IBQT_Chg_LifeLowPrice":             25,
		"IBQT_Chg_LifeHighPrice":            26,
		"IBQT_Chg_GenTime":                  27,
		"IBQT_Chg_ClosePrice":               28,
		"IBQT_Chg_MatchTotQty":              29,
		"IBQT_Chg_BitIndex":                 30,
		"IBQT_ExtraBest_DeltaMatchQty":      31,
		"IBQT_ExtraBest_DeltaMatchPrice":    32,
		"IBQT_ExtraBest_OE":                 33,
		"IBQT_ExtraBest_DeltaPosition":      34,
		"IBQT_ExtraBest_DeltaTotalMatchQty": 35,
		"IBQT_ExtraBest_MatType":            36,
		"IBQT_Max":                          37,
	}
)

func (x EIncBestQuotType) Enum() *EIncBestQuotType {
	p := new(EIncBestQuotType)
	*p = x
	return p
}

func (x EIncBestQuotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIncBestQuotType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[7].Descriptor()
}

func (EIncBestQuotType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[7]
}

func (x EIncBestQuotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIncBestQuotType.Descriptor instead.
func (EIncBestQuotType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{7}
}

// / 增量行情二级BestPrcOrdQtyType
type EIncBestPrcOrdQtyType int32

const (
	EIncBestPrcOrdQtyType_IBPOQT_Buy_Price  EIncBestPrcOrdQtyType = 0
	EIncBestPrcOrdQtyType_IBPOQT_Buy_Qty    EIncBestPrcOrdQtyType = 1
	EIncBestPrcOrdQtyType_IBPOQT_Sell_Price EIncBestPrcOrdQtyType = 2
	EIncBestPrcOrdQtyType_IBPOQT_Sell_Qty   EIncBestPrcOrdQtyType = 3
	EIncBestPrcOrdQtyType_IBPOQT_GenTime    EIncBestPrcOrdQtyType = 4
	EIncBestPrcOrdQtyType_IBPOQT_Max        EIncBestPrcOrdQtyType = 5
)

// Enum value maps for EIncBestPrcOrdQtyType.
var (
	EIncBestPrcOrdQtyType_name = map[int32]string{
		0: "IBPOQT_Buy_Price",
		1: "IBPOQT_Buy_Qty",
		2: "IBPOQT_Sell_Price",
		3: "IBPOQT_Sell_Qty",
		4: "IBPOQT_GenTime",
		5: "IBPOQT_Max",
	}
	EIncBestPrcOrdQtyType_value = map[string]int32{
		"IBPOQT_Buy_Price":  0,
		"IBPOQT_Buy_Qty":    1,
		"IBPOQT_Sell_Price": 2,
		"IBPOQT_Sell_Qty":   3,
		"IBPOQT_GenTime":    4,
		"IBPOQT_Max":        5,
	}
)

func (x EIncBestPrcOrdQtyType) Enum() *EIncBestPrcOrdQtyType {
	p := new(EIncBestPrcOrdQtyType)
	*p = x
	return p
}

func (x EIncBestPrcOrdQtyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIncBestPrcOrdQtyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[8].Descriptor()
}

func (EIncBestPrcOrdQtyType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[8]
}

func (x EIncBestPrcOrdQtyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIncBestPrcOrdQtyType.Descriptor instead.
func (EIncBestPrcOrdQtyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{8}
}

// / 增量行情二级OptProperty
type EIncOptPropertyType int32

const (
	EIncOptPropertyType_IOPT_TheoryPrice EIncOptPropertyType = 0
	EIncOptPropertyType_IOPT_EmbedValue  EIncOptPropertyType = 1
	EIncOptPropertyType_IOPT_TimeValue   EIncOptPropertyType = 2
	EIncOptPropertyType_IOPT_ImpliedVol  EIncOptPropertyType = 3
	EIncOptPropertyType_IOPT_HistoryVol  EIncOptPropertyType = 4
	EIncOptPropertyType_IOPT_Max         EIncOptPropertyType = 5
)

// Enum value maps for EIncOptPropertyType.
var (
	EIncOptPropertyType_name = map[int32]string{
		0: "IOPT_TheoryPrice",
		1: "IOPT_EmbedValue",
		2: "IOPT_TimeValue",
		3: "IOPT_ImpliedVol",
		4: "IOPT_HistoryVol",
		5: "IOPT_Max",
	}
	EIncOptPropertyType_value = map[string]int32{
		"IOPT_TheoryPrice": 0,
		"IOPT_EmbedValue":  1,
		"IOPT_TimeValue":   2,
		"IOPT_ImpliedVol":  3,
		"IOPT_HistoryVol":  4,
		"IOPT_Max":         5,
	}
)

func (x EIncOptPropertyType) Enum() *EIncOptPropertyType {
	p := new(EIncOptPropertyType)
	*p = x
	return p
}

func (x EIncOptPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIncOptPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[9].Descriptor()
}

func (EIncOptPropertyType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[9]
}

func (x EIncOptPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIncOptPropertyType.Descriptor instead.
func (EIncOptPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{9}
}

// / 增量行情二级OptPara
type EIncOptParaType int32

const (
	EIncOptParaType_IOPAT_TradeDate  EIncOptParaType = 0 // 交易日期
	EIncOptParaType_IOPAT_ContractId EIncOptParaType = 1 // 期权合约号
	EIncOptParaType_IOPAT_Delta      EIncOptParaType = 2 // delta
	EIncOptParaType_IOPAT_Gamma      EIncOptParaType = 3 // gamma
	EIncOptParaType_IOPAT_Rho        EIncOptParaType = 4 // rho
	EIncOptParaType_IOPAT_Theta      EIncOptParaType = 5 // theta
	EIncOptParaType_IOPAT_Vega       EIncOptParaType = 6 // vega
	EIncOptParaType_IOPAT_Max        EIncOptParaType = 7
)

// Enum value maps for EIncOptParaType.
var (
	EIncOptParaType_name = map[int32]string{
		0: "IOPAT_TradeDate",
		1: "IOPAT_ContractId",
		2: "IOPAT_Delta",
		3: "IOPAT_Gamma",
		4: "IOPAT_Rho",
		5: "IOPAT_Theta",
		6: "IOPAT_Vega",
		7: "IOPAT_Max",
	}
	EIncOptParaType_value = map[string]int32{
		"IOPAT_TradeDate":  0,
		"IOPAT_ContractId": 1,
		"IOPAT_Delta":      2,
		"IOPAT_Gamma":      3,
		"IOPAT_Rho":        4,
		"IOPAT_Theta":      5,
		"IOPAT_Vega":       6,
		"IOPAT_Max":        7,
	}
)

func (x EIncOptParaType) Enum() *EIncOptParaType {
	p := new(EIncOptParaType)
	*p = x
	return p
}

func (x EIncOptParaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIncOptParaType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[10].Descriptor()
}

func (EIncOptParaType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[10]
}

func (x EIncOptParaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIncOptParaType.Descriptor instead.
func (EIncOptParaType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{10}
}

// / 订阅类型
type ESubQuotBy int32

const (
	ESubQuotBy_SQNull            ESubQuotBy = 0  // 初始值
	ESubQuotBy_Exchg             ESubQuotBy = 1  // 按交易所（简要）
	ESubQuotBy_Variety           ESubQuotBy = 2  // 按品种订阅（简要）
	ESubQuotBy_Contract          ESubQuotBy = 3  // 按合约订阅(全量)
	ESubQuotBy_SeriesID          ESubQuotBy = 4  // 期权标的物（全量）
	ESubQuotBy_MainContract      ESubQuotBy = 5  // 主力合约（简要）
	ESubQuotBy_StatisticVariety  ESubQuotBy = 6  // 品种统计订阅
	ESubQuotBy_OptContractImpVol ESubQuotBy = 7  // 按期权合约号订阅隐含波动率
	ESubQuotBy_ContractBrief     ESubQuotBy = 8  // 按合约订阅（简要）
	ESubQuotBy_StatisticOption   ESubQuotBy = 9  // 期权统计订阅
	ESubQuotBy_All               ESubQuotBy = 10 // 全部订阅，所有国内六家行情(含期货、权、套利等)
	ESubQuotBy_AllFut            ESubQuotBy = 11 // 全部订阅，所有国内六家期货行情(仅期货)
	ESubQuotBy_AllOpt            ESubQuotBy = 12 // 全部订阅，所有国内六家期货行情(仅期权)
	ESubQuotBy_AllArbi           ESubQuotBy = 13 // 全部订阅，所有国内六家期货行情(组合套利)
)

// Enum value maps for ESubQuotBy.
var (
	ESubQuotBy_name = map[int32]string{
		0:  "SQNull",
		1:  "Exchg",
		2:  "Variety",
		3:  "Contract",
		4:  "SeriesID",
		5:  "MainContract",
		6:  "StatisticVariety",
		7:  "OptContractImpVol",
		8:  "ContractBrief",
		9:  "StatisticOption",
		10: "All",
		11: "AllFut",
		12: "AllOpt",
		13: "AllArbi",
	}
	ESubQuotBy_value = map[string]int32{
		"SQNull":            0,
		"Exchg":             1,
		"Variety":           2,
		"Contract":          3,
		"SeriesID":          4,
		"MainContract":      5,
		"StatisticVariety":  6,
		"OptContractImpVol": 7,
		"ContractBrief":     8,
		"StatisticOption":   9,
		"All":               10,
		"AllFut":            11,
		"AllOpt":            12,
		"AllArbi":           13,
	}
)

func (x ESubQuotBy) Enum() *ESubQuotBy {
	p := new(ESubQuotBy)
	*p = x
	return p
}

func (x ESubQuotBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESubQuotBy) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[11].Descriptor()
}

func (ESubQuotBy) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[11]
}

func (x ESubQuotBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESubQuotBy.Descriptor instead.
func (ESubQuotBy) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{11}
}

// / 订阅请求类型
type ReqType int32

const (
	ReqType_Add        ReqType = 0 // 新增订阅(不覆盖之前订阅)
	ReqType_CancelPart ReqType = 1 // 取消List范围内的订阅                  //旧协议为CancelScope
	ReqType_CancelAll  ReqType = 2 // 取消所有订阅
	ReqType_Update     ReqType = 3 // 更换订阅(覆盖之前订阅)
	ReqType_Query      ReqType = 4 // 查询当前订阅范围
	ReqType_ImportCsv  ReqType = 5 // 用于csv历史行情文件导入请求
	ReqType_SnapShot   ReqType = 6 // 申请快照
)

// Enum value maps for ReqType.
var (
	ReqType_name = map[int32]string{
		0: "Add",
		1: "CancelPart",
		2: "CancelAll",
		3: "Update",
		4: "Query",
		5: "ImportCsv",
		6: "SnapShot",
	}
	ReqType_value = map[string]int32{
		"Add":        0,
		"CancelPart": 1,
		"CancelAll":  2,
		"Update":     3,
		"Query":      4,
		"ImportCsv":  5,
		"SnapShot":   6,
	}
)

func (x ReqType) Enum() *ReqType {
	p := new(ReqType)
	*p = x
	return p
}

func (x ReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[12].Descriptor()
}

func (ReqType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[12]
}

func (x ReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqType.Descriptor instead.
func (ReqType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{12}
}

// / 订阅业务类型（服务端内部使用）
type SubType int32

const (
	SubType_Quot        SubType = 0 // 实时行情
	SubType_TSChart     SubType = 1 // 分时数据
	SubType_MatchDetail SubType = 2 // 成交明细
	SubType_KLine       SubType = 3 // K线数据
)

// Enum value maps for SubType.
var (
	SubType_name = map[int32]string{
		0: "Quot",
		1: "TSChart",
		2: "MatchDetail",
		3: "KLine",
	}
	SubType_value = map[string]int32{
		"Quot":        0,
		"TSChart":     1,
		"MatchDetail": 2,
		"KLine":       3,
	}
)

func (x SubType) Enum() *SubType {
	p := new(SubType)
	*p = x
	return p
}

func (x SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[13].Descriptor()
}

func (SubType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[13]
}

func (x SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubType.Descriptor instead.
func (SubType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{13}
}

// / 开平类型
type OEFlag int32

const (
	OEFlag_EFlagNull   OEFlag = 0  //旧协议为OEBegin
	OEFlag_OpenDouble  OEFlag = 1  // 双开
	OEFlag_OpenMulti   OEFlag = 2  // 多开
	OEFlag_OpenNil     OEFlag = 3  // 空开
	OEFlag_CloseDouble OEFlag = 4  // 双平
	OEFlag_CloseMulti  OEFlag = 5  // 多平
	OEFlag_CloseNil    OEFlag = 6  // 空平
	OEFlag_ChangePeer  OEFlag = 7  // 换手
	OEFlag_ChangeMulti OEFlag = 8  // 多换
	OEFlag_ChangeNil   OEFlag = 9  // 空换
	OEFlag_NilType     OEFlag = 10 //不满足买盘和卖盘条件
)

// Enum value maps for OEFlag.
var (
	OEFlag_name = map[int32]string{
		0:  "EFlagNull",
		1:  "OpenDouble",
		2:  "OpenMulti",
		3:  "OpenNil",
		4:  "CloseDouble",
		5:  "CloseMulti",
		6:  "CloseNil",
		7:  "ChangePeer",
		8:  "ChangeMulti",
		9:  "ChangeNil",
		10: "NilType",
	}
	OEFlag_value = map[string]int32{
		"EFlagNull":   0,
		"OpenDouble":  1,
		"OpenMulti":   2,
		"OpenNil":     3,
		"CloseDouble": 4,
		"CloseMulti":  5,
		"CloseNil":    6,
		"ChangePeer":  7,
		"ChangeMulti": 8,
		"ChangeNil":   9,
		"NilType":     10,
	}
)

func (x OEFlag) Enum() *OEFlag {
	p := new(OEFlag)
	*p = x
	return p
}

func (x OEFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OEFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[14].Descriptor()
}

func (OEFlag) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[14]
}

func (x OEFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OEFlag.Descriptor instead.
func (OEFlag) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{14}
}

// / 请求列表类型
type EReqLstType int32

const (
	EReqLstType_RTNull            EReqLstType = 0  //旧协议为ReqType_Begin
	EReqLstType_Exchange          EReqLstType = 1  // 交易所列表                        //旧协议为ReqType_Exchange 不含广期所（五家：DCE SHFE CZCE CFFEX INE)
	EReqLstType_FtrVty            EReqLstType = 2  // 某交易所的期货品种                  //旧协议为ReqType_FtrVariety
	EReqLstType_OptVty            EReqLstType = 3  // 某交易所的期权品种                  //旧协议为ReqType_OptVariety
	EReqLstType_FtrContr          EReqLstType = 4  // 某交易所的期货合约                  //旧协议为ReqType_FtrContract
	EReqLstType_OptContr          EReqLstType = 5  // 某交易所的某标的物下的期权合约        //旧协议为ReqType_OptContract
	EReqLstType_MainContr         EReqLstType = 6  // 某交易所的主力合约                  //旧协议为ReqType_MainContract
	EReqLstType_FtrContrOfVty     EReqLstType = 7  // 某交易所的某品种的期货合约(暂不实现)   //旧协议为ReqType_FtrContractByVariety
	EReqLstType_AllSeriesContract EReqLstType = 8  // 全市场的期权标的物列表               //旧协议ReqType_Underlying
	EReqLstType_AllMainContract   EReqLstType = 9  // 全市场的主力合约                    //旧协议ReqType_AllMainContract
	EReqLstType_AllOptVariety     EReqLstType = 10 // 全市场的期权品种                    //旧协议ReqType_AllOptVariety
	EReqLstType_InxContr          EReqLstType = 11 // 某交易所的指数合约
	EReqLstType_IdxCat            EReqLstType = 12 // 某交易所的指数合约分类
	EReqLstType_FtrNight          EReqLstType = 13 // 某交易所的夜市合约
	EReqLstType_SubMainContr      EReqLstType = 14 // 某交易所的次主力合约
	EReqLstType_ArbiContr         EReqLstType = 15 // 某交易所的套利合约
	// /<财讯通套利新增
	EReqLstType_FipArbiCalendarSpreadVty   EReqLstType = 16 ///< 财讯通套利跨期品种
	EReqLstType_FipArbiVarietySpreadVty    EReqLstType = 17 ///< 财讯通套利跨品种品种
	EReqLstType_FipArbiMarketSpreadVty     EReqLstType = 18 ///< 财讯通套利跨市场品种
	EReqLstType_FipArbiFurtureSpotVty      EReqLstType = 19 ///< 财讯通套利期现品种
	EReqLstType_FipArbiAllVty              EReqLstType = 20 ///< 财讯通套利所有品种
	EReqLstType_FipArbiCalendarSpreadContr EReqLstType = 21 ///< 财讯通套利跨期合约
	EReqLstType_FipArbiVarietySpreadContr  EReqLstType = 22 ///< 财讯通套利跨品种合约
	EReqLstType_FipArbiMarketSpreadContr   EReqLstType = 23 ///< 财讯通套利跨市场合约
	EReqLstType_FipArbiFurtureSpotContr    EReqLstType = 24 ///< 财讯通套利期现合约
	EReqLstType_FipArbiAllContr            EReqLstType = 25 ///< 财讯通套利所有合约
	EReqLstType_SpotVty                    EReqLstType = 26 // 某交易所期权的现货标的品种
	EReqLstType_Underlying                 EReqLstType = 27 // 全市场的期权标的物列表(新)
	// /< 补充请求列表类型
	EReqLstType_Exchange_WithGfex EReqLstType = 28 // 交易所列表含广期所（六家：DCE SHFE CZCE CFFEX INE GFEX)
)

// Enum value maps for EReqLstType.
var (
	EReqLstType_name = map[int32]string{
		0:  "RTNull",
		1:  "Exchange",
		2:  "FtrVty",
		3:  "OptVty",
		4:  "FtrContr",
		5:  "OptContr",
		6:  "MainContr",
		7:  "FtrContrOfVty",
		8:  "AllSeriesContract",
		9:  "AllMainContract",
		10: "AllOptVariety",
		11: "InxContr",
		12: "IdxCat",
		13: "FtrNight",
		14: "SubMainContr",
		15: "ArbiContr",
		16: "FipArbiCalendarSpreadVty",
		17: "FipArbiVarietySpreadVty",
		18: "FipArbiMarketSpreadVty",
		19: "FipArbiFurtureSpotVty",
		20: "FipArbiAllVty",
		21: "FipArbiCalendarSpreadContr",
		22: "FipArbiVarietySpreadContr",
		23: "FipArbiMarketSpreadContr",
		24: "FipArbiFurtureSpotContr",
		25: "FipArbiAllContr",
		26: "SpotVty",
		27: "Underlying",
		28: "Exchange_WithGfex",
	}
	EReqLstType_value = map[string]int32{
		"RTNull":                     0,
		"Exchange":                   1,
		"FtrVty":                     2,
		"OptVty":                     3,
		"FtrContr":                   4,
		"OptContr":                   5,
		"MainContr":                  6,
		"FtrContrOfVty":              7,
		"AllSeriesContract":          8,
		"AllMainContract":            9,
		"AllOptVariety":              10,
		"InxContr":                   11,
		"IdxCat":                     12,
		"FtrNight":                   13,
		"SubMainContr":               14,
		"ArbiContr":                  15,
		"FipArbiCalendarSpreadVty":   16,
		"FipArbiVarietySpreadVty":    17,
		"FipArbiMarketSpreadVty":     18,
		"FipArbiFurtureSpotVty":      19,
		"FipArbiAllVty":              20,
		"FipArbiCalendarSpreadContr": 21,
		"FipArbiVarietySpreadContr":  22,
		"FipArbiMarketSpreadContr":   23,
		"FipArbiFurtureSpotContr":    24,
		"FipArbiAllContr":            25,
		"SpotVty":                    26,
		"Underlying":                 27,
		"Exchange_WithGfex":          28,
	}
)

func (x EReqLstType) Enum() *EReqLstType {
	p := new(EReqLstType)
	*p = x
	return p
}

func (x EReqLstType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReqLstType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[15].Descriptor()
}

func (EReqLstType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[15]
}

func (x EReqLstType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EReqLstType.Descriptor instead.
func (EReqLstType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{15}
}

type ESvrStatus int32

const (
	ESvrStatus_SBegin ESvrStatus = 0
	ESvrStatus_Ready  ESvrStatus = 1 // 服务状态就绪
	ESvrStatus_Close  ESvrStatus = 2 // 暂停服务状态
)

// Enum value maps for ESvrStatus.
var (
	ESvrStatus_name = map[int32]string{
		0: "SBegin",
		1: "Ready",
		2: "Close",
	}
	ESvrStatus_value = map[string]int32{
		"SBegin": 0,
		"Ready":  1,
		"Close":  2,
	}
)

func (x ESvrStatus) Enum() *ESvrStatus {
	p := new(ESvrStatus)
	*p = x
	return p
}

func (x ESvrStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESvrStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[16].Descriptor()
}

func (ESvrStatus) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[16]
}

func (x ESvrStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESvrStatus.Descriptor instead.
func (ESvrStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{16}
}

// / K线类型
type EKLineType int32

const (
	EKLineType_KLine_Minute_1  EKLineType = 0  // 1分钟K线
	EKLineType_KLine_Day       EKLineType = 1  // 日K线
	EKLineType_KLine_Minute_5  EKLineType = 2  // 5分钟K线
	EKLineType_KLine_Minute_15 EKLineType = 3  // 15分钟K线
	EKLineType_KLine_Hour_1    EKLineType = 4  // 1小时K线
	EKLineType_KLine_Month_1   EKLineType = 5  // 1月K线
	EKLineType_KLine_Quarter_1 EKLineType = 6  // 1季K线
	EKLineType_KLine_Year_1    EKLineType = 7  // 1年K线
	EKLineType_KLine_Week_1    EKLineType = 8  // 1周K线
	EKLineType_KLine_Hour_2    EKLineType = 9  // 2小时K线
	EKLineType_KLine_Hour_3    EKLineType = 10 // 3小时K线
	EKLineType_KLine_Hour_4    EKLineType = 11 // 4小时K线
	EKLineType_KLine_Minute_3  EKLineType = 12 // 3分钟K线
	EKLineType_KLine_Minute_10 EKLineType = 13 // 10分钟K线
	EKLineType_KLine_Minute_30 EKLineType = 14 // 30分钟K线
)

// Enum value maps for EKLineType.
var (
	EKLineType_name = map[int32]string{
		0:  "KLine_Minute_1",
		1:  "KLine_Day",
		2:  "KLine_Minute_5",
		3:  "KLine_Minute_15",
		4:  "KLine_Hour_1",
		5:  "KLine_Month_1",
		6:  "KLine_Quarter_1",
		7:  "KLine_Year_1",
		8:  "KLine_Week_1",
		9:  "KLine_Hour_2",
		10: "KLine_Hour_3",
		11: "KLine_Hour_4",
		12: "KLine_Minute_3",
		13: "KLine_Minute_10",
		14: "KLine_Minute_30",
	}
	EKLineType_value = map[string]int32{
		"KLine_Minute_1":  0,
		"KLine_Day":       1,
		"KLine_Minute_5":  2,
		"KLine_Minute_15": 3,
		"KLine_Hour_1":    4,
		"KLine_Month_1":   5,
		"KLine_Quarter_1": 6,
		"KLine_Year_1":    7,
		"KLine_Week_1":    8,
		"KLine_Hour_2":    9,
		"KLine_Hour_3":    10,
		"KLine_Hour_4":    11,
		"KLine_Minute_3":  12,
		"KLine_Minute_10": 13,
		"KLine_Minute_30": 14,
	}
)

func (x EKLineType) Enum() *EKLineType {
	p := new(EKLineType)
	*p = x
	return p
}

func (x EKLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EKLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[17].Descriptor()
}

func (EKLineType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[17]
}

func (x EKLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EKLineType.Descriptor instead.
func (EKLineType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{17}
}

// / 合约类型
type EContractType int32

const (
	EContractType_NULL_Contract      EContractType = 0 // 空合约
	EContractType_Futures_Contract   EContractType = 1 // 期货合约
	EContractType_Index_contract     EContractType = 2 // 指数合约
	EContractType_Principal_contract EContractType = 3 // 主联合约
	EContractType_Option_Contract    EContractType = 4 // 期权合约
	EContractType_Main_Contract      EContractType = 5 // 主力合约
	EContractType_SubMain_contract   EContractType = 6 // 次主力合约
	EContractType_Arbitrage_Contract EContractType = 7 // 套利合约
	// /<财讯通套利新增
	EContractType_FipArbi_Calendar_Spread_FtrContract EContractType = 8  // 财讯通套利跨期期货合约
	EContractType_FipArbi_Variety_Spread_FtrContract  EContractType = 9  // 财讯通套利跨品种期货合约
	EContractType_FipArbi_Market_Spread_FtrContract   EContractType = 10 // 财讯通套利跨市场期货合约
	EContractType_FipArbi_Ftr_Spot_Contract           EContractType = 11 // 财讯通套利期现套利合约
)

// Enum value maps for EContractType.
var (
	EContractType_name = map[int32]string{
		0:  "NULL_Contract",
		1:  "Futures_Contract",
		2:  "Index_contract",
		3:  "Principal_contract",
		4:  "Option_Contract",
		5:  "Main_Contract",
		6:  "SubMain_contract",
		7:  "Arbitrage_Contract",
		8:  "FipArbi_Calendar_Spread_FtrContract",
		9:  "FipArbi_Variety_Spread_FtrContract",
		10: "FipArbi_Market_Spread_FtrContract",
		11: "FipArbi_Ftr_Spot_Contract",
	}
	EContractType_value = map[string]int32{
		"NULL_Contract":                       0,
		"Futures_Contract":                    1,
		"Index_contract":                      2,
		"Principal_contract":                  3,
		"Option_Contract":                     4,
		"Main_Contract":                       5,
		"SubMain_contract":                    6,
		"Arbitrage_Contract":                  7,
		"FipArbi_Calendar_Spread_FtrContract": 8,
		"FipArbi_Variety_Spread_FtrContract":  9,
		"FipArbi_Market_Spread_FtrContract":   10,
		"FipArbi_Ftr_Spot_Contract":           11,
	}
)

func (x EContractType) Enum() *EContractType {
	p := new(EContractType)
	*p = x
	return p
}

func (x EContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[18].Descriptor()
}

func (EContractType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[18]
}

func (x EContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EContractType.Descriptor instead.
func (EContractType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{18}
}

// /< 期权类型
type EOptType int32

const (
	EOptType_Null_Opt    EOptType = 0 ///< 空
	EOptType_Futrues_Opt EOptType = 1 ///< 标的为期货合约的期权
	EOptType_Other_Opt   EOptType = 2 ///< 标的非期货合约的期权
)

// Enum value maps for EOptType.
var (
	EOptType_name = map[int32]string{
		0: "Null_Opt",
		1: "Futrues_Opt",
		2: "Other_Opt",
	}
	EOptType_value = map[string]int32{
		"Null_Opt":    0,
		"Futrues_Opt": 1,
		"Other_Opt":   2,
	}
)

func (x EOptType) Enum() *EOptType {
	p := new(EOptType)
	*p = x
	return p
}

func (x EOptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[19].Descriptor()
}

func (EOptType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[19]
}

func (x EOptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOptType.Descriptor instead.
func (EOptType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{19}
}

// / 品种类型（白盘、夜盘）
type EVarietyType int32

const (
	EVarietyType_NULL_Variety  EVarietyType = 0 // 空品种
	EVarietyType_Day_Variety   EVarietyType = 1 // 白盘品种
	EVarietyType_Night_Variety EVarietyType = 2 // 夜盘品种
)

// Enum value maps for EVarietyType.
var (
	EVarietyType_name = map[int32]string{
		0: "NULL_Variety",
		1: "Day_Variety",
		2: "Night_Variety",
	}
	EVarietyType_value = map[string]int32{
		"NULL_Variety":  0,
		"Day_Variety":   1,
		"Night_Variety": 2,
	}
)

func (x EVarietyType) Enum() *EVarietyType {
	p := new(EVarietyType)
	*p = x
	return p
}

func (x EVarietyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVarietyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[20].Descriptor()
}

func (EVarietyType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[20]
}

func (x EVarietyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVarietyType.Descriptor instead.
func (EVarietyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{20}
}

// / option contract strike way type
type EStrikeWayType int32

const (
	EStrikeWayType_NULL           EStrikeWayType = 0 // empty
	EStrikeWayType_AmericanOption EStrikeWayType = 1 // american option
	EStrikeWayType_EuropeanOption EStrikeWayType = 2 // european option
)

// Enum value maps for EStrikeWayType.
var (
	EStrikeWayType_name = map[int32]string{
		0: "NULL",
		1: "AmericanOption",
		2: "EuropeanOption",
	}
	EStrikeWayType_value = map[string]int32{
		"NULL":           0,
		"AmericanOption": 1,
		"EuropeanOption": 2,
	}
)

func (x EStrikeWayType) Enum() *EStrikeWayType {
	p := new(EStrikeWayType)
	*p = x
	return p
}

func (x EStrikeWayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStrikeWayType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[21].Descriptor()
}

func (EStrikeWayType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[21]
}

func (x EStrikeWayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EStrikeWayType.Descriptor instead.
func (EStrikeWayType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{21}
}

// / 期货期限（一年期、二年期）
type EFtrDuration int32

const (
	EFtrDuration_Duration_NULL   EFtrDuration = 0 ///< 空期限
	EFtrDuration_Duration_Year_1 EFtrDuration = 1 ///< 一年期
	EFtrDuration_Duration_Year_2 EFtrDuration = 2 ///< 二年期
	EFtrDuration_Duration_Year_3 EFtrDuration = 3 ///< 三年期
)

// Enum value maps for EFtrDuration.
var (
	EFtrDuration_name = map[int32]string{
		0: "Duration_NULL",
		1: "Duration_Year_1",
		2: "Duration_Year_2",
		3: "Duration_Year_3",
	}
	EFtrDuration_value = map[string]int32{
		"Duration_NULL":   0,
		"Duration_Year_1": 1,
		"Duration_Year_2": 2,
		"Duration_Year_3": 3,
	}
)

func (x EFtrDuration) Enum() *EFtrDuration {
	p := new(EFtrDuration)
	*p = x
	return p
}

func (x EFtrDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFtrDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[22].Descriptor()
}

func (EFtrDuration) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[22]
}

func (x EFtrDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFtrDuration.Descriptor instead.
func (EFtrDuration) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{22}
}

// / 均量类型
type VolumnAvgType int32

const (
	VolumnAvgType_VolAvg_LastDay     VolumnAvgType = 0 //昨日均量计算
	VolumnAvgType_VolAvg_FstContract VolumnAvgType = 1 //合约第一天上市
	VolumnAvgType_VolAvg_FstVariey   VolumnAvgType = 2 //品种第一天上市
)

// Enum value maps for VolumnAvgType.
var (
	VolumnAvgType_name = map[int32]string{
		0: "VolAvg_LastDay",
		1: "VolAvg_FstContract",
		2: "VolAvg_FstVariey",
	}
	VolumnAvgType_value = map[string]int32{
		"VolAvg_LastDay":     0,
		"VolAvg_FstContract": 1,
		"VolAvg_FstVariey":   2,
	}
)

func (x VolumnAvgType) Enum() *VolumnAvgType {
	p := new(VolumnAvgType)
	*p = x
	return p
}

func (x VolumnAvgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumnAvgType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[23].Descriptor()
}

func (VolumnAvgType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[23]
}

func (x VolumnAvgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumnAvgType.Descriptor instead.
func (VolumnAvgType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{23}
}

// /< 财讯通套利价格计算类型
type EPriceCalcType int32

const (
	EPriceCalcType_Calc_Null       EPriceCalcType = 0 // 无效值
	EPriceCalcType_Calc_Minus      EPriceCalcType = 1 // 价差 减法
	EPriceCalcType_Calc_Divide     EPriceCalcType = 2 // 价比 除法
	EPriceCalcType_Calc_Divide_USD EPriceCalcType = 3 // 价比 除法 美元
)

// Enum value maps for EPriceCalcType.
var (
	EPriceCalcType_name = map[int32]string{
		0: "Calc_Null",
		1: "Calc_Minus",
		2: "Calc_Divide",
		3: "Calc_Divide_USD",
	}
	EPriceCalcType_value = map[string]int32{
		"Calc_Null":       0,
		"Calc_Minus":      1,
		"Calc_Divide":     2,
		"Calc_Divide_USD": 3,
	}
)

func (x EPriceCalcType) Enum() *EPriceCalcType {
	p := new(EPriceCalcType)
	*p = x
	return p
}

func (x EPriceCalcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPriceCalcType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[24].Descriptor()
}

func (EPriceCalcType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[24]
}

func (x EPriceCalcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPriceCalcType.Descriptor instead.
func (EPriceCalcType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{24}
}

// /< 组合类型
type ECombineType int32

const (
	ECombineType_Combine_Null            ECombineType = 0 // 无效值
	ECombineType_Combine_Calendar_Spread ECombineType = 1 // 跨期
	ECombineType_Combine_Variety_Spread  ECombineType = 2 // 跨品种
	ECombineType_Combine_Market_Spread   ECombineType = 3 // 跨市场
	ECombineType_Combine_Futures_Spot    ECombineType = 4 // 期现
)

// Enum value maps for ECombineType.
var (
	ECombineType_name = map[int32]string{
		0: "Combine_Null",
		1: "Combine_Calendar_Spread",
		2: "Combine_Variety_Spread",
		3: "Combine_Market_Spread",
		4: "Combine_Futures_Spot",
	}
	ECombineType_value = map[string]int32{
		"Combine_Null":            0,
		"Combine_Calendar_Spread": 1,
		"Combine_Variety_Spread":  2,
		"Combine_Market_Spread":   3,
		"Combine_Futures_Spot":    4,
	}
)

func (x ECombineType) Enum() *ECombineType {
	p := new(ECombineType)
	*p = x
	return p
}

func (x ECombineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECombineType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[25].Descriptor()
}

func (ECombineType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[25]
}

func (x ECombineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECombineType.Descriptor instead.
func (ECombineType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{25}
}

// /< 套利历史服务处理消息类型
type ArbiHisServerHandleType int32

const (
	ArbiHisServerHandleType_KLINE_REQ_HANDLE_COMPLETED        ArbiHisServerHandleType = 0
	ArbiHisServerHandleType_TSCHART_REQ_HANDLE_COMPLETED      ArbiHisServerHandleType = 1
	ArbiHisServerHandleType_MATCH_DETAIL_REQ_HANDLE_COMPLETED ArbiHisServerHandleType = 2
	ArbiHisServerHandleType_KLINE_WRITE_COMPLETED             ArbiHisServerHandleType = 3
	ArbiHisServerHandleType_TSCHART_WRITE_COMPLETED           ArbiHisServerHandleType = 4
	ArbiHisServerHandleType_MATCH_DETAIL_WRITE_COMPLETED      ArbiHisServerHandleType = 5
)

// Enum value maps for ArbiHisServerHandleType.
var (
	ArbiHisServerHandleType_name = map[int32]string{
		0: "KLINE_REQ_HANDLE_COMPLETED",
		1: "TSCHART_REQ_HANDLE_COMPLETED",
		2: "MATCH_DETAIL_REQ_HANDLE_COMPLETED",
		3: "KLINE_WRITE_COMPLETED",
		4: "TSCHART_WRITE_COMPLETED",
		5: "MATCH_DETAIL_WRITE_COMPLETED",
	}
	ArbiHisServerHandleType_value = map[string]int32{
		"KLINE_REQ_HANDLE_COMPLETED":        0,
		"TSCHART_REQ_HANDLE_COMPLETED":      1,
		"MATCH_DETAIL_REQ_HANDLE_COMPLETED": 2,
		"KLINE_WRITE_COMPLETED":             3,
		"TSCHART_WRITE_COMPLETED":           4,
		"MATCH_DETAIL_WRITE_COMPLETED":      5,
	}
)

func (x ArbiHisServerHandleType) Enum() *ArbiHisServerHandleType {
	p := new(ArbiHisServerHandleType)
	*p = x
	return p
}

func (x ArbiHisServerHandleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArbiHisServerHandleType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[26].Descriptor()
}

func (ArbiHisServerHandleType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[26]
}

func (x ArbiHisServerHandleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArbiHisServerHandleType.Descriptor instead.
func (ArbiHisServerHandleType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{26}
}

// /< 套利实时行情的模块类型
type FipArbiRealQuotModuleType int32

const (
	FipArbiRealQuotModuleType_FARQMT_Null        FipArbiRealQuotModuleType = 0
	FipArbiRealQuotModuleType_FARQMT_RealQuot    FipArbiRealQuotModuleType = 1
	FipArbiRealQuotModuleType_FARQMT_KLine       FipArbiRealQuotModuleType = 2
	FipArbiRealQuotModuleType_FARQMT_TimeChart   FipArbiRealQuotModuleType = 3
	FipArbiRealQuotModuleType_FARQMT_MatchDetail FipArbiRealQuotModuleType = 4
)

// Enum value maps for FipArbiRealQuotModuleType.
var (
	FipArbiRealQuotModuleType_name = map[int32]string{
		0: "FARQMT_Null",
		1: "FARQMT_RealQuot",
		2: "FARQMT_KLine",
		3: "FARQMT_TimeChart",
		4: "FARQMT_MatchDetail",
	}
	FipArbiRealQuotModuleType_value = map[string]int32{
		"FARQMT_Null":        0,
		"FARQMT_RealQuot":    1,
		"FARQMT_KLine":       2,
		"FARQMT_TimeChart":   3,
		"FARQMT_MatchDetail": 4,
	}
)

func (x FipArbiRealQuotModuleType) Enum() *FipArbiRealQuotModuleType {
	p := new(FipArbiRealQuotModuleType)
	*p = x
	return p
}

func (x FipArbiRealQuotModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FipArbiRealQuotModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_proto_enumTypes[27].Descriptor()
}

func (FipArbiRealQuotModuleType) Type() protoreflect.EnumType {
	return &file_fip_def_proto_enumTypes[27]
}

func (x FipArbiRealQuotModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FipArbiRealQuotModuleType.Descriptor instead.
func (FipArbiRealQuotModuleType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{27}
}

// / 订阅行情消息体
type SubscribeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid EExchgID   `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所         //旧协议为exchangeId
	Type    ESubQuotBy `protobuf:"varint,2,opt,name=type,proto3,enum=fippb.ESubQuotBy" json:"type,omitempty"`     // 订阅类型-ESubQuotBy:交易所级/品种级/合约级/期权标的物  //旧协议为subType
	Id      string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                // 空/品种ID/合约ID/标的物             //旧协议为subId
}

func (x *SubscribeElem) Reset() {
	*x = SubscribeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeElem) ProtoMessage() {}

func (x *SubscribeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeElem.ProtoReflect.Descriptor instead.
func (*SubscribeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *SubscribeElem) GetType() ESubQuotBy {
	if x != nil {
		return x.Type
	}
	return ESubQuotBy_SQNull
}

func (x *SubscribeElem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// /< 当前订阅查询结果
type SubscribeQry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid       EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所     //旧协议为exchangeId
	ReqTypeBitmap uint32   `protobuf:"varint,2,opt,name=ReqTypeBitmap,proto3" json:"ReqTypeBitmap,omitempty"`         // ReqType组成的bitmap
	VartyList     []string `protobuf:"bytes,3,rep,name=VartyList,proto3" json:"VartyList,omitempty"`                  // 品种id列表         //旧协议为VarietyID
	ContrList     []string `protobuf:"bytes,4,rep,name=ContrList,proto3" json:"ContrList,omitempty"`                  // 合约id列表         //旧协议为ContractID
	SeriesList    []string `protobuf:"bytes,5,rep,name=SeriesList,proto3" json:"SeriesList,omitempty"`                // 标的物id列表       //旧协议为Underlying
}

func (x *SubscribeQry) Reset() {
	*x = SubscribeQry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeQry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQry) ProtoMessage() {}

func (x *SubscribeQry) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQry.ProtoReflect.Descriptor instead.
func (*SubscribeQry) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeQry) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *SubscribeQry) GetReqTypeBitmap() uint32 {
	if x != nil {
		return x.ReqTypeBitmap
	}
	return 0
}

func (x *SubscribeQry) GetVartyList() []string {
	if x != nil {
		return x.VartyList
	}
	return nil
}

func (x *SubscribeQry) GetContrList() []string {
	if x != nil {
		return x.ContrList
	}
	return nil
}

func (x *SubscribeQry) GetSeriesList() []string {
	if x != nil {
		return x.SeriesList
	}
	return nil
}

// /< 直接市场不变数据
type NoChgQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSettlePrice float64 `protobuf:"fixed64,1,opt,name=lastSettlePrice,proto3" json:"lastSettlePrice,omitempty"` // 昨结算价&
	LastClosePrice  float64 `protobuf:"fixed64,2,opt,name=lastClosePrice,proto3" json:"lastClosePrice,omitempty"`   // 昨收盘价&
	OpenPrice       float64 `protobuf:"fixed64,3,opt,name=openPrice,proto3" json:"openPrice,omitempty"`             // 今开盘价&
	PriceUpLimit    float64 `protobuf:"fixed64,4,opt,name=priceUpLimit,proto3" json:"priceUpLimit,omitempty"`       // 涨停板价&
	PriceDownLimit  float64 `protobuf:"fixed64,5,opt,name=priceDownLimit,proto3" json:"priceDownLimit,omitempty"`   // 跌停板价&
	TradeDate       string  `protobuf:"bytes,6,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`               // 交易日期&
	InitPosition    uint64  `protobuf:"varint,7,opt,name=InitPosition,proto3" json:"InitPosition,omitempty"`        // 初始持仓量&
}

func (x *NoChgQuot) Reset() {
	*x = NoChgQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoChgQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoChgQuot) ProtoMessage() {}

func (x *NoChgQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoChgQuot.ProtoReflect.Descriptor instead.
func (*NoChgQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{2}
}

func (x *NoChgQuot) GetLastSettlePrice() float64 {
	if x != nil {
		return x.LastSettlePrice
	}
	return 0
}

func (x *NoChgQuot) GetLastClosePrice() float64 {
	if x != nil {
		return x.LastClosePrice
	}
	return 0
}

func (x *NoChgQuot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *NoChgQuot) GetPriceUpLimit() float64 {
	if x != nil {
		return x.PriceUpLimit
	}
	return 0
}

func (x *NoChgQuot) GetPriceDownLimit() float64 {
	if x != nil {
		return x.PriceDownLimit
	}
	return 0
}

func (x *NoChgQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NoChgQuot) GetInitPosition() uint64 {
	if x != nil {
		return x.InitPosition
	}
	return 0
}

// /< 直接市场变化数据
type ChgQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettlePrice   float64 `protobuf:"fixed64,1,opt,name=settlePrice,proto3" json:"settlePrice,omitempty"`      // 今结算价
	Turnover      float64 `protobuf:"fixed64,2,opt,name=turnover,proto3" json:"turnover,omitempty"`            // 当日累计成交金额
	BidPrice      float64 `protobuf:"fixed64,3,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`            // 买价
	AskPrice      float64 `protobuf:"fixed64,4,opt,name=askPrice,proto3" json:"askPrice,omitempty"`            // 卖价
	HighPrice     float64 `protobuf:"fixed64,5,opt,name=highPrice,proto3" json:"highPrice,omitempty"`          // 最高价
	LowPrice      float64 `protobuf:"fixed64,6,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`            // 最低价
	LastPrice     float64 `protobuf:"fixed64,7,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`          // 最新价
	AvgPrice      float64 `protobuf:"fixed64,8,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`            // 当日均价
	BidQty        uint64  `protobuf:"varint,9,opt,name=bidQty,proto3" json:"bidQty,omitempty"`                 // 申买量
	AskQyt        uint64  `protobuf:"varint,10,opt,name=askQyt,proto3" json:"askQyt,omitempty"`                // 申卖量
	BidImplyQty   uint64  `protobuf:"varint,11,opt,name=bidImplyQty,proto3" json:"bidImplyQty,omitempty"`      // 申买推导量
	AskImplyQty   uint64  `protobuf:"varint,12,opt,name=askImplyQty,proto3" json:"askImplyQty,omitempty"`      // 申卖推导量
	TotalPosition uint64  `protobuf:"varint,13,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`  // 总持仓量(初始持仓量+日增)
	PositionChg   int64   `protobuf:"varint,14,opt,name=positionChg,proto3" json:"positionChg,omitempty"`      // 持仓量变化(日增)
	LastMatchQty  uint64  `protobuf:"varint,15,opt,name=lastMatchQty,proto3" json:"lastMatchQty,omitempty"`    // 最新成交量
	UpdateTime    uint64  `protobuf:"varint,16,opt,name=updateTime,proto3" json:"updateTime,omitempty"`        // 更新时间
	LifeLowPrice  float64 `protobuf:"fixed64,17,opt,name=lifeLowPrice,proto3" json:"lifeLowPrice,omitempty"`   // 历史最低价
	LifeHighPrice float64 `protobuf:"fixed64,18,opt,name=lifeHighPrice,proto3" json:"lifeHighPrice,omitempty"` // 历史最高价
	GenTime       string  `protobuf:"bytes,19,opt,name=genTime,proto3" json:"genTime,omitempty"`               // 生成时间
	ClosePrice    float64 `protobuf:"fixed64,20,opt,name=closePrice,proto3" json:"closePrice,omitempty"`       // 收盘价
	MatchTotQty   uint64  `protobuf:"varint,21,opt,name=MatchTotQty,proto3" json:"MatchTotQty,omitempty"`      // 成交量(总)
	BitIndex      uint64  `protobuf:"varint,22,opt,name=bitIndex,proto3" json:"bitIndex,omitempty"`            // 增量行情时的字段idx数组(全量行情时数组元素个数为0)
}

func (x *ChgQuot) Reset() {
	*x = ChgQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChgQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChgQuot) ProtoMessage() {}

func (x *ChgQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChgQuot.ProtoReflect.Descriptor instead.
func (*ChgQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{3}
}

func (x *ChgQuot) GetSettlePrice() float64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *ChgQuot) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *ChgQuot) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *ChgQuot) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *ChgQuot) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *ChgQuot) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *ChgQuot) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *ChgQuot) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *ChgQuot) GetBidQty() uint64 {
	if x != nil {
		return x.BidQty
	}
	return 0
}

func (x *ChgQuot) GetAskQyt() uint64 {
	if x != nil {
		return x.AskQyt
	}
	return 0
}

func (x *ChgQuot) GetBidImplyQty() uint64 {
	if x != nil {
		return x.BidImplyQty
	}
	return 0
}

func (x *ChgQuot) GetAskImplyQty() uint64 {
	if x != nil {
		return x.AskImplyQty
	}
	return 0
}

func (x *ChgQuot) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *ChgQuot) GetPositionChg() int64 {
	if x != nil {
		return x.PositionChg
	}
	return 0
}

func (x *ChgQuot) GetLastMatchQty() uint64 {
	if x != nil {
		return x.LastMatchQty
	}
	return 0
}

func (x *ChgQuot) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ChgQuot) GetLifeLowPrice() float64 {
	if x != nil {
		return x.LifeLowPrice
	}
	return 0
}

func (x *ChgQuot) GetLifeHighPrice() float64 {
	if x != nil {
		return x.LifeHighPrice
	}
	return 0
}

func (x *ChgQuot) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *ChgQuot) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *ChgQuot) GetMatchTotQty() uint64 {
	if x != nil {
		return x.MatchTotQty
	}
	return 0
}

func (x *ChgQuot) GetBitIndex() uint64 {
	if x != nil {
		return x.BitIndex
	}
	return 0
}

// /< 成交明细列表或其他额外参数
type ExtraBest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaMatchQty      uint64    `protobuf:"varint,1,opt,name=DeltaMatchQty,proto3" json:"DeltaMatchQty,omitempty"`           // 非0总成交量差(现手)
	DeltaMatchPrice    float64   `protobuf:"fixed64,2,opt,name=DeltaMatchPrice,proto3" json:"DeltaMatchPrice,omitempty"`      // 现涨(delta tick: 最新价之差)
	OE                 OEFlag    `protobuf:"varint,3,opt,name=OE,proto3,enum=fippb.OEFlag" json:"OE,omitempty"`               // 开平(10种)
	DeltaPosition      int64     `protobuf:"varint,4,opt,name=DeltaPosition,proto3" json:"DeltaPosition,omitempty"`           // 增仓(delta tick:position)
	DeltaTotalMatchQty uint64    `protobuf:"varint,5,opt,name=DeltaTotalMatchQty,proto3" json:"DeltaTotalMatchQty,omitempty"` // 总成交量差(delta tick)
	MatType            MatchType `protobuf:"varint,6,opt,name=MatType,proto3,enum=fippb.MatchType" json:"MatType,omitempty"`  //成交方向(买盘，卖盘)
}

func (x *ExtraBest) Reset() {
	*x = ExtraBest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraBest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraBest) ProtoMessage() {}

func (x *ExtraBest) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraBest.ProtoReflect.Descriptor instead.
func (*ExtraBest) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{4}
}

func (x *ExtraBest) GetDeltaMatchQty() uint64 {
	if x != nil {
		return x.DeltaMatchQty
	}
	return 0
}

func (x *ExtraBest) GetDeltaMatchPrice() float64 {
	if x != nil {
		return x.DeltaMatchPrice
	}
	return 0
}

func (x *ExtraBest) GetOE() OEFlag {
	if x != nil {
		return x.OE
	}
	return OEFlag_EFlagNull
}

func (x *ExtraBest) GetDeltaPosition() int64 {
	if x != nil {
		return x.DeltaPosition
	}
	return 0
}

func (x *ExtraBest) GetDeltaTotalMatchQty() uint64 {
	if x != nil {
		return x.DeltaTotalMatchQty
	}
	return 0
}

func (x *ExtraBest) GetMatType() MatchType {
	if x != nil {
		return x.MatType
	}
	return MatchType_MatNull
}

// /< 直接市场最优行情
type BestQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid         EExchgID         `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所     //旧协议字段为exchangeId
	ContractId      string           `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                // 合约号
	NoChg           *NoChgQuot       `protobuf:"bytes,3,opt,name=NoChg,proto3" json:"NoChg,omitempty"`
	Chg             *ChgQuot         `protobuf:"bytes,4,opt,name=chg,proto3" json:"chg,omitempty"`
	Extra           *ExtraBest       `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`                                                  // 成交明细列表或其他额外参数    //旧协议字段为extraParam
	LateralQuotType EQuotLateralType `protobuf:"varint,6,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *BestQuot) Reset() {
	*x = BestQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestQuot) ProtoMessage() {}

func (x *BestQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestQuot.ProtoReflect.Descriptor instead.
func (*BestQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{5}
}

func (x *BestQuot) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *BestQuot) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *BestQuot) GetNoChg() *NoChgQuot {
	if x != nil {
		return x.NoChg
	}
	return nil
}

func (x *BestQuot) GetChg() *ChgQuot {
	if x != nil {
		return x.Chg
	}
	return nil
}

func (x *BestQuot) GetExtra() *ExtraBest {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *BestQuot) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// /< 期权参数
type OptPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate  string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`   // 交易日期
	ContractId string  `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"` // 期权合约号
	Delta      float64 `protobuf:"fixed64,3,opt,name=delta,proto3" json:"delta,omitempty"`         // delta
	Gamma      float64 `protobuf:"fixed64,4,opt,name=gamma,proto3" json:"gamma,omitempty"`         // gamma
	Rho        float64 `protobuf:"fixed64,5,opt,name=rho,proto3" json:"rho,omitempty"`             // rho
	Theta      float64 `protobuf:"fixed64,6,opt,name=theta,proto3" json:"theta,omitempty"`         // theta
	Vega       float64 `protobuf:"fixed64,7,opt,name=vega,proto3" json:"vega,omitempty"`           // vega
}

func (x *OptPara) Reset() {
	*x = OptPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptPara) ProtoMessage() {}

func (x *OptPara) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptPara.ProtoReflect.Descriptor instead.
func (*OptPara) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{6}
}

func (x *OptPara) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *OptPara) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OptPara) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *OptPara) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *OptPara) GetRho() float64 {
	if x != nil {
		return x.Rho
	}
	return 0
}

func (x *OptPara) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *OptPara) GetVega() float64 {
	if x != nil {
		return x.Vega
	}
	return 0
}

// /< 大单散单统计量
type VolumnAccumulate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraBigVol   uint32  `protobuf:"varint,1,opt,name=ExtraBigVol,proto3" json:"ExtraBigVol,omitempty"`     // 外盘大单量
	InnerBigVol   uint32  `protobuf:"varint,2,opt,name=InnerBigVol,proto3" json:"InnerBigVol,omitempty"`     // 内盘大单量
	ExtraSmallVol uint32  `protobuf:"varint,3,opt,name=ExtraSmallVol,proto3" json:"ExtraSmallVol,omitempty"` // 外盘散单量
	InnerSmallVol uint32  `protobuf:"varint,4,opt,name=InnerSmallVol,proto3" json:"InnerSmallVol,omitempty"` // 内盘散单量
	TradeNum      uint32  `protobuf:"varint,5,opt,name=TradeNum,proto3" json:"TradeNum,omitempty"`           // 统计成交次数 平均成交量：总成交量 / 统计成交次数
	ExtraEarn     float64 `protobuf:"fixed64,6,opt,name=ExtraEarn,proto3" json:"ExtraEarn,omitempty"`        // 外盘成交价   最新价 * 成交量的统计值   多方均价：外盘成交价/（外盘大单量+外盘散单量）
	InnerEarn     float64 `protobuf:"fixed64,7,opt,name=InnerEarn,proto3" json:"InnerEarn,omitempty"`        // 内盘成交价   最新价 * 成交量的统计值      空方均价：内盘成交价/（内盘大单量+内盘散单量）
}

func (x *VolumnAccumulate) Reset() {
	*x = VolumnAccumulate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumnAccumulate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumnAccumulate) ProtoMessage() {}

func (x *VolumnAccumulate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumnAccumulate.ProtoReflect.Descriptor instead.
func (*VolumnAccumulate) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{7}
}

func (x *VolumnAccumulate) GetExtraBigVol() uint32 {
	if x != nil {
		return x.ExtraBigVol
	}
	return 0
}

func (x *VolumnAccumulate) GetInnerBigVol() uint32 {
	if x != nil {
		return x.InnerBigVol
	}
	return 0
}

func (x *VolumnAccumulate) GetExtraSmallVol() uint32 {
	if x != nil {
		return x.ExtraSmallVol
	}
	return 0
}

func (x *VolumnAccumulate) GetInnerSmallVol() uint32 {
	if x != nil {
		return x.InnerSmallVol
	}
	return 0
}

func (x *VolumnAccumulate) GetTradeNum() uint32 {
	if x != nil {
		return x.TradeNum
	}
	return 0
}

func (x *VolumnAccumulate) GetExtraEarn() float64 {
	if x != nil {
		return x.ExtraEarn
	}
	return 0
}

func (x *VolumnAccumulate) GetInnerEarn() float64 {
	if x != nil {
		return x.InnerEarn
	}
	return 0
}

// /< 开平类别统计量
type VolumnOE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeMultiVol   uint32 `protobuf:"varint,1,opt,name=ChangeMultiVol,proto3" json:"ChangeMultiVol,omitempty"`      // 多换量
	ChangeNilVol     uint32 `protobuf:"varint,2,opt,name=ChangeNilVol,proto3" json:"ChangeNilVol,omitempty"`          // 空换量
	OpenDoubleVol    uint32 `protobuf:"varint,3,opt,name=OpenDoubleVol,proto3" json:"OpenDoubleVol,omitempty"`        // 双开量
	CloseDoubleVol   uint32 `protobuf:"varint,4,opt,name=CloseDoubleVol,proto3" json:"CloseDoubleVol,omitempty"`      // 双平量
	OpenMultiVol     uint32 `protobuf:"varint,5,opt,name=OpenMultiVol,proto3" json:"OpenMultiVol,omitempty"`          // 多开量
	OpenMultiChgVol  uint32 `protobuf:"varint,6,opt,name=OpenMultiChgVol,proto3" json:"OpenMultiChgVol,omitempty"`    // 多开换手量
	OpenNilVol       uint32 `protobuf:"varint,7,opt,name=OpenNilVol,proto3" json:"OpenNilVol,omitempty"`              // 空开量
	OpenNilChgVol    uint32 `protobuf:"varint,8,opt,name=OpenNilChgVol,proto3" json:"OpenNilChgVol,omitempty"`        // 空开换手量
	CloseMultiVol    uint32 `protobuf:"varint,9,opt,name=CloseMultiVol,proto3" json:"CloseMultiVol,omitempty"`        // 多平量
	CloseMultiChgVol uint32 `protobuf:"varint,10,opt,name=CloseMultiChgVol,proto3" json:"CloseMultiChgVol,omitempty"` // 多平换手量
	CloseNilVol      uint32 `protobuf:"varint,11,opt,name=CloseNilVol,proto3" json:"CloseNilVol,omitempty"`           // 空平量
	CloseNilChgVol   uint32 `protobuf:"varint,12,opt,name=CloseNilChgVol,proto3" json:"CloseNilChgVol,omitempty"`     // 空平换手量
}

func (x *VolumnOE) Reset() {
	*x = VolumnOE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumnOE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumnOE) ProtoMessage() {}

func (x *VolumnOE) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumnOE.ProtoReflect.Descriptor instead.
func (*VolumnOE) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{8}
}

func (x *VolumnOE) GetChangeMultiVol() uint32 {
	if x != nil {
		return x.ChangeMultiVol
	}
	return 0
}

func (x *VolumnOE) GetChangeNilVol() uint32 {
	if x != nil {
		return x.ChangeNilVol
	}
	return 0
}

func (x *VolumnOE) GetOpenDoubleVol() uint32 {
	if x != nil {
		return x.OpenDoubleVol
	}
	return 0
}

func (x *VolumnOE) GetCloseDoubleVol() uint32 {
	if x != nil {
		return x.CloseDoubleVol
	}
	return 0
}

func (x *VolumnOE) GetOpenMultiVol() uint32 {
	if x != nil {
		return x.OpenMultiVol
	}
	return 0
}

func (x *VolumnOE) GetOpenMultiChgVol() uint32 {
	if x != nil {
		return x.OpenMultiChgVol
	}
	return 0
}

func (x *VolumnOE) GetOpenNilVol() uint32 {
	if x != nil {
		return x.OpenNilVol
	}
	return 0
}

func (x *VolumnOE) GetOpenNilChgVol() uint32 {
	if x != nil {
		return x.OpenNilChgVol
	}
	return 0
}

func (x *VolumnOE) GetCloseMultiVol() uint32 {
	if x != nil {
		return x.CloseMultiVol
	}
	return 0
}

func (x *VolumnOE) GetCloseMultiChgVol() uint32 {
	if x != nil {
		return x.CloseMultiChgVol
	}
	return 0
}

func (x *VolumnOE) GetCloseNilVol() uint32 {
	if x != nil {
		return x.CloseNilVol
	}
	return 0
}

func (x *VolumnOE) GetCloseNilChgVol() uint32 {
	if x != nil {
		return x.CloseNilChgVol
	}
	return 0
}

// / 当前均量及类型
type VolumnAvgVol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolAvg     uint32        `protobuf:"varint,1,opt,name=VolAvg,proto3" json:"VolAvg,omitempty"`                                  // 当前均量
	VolAvgType VolumnAvgType `protobuf:"varint,2,opt,name=VolAvgType,proto3,enum=fippb.VolumnAvgType" json:"VolAvgType,omitempty"` // 当前均量类型
}

func (x *VolumnAvgVol) Reset() {
	*x = VolumnAvgVol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumnAvgVol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumnAvgVol) ProtoMessage() {}

func (x *VolumnAvgVol) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumnAvgVol.ProtoReflect.Descriptor instead.
func (*VolumnAvgVol) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{9}
}

func (x *VolumnAvgVol) GetVolAvg() uint32 {
	if x != nil {
		return x.VolAvg
	}
	return 0
}

func (x *VolumnAvgVol) GetVolAvgType() VolumnAvgType {
	if x != nil {
		return x.VolAvgType
	}
	return VolumnAvgType_VolAvg_LastDay
}

type PrcQtyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=Price,proto3" json:"Price,omitempty"` //价格
	BOQty int32   `protobuf:"varint,2,opt,name=BOQty,proto3" json:"BOQty,omitempty"`  //买开数量
	BEQty int32   `protobuf:"varint,3,opt,name=BEQty,proto3" json:"BEQty,omitempty"`  //买平数量
	SOQty int32   `protobuf:"varint,4,opt,name=SOQty,proto3" json:"SOQty,omitempty"`  //卖开数量
	SEQty int32   `protobuf:"varint,5,opt,name=SEQty,proto3" json:"SEQty,omitempty"`  //卖平数量
}

func (x *PrcQtyElem) Reset() {
	*x = PrcQtyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrcQtyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrcQtyElem) ProtoMessage() {}

func (x *PrcQtyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrcQtyElem.ProtoReflect.Descriptor instead.
func (*PrcQtyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{10}
}

func (x *PrcQtyElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PrcQtyElem) GetBOQty() int32 {
	if x != nil {
		return x.BOQty
	}
	return 0
}

func (x *PrcQtyElem) GetBEQty() int32 {
	if x != nil {
		return x.BEQty
	}
	return 0
}

func (x *PrcQtyElem) GetSOQty() int32 {
	if x != nil {
		return x.SOQty
	}
	return 0
}

func (x *PrcQtyElem) GetSEQty() int32 {
	if x != nil {
		return x.SEQty
	}
	return 0
}

// /< 深度行情域
type MBLQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPrice float64 `protobuf:"fixed64,1,opt,name=orderPrice,proto3" json:"orderPrice,omitempty"` // 价格
	OrderQty   int32   `protobuf:"varint,2,opt,name=orderQty,proto3" json:"orderQty,omitempty"`      // 委托量
	ImplyQty   int32   `protobuf:"varint,3,opt,name=ImplyQty,proto3" json:"ImplyQty,omitempty"`      // 推导量
	BsFlag     int32   `protobuf:"varint,4,opt,name=bsFlag,proto3" json:"bsFlag,omitempty"`          // 买卖标志
	GenTime    string  `protobuf:"bytes,5,opt,name=genTime,proto3" json:"genTime,omitempty"`         // 生成时间
	DeltaQty   int32   `protobuf:"varint,6,opt,name=deltaQty,proto3" json:"deltaQty,omitempty"`      // 委托量差(相比上一笔tick数据)
}

func (x *MBLQuot) Reset() {
	*x = MBLQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBLQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBLQuot) ProtoMessage() {}

func (x *MBLQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBLQuot.ProtoReflect.Descriptor instead.
func (*MBLQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{11}
}

func (x *MBLQuot) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *MBLQuot) GetOrderQty() int32 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *MBLQuot) GetImplyQty() int32 {
	if x != nil {
		return x.ImplyQty
	}
	return 0
}

func (x *MBLQuot) GetBsFlag() int32 {
	if x != nil {
		return x.BsFlag
	}
	return 0
}

func (x *MBLQuot) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *MBLQuot) GetDeltaQty() int32 {
	if x != nil {
		return x.DeltaQty
	}
	return 0
}

// /< 最优报价委托数量行情域
type OrdPrcQtyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=Price,proto3" json:"Price,omitempty"`   // 价格
	Qty   []int32 `protobuf:"varint,2,rep,packed,name=Qty,proto3" json:"Qty,omitempty"` // 委托量(前十笔)
}

func (x *OrdPrcQtyElem) Reset() {
	*x = OrdPrcQtyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdPrcQtyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdPrcQtyElem) ProtoMessage() {}

func (x *OrdPrcQtyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdPrcQtyElem.ProtoReflect.Descriptor instead.
func (*OrdPrcQtyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{12}
}

func (x *OrdPrcQtyElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrdPrcQtyElem) GetQty() []int32 {
	if x != nil {
		return x.Qty
	}
	return nil
}

type BestPrcOrdQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buy     *OrdPrcQtyElem `protobuf:"bytes,1,opt,name=Buy,proto3" json:"Buy,omitempty"`         // 最优买委托数量
	Sell    *OrdPrcQtyElem `protobuf:"bytes,2,opt,name=Sell,proto3" json:"Sell,omitempty"`       // 最优卖委托数量
	GenTime string         `protobuf:"bytes,3,opt,name=GenTime,proto3" json:"GenTime,omitempty"` // 生成时间
}

func (x *BestPrcOrdQty) Reset() {
	*x = BestPrcOrdQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestPrcOrdQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestPrcOrdQty) ProtoMessage() {}

func (x *BestPrcOrdQty) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestPrcOrdQty.ProtoReflect.Descriptor instead.
func (*BestPrcOrdQty) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{13}
}

func (x *BestPrcOrdQty) GetBuy() *OrdPrcQtyElem {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *BestPrcOrdQty) GetSell() *OrdPrcQtyElem {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *BestPrcOrdQty) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

// /< 期货品种
type FtrVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid       EExchgID     `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`              // 交易所id    //旧协议字段为ExchangeId
	VarietyID     string       `protobuf:"bytes,2,opt,name=VarietyID,proto3" json:"VarietyID,omitempty"`                               // 品种代码
	Name          string       `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                                         // 品种名称
	Shortcut      string       `protobuf:"bytes,4,opt,name=Shortcut,proto3" json:"Shortcut,omitempty"`                                 // 品种快捷输入 --
	Unit          uint32       `protobuf:"varint,5,opt,name=Unit,proto3" json:"Unit,omitempty"`                                        // 交易单位数量
	Tick          float64      `protobuf:"fixed64,6,opt,name=Tick,proto3" json:"Tick,omitempty"`                                       // 最小变动价位(同步到合约)
	MaxHand       uint32       `protobuf:"varint,7,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                  // 最大下单手数
	MinHand       uint32       `protobuf:"varint,8,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                  // 最小下单手数
	LastPos       int32        `protobuf:"varint,9,opt,name=LastPos,proto3" json:"LastPos,omitempty"`                                  // 期货合约最后交易日在交割月的位置
	NoRiseRate    float64      `protobuf:"fixed64,10,opt,name=NoRiseRate,proto3" json:"NoRiseRate,omitempty"`                          // 无成交涨停板率 --
	NoFallRate    float64      `protobuf:"fixed64,11,opt,name=NoFallRate,proto3" json:"NoFallRate,omitempty"`                          // 无成交跌停板率 --
	RiseRate      float64      `protobuf:"fixed64,12,opt,name=RiseRate,proto3" json:"RiseRate,omitempty"`                              // 已成交涨停板率 --
	FallRate      float64      `protobuf:"fixed64,13,opt,name=FallRate,proto3" json:"FallRate,omitempty"`                              // 已成交跌停板率 --
	DelivRiseRate float64      `protobuf:"fixed64,14,opt,name=DelivRiseRate,proto3" json:"DelivRiseRate,omitempty"`                    // 交割月涨停板率 --
	DelivFallRate float64      `protobuf:"fixed64,15,opt,name=DelivFallRate,proto3" json:"DelivFallRate,omitempty"`                    // 交割月跌停板率 --
	Status        uint32       `protobuf:"varint,16,opt,name=Status,proto3" json:"Status,omitempty"`                                   // 品种状态
	LogoutDate    string       `protobuf:"bytes,17,opt,name=LogoutDate,proto3" json:"LogoutDate,omitempty"`                            // 摘牌日期
	Index         uint32       `protobuf:"varint,18,opt,name=Index,proto3" json:"Index,omitempty"`                                     // 索引
	VarietyType   EVarietyType `protobuf:"varint,19,opt,name=VarietyType,proto3,enum=fippb.EVarietyType" json:"VarietyType,omitempty"` // 品种类型
	FtrDuartion   EFtrDuration `protobuf:"varint,20,opt,name=FtrDuartion,proto3,enum=fippb.EFtrDuration" json:"FtrDuartion,omitempty"` // 期货期限（一年期、二年期）
	PosType       string       `protobuf:"bytes,21,opt,name=PosType,proto3" json:"PosType,omitempty"`                                  // 期货合约最后交易日在交割月的位置(类型)
	CnName        string       `protobuf:"bytes,22,opt,name=CnName,proto3" json:"CnName,omitempty"`                                    // 品种名称（中文全称）
}

func (x *FtrVarietyElem) Reset() {
	*x = FtrVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtrVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtrVarietyElem) ProtoMessage() {}

func (x *FtrVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtrVarietyElem.ProtoReflect.Descriptor instead.
func (*FtrVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{14}
}

func (x *FtrVarietyElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *FtrVarietyElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *FtrVarietyElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FtrVarietyElem) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

func (x *FtrVarietyElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *FtrVarietyElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *FtrVarietyElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *FtrVarietyElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *FtrVarietyElem) GetLastPos() int32 {
	if x != nil {
		return x.LastPos
	}
	return 0
}

func (x *FtrVarietyElem) GetNoRiseRate() float64 {
	if x != nil {
		return x.NoRiseRate
	}
	return 0
}

func (x *FtrVarietyElem) GetNoFallRate() float64 {
	if x != nil {
		return x.NoFallRate
	}
	return 0
}

func (x *FtrVarietyElem) GetRiseRate() float64 {
	if x != nil {
		return x.RiseRate
	}
	return 0
}

func (x *FtrVarietyElem) GetFallRate() float64 {
	if x != nil {
		return x.FallRate
	}
	return 0
}

func (x *FtrVarietyElem) GetDelivRiseRate() float64 {
	if x != nil {
		return x.DelivRiseRate
	}
	return 0
}

func (x *FtrVarietyElem) GetDelivFallRate() float64 {
	if x != nil {
		return x.DelivFallRate
	}
	return 0
}

func (x *FtrVarietyElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FtrVarietyElem) GetLogoutDate() string {
	if x != nil {
		return x.LogoutDate
	}
	return ""
}

func (x *FtrVarietyElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FtrVarietyElem) GetVarietyType() EVarietyType {
	if x != nil {
		return x.VarietyType
	}
	return EVarietyType_NULL_Variety
}

func (x *FtrVarietyElem) GetFtrDuartion() EFtrDuration {
	if x != nil {
		return x.FtrDuartion
	}
	return EFtrDuration_Duration_NULL
}

func (x *FtrVarietyElem) GetPosType() string {
	if x != nil {
		return x.PosType
	}
	return ""
}

func (x *FtrVarietyElem) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

// /< 期权品种
type OptVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid      EExchgID       `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`              // 交易所id      //旧协议字段为ExchangeId
	VarietyID    string         `protobuf:"bytes,2,opt,name=VarietyID,proto3" json:"VarietyID,omitempty"`                               // 品种代码
	Name         string         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                                         // 品种名称
	Tick         float64        `protobuf:"fixed64,4,opt,name=Tick,proto3" json:"Tick,omitempty"`                                       // 最小变动价位
	MaxHand      uint32         `protobuf:"varint,5,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                  // 最大下单手数
	MinHand      uint32         `protobuf:"varint,6,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                  // 最小下单手数
	BefoDelivPos uint32         `protobuf:"varint,7,opt,name=BefoDelivPos,proto3" json:"BefoDelivPos,omitempty"`                        // 最后交易日在期货合约交割月的前几个月 --
	LastPos      int32          `protobuf:"varint,8,opt,name=LastPos,proto3" json:"LastPos,omitempty"`                                  // 期货合约最后交易日在交割月的位置 --
	ExpPos       uint32         `protobuf:"varint,9,opt,name=ExpPos,proto3" json:"ExpPos,omitempty"`                                    // 合约到期日距最后交易日的位置 --
	AddType      uint32         `protobuf:"varint,10,opt,name=AddType,proto3" json:"AddType,omitempty"`                                 // 期权合约增加方式 --
	Space        float64        `protobuf:"fixed64,11,opt,name=Space,proto3" json:"Space,omitempty"`                                    // 执行价格间距 --
	CoverQty     uint32         `protobuf:"varint,12,opt,name=CoverQty,proto3" json:"CoverQty,omitempty"`                               // 执行价格覆盖涨跌停板的个数 --
	Status       uint32         `protobuf:"varint,13,opt,name=Status,proto3" json:"Status,omitempty"`                                   // 品种状态
	LogoutDate   string         `protobuf:"bytes,14,opt,name=LogoutDate,proto3" json:"LogoutDate,omitempty"`                            // 摘牌日期
	Index        uint32         `protobuf:"varint,15,opt,name=Index,proto3" json:"Index,omitempty"`                                     // 索引
	VarietyType  EVarietyType   `protobuf:"varint,16,opt,name=VarietyType,proto3,enum=fippb.EVarietyType" json:"VarietyType,omitempty"` // 品种类型
	PosType      string         `protobuf:"bytes,17,opt,name=PosType,proto3" json:"PosType,omitempty"`                                  // 合约到期日距最后交易日的位置(类型)
	Unit         uint32         `protobuf:"varint,18,opt,name=Unit,proto3" json:"Unit,omitempty"`                                       ///< 每手乘数
	StrikeWay    EStrikeWayType `protobuf:"varint,19,opt,name=StrikeWay,proto3,enum=fippb.EStrikeWayType" json:"StrikeWay,omitempty"`   // opt contract strike way
	OptType      EOptType       `protobuf:"varint,20,opt,name=OptType,proto3,enum=fippb.EOptType" json:"OptType,omitempty"`             ///< 期权类型
}

func (x *OptVarietyElem) Reset() {
	*x = OptVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptVarietyElem) ProtoMessage() {}

func (x *OptVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptVarietyElem.ProtoReflect.Descriptor instead.
func (*OptVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{15}
}

func (x *OptVarietyElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *OptVarietyElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *OptVarietyElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptVarietyElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *OptVarietyElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *OptVarietyElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *OptVarietyElem) GetBefoDelivPos() uint32 {
	if x != nil {
		return x.BefoDelivPos
	}
	return 0
}

func (x *OptVarietyElem) GetLastPos() int32 {
	if x != nil {
		return x.LastPos
	}
	return 0
}

func (x *OptVarietyElem) GetExpPos() uint32 {
	if x != nil {
		return x.ExpPos
	}
	return 0
}

func (x *OptVarietyElem) GetAddType() uint32 {
	if x != nil {
		return x.AddType
	}
	return 0
}

func (x *OptVarietyElem) GetSpace() float64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *OptVarietyElem) GetCoverQty() uint32 {
	if x != nil {
		return x.CoverQty
	}
	return 0
}

func (x *OptVarietyElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OptVarietyElem) GetLogoutDate() string {
	if x != nil {
		return x.LogoutDate
	}
	return ""
}

func (x *OptVarietyElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OptVarietyElem) GetVarietyType() EVarietyType {
	if x != nil {
		return x.VarietyType
	}
	return EVarietyType_NULL_Variety
}

func (x *OptVarietyElem) GetPosType() string {
	if x != nil {
		return x.PosType
	}
	return ""
}

func (x *OptVarietyElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *OptVarietyElem) GetStrikeWay() EStrikeWayType {
	if x != nil {
		return x.StrikeWay
	}
	return EStrikeWayType_NULL
}

func (x *OptVarietyElem) GetOptType() EOptType {
	if x != nil {
		return x.OptType
	}
	return EOptType_Null_Opt
}

// /< 指数合约分类
type IdxCatElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgID  EExchgID `protobuf:"varint,1,opt,name=ExchgID,proto3,enum=fippb.EExchgID" json:"ExchgID,omitempty"` ///< 交易所ID
	IdxCatID string   `protobuf:"bytes,2,opt,name=IdxCatID,proto3" json:"IdxCatID,omitempty"`                    ///< 指数分类ID（唯一标识，与指数合约里的 IdxCatID域对应）
	IdxName  string   `protobuf:"bytes,3,opt,name=IdxName,proto3" json:"IdxName,omitempty"`                      ///< 指数分类名字（分类中文名，如农产品、工业品、VIX指数）
	Index    uint32   `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`                         ///< 指数分类排序（可获取指数分类的顺序）
}

func (x *IdxCatElem) Reset() {
	*x = IdxCatElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdxCatElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdxCatElem) ProtoMessage() {}

func (x *IdxCatElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdxCatElem.ProtoReflect.Descriptor instead.
func (*IdxCatElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{16}
}

func (x *IdxCatElem) GetExchgID() EExchgID {
	if x != nil {
		return x.ExchgID
	}
	return EExchgID_ExchNull
}

func (x *IdxCatElem) GetIdxCatID() string {
	if x != nil {
		return x.IdxCatID
	}
	return ""
}

func (x *IdxCatElem) GetIdxName() string {
	if x != nil {
		return x.IdxName
	}
	return ""
}

func (x *IdxCatElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// /< 期货合约
type FtrContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid         EExchgID      `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                // 交易所id(客户端使用)         //旧协议字段为 exchangeId
	MktID           string        `protobuf:"bytes,2,opt,name=MktID,proto3" json:"MktID,omitempty"`                                         // 市场编码（空）--
	ContractID      string        `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                               // 合约编码(客户端使用)
	ContractVer     uint32        `protobuf:"varint,4,opt,name=ContractVer,proto3" json:"ContractVer,omitempty"`                            // 合约版本号（空）--           //旧协议为 ContractVersion
	ContractName    string        `protobuf:"bytes,5,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                           // 合约名称(客户端使用)
	ShortCutKey     uint32        `protobuf:"varint,6,opt,name=ShortCutKey,proto3" json:"ShortCutKey,omitempty"`                            // 输入快捷键（空）----
	StartTradeDate  string        `protobuf:"bytes,7,opt,name=StartTradeDate,proto3" json:"StartTradeDate,omitempty"`                       // 开始交易日 (空)----
	EndTradeDate    string        `protobuf:"bytes,8,opt,name=EndTradeDate,proto3" json:"EndTradeDate,omitempty"`                           // 最后交易日
	ContractType    EContractType `protobuf:"varint,9,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` // 合约类型（客户端用）
	EndDelivDate    string        `protobuf:"bytes,10,opt,name=EndDelivDate,proto3" json:"EndDelivDate,omitempty"`                          // 最后交割日（空）--           //旧协议为 EndDeliveryDate
	StartDelivDate  string        `protobuf:"bytes,11,opt,name=StartDelivDate,proto3" json:"StartDelivDate,omitempty"`                      // 开始交割日(空)----           //旧协议为 StartDeliveryDate
	StopCode        uint32        `protobuf:"varint,12,opt,name=StopCode,proto3" json:"StopCode,omitempty"`                                 // 停止交易原因(空) --          //旧协议为 ContractStopCode
	Currency        string        `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`                                  // 交易用的货币（空）--
	FuseRights      uint32        `protobuf:"varint,14,opt,name=FuseRights,proto3" json:"FuseRights,omitempty"`                             // 可否熔断（空）--
	Unit            uint32        `protobuf:"varint,15,opt,name=Unit,proto3" json:"Unit,omitempty"`                                         // 每手乘数（从品种配置中同步）
	Tick            float64       `protobuf:"fixed64,16,opt,name=Tick,proto3" json:"Tick,omitempty"`                                        // 最小价位(客户端使用)（从品种配置中同步）
	RiseLimit       float64       `protobuf:"fixed64,17,opt,name=RiseLimit,proto3" json:"RiseLimit,omitempty"`                              // 涨停板
	FallLimit       float64       `protobuf:"fixed64,18,opt,name=FallLimit,proto3" json:"FallLimit,omitempty"`                              // 跌停板
	MaxHand         uint32        `protobuf:"varint,19,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                   // 最大可下单手数（从品种配置中同步）
	MinHand         uint32        `protobuf:"varint,20,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                   // 最小可下单手数（从品种配置中同步）
	PubStyle        uint32        `protobuf:"varint,21,opt,name=PubStyle,proto3" json:"PubStyle,omitempty"`                                 // 竞价阶段合约行情发布方式（空） --
	FuseLimit       float64       `protobuf:"fixed64,22,opt,name=FuseLimit,proto3" json:"FuseLimit,omitempty"`                              // 熔断限额（空）--
	FusePersistTime uint32        `protobuf:"varint,23,opt,name=FusePersistTime,proto3" json:"FusePersistTime,omitempty"`                   // 熔断最大持续时间（空）--
	FusePoint       string        `protobuf:"bytes,24,opt,name=FusePoint,proto3" json:"FusePoint,omitempty"`                                // 在该时间点后不可熔断（空）--
	FuseFlag        uint32        `protobuf:"varint,25,opt,name=FuseFlag,proto3" json:"FuseFlag,omitempty"`                                 // 熔断标记（空）--
	Forcedistime    uint32        `protobuf:"varint,26,opt,name=Forcedistime,proto3" json:"Forcedistime,omitempty"`                         // 强平的撮合间隔（空）--
	Status          uint32        `protobuf:"varint,27,opt,name=Status,proto3" json:"Status,omitempty"`                                     // 合约状态（空）--
	DeliveryMonth   string        `protobuf:"bytes,28,opt,name=DeliveryMonth,proto3" json:"DeliveryMonth,omitempty"`                        // 交割月（空）--
	VarietyId       string        `protobuf:"bytes,29,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                // 品种代码(客户端使用)
	RefPrice        float64       `protobuf:"fixed64,30,opt,name=RefPrice,proto3" json:"RefPrice,omitempty"`                                // 挂牌基准价（空）--
	Index           uint32        `protobuf:"varint,31,opt,name=Index,proto3" json:"Index,omitempty"`                                       // 索引
	OptExpDate      string        `protobuf:"bytes,32,opt,name=OptExpDate,proto3" json:"OptExpDate,omitempty"`                              // 标的物对应的期权合约到期日（根据期权品种配置信息自动生成）            //旧协议为OptExpirationDate
	OptExpLeftDays  uint32        `protobuf:"varint,33,opt,name=OptExpLeftDays,proto3" json:"OptExpLeftDays,omitempty"`                     // 标的物对应的期权合约到期日剩余天数（根据服务端当前时间进行计算）   //旧协议为OptExpirationLeftDays
	RealContractID  string        `protobuf:"bytes,34,opt,name=RealContractID,proto3" json:"RealContractID,omitempty"`                      // 真正的主联合约id
}

func (x *FtrContractElem) Reset() {
	*x = FtrContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtrContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtrContractElem) ProtoMessage() {}

func (x *FtrContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtrContractElem.ProtoReflect.Descriptor instead.
func (*FtrContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{17}
}

func (x *FtrContractElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *FtrContractElem) GetMktID() string {
	if x != nil {
		return x.MktID
	}
	return ""
}

func (x *FtrContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *FtrContractElem) GetContractVer() uint32 {
	if x != nil {
		return x.ContractVer
	}
	return 0
}

func (x *FtrContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *FtrContractElem) GetShortCutKey() uint32 {
	if x != nil {
		return x.ShortCutKey
	}
	return 0
}

func (x *FtrContractElem) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *FtrContractElem) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *FtrContractElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

func (x *FtrContractElem) GetEndDelivDate() string {
	if x != nil {
		return x.EndDelivDate
	}
	return ""
}

func (x *FtrContractElem) GetStartDelivDate() string {
	if x != nil {
		return x.StartDelivDate
	}
	return ""
}

func (x *FtrContractElem) GetStopCode() uint32 {
	if x != nil {
		return x.StopCode
	}
	return 0
}

func (x *FtrContractElem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FtrContractElem) GetFuseRights() uint32 {
	if x != nil {
		return x.FuseRights
	}
	return 0
}

func (x *FtrContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *FtrContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *FtrContractElem) GetRiseLimit() float64 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *FtrContractElem) GetFallLimit() float64 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *FtrContractElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *FtrContractElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *FtrContractElem) GetPubStyle() uint32 {
	if x != nil {
		return x.PubStyle
	}
	return 0
}

func (x *FtrContractElem) GetFuseLimit() float64 {
	if x != nil {
		return x.FuseLimit
	}
	return 0
}

func (x *FtrContractElem) GetFusePersistTime() uint32 {
	if x != nil {
		return x.FusePersistTime
	}
	return 0
}

func (x *FtrContractElem) GetFusePoint() string {
	if x != nil {
		return x.FusePoint
	}
	return ""
}

func (x *FtrContractElem) GetFuseFlag() uint32 {
	if x != nil {
		return x.FuseFlag
	}
	return 0
}

func (x *FtrContractElem) GetForcedistime() uint32 {
	if x != nil {
		return x.Forcedistime
	}
	return 0
}

func (x *FtrContractElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FtrContractElem) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *FtrContractElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *FtrContractElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *FtrContractElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FtrContractElem) GetOptExpDate() string {
	if x != nil {
		return x.OptExpDate
	}
	return ""
}

func (x *FtrContractElem) GetOptExpLeftDays() uint32 {
	if x != nil {
		return x.OptExpLeftDays
	}
	return 0
}

func (x *FtrContractElem) GetRealContractID() string {
	if x != nil {
		return x.RealContractID
	}
	return ""
}

// /< 期权标的物信息
type OptUnderlyingElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid           EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                      // 标的物交易所id(客户端使用)
	ContractId        string   `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                     // 标的物合约编码(客户端使用) 可能为虚拟合约
	ContractName      string   `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`                                 // 标的物合约名称(客户端使用)
	StartTradeDate    string   `protobuf:"bytes,4,opt,name=startTradeDate,proto3" json:"startTradeDate,omitempty"`                             // 标的物开始交易日 (空)
	EndTradeDate      string   `protobuf:"bytes,5,opt,name=endTradeDate,proto3" json:"endTradeDate,omitempty"`                                 // 标的物最后交易日
	Unit              uint32   `protobuf:"varint,6,opt,name=unit,proto3" json:"unit,omitempty"`                                                // 标的物每手乘数（从品种配置中同步）
	Tick              float64  `protobuf:"fixed64,7,opt,name=tick,proto3" json:"tick,omitempty"`                                               // 标的物最小价位(客户端使用)（从品种配置中同步）
	Status            uint32   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                                            // 标的物合约状态（空）
	DeliveryMonth     string   `protobuf:"bytes,9,opt,name=deliveryMonth,proto3" json:"deliveryMonth,omitempty"`                               // 标的物交割月（空）
	VarietyId         string   `protobuf:"bytes,10,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                                      // 标的物品种代码(客户端使用)
	OptExpDate        string   `protobuf:"bytes,11,opt,name=optExpDate,proto3" json:"optExpDate,omitempty"`                                    // 标的物对应的期权合约到期日（根据期权品种配置信息自动生成）
	OptExpLeftDays    uint32   `protobuf:"varint,12,opt,name=optExpLeftDays,proto3" json:"optExpLeftDays,omitempty"`                           // 标的物对应的期权合约到期日剩余天数（根据服务端当前时间进行计算）
	UnderlyingExchgid EExchgID `protobuf:"varint,13,opt,name=underlyingExchgid,proto3,enum=fippb.EExchgID" json:"underlyingExchgid,omitempty"` // 真实标的物交易所id(客户端使用)
	UnderlyingCode    string   `protobuf:"bytes,14,opt,name=underlyingCode,proto3" json:"underlyingCode,omitempty"`                            // 真实标的物代码（标的物合约id、指数代码等，用于订阅实际标的物行情）
}

func (x *OptUnderlyingElem) Reset() {
	*x = OptUnderlyingElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptUnderlyingElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptUnderlyingElem) ProtoMessage() {}

func (x *OptUnderlyingElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptUnderlyingElem.ProtoReflect.Descriptor instead.
func (*OptUnderlyingElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{18}
}

func (x *OptUnderlyingElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *OptUnderlyingElem) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OptUnderlyingElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *OptUnderlyingElem) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *OptUnderlyingElem) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *OptUnderlyingElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *OptUnderlyingElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *OptUnderlyingElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OptUnderlyingElem) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *OptUnderlyingElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *OptUnderlyingElem) GetOptExpDate() string {
	if x != nil {
		return x.OptExpDate
	}
	return ""
}

func (x *OptUnderlyingElem) GetOptExpLeftDays() uint32 {
	if x != nil {
		return x.OptExpLeftDays
	}
	return 0
}

func (x *OptUnderlyingElem) GetUnderlyingExchgid() EExchgID {
	if x != nil {
		return x.UnderlyingExchgid
	}
	return EExchgID_ExchNull
}

func (x *OptUnderlyingElem) GetUnderlyingCode() string {
	if x != nil {
		return x.UnderlyingCode
	}
	return ""
}

// /< 现货品种信息
type SpotVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId string   `protobuf:"bytes,1,opt,name=varietyId,proto3" json:"varietyId,omitempty"`                  // 品种id
	Exchgid   EExchgID `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 标的物交易所id
	SpotCode  string   `protobuf:"bytes,3,opt,name=spotCode,proto3" json:"spotCode,omitempty"`                    // 现货代码
	SpotName  string   `protobuf:"bytes,4,opt,name=spotName,proto3" json:"spotName,omitempty"`                    // 现货名称
}

func (x *SpotVarietyElem) Reset() {
	*x = SpotVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotVarietyElem) ProtoMessage() {}

func (x *SpotVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotVarietyElem.ProtoReflect.Descriptor instead.
func (*SpotVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{19}
}

func (x *SpotVarietyElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *SpotVarietyElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *SpotVarietyElem) GetSpotCode() string {
	if x != nil {
		return x.SpotCode
	}
	return ""
}

func (x *SpotVarietyElem) GetSpotName() string {
	if x != nil {
		return x.SpotName
	}
	return ""
}

// /< 指数合约
type IdxContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgID         EExchgID          `protobuf:"varint,1,opt,name=ExchgID,proto3,enum=fippb.EExchgID" json:"ExchgID,omitempty"`                ///< 交易所ID（客户端使用）
	MktID           string            `protobuf:"bytes,2,opt,name=MktID,proto3" json:"MktID,omitempty"`                                         ///< 市场编码（空）--
	ContractID      string            `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                               ///< 合约编码（空）--
	ContractVer     uint32            `protobuf:"varint,4,opt,name=ContractVer,proto3" json:"ContractVer,omitempty"`                            ///< 合约版本号（空）--
	ContractName    string            `protobuf:"bytes,5,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                           ///< 合约名称（客户端使用）
	ShortCutKey     uint32            `protobuf:"varint,6,opt,name=ShortCutKey,proto3" json:"ShortCutKey,omitempty"`                            ///< 输入快捷键（空）----
	StartTradeDate  string            `protobuf:"bytes,7,opt,name=StartTradeDate,proto3" json:"StartTradeDate,omitempty"`                       ///< 开始交易日（空）----
	EndTradeDate    string            `protobuf:"bytes,8,opt,name=EndTradeDate,proto3" json:"EndTradeDate,omitempty"`                           ///< 最后交易日（空）--
	ContractType    EContractType     `protobuf:"varint,9,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` ///< 合约类型（客户端使用）--
	EndDelivDate    string            `protobuf:"bytes,10,opt,name=EndDelivDate,proto3" json:"EndDelivDate,omitempty"`                          ///< 最后交割日（空）--
	StartDelivDate  string            `protobuf:"bytes,11,opt,name=StartDelivDate,proto3" json:"StartDelivDate,omitempty"`                      ///< 开始交割日（空）--
	StopCode        uint32            `protobuf:"varint,12,opt,name=StopCode,proto3" json:"StopCode,omitempty"`                                 ///< 停止交易原因(空) --
	Currency        string            `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`                                  ///< 交易用的货币（空）--
	FuseRights      uint32            `protobuf:"varint,14,opt,name=FuseRights,proto3" json:"FuseRights,omitempty"`                             ///< 可否熔断（空）--
	Unit            uint32            `protobuf:"varint,15,opt,name=Unit,proto3" json:"Unit,omitempty"`                                         ///< 每手乘数（空）--
	Tick            float64           `protobuf:"fixed64,16,opt,name=Tick,proto3" json:"Tick,omitempty"`                                        ///< 最小价位(客户端使用)（从品种配置中同步）
	RiseLimit       float64           `protobuf:"fixed64,17,opt,name=RiseLimit,proto3" json:"RiseLimit,omitempty"`                              ///< 涨停板（空）--
	FallLimit       float64           `protobuf:"fixed64,18,opt,name=FallLimit,proto3" json:"FallLimit,omitempty"`                              ///< 跌停板（空）--
	MaxHand         uint32            `protobuf:"varint,19,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                   ///< 最大可下单手数（空）
	MinHand         uint32            `protobuf:"varint,20,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                   ///< 最小可下单手数（空）
	PubStyle        uint32            `protobuf:"varint,21,opt,name=PubStyle,proto3" json:"PubStyle,omitempty"`                                 ///< 竞价阶段合约行情发布方式（空） --
	FuseLimit       float64           `protobuf:"fixed64,22,opt,name=FuseLimit,proto3" json:"FuseLimit,omitempty"`                              ///< 熔断限额（空）--
	FusePersistTime uint32            `protobuf:"varint,23,opt,name=FusePersistTime,proto3" json:"FusePersistTime,omitempty"`                   ///< 熔断最大持续时间（空）--
	FusePoint       string            `protobuf:"bytes,24,opt,name=FusePoint,proto3" json:"FusePoint,omitempty"`                                ///< 在该时间点后不可熔断（空）--
	FuseFlag        uint32            `protobuf:"varint,25,opt,name=FuseFlag,proto3" json:"FuseFlag,omitempty"`                                 ///< 熔断标记（空）--
	Forcedistime    uint32            `protobuf:"varint,26,opt,name=Forcedistime,proto3" json:"Forcedistime,omitempty"`                         ///< 强平的撮合间隔（空）--
	Status          uint32            `protobuf:"varint,27,opt,name=Status,proto3" json:"Status,omitempty"`                                     ///< 合约状态（空）--
	DeliveryMonth   string            `protobuf:"bytes,28,opt,name=DeliveryMonth,proto3" json:"DeliveryMonth,omitempty"`                        ///< 交割月（空）--
	VarietyId       string            `protobuf:"bytes,29,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                ///< 品种代码(客户端使用)
	RefPrice        float64           `protobuf:"fixed64,30,opt,name=RefPrice,proto3" json:"RefPrice,omitempty"`                                ///< 挂牌基准价（空）--
	Index           uint32            `protobuf:"varint,31,opt,name=Index,proto3" json:"Index,omitempty"`                                       ///< 索引（从品种配置中同步）
	OptExpDate      string            `protobuf:"bytes,32,opt,name=OptExpDate,proto3" json:"OptExpDate,omitempty"`                              ///< 标的物对应的期权合约到期日（空）--
	OptExpLeftDays  uint32            `protobuf:"varint,33,opt,name=OptExpLeftDays,proto3" json:"OptExpLeftDays,omitempty"`                     ///< 标的物对应的期权合约到期日剩余天数（空）--
	RealContractID  string            `protobuf:"bytes,34,opt,name=RealContractID,proto3" json:"RealContractID,omitempty"`                      ///< 真正的主联合约id（空）--
	IdxCatID        string            `protobuf:"bytes,35,opt,name=IdxCatID,proto3" json:"IdxCatID,omitempty"`                                  ///< 指数分类域ID（从品种配置中同步）
	VatList         []*IdxVarietyElem `protobuf:"bytes,36,rep,name=VatList,proto3" json:"VatList,omitempty"`                                    ///< 指数所属类型详情列表（从品种配置中同步）
	VarietyType     EVarietyType      `protobuf:"varint,37,opt,name=VarietyType,proto3,enum=fippb.EVarietyType" json:"VarietyType,omitempty"`   ///< 合约类型（白盘、夜盘）
}

func (x *IdxContractElem) Reset() {
	*x = IdxContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdxContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdxContractElem) ProtoMessage() {}

func (x *IdxContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdxContractElem.ProtoReflect.Descriptor instead.
func (*IdxContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{20}
}

func (x *IdxContractElem) GetExchgID() EExchgID {
	if x != nil {
		return x.ExchgID
	}
	return EExchgID_ExchNull
}

func (x *IdxContractElem) GetMktID() string {
	if x != nil {
		return x.MktID
	}
	return ""
}

func (x *IdxContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *IdxContractElem) GetContractVer() uint32 {
	if x != nil {
		return x.ContractVer
	}
	return 0
}

func (x *IdxContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *IdxContractElem) GetShortCutKey() uint32 {
	if x != nil {
		return x.ShortCutKey
	}
	return 0
}

func (x *IdxContractElem) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *IdxContractElem) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *IdxContractElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

func (x *IdxContractElem) GetEndDelivDate() string {
	if x != nil {
		return x.EndDelivDate
	}
	return ""
}

func (x *IdxContractElem) GetStartDelivDate() string {
	if x != nil {
		return x.StartDelivDate
	}
	return ""
}

func (x *IdxContractElem) GetStopCode() uint32 {
	if x != nil {
		return x.StopCode
	}
	return 0
}

func (x *IdxContractElem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *IdxContractElem) GetFuseRights() uint32 {
	if x != nil {
		return x.FuseRights
	}
	return 0
}

func (x *IdxContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *IdxContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *IdxContractElem) GetRiseLimit() float64 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *IdxContractElem) GetFallLimit() float64 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *IdxContractElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *IdxContractElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *IdxContractElem) GetPubStyle() uint32 {
	if x != nil {
		return x.PubStyle
	}
	return 0
}

func (x *IdxContractElem) GetFuseLimit() float64 {
	if x != nil {
		return x.FuseLimit
	}
	return 0
}

func (x *IdxContractElem) GetFusePersistTime() uint32 {
	if x != nil {
		return x.FusePersistTime
	}
	return 0
}

func (x *IdxContractElem) GetFusePoint() string {
	if x != nil {
		return x.FusePoint
	}
	return ""
}

func (x *IdxContractElem) GetFuseFlag() uint32 {
	if x != nil {
		return x.FuseFlag
	}
	return 0
}

func (x *IdxContractElem) GetForcedistime() uint32 {
	if x != nil {
		return x.Forcedistime
	}
	return 0
}

func (x *IdxContractElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IdxContractElem) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *IdxContractElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *IdxContractElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *IdxContractElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IdxContractElem) GetOptExpDate() string {
	if x != nil {
		return x.OptExpDate
	}
	return ""
}

func (x *IdxContractElem) GetOptExpLeftDays() uint32 {
	if x != nil {
		return x.OptExpLeftDays
	}
	return 0
}

func (x *IdxContractElem) GetRealContractID() string {
	if x != nil {
		return x.RealContractID
	}
	return ""
}

func (x *IdxContractElem) GetIdxCatID() string {
	if x != nil {
		return x.IdxCatID
	}
	return ""
}

func (x *IdxContractElem) GetVatList() []*IdxVarietyElem {
	if x != nil {
		return x.VatList
	}
	return nil
}

func (x *IdxContractElem) GetVarietyType() EVarietyType {
	if x != nil {
		return x.VarietyType
	}
	return EVarietyType_NULL_Variety
}

// /< 套利合约
type ArbiContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid         EExchgID      `protobuf:"varint,1,opt,name=Exchgid,proto3,enum=fippb.EExchgID" json:"Exchgid,omitempty"`                // 交易所id
	MktID           string        `protobuf:"bytes,2,opt,name=MktID,proto3" json:"MktID,omitempty"`                                         // 市场编码（空）--
	ContractID      string        `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                               // 合约编码
	ContractVer     uint32        `protobuf:"varint,4,opt,name=ContractVer,proto3" json:"ContractVer,omitempty"`                            // 合约版本号（空）--
	ContractName    string        `protobuf:"bytes,5,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                           // 合约名称
	ShortCutKey     uint32        `protobuf:"varint,6,opt,name=ShortCutKey,proto3" json:"ShortCutKey,omitempty"`                            // 输入快捷键（空）--
	StartTradeDate  string        `protobuf:"bytes,7,opt,name=StartTradeDate,proto3" json:"StartTradeDate,omitempty"`                       // 开始交易日（空）--
	EndTradeDate    string        `protobuf:"bytes,8,opt,name=EndTradeDate,proto3" json:"EndTradeDate,omitempty"`                           // 最后交易日
	ContractType    EContractType `protobuf:"varint,9,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` // 合约类型
	EndDelivDate    string        `protobuf:"bytes,10,opt,name=EndDelivDate,proto3" json:"EndDelivDate,omitempty"`                          // 最后交割日（空）--
	StartDelivDate  string        `protobuf:"bytes,11,opt,name=StartDelivDate,proto3" json:"StartDelivDate,omitempty"`                      // 开始交割日（空）--
	StopCode        uint32        `protobuf:"varint,12,opt,name=StopCode,proto3" json:"StopCode,omitempty"`                                 // 停止交易原因(空) --
	Currency        string        `protobuf:"bytes,13,opt,name=Currency,proto3" json:"Currency,omitempty"`                                  // 交易用的货币（空）--
	FuseRights      uint32        `protobuf:"varint,14,opt,name=FuseRights,proto3" json:"FuseRights,omitempty"`                             // 可否熔断（空）--
	Unit            uint32        `protobuf:"varint,15,opt,name=Unit,proto3" json:"Unit,omitempty"`                                         // 每手乘数（从品种配置中同步）
	Tick            float64       `protobuf:"fixed64,16,opt,name=Tick,proto3" json:"Tick,omitempty"`                                        // 最小价位（从品种配置中同步）
	RiseLimit       float64       `protobuf:"fixed64,17,opt,name=RiseLimit,proto3" json:"RiseLimit,omitempty"`                              // 涨停板
	FallLimit       float64       `protobuf:"fixed64,18,opt,name=FallLimit,proto3" json:"FallLimit,omitempty"`                              // 跌停板
	MaxHand         uint32        `protobuf:"varint,19,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                   // 最大可下单手数（从品种配置中同步）
	MinHand         uint32        `protobuf:"varint,20,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                   // 最小可下单手数（从品种配置中同步）
	PubStyle        uint32        `protobuf:"varint,21,opt,name=PubStyle,proto3" json:"PubStyle,omitempty"`                                 // 竞价阶段合约行情发布方式（空） --
	FuseLimit       float64       `protobuf:"fixed64,22,opt,name=FuseLimit,proto3" json:"FuseLimit,omitempty"`                              // 熔断限额（空）--
	FusePersistTime uint32        `protobuf:"varint,23,opt,name=FusePersistTime,proto3" json:"FusePersistTime,omitempty"`                   // 熔断最大持续时间（空）--
	FusePoint       string        `protobuf:"bytes,24,opt,name=FusePoint,proto3" json:"FusePoint,omitempty"`                                // 在该时间点后不可熔断（空）--
	FuseFlag        uint32        `protobuf:"varint,25,opt,name=FuseFlag,proto3" json:"FuseFlag,omitempty"`                                 // 熔断标记（空）--
	Forcedistime    uint32        `protobuf:"varint,26,opt,name=Forcedistime,proto3" json:"Forcedistime,omitempty"`                         // 强平的撮合间隔（空）--
	Status          uint32        `protobuf:"varint,27,opt,name=Status,proto3" json:"Status,omitempty"`                                     // 合约状态（空）--
	DeliveryMonth   string        `protobuf:"bytes,28,opt,name=DeliveryMonth,proto3" json:"DeliveryMonth,omitempty"`                        // 交割月（空）--
	VarietyId       string        `protobuf:"bytes,29,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                // 品种代码（从品种配置中同步）
	RefPrice        float64       `protobuf:"fixed64,30,opt,name=RefPrice,proto3" json:"RefPrice,omitempty"`                                // 挂牌基准价（空）--
	Index           uint32        `protobuf:"varint,31,opt,name=Index,proto3" json:"Index,omitempty"`                                       // 索引
}

func (x *ArbiContractElem) Reset() {
	*x = ArbiContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbiContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbiContractElem) ProtoMessage() {}

func (x *ArbiContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbiContractElem.ProtoReflect.Descriptor instead.
func (*ArbiContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{21}
}

func (x *ArbiContractElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ArbiContractElem) GetMktID() string {
	if x != nil {
		return x.MktID
	}
	return ""
}

func (x *ArbiContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ArbiContractElem) GetContractVer() uint32 {
	if x != nil {
		return x.ContractVer
	}
	return 0
}

func (x *ArbiContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ArbiContractElem) GetShortCutKey() uint32 {
	if x != nil {
		return x.ShortCutKey
	}
	return 0
}

func (x *ArbiContractElem) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *ArbiContractElem) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *ArbiContractElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

func (x *ArbiContractElem) GetEndDelivDate() string {
	if x != nil {
		return x.EndDelivDate
	}
	return ""
}

func (x *ArbiContractElem) GetStartDelivDate() string {
	if x != nil {
		return x.StartDelivDate
	}
	return ""
}

func (x *ArbiContractElem) GetStopCode() uint32 {
	if x != nil {
		return x.StopCode
	}
	return 0
}

func (x *ArbiContractElem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ArbiContractElem) GetFuseRights() uint32 {
	if x != nil {
		return x.FuseRights
	}
	return 0
}

func (x *ArbiContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *ArbiContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *ArbiContractElem) GetRiseLimit() float64 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *ArbiContractElem) GetFallLimit() float64 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *ArbiContractElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *ArbiContractElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *ArbiContractElem) GetPubStyle() uint32 {
	if x != nil {
		return x.PubStyle
	}
	return 0
}

func (x *ArbiContractElem) GetFuseLimit() float64 {
	if x != nil {
		return x.FuseLimit
	}
	return 0
}

func (x *ArbiContractElem) GetFusePersistTime() uint32 {
	if x != nil {
		return x.FusePersistTime
	}
	return 0
}

func (x *ArbiContractElem) GetFusePoint() string {
	if x != nil {
		return x.FusePoint
	}
	return ""
}

func (x *ArbiContractElem) GetFuseFlag() uint32 {
	if x != nil {
		return x.FuseFlag
	}
	return 0
}

func (x *ArbiContractElem) GetForcedistime() uint32 {
	if x != nil {
		return x.Forcedistime
	}
	return 0
}

func (x *ArbiContractElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ArbiContractElem) GetDeliveryMonth() string {
	if x != nil {
		return x.DeliveryMonth
	}
	return ""
}

func (x *ArbiContractElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ArbiContractElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *ArbiContractElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// /< 财讯通套利自定义合约
type FipArbiContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leg1ExchgID    EExchgID       `protobuf:"varint,1,opt,name=Leg1ExchgID,proto3,enum=fippb.EExchgID" json:"Leg1ExchgID,omitempty"`        // leg1的市场编码，从单腿合约信息里取
	Leg2ExchgID    EExchgID       `protobuf:"varint,2,opt,name=Leg2ExchgID,proto3,enum=fippb.EExchgID" json:"Leg2ExchgID,omitempty"`        // leg2的市场编码，从单腿合约信息里取
	Leg1ContractID string         `protobuf:"bytes,3,opt,name=Leg1ContractID,proto3" json:"Leg1ContractID,omitempty"`                       // leg1合约的编码
	Leg2ContractID string         `protobuf:"bytes,4,opt,name=Leg2ContractID,proto3" json:"Leg2ContractID,omitempty"`                       // leg2合约的编码
	ContractID     string         `protobuf:"bytes,5,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                               // 财讯通套利期货合约的编码， 按需求文档自己生成
	ContractName   string         `protobuf:"bytes,6,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                           // 合约名称，按需求文档自己生成
	ContractType   EContractType  `protobuf:"varint,7,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` // 合约类型-跨期、跨品种、跨市场或期现套利
	Unit           uint32         `protobuf:"varint,8,opt,name=Unit,proto3" json:"Unit,omitempty"`                                          // 每手乘数 （从品种配置中同步）
	Tick           float64        `protobuf:"fixed64,9,opt,name=Tick,proto3" json:"Tick,omitempty"`                                         // 最小价位 （从品种配置中同步）
	Index          uint32         `protobuf:"varint,10,opt,name=Index,proto3" json:"Index,omitempty"`                                       // 索引
	VarietyId      string         `protobuf:"bytes,11,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                // 品种代码(客户端使用)
	RiseLimit      float64        `protobuf:"fixed64,12,opt,name=RiseLimit,proto3" json:"RiseLimit,omitempty"`                              // 涨停板 （价差）：腿1合约涨停价-腿2合约跌停价    （价比）：腿1合约涨停价/腿2合约跌停价
	FallLimit      float64        `protobuf:"fixed64,13,opt,name=FallLimit,proto3" json:"FallLimit,omitempty"`                              // 跌停板 （价差）：腿1合约跌停价-腿2合约涨停价    （价比）：腿1合约跌停价/腿2合约涨停价
	CalcType       EPriceCalcType `protobuf:"varint,14,opt,name=CalcType,proto3,enum=fippb.EPriceCalcType" json:"CalcType,omitempty"`       // 价格计算类型，价差还是价比
	Leg1Weight     float64        `protobuf:"fixed64,15,opt,name=Leg1Weight,proto3" json:"Leg1Weight,omitempty"`                            // 腿1权重
	Leg2Weight     float64        `protobuf:"fixed64,16,opt,name=Leg2Weight,proto3" json:"Leg2Weight,omitempty"`                            // 腿2权重
}

func (x *FipArbiContractElem) Reset() {
	*x = FipArbiContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FipArbiContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FipArbiContractElem) ProtoMessage() {}

func (x *FipArbiContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FipArbiContractElem.ProtoReflect.Descriptor instead.
func (*FipArbiContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{22}
}

func (x *FipArbiContractElem) GetLeg1ExchgID() EExchgID {
	if x != nil {
		return x.Leg1ExchgID
	}
	return EExchgID_ExchNull
}

func (x *FipArbiContractElem) GetLeg2ExchgID() EExchgID {
	if x != nil {
		return x.Leg2ExchgID
	}
	return EExchgID_ExchNull
}

func (x *FipArbiContractElem) GetLeg1ContractID() string {
	if x != nil {
		return x.Leg1ContractID
	}
	return ""
}

func (x *FipArbiContractElem) GetLeg2ContractID() string {
	if x != nil {
		return x.Leg2ContractID
	}
	return ""
}

func (x *FipArbiContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *FipArbiContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *FipArbiContractElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

func (x *FipArbiContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *FipArbiContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *FipArbiContractElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FipArbiContractElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *FipArbiContractElem) GetRiseLimit() float64 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *FipArbiContractElem) GetFallLimit() float64 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *FipArbiContractElem) GetCalcType() EPriceCalcType {
	if x != nil {
		return x.CalcType
	}
	return EPriceCalcType_Calc_Null
}

func (x *FipArbiContractElem) GetLeg1Weight() float64 {
	if x != nil {
		return x.Leg1Weight
	}
	return 0
}

func (x *FipArbiContractElem) GetLeg2Weight() float64 {
	if x != nil {
		return x.Leg2Weight
	}
	return 0
}

// /< 财讯通套利品种
type FipArbiVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leg1ExchgID   EExchgID       `protobuf:"varint,1,opt,name=Leg1ExchgID,proto3,enum=fippb.EExchgID" json:"Leg1ExchgID,omitempty"`      // leg1的市场编码，从单腿品种信息里取
	Leg2ExchgID   EExchgID       `protobuf:"varint,2,opt,name=Leg2ExchgID,proto3,enum=fippb.EExchgID" json:"Leg2ExchgID,omitempty"`      // leg2的市场编码，从单腿品种信息里取
	Leg1VarietyID string         `protobuf:"bytes,3,opt,name=Leg1VarietyID,proto3" json:"Leg1VarietyID,omitempty"`                       // leg1品种代码
	Leg2VarietyID string         `protobuf:"bytes,4,opt,name=Leg2VarietyID,proto3" json:"Leg2VarietyID,omitempty"`                       // leg2品种代码
	VarietyID     string         `protobuf:"bytes,5,opt,name=VarietyID,proto3" json:"VarietyID,omitempty"`                               // 品种代码    按需求文档里填写
	Name          string         `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`                                         // 品种名称     按需求文档里填写
	Unit          uint32         `protobuf:"varint,7,opt,name=Unit,proto3" json:"Unit,omitempty"`                                        // 交易单位数量
	Tick          float64        `protobuf:"fixed64,8,opt,name=Tick,proto3" json:"Tick,omitempty"`                                       // 最小变动价位
	MaxHand       uint32         `protobuf:"varint,9,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                  // 最大下单手数
	MinHand       uint32         `protobuf:"varint,10,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                 // 最小下单手数
	Index         uint32         `protobuf:"varint,11,opt,name=Index,proto3" json:"Index,omitempty"`                                     // 索引
	VarietyType   EVarietyType   `protobuf:"varint,12,opt,name=VarietyType,proto3,enum=fippb.EVarietyType" json:"VarietyType,omitempty"` // 品种类型
	CnName        string         `protobuf:"bytes,13,opt,name=CnName,proto3" json:"CnName,omitempty"`                                    // 品种名称（中文全称） 按需求文档里填写
	CalcType      EPriceCalcType `protobuf:"varint,14,opt,name=CalcType,proto3,enum=fippb.EPriceCalcType" json:"CalcType,omitempty"`     // 价格计算类型，价差还是价比
	Leg1Weight    float64        `protobuf:"fixed64,15,opt,name=Leg1Weight,proto3" json:"Leg1Weight,omitempty"`                          // 腿1权重
	Leg2Weight    float64        `protobuf:"fixed64,16,opt,name=Leg2Weight,proto3" json:"Leg2Weight,omitempty"`                          // 腿2权重
	CombineType   ECombineType   `protobuf:"varint,17,opt,name=CombineType,proto3,enum=fippb.ECombineType" json:"CombineType,omitempty"` // 组合类型
}

func (x *FipArbiVarietyElem) Reset() {
	*x = FipArbiVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FipArbiVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FipArbiVarietyElem) ProtoMessage() {}

func (x *FipArbiVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FipArbiVarietyElem.ProtoReflect.Descriptor instead.
func (*FipArbiVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{23}
}

func (x *FipArbiVarietyElem) GetLeg1ExchgID() EExchgID {
	if x != nil {
		return x.Leg1ExchgID
	}
	return EExchgID_ExchNull
}

func (x *FipArbiVarietyElem) GetLeg2ExchgID() EExchgID {
	if x != nil {
		return x.Leg2ExchgID
	}
	return EExchgID_ExchNull
}

func (x *FipArbiVarietyElem) GetLeg1VarietyID() string {
	if x != nil {
		return x.Leg1VarietyID
	}
	return ""
}

func (x *FipArbiVarietyElem) GetLeg2VarietyID() string {
	if x != nil {
		return x.Leg2VarietyID
	}
	return ""
}

func (x *FipArbiVarietyElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *FipArbiVarietyElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FipArbiVarietyElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *FipArbiVarietyElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *FipArbiVarietyElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *FipArbiVarietyElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *FipArbiVarietyElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FipArbiVarietyElem) GetVarietyType() EVarietyType {
	if x != nil {
		return x.VarietyType
	}
	return EVarietyType_NULL_Variety
}

func (x *FipArbiVarietyElem) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

func (x *FipArbiVarietyElem) GetCalcType() EPriceCalcType {
	if x != nil {
		return x.CalcType
	}
	return EPriceCalcType_Calc_Null
}

func (x *FipArbiVarietyElem) GetLeg1Weight() float64 {
	if x != nil {
		return x.Leg1Weight
	}
	return 0
}

func (x *FipArbiVarietyElem) GetLeg2Weight() float64 {
	if x != nil {
		return x.Leg2Weight
	}
	return 0
}

func (x *FipArbiVarietyElem) GetCombineType() ECombineType {
	if x != nil {
		return x.CombineType
	}
	return ECombineType_Combine_Null
}

// /< 指数所属类型详情
type IdxVarietyElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyId    string        `protobuf:"bytes,1,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                 ///< 品种代码(客户端使用)
	Index        uint32        `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`                                        ///< 指数在该品种下的顺序
	ContractType EContractType `protobuf:"varint,3,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` ///< 品种类型
}

func (x *IdxVarietyElem) Reset() {
	*x = IdxVarietyElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdxVarietyElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdxVarietyElem) ProtoMessage() {}

func (x *IdxVarietyElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdxVarietyElem.ProtoReflect.Descriptor instead.
func (*IdxVarietyElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{24}
}

func (x *IdxVarietyElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *IdxVarietyElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IdxVarietyElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

// /< 期权合约
type OptContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid        EExchgID      `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                 // 交易所id(客户端使用)        //旧协议字段为exchangeId
	ContractID     string        `protobuf:"bytes,2,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                                // 合约号(客户端使用)
	SeriesID       string        `protobuf:"bytes,3,opt,name=SeriesID,proto3" json:"SeriesID,omitempty"`                                    // 期权系列号
	CpFlag         uint32        `protobuf:"varint,4,opt,name=CpFlag,proto3" json:"CpFlag,omitempty"`                                       // 看涨看跌标志
	StrikePrice    float64       `protobuf:"fixed64,5,opt,name=StrikePrice,proto3" json:"StrikePrice,omitempty"`                            // 执行价格
	DelivMonth     string        `protobuf:"bytes,6,opt,name=DelivMonth,proto3" json:"DelivMonth,omitempty"`                                // 交割月（空）--             //旧协议为DeliveryMonth
	Unit           uint32        `protobuf:"varint,7,opt,name=Unit,proto3" json:"Unit,omitempty"`                                           // 交易单位数量（空）--
	Tick           float64       `protobuf:"fixed64,8,opt,name=Tick,proto3" json:"Tick,omitempty"`                                          // 最小变动价位（从品种配置中同步）
	MaxHand        uint32        `protobuf:"varint,9,opt,name=MaxHand,proto3" json:"MaxHand,omitempty"`                                     // 最大下单手数（从品种配置中同步）
	MinHand        uint32        `protobuf:"varint,10,opt,name=MinHand,proto3" json:"MinHand,omitempty"`                                    // 最小下单手数（从品种配置中同步）
	StartTradeDate string        `protobuf:"bytes,11,opt,name=StartTradeDate,proto3" json:"StartTradeDate,omitempty"`                       // 开始交易日（空） --
	EndTradeDate   string        `protobuf:"bytes,12,opt,name=EndTradeDate,proto3" json:"EndTradeDate,omitempty"`                           // 最后交易日 --
	ExpDate        string        `protobuf:"bytes,13,opt,name=ExpDate,proto3" json:"ExpDate,omitempty"`                                     // 合约到期日（根据品种配置信息自动生成）    //旧协议为ExpirationDate
	RiseLimit      float64       `protobuf:"fixed64,14,opt,name=RiseLimit,proto3" json:"RiseLimit,omitempty"`                               // 涨停板
	FallLimit      float64       `protobuf:"fixed64,15,opt,name=FallLimit,proto3" json:"FallLimit,omitempty"`                               // 跌停板
	RefPrice       float64       `protobuf:"fixed64,16,opt,name=RefPrice,proto3" json:"RefPrice,omitempty"`                                 // 挂牌基准价（空） --
	Status         uint32        `protobuf:"varint,17,opt,name=Status,proto3" json:"Status,omitempty"`                                      // 合约状态（空） --
	VarietyId      string        `protobuf:"bytes,18,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                                 // 品种代码(客户端使用)
	Index          uint32        `protobuf:"varint,19,opt,name=Index,proto3" json:"Index,omitempty"`                                        // 索引
	ContractType   EContractType `protobuf:"varint,20,opt,name=ContractType,proto3,enum=fippb.EContractType" json:"ContractType,omitempty"` ///< 合约类型（客户端使用）--
}

func (x *OptContractElem) Reset() {
	*x = OptContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptContractElem) ProtoMessage() {}

func (x *OptContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptContractElem.ProtoReflect.Descriptor instead.
func (*OptContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{25}
}

func (x *OptContractElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *OptContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *OptContractElem) GetSeriesID() string {
	if x != nil {
		return x.SeriesID
	}
	return ""
}

func (x *OptContractElem) GetCpFlag() uint32 {
	if x != nil {
		return x.CpFlag
	}
	return 0
}

func (x *OptContractElem) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *OptContractElem) GetDelivMonth() string {
	if x != nil {
		return x.DelivMonth
	}
	return ""
}

func (x *OptContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *OptContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *OptContractElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *OptContractElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *OptContractElem) GetStartTradeDate() string {
	if x != nil {
		return x.StartTradeDate
	}
	return ""
}

func (x *OptContractElem) GetEndTradeDate() string {
	if x != nil {
		return x.EndTradeDate
	}
	return ""
}

func (x *OptContractElem) GetExpDate() string {
	if x != nil {
		return x.ExpDate
	}
	return ""
}

func (x *OptContractElem) GetRiseLimit() float64 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *OptContractElem) GetFallLimit() float64 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *OptContractElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *OptContractElem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OptContractElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *OptContractElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OptContractElem) GetContractType() EContractType {
	if x != nil {
		return x.ContractType
	}
	return EContractType_NULL_Contract
}

// /< 交易所信息
type ExchangeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所ID          //旧协议字段为ExchangeId
	Name    string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                            // 交易所名称
	Index   uint32   `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`                         // 索引
	EnName  string   `protobuf:"bytes,4,opt,name=EnName,proto3" json:"EnName,omitempty"`                        // 交易所英文名称
}

func (x *ExchangeElem) Reset() {
	*x = ExchangeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeElem) ProtoMessage() {}

func (x *ExchangeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeElem.ProtoReflect.Descriptor instead.
func (*ExchangeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{26}
}

func (x *ExchangeElem) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ExchangeElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeElem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ExchangeElem) GetEnName() string {
	if x != nil {
		return x.EnName
	}
	return ""
}

// /< 品种统计
type VtyQuotStaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtyID           string           `protobuf:"bytes,1,opt,name=VtyID,proto3" json:"VtyID,omitempty"`                                                   // 品种ID          //旧协议为VarietyID
	DeltaPos        int32            `protobuf:"varint,2,opt,name=DeltaPos,proto3" json:"DeltaPos,omitempty"`                                            // 日增仓          //旧协议 DeltaPosition
	TotalPos        uint32           `protobuf:"varint,3,opt,name=TotalPos,proto3" json:"TotalPos,omitempty"`                                            // 持仓量          //旧协议为 TotalPosition
	TotlMatQty      uint32           `protobuf:"varint,4,opt,name=TotlMatQty,proto3" json:"TotlMatQty,omitempty"`                                        // 成交量          //旧协议为MatchTotQty
	Turnover        float64          `protobuf:"fixed64,5,opt,name=Turnover,proto3" json:"Turnover,omitempty"`                                           // 成交额
	LastDeltaPos    int32            `protobuf:"varint,6,opt,name=lastDeltaPos,proto3" json:"lastDeltaPos,omitempty"`                                    // 昨日增仓
	LastTotalPos    uint32           `protobuf:"varint,7,opt,name=lastTotalPos,proto3" json:"lastTotalPos,omitempty"`                                    // 昨持仓量
	LastTotlMatQty  uint32           `protobuf:"varint,8,opt,name=lastTotlMatQty,proto3" json:"lastTotlMatQty,omitempty"`                                // 昨成交量
	LastTurnover    float64          `protobuf:"fixed64,9,opt,name=lastTurnover,proto3" json:"lastTurnover,omitempty"`                                   // 昨成交额
	TotlPosQty      float64          `protobuf:"fixed64,10,opt,name=TotlPosQty,proto3" json:"TotlPosQty,omitempty"`                                      // 持仓额
	CapitalFlow     float64          `protobuf:"fixed64,11,opt,name=CapitalFlow,proto3" json:"CapitalFlow,omitempty"`                                    // 资金流向
	LateralQuotType EQuotLateralType `protobuf:"varint,12,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
	PriceRate       float64          `protobuf:"fixed64,13,opt,name=PriceRate,proto3" json:"PriceRate,omitempty"`                                        // 年度涨跌幅（正涨幅，负跌幅）
}

func (x *VtyQuotStaElem) Reset() {
	*x = VtyQuotStaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VtyQuotStaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtyQuotStaElem) ProtoMessage() {}

func (x *VtyQuotStaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtyQuotStaElem.ProtoReflect.Descriptor instead.
func (*VtyQuotStaElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{27}
}

func (x *VtyQuotStaElem) GetVtyID() string {
	if x != nil {
		return x.VtyID
	}
	return ""
}

func (x *VtyQuotStaElem) GetDeltaPos() int32 {
	if x != nil {
		return x.DeltaPos
	}
	return 0
}

func (x *VtyQuotStaElem) GetTotalPos() uint32 {
	if x != nil {
		return x.TotalPos
	}
	return 0
}

func (x *VtyQuotStaElem) GetTotlMatQty() uint32 {
	if x != nil {
		return x.TotlMatQty
	}
	return 0
}

func (x *VtyQuotStaElem) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *VtyQuotStaElem) GetLastDeltaPos() int32 {
	if x != nil {
		return x.LastDeltaPos
	}
	return 0
}

func (x *VtyQuotStaElem) GetLastTotalPos() uint32 {
	if x != nil {
		return x.LastTotalPos
	}
	return 0
}

func (x *VtyQuotStaElem) GetLastTotlMatQty() uint32 {
	if x != nil {
		return x.LastTotlMatQty
	}
	return 0
}

func (x *VtyQuotStaElem) GetLastTurnover() float64 {
	if x != nil {
		return x.LastTurnover
	}
	return 0
}

func (x *VtyQuotStaElem) GetTotlPosQty() float64 {
	if x != nil {
		return x.TotlPosQty
	}
	return 0
}

func (x *VtyQuotStaElem) GetCapitalFlow() float64 {
	if x != nil {
		return x.CapitalFlow
	}
	return 0
}

func (x *VtyQuotStaElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

func (x *VtyQuotStaElem) GetPriceRate() float64 {
	if x != nil {
		return x.PriceRate
	}
	return 0
}

// /< 期权统计信息
type OptQuotStaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VtyID           string           `protobuf:"bytes,1,opt,name=VtyID,proto3" json:"VtyID,omitempty"`                                                  // 期权标的物的品种ID
	TotalPosC       uint32           `protobuf:"varint,2,opt,name=TotalPosC,proto3" json:"TotalPosC,omitempty"`                                         // 看涨持仓量
	TotlMatQtyC     uint32           `protobuf:"varint,3,opt,name=TotlMatQtyC,proto3" json:"TotlMatQtyC,omitempty"`                                     // 看涨成交量
	TotalPosP       uint32           `protobuf:"varint,4,opt,name=TotalPosP,proto3" json:"TotalPosP,omitempty"`                                         // 看跌持仓量
	TotlMatQtyP     uint32           `protobuf:"varint,5,opt,name=TotlMatQtyP,proto3" json:"TotlMatQtyP,omitempty"`                                     // 看跌成交量
	TotalPosSub     uint32           `protobuf:"varint,6,opt,name=TotalPosSub,proto3" json:"TotalPosSub,omitempty"`                                     // 标的物持仓量
	TotlMatQtySub   uint32           `protobuf:"varint,7,opt,name=TotlMatQtySub,proto3" json:"TotlMatQtySub,omitempty"`                                 // 标的物成交量
	LateralQuotType EQuotLateralType `protobuf:"varint,8,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
	TurnoverC       float64          `protobuf:"fixed64,9,opt,name=TurnoverC,proto3" json:"TurnoverC,omitempty"`                                        // 看涨成交额
	TurnoverP       float64          `protobuf:"fixed64,10,opt,name=TurnoverP,proto3" json:"TurnoverP,omitempty"`                                       // 看跌成交额
	TotlPosQtyC     float64          `protobuf:"fixed64,11,opt,name=TotlPosQtyC,proto3" json:"TotlPosQtyC,omitempty"`                                   // 看涨持仓额(预留)
	TotlPosQtyP     float64          `protobuf:"fixed64,12,opt,name=TotlPosQtyP,proto3" json:"TotlPosQtyP,omitempty"`                                   // 看跌持仓额(预留)
	TurnoverSub     float64          `protobuf:"fixed64,13,opt,name=TurnoverSub,proto3" json:"TurnoverSub,omitempty"`                                   // 标的物成交额
	TotlPosQtySub   float64          `protobuf:"fixed64,14,opt,name=TotlPosQtySub,proto3" json:"TotlPosQtySub,omitempty"`                               // 标的物持仓额
}

func (x *OptQuotStaElem) Reset() {
	*x = OptQuotStaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptQuotStaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptQuotStaElem) ProtoMessage() {}

func (x *OptQuotStaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptQuotStaElem.ProtoReflect.Descriptor instead.
func (*OptQuotStaElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{28}
}

func (x *OptQuotStaElem) GetVtyID() string {
	if x != nil {
		return x.VtyID
	}
	return ""
}

func (x *OptQuotStaElem) GetTotalPosC() uint32 {
	if x != nil {
		return x.TotalPosC
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlMatQtyC() uint32 {
	if x != nil {
		return x.TotlMatQtyC
	}
	return 0
}

func (x *OptQuotStaElem) GetTotalPosP() uint32 {
	if x != nil {
		return x.TotalPosP
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlMatQtyP() uint32 {
	if x != nil {
		return x.TotlMatQtyP
	}
	return 0
}

func (x *OptQuotStaElem) GetTotalPosSub() uint32 {
	if x != nil {
		return x.TotalPosSub
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlMatQtySub() uint32 {
	if x != nil {
		return x.TotlMatQtySub
	}
	return 0
}

func (x *OptQuotStaElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

func (x *OptQuotStaElem) GetTurnoverC() float64 {
	if x != nil {
		return x.TurnoverC
	}
	return 0
}

func (x *OptQuotStaElem) GetTurnoverP() float64 {
	if x != nil {
		return x.TurnoverP
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlPosQtyC() float64 {
	if x != nil {
		return x.TotlPosQtyC
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlPosQtyP() float64 {
	if x != nil {
		return x.TotlPosQtyP
	}
	return 0
}

func (x *OptQuotStaElem) GetTurnoverSub() float64 {
	if x != nil {
		return x.TurnoverSub
	}
	return 0
}

func (x *OptQuotStaElem) GetTotlPosQtySub() float64 {
	if x != nil {
		return x.TotlPosQtySub
	}
	return 0
}

type HisMatchElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate       string           `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                           // 交易日期 例如20170808
	Timestamp       uint64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // 时间（基于1970时间，精确到ms），例如1501808867001
	GenTime         string           `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                                               // 时间 (tick生成时间)，例如08:55:06.818
	LastPrice       float64          `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                                         // 最新价
	LastMatchQty    uint64           `protobuf:"varint,5,opt,name=lastMatchQty,proto3" json:"lastMatchQty,omitempty"`                                    // 最新成交量(现手)
	OE              OEFlag           `protobuf:"varint,6,opt,name=OE,proto3,enum=fippb.OEFlag" json:"OE,omitempty"`                                      // 开平(10种)
	DeltaPosition   int64            `protobuf:"varint,7,opt,name=DeltaPosition,proto3" json:"DeltaPosition,omitempty"`                                  // 增仓(delta tick:position)
	MatchTotQty     uint64           `protobuf:"varint,8,opt,name=MatchTotQty,proto3" json:"MatchTotQty,omitempty"`                                      // 当前成交量
	DeltaMatchPrice float64          `protobuf:"fixed64,9,opt,name=DeltaMatchPrice,proto3" json:"DeltaMatchPrice,omitempty"`                             // 现涨(delta tick: 最新价之差)
	SeqNo           uint64           `protobuf:"varint,10,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                                                 // 序号（proxy用）
	LateralQuotType EQuotLateralType `protobuf:"varint,11,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *HisMatchElem) Reset() {
	*x = HisMatchElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HisMatchElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HisMatchElem) ProtoMessage() {}

func (x *HisMatchElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HisMatchElem.ProtoReflect.Descriptor instead.
func (*HisMatchElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{29}
}

func (x *HisMatchElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *HisMatchElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HisMatchElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *HisMatchElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *HisMatchElem) GetLastMatchQty() uint64 {
	if x != nil {
		return x.LastMatchQty
	}
	return 0
}

func (x *HisMatchElem) GetOE() OEFlag {
	if x != nil {
		return x.OE
	}
	return OEFlag_EFlagNull
}

func (x *HisMatchElem) GetDeltaPosition() int64 {
	if x != nil {
		return x.DeltaPosition
	}
	return 0
}

func (x *HisMatchElem) GetMatchTotQty() uint64 {
	if x != nil {
		return x.MatchTotQty
	}
	return 0
}

func (x *HisMatchElem) GetDeltaMatchPrice() float64 {
	if x != nil {
		return x.DeltaMatchPrice
	}
	return 0
}

func (x *HisMatchElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *HisMatchElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// /< 分价数据
type TPElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price           float64          `protobuf:"fixed64,1,opt,name=Price,proto3" json:"Price,omitempty"`                                                // 价格
	ExtraVol        uint32           `protobuf:"varint,2,opt,name=ExtraVol,proto3" json:"ExtraVol,omitempty"`                                           // 外盘、买盘
	InnerVol        uint32           `protobuf:"varint,3,opt,name=InnerVol,proto3" json:"InnerVol,omitempty"`                                           // 内盘、卖盘
	ExtraNum        uint32           `protobuf:"varint,4,opt,name=ExtraNum,proto3" json:"ExtraNum,omitempty"`                                           // 外盘、买盘成交笔数
	InnerNum        uint32           `protobuf:"varint,5,opt,name=InnerNum,proto3" json:"InnerNum,omitempty"`                                           // 内盘、卖盘成交笔数
	LateralQuotType EQuotLateralType `protobuf:"varint,6,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *TPElem) Reset() {
	*x = TPElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPElem) ProtoMessage() {}

func (x *TPElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPElem.ProtoReflect.Descriptor instead.
func (*TPElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{30}
}

func (x *TPElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TPElem) GetExtraVol() uint32 {
	if x != nil {
		return x.ExtraVol
	}
	return 0
}

func (x *TPElem) GetInnerVol() uint32 {
	if x != nil {
		return x.InnerVol
	}
	return 0
}

func (x *TPElem) GetExtraNum() uint32 {
	if x != nil {
		return x.ExtraNum
	}
	return 0
}

func (x *TPElem) GetInnerNum() uint32 {
	if x != nil {
		return x.InnerNum
	}
	return 0
}

func (x *TPElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// /< 分时数据
type TSElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate       string           `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                           // 交易日期 例如20170808
	Timestamp       uint64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // 时间（基于1970时间，精确到ms），例如1501808867001
	GenTime         string           `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                                               // tick生成时间,例如08:55:06.818
	Price           float64          `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`                                                 // 价格
	AvgPrice        float64          `protobuf:"fixed64,5,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                                           // 均价
	TotalPos        uint32           `protobuf:"varint,6,opt,name=TotalPos,proto3" json:"TotalPos,omitempty"`                                            // 持仓量
	TotlMatQty      uint32           `protobuf:"varint,7,opt,name=TotlMatQty,proto3" json:"TotlMatQty,omitempty"`                                        // 成交量
	LastSettlePrice float64          `protobuf:"fixed64,8,opt,name=lastSettlePrice,proto3" json:"lastSettlePrice,omitempty"`                             // 昨结算
	HighPrice       float64          `protobuf:"fixed64,9,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                                         // 最高价
	LowPrice        float64          `protobuf:"fixed64,10,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                                          // 最低价
	SeqNo           uint64           `protobuf:"varint,11,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                                                 // 序号（proxy用）
	LateralQuotType EQuotLateralType `protobuf:"varint,12,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *TSElem) Reset() {
	*x = TSElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSElem) ProtoMessage() {}

func (x *TSElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSElem.ProtoReflect.Descriptor instead.
func (*TSElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{31}
}

func (x *TSElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *TSElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TSElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *TSElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TSElem) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *TSElem) GetTotalPos() uint32 {
	if x != nil {
		return x.TotalPos
	}
	return 0
}

func (x *TSElem) GetTotlMatQty() uint32 {
	if x != nil {
		return x.TotlMatQty
	}
	return 0
}

func (x *TSElem) GetLastSettlePrice() float64 {
	if x != nil {
		return x.LastSettlePrice
	}
	return 0
}

func (x *TSElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *TSElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *TSElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *TSElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// /< K线数据
type KLineElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate       string           `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                           // 交易日期 例如20170808
	Timestamp       uint64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // 时间（基于1970时间，精确到ms），例如1501808867001
	GenTime         string           `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                                               // tick生成时间,例如08:55:06.818
	TotalPos        uint32           `protobuf:"varint,4,opt,name=TotalPos,proto3" json:"TotalPos,omitempty"`                                            // 持仓量
	TotlMatQty      uint32           `protobuf:"varint,5,opt,name=TotlMatQty,proto3" json:"TotlMatQty,omitempty"`                                        // 总成交量
	DeltaMatQty     uint32           `protobuf:"varint,6,opt,name=DeltaMatQty,proto3" json:"DeltaMatQty,omitempty"`                                      // 该周期成交量
	LastSettlePrice float64          `protobuf:"fixed64,7,opt,name=lastSettlePrice,proto3" json:"lastSettlePrice,omitempty"`                             // 昨结算
	OpenPrice       float64          `protobuf:"fixed64,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                                         // 开盘价
	ClosePrice      float64          `protobuf:"fixed64,9,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                                       // 收盘价
	HighPrice       float64          `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                                        // 最高价
	LowPrice        float64          `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                                          // 最低价
	RealTimePrice   float64          `protobuf:"fixed64,12,opt,name=realTimePrice,proto3" json:"realTimePrice,omitempty"`                                // 实时结算价
	SeqNo           uint64           `protobuf:"varint,13,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                                                 // 序号（proxy用）
	LateralQuotType EQuotLateralType `protobuf:"varint,14,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *KLineElem) Reset() {
	*x = KLineElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KLineElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KLineElem) ProtoMessage() {}

func (x *KLineElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KLineElem.ProtoReflect.Descriptor instead.
func (*KLineElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{32}
}

func (x *KLineElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *KLineElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KLineElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *KLineElem) GetTotalPos() uint32 {
	if x != nil {
		return x.TotalPos
	}
	return 0
}

func (x *KLineElem) GetTotlMatQty() uint32 {
	if x != nil {
		return x.TotlMatQty
	}
	return 0
}

func (x *KLineElem) GetDeltaMatQty() uint32 {
	if x != nil {
		return x.DeltaMatQty
	}
	return 0
}

func (x *KLineElem) GetLastSettlePrice() float64 {
	if x != nil {
		return x.LastSettlePrice
	}
	return 0
}

func (x *KLineElem) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *KLineElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *KLineElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *KLineElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *KLineElem) GetRealTimePrice() float64 {
	if x != nil {
		return x.RealTimePrice
	}
	return 0
}

func (x *KLineElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *KLineElem) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// /< 索引信息
type IndexConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexID    uint32 `protobuf:"varint,1,opt,name=IndexID,proto3" json:"IndexID,omitempty"`      // 索引id
	ContractID string `protobuf:"bytes,2,opt,name=ContractID,proto3" json:"ContractID,omitempty"` // 合约号
}

func (x *IndexConf) Reset() {
	*x = IndexConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexConf) ProtoMessage() {}

func (x *IndexConf) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexConf.ProtoReflect.Descriptor instead.
func (*IndexConf) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{33}
}

func (x *IndexConf) GetIndexID() uint32 {
	if x != nil {
		return x.IndexID
	}
	return 0
}

func (x *IndexConf) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// /< 客户端申请列表返回的简要行情
type QuotBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId      string           `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                         // 合约号
	TradeDate       string           `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                           // 交易日期
	LastSettlePrice float64          `protobuf:"fixed64,3,opt,name=lastSettlePrice,proto3" json:"lastSettlePrice,omitempty"`                             // 昨结算价
	OpenPrice       float64          `protobuf:"fixed64,4,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                                         // 今开盘价
	LastPrice       float64          `protobuf:"fixed64,5,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                                         // 最新价
	MatchTotQty     uint64           `protobuf:"varint,6,opt,name=MatchTotQty,proto3" json:"MatchTotQty,omitempty"`                                      // 成交量(总)
	TotalPosition   uint64           `protobuf:"varint,7,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`                                  // 总持仓量(初始持仓量+日增)
	PositionChg     int64            `protobuf:"varint,8,opt,name=positionChg,proto3" json:"positionChg,omitempty"`                                      // 持仓量变化(日增)
	AvgPrice        float64          `protobuf:"fixed64,9,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                                           // 当日均价
	Turnover        float64          `protobuf:"fixed64,10,opt,name=turnover,proto3" json:"turnover,omitempty"`                                          // 当日累计成交金额
	LateralQuotType EQuotLateralType `protobuf:"varint,11,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
	Exchgid         EExchgID         `protobuf:"varint,12,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                         // 交易所id
	MsgId           uint32           `protobuf:"varint,13,opt,name=msgId,proto3" json:"msgId,omitempty"`                                                 // 请求id
}

func (x *QuotBrief) Reset() {
	*x = QuotBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotBrief) ProtoMessage() {}

func (x *QuotBrief) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotBrief.ProtoReflect.Descriptor instead.
func (*QuotBrief) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{34}
}

func (x *QuotBrief) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *QuotBrief) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *QuotBrief) GetLastSettlePrice() float64 {
	if x != nil {
		return x.LastSettlePrice
	}
	return 0
}

func (x *QuotBrief) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *QuotBrief) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *QuotBrief) GetMatchTotQty() uint64 {
	if x != nil {
		return x.MatchTotQty
	}
	return 0
}

func (x *QuotBrief) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *QuotBrief) GetPositionChg() int64 {
	if x != nil {
		return x.PositionChg
	}
	return 0
}

func (x *QuotBrief) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *QuotBrief) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *QuotBrief) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

func (x *QuotBrief) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *QuotBrief) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// /< 期货品种分期信息
type FtrVarietyInfoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchg_VarietyID string       `protobuf:"bytes,1,opt,name=Exchg_VarietyID,json=ExchgVarietyID,proto3" json:"Exchg_VarietyID,omitempty"` // 交易所_品种代码
	FtrDuartion     EFtrDuration `protobuf:"varint,2,opt,name=FtrDuartion,proto3,enum=fippb.EFtrDuration" json:"FtrDuartion,omitempty"`    // 期货期限（一年期、二年期）
	VarietyType     EVarietyType `protobuf:"varint,3,opt,name=VarietyType,proto3,enum=fippb.EVarietyType" json:"VarietyType,omitempty"`    // 期货类型
}

func (x *FtrVarietyInfoElem) Reset() {
	*x = FtrVarietyInfoElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtrVarietyInfoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtrVarietyInfoElem) ProtoMessage() {}

func (x *FtrVarietyInfoElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtrVarietyInfoElem.ProtoReflect.Descriptor instead.
func (*FtrVarietyInfoElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{35}
}

func (x *FtrVarietyInfoElem) GetExchg_VarietyID() string {
	if x != nil {
		return x.Exchg_VarietyID
	}
	return ""
}

func (x *FtrVarietyInfoElem) GetFtrDuartion() EFtrDuration {
	if x != nil {
		return x.FtrDuartion
	}
	return EFtrDuration_Duration_NULL
}

func (x *FtrVarietyInfoElem) GetVarietyType() EVarietyType {
	if x != nil {
		return x.VarietyType
	}
	return EVarietyType_NULL_Variety
}

// /< 期货品种年度涨幅(也可以兼容证券类的年度涨跌幅噢)
type IncreaseAnnualElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId        EExchgID `protobuf:"varint,1,opt,name=ExchgId,proto3,enum=fippb.EExchgID" json:"ExchgId,omitempty"` // 交易所
	VarietyId      string   `protobuf:"bytes,2,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                  // 品种代码
	ContractId     string   `protobuf:"bytes,3,opt,name=ContractId,proto3" json:"ContractId,omitempty"`                // 合约ID，主力
	TradeDate      string   `protobuf:"bytes,4,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`                  // 当前交易日
	GenTime        string   `protobuf:"bytes,5,opt,name=GenTime,proto3" json:"GenTime,omitempty"`                      // 时间戳
	PriceRate      float64  `protobuf:"fixed64,6,opt,name=PriceRate,proto3" json:"PriceRate,omitempty"`                // 价格涨幅
	LastPrice      float64  `protobuf:"fixed64,7,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`                // 最新价格
	PriceFirstDay  float64  `protobuf:"fixed64,8,opt,name=PriceFirstDay,proto3" json:"PriceFirstDay,omitempty"`        // 该品种在本年度的第一个交易日的结算价
	FirstTradeDate string   `protobuf:"bytes,9,opt,name=FirstTradeDate,proto3" json:"FirstTradeDate,omitempty"`        // 本年度的第一个交易日
}

func (x *IncreaseAnnualElem) Reset() {
	*x = IncreaseAnnualElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseAnnualElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseAnnualElem) ProtoMessage() {}

func (x *IncreaseAnnualElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseAnnualElem.ProtoReflect.Descriptor instead.
func (*IncreaseAnnualElem) Descriptor() ([]byte, []int) {
	return file_fip_def_proto_rawDescGZIP(), []int{36}
}

func (x *IncreaseAnnualElem) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *IncreaseAnnualElem) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *IncreaseAnnualElem) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *IncreaseAnnualElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *IncreaseAnnualElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *IncreaseAnnualElem) GetPriceRate() float64 {
	if x != nil {
		return x.PriceRate
	}
	return 0
}

func (x *IncreaseAnnualElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *IncreaseAnnualElem) GetPriceFirstDay() float64 {
	if x != nil {
		return x.PriceFirstDay
	}
	return 0
}

func (x *IncreaseAnnualElem) GetFirstTradeDate() string {
	if x != nil {
		return x.FirstTradeDate
	}
	return ""
}

var File_fip_def_proto protoreflect.FileDescriptor

var file_fip_def_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x75, 0x62, 0x51,
	0x75, 0x6f, 0x74, 0x42, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x4e, 0x6f,
	0x43, 0x68, 0x67, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x05, 0x0a, 0x07, 0x43, 0x68, 0x67, 0x51, 0x75, 0x6f,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x64, 0x51, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x64,
	0x51, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x51, 0x79, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x73, 0x6b, 0x51, 0x79, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x69, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x69, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x66, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xfc, 0x01,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x4f,
	0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x4f, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x02, 0x4f, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x02, 0x0a,
	0x08, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x43, 0x68,
	0x67, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x05, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x12, 0x20, 0x0a, 0x03,
	0x63, 0x68, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x67, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x03, 0x63, 0x68, 0x67, 0x12, 0x26,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d,
	0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x68, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x68,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x10,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69, 0x67, 0x56, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69, 0x67, 0x56,
	0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x69, 0x67, 0x56, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x69,
	0x67, 0x56, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x61, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x45, 0x61, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x45, 0x61, 0x72, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x08, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x56, 0x6f,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x56, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4f, 0x70,
	0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x43, 0x68, 0x67,
	0x56, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x56, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x68, 0x67, 0x56, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x69,
	0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4e, 0x69, 0x6c, 0x56, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4e, 0x69, 0x6c, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x69, 0x6c, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x22,
	0x5c, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x41, 0x76,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a,
	0x0a, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x4f, 0x51, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x42, 0x4f, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x45, 0x51, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x42, 0x45, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x4f, 0x51, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x4f,
	0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x45, 0x51, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x45, 0x51, 0x74, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x4d, 0x42,
	0x4c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x51, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x4f,
	0x72, 0x64, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x51, 0x74, 0x79, 0x22, 0x7b, 0x0a, 0x0d, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x50, 0x72,
	0x63, 0x51, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x28, 0x0a,
	0x04, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x46, 0x74, 0x72, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x52, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4e, 0x6f, 0x52, 0x69, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x46, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4e, 0x6f, 0x46, 0x61, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x52, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x46, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x52, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x52, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x46, 0x61, 0x6c, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x46,
	0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x46, 0x74, 0x72, 0x44, 0x75, 0x61, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x46, 0x74, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x46, 0x74, 0x72, 0x44, 0x75, 0x61, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78,
	0x48, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x48,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x65, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42, 0x65, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x50, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x78, 0x70, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x45, 0x78, 0x70,
	0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a,
	0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x57, 0x61, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x57, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x57, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x29, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x64, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdc, 0x08, 0x0a, 0x0f, 0x46, 0x74, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6b, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6b, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x75, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x75, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x52, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x46, 0x75, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x73,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x75, 0x73,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x45, 0x78,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x74,
	0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x45, 0x78,
	0x70, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0x81, 0x04, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x66, 0x74,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f,
	0x53, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xe0, 0x09, 0x0a, 0x0f, 0x49, 0x64, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6b, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4d, 0x6b, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x75, 0x73, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x75, 0x73,
	0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x61,
	0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x46, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x75, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x46, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x4c,
	0x65, 0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x52, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x56,
	0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x78, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45,
	0x6c, 0x65, 0x6d, 0x52, 0x07, 0x56, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xed, 0x07, 0x0a, 0x10, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6b, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4d, 0x6b, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x75, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x46, 0x75, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x75, 0x62, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x46, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x46, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x73, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x75, 0x73, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xd4, 0x04, 0x0a, 0x13, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x0b, 0x4c,
	0x65, 0x67, 0x31, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0b, 0x4c, 0x65, 0x67, 0x31, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x32, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0b, 0x4c, 0x65, 0x67, 0x32, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x67, 0x31, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x65, 0x67, 0x31, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x67,
	0x32, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4c, 0x65, 0x67, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x52, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6c,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65,
	0x67, 0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x4c, 0x65, 0x67, 0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65,
	0x67, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x4c, 0x65, 0x67, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe3, 0x04, 0x0a, 0x12, 0x46,
	0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x31, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x31, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0b, 0x4c, 0x65, 0x67, 0x31, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x32, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0b, 0x4c, 0x65, 0x67, 0x32,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x65, 0x67, 0x31, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4c, 0x65, 0x67, 0x31, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x65, 0x67, 0x32, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x65, 0x67, 0x32, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x43, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x67,
	0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c,
	0x65, 0x67, 0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x67,
	0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c,
	0x65, 0x67, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x7e, 0x0a, 0x0e, 0x49, 0x64, 0x78, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf2, 0x04, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x63,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x52, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x0e, 0x56, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74,
	0x51, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x50, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x50, 0x6f, 0x73, 0x51, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x50, 0x6f, 0x73,
	0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x74, 0x79, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x43, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x43, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x43, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x43, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x50, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x50, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x50, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x50, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x53, 0x75, 0x62, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x53, 0x75,
	0x62, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x53,
	0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61,
	0x74, 0x51, 0x74, 0x79, 0x53, 0x75, 0x62, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x54,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x6c, 0x50, 0x6f,
	0x73, 0x51, 0x74, 0x79, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x6f, 0x74,
	0x6c, 0x50, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x6c,
	0x50, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54,
	0x6f, 0x74, 0x6c, 0x50, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x6f, 0x74, 0x6c, 0x50, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x53, 0x75, 0x62, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x6c, 0x50, 0x6f, 0x73, 0x51, 0x74, 0x79, 0x53,
	0x75, 0x62, 0x22, 0x90, 0x03, 0x0a, 0x0c, 0x48, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x02, 0x4f,
	0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x4f, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x02, 0x4f, 0x45, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x06, 0x54, 0x50, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x56,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x56,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x06, 0x54, 0x53,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x6c,
	0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x09, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x4d, 0x61, 0x74,
	0x51, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x6c, 0x4d,
	0x61, 0x74, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61,
	0x74, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x4d, 0x61, 0x74, 0x51, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22,
	0xd5, 0x03, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74, 0x51, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x74,
	0x51, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x46, 0x74, 0x72, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x67, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x67, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x46, 0x74, 0x72, 0x44, 0x75,
	0x61, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x46, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x46, 0x74, 0x72, 0x44, 0x75, 0x61, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x38, 0x0a, 0x0d, 0x45, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10,
	0x02, 0x2a, 0x46, 0x0a, 0x09, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0a,
	0x0a, 0x06, 0x51, 0x41, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x72,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x10, 0x04, 0x2a, 0x45, 0x0a, 0x10, 0x45, 0x51, 0x75,
	0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02,
	0x2a, 0x9f, 0x01, 0x0a, 0x09, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x51, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x46, 0x74, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x4f, 0x70, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x46, 0x74, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x4f, 0x70, 0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x41, 0x72, 0x62, 0x69, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x41, 0x72, 0x62, 0x69, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51,
	0x75, 0x6f, 0x74, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x67, 0x65, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x74, 0x63, 0x57, 0x62, 0x69, 0x6c, 0x6c,
	0x10, 0x09, 0x2a, 0x38, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x51, 0x75, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x75, 0x6f,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x75, 0x6f,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x0c, 0x45, 0x49, 0x6e,
	0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x51, 0x54,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x51, 0x54, 0x42, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x51, 0x54, 0x42, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x51, 0x54, 0x4f, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x51, 0x54, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x51, 0x54, 0x4d, 0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x51, 0x54, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x51, 0x54, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x51, 0x54, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x51, 0x54, 0x4d, 0x61, 0x78, 0x10, 0x09, 0x2a, 0xf1, 0x07, 0x0a,
	0x10, 0x45, 0x49, 0x6e, 0x63, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x42, 0x51, 0x54,
	0x5f, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x42, 0x51, 0x54,
	0x5f, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x42, 0x51, 0x54, 0x5f,
	0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x42, 0x51, 0x54, 0x5f,
	0x4e, 0x6f, 0x43, 0x68, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67,
	0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x09, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68,
	0x67, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f,
	0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x42,
	0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x10, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x42, 0x69,
	0x64, 0x51, 0x74, 0x79, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43,
	0x68, 0x67, 0x5f, 0x41, 0x73, 0x6b, 0x51, 0x79, 0x74, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x42, 0x69, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x79,
	0x51, 0x74, 0x79, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68,
	0x67, 0x5f, 0x41, 0x73, 0x6b, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x51, 0x74, 0x79, 0x10, 0x14, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x67, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68,
	0x67, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79, 0x10, 0x17,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x42, 0x51,
	0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x4c, 0x69, 0x66, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67,
	0x5f, 0x4c, 0x69, 0x66, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x1a,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x47, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43,
	0x68, 0x67, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x1c, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x6f, 0x74, 0x51, 0x74, 0x79, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x42, 0x51,
	0x54, 0x5f, 0x43, 0x68, 0x67, 0x5f, 0x42, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x1e,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x65,
	0x73, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x74, 0x79,
	0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x42, 0x65, 0x73, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73, 0x74, 0x5f, 0x4f, 0x45, 0x10, 0x21, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73, 0x74, 0x5f,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x22, 0x12,
	0x25, 0x0a, 0x21, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73,
	0x74, 0x5f, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x74, 0x79, 0x10, 0x23, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x42, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x42, 0x51, 0x54, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x25,
	0x2a, 0x91, 0x01, 0x0a, 0x15, 0x45, 0x49, 0x6e, 0x63, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x63,
	0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x42,
	0x50, 0x4f, 0x51, 0x54, 0x5f, 0x42, 0x75, 0x79, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x42, 0x50, 0x4f, 0x51, 0x54, 0x5f, 0x42, 0x75, 0x79, 0x5f, 0x51,
	0x74, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x42, 0x50, 0x4f, 0x51, 0x54, 0x5f, 0x53,
	0x65, 0x6c, 0x6c, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x42, 0x50, 0x4f, 0x51, 0x54, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x5f, 0x51, 0x74, 0x79, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x42, 0x50, 0x4f, 0x51, 0x54, 0x5f, 0x47, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x42, 0x50, 0x4f, 0x51, 0x54, 0x5f, 0x4d,
	0x61, 0x78, 0x10, 0x05, 0x2a, 0x8c, 0x01, 0x0a, 0x13, 0x45, 0x49, 0x6e, 0x63, 0x4f, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4f, 0x50, 0x54, 0x5f,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4f, 0x50, 0x54, 0x5f, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x6f, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f, 0x50, 0x54, 0x5f, 0x4d, 0x61,
	0x78, 0x10, 0x05, 0x2a, 0x9d, 0x01, 0x0a, 0x0f, 0x45, 0x49, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4f, 0x50, 0x41, 0x54,
	0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x47, 0x61, 0x6d,
	0x6d, 0x61, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x52, 0x68,
	0x6f, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x54, 0x68, 0x65,
	0x74, 0x61, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x56, 0x65,
	0x67, 0x61, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x50, 0x41, 0x54, 0x5f, 0x4d, 0x61,
	0x78, 0x10, 0x07, 0x2a, 0xe1, 0x01, 0x0a, 0x0a, 0x45, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74,
	0x42, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x78, 0x63, 0x68, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x56, 0x6f, 0x6c, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x46, 0x75, 0x74, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c,
	0x6c, 0x41, 0x72, 0x62, 0x69, 0x10, 0x0d, 0x2a, 0x65, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x73, 0x76, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x10, 0x06, 0x2a, 0x3c,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x75, 0x6f,
	0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x2a, 0xaf, 0x01, 0x0a,
	0x06, 0x4f, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x46, 0x6c, 0x61, 0x67,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x69, 0x6c, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x2a, 0xcd,
	0x04, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x71, 0x4c, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x74, 0x72, 0x56,
	0x74, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x56, 0x74, 0x79, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x4f, 0x66, 0x56, 0x74, 0x79, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x64, 0x78, 0x43, 0x61, 0x74, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x74, 0x72, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x72, 0x62, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62,
	0x69, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x56,
	0x74, 0x79, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x56, 0x74, 0x79, 0x10,
	0x11, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x56, 0x74, 0x79, 0x10, 0x12, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x46, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x56, 0x74, 0x79, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x70, 0x41,
	0x72, 0x62, 0x69, 0x41, 0x6c, 0x6c, 0x56, 0x74, 0x79, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69,
	0x70, 0x41, 0x72, 0x62, 0x69, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x70, 0x41,
	0x72, 0x62, 0x69, 0x46, 0x75, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70,
	0x6f, 0x74, 0x56, 0x74, 0x79, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x47, 0x66, 0x65, 0x78, 0x10, 0x1c, 0x2a, 0x2e,
	0x0a, 0x0a, 0x45, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x2a, 0xaa,
	0x02, 0x0a, 0x0a, 0x45, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x44, 0x61, 0x79, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x35, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x35, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x31, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x59, 0x65, 0x61,
	0x72, 0x5f, 0x31, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x57,
	0x65, 0x65, 0x6b, 0x5f, 0x31, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4c, 0x69, 0x6e, 0x65,
	0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x32, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x33, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4b,
	0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x34, 0x10, 0x0b, 0x12, 0x12, 0x0a,
	0x0e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x31, 0x30, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x30, 0x10, 0x0e, 0x2a, 0xd1, 0x02, 0x0a, 0x0d,
	0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x5f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x69, 0x70, 0x41,
	0x72, 0x62, 0x69, 0x5f, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x46, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10,
	0x08, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x5f, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x5f, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x46, 0x74, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x70,
	0x41, 0x72, 0x62, 0x69, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x46, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0a,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x5f, 0x46, 0x74, 0x72, 0x5f,
	0x53, 0x70, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0b, 0x2a,
	0x38, 0x0a, 0x08, 0x45, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x75, 0x6c, 0x6c, 0x5f, 0x4f, 0x70, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x75, 0x74,
	0x72, 0x75, 0x65, 0x73, 0x5f, 0x4f, 0x70, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x4f, 0x70, 0x74, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0c, 0x45, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x61, 0x79, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x02, 0x2a,
	0x42, 0x0a, 0x0e, 0x45, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x57, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0c, 0x45, 0x46, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x32, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x59, 0x65, 0x61,
	0x72, 0x5f, 0x33, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x76, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67,
	0x5f, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x6f,
	0x6c, 0x41, 0x76, 0x67, 0x5f, 0x46, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x5f, 0x46, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x79, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x0e, 0x45, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61,
	0x6c, 0x63, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x6c,
	0x63, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x6c,
	0x63, 0x5f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61,
	0x6c, 0x63, 0x5f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x03, 0x2a,
	0x8e, 0x01, 0x0a, 0x0c, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x5f, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x53, 0x70, 0x6f, 0x74, 0x10, 0x04,
	0x2a, 0xdc, 0x01, 0x0a, 0x17, 0x41, 0x72, 0x62, 0x69, 0x48, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x53, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x53, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x81, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x52, 0x65, 0x61, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x41, 0x52, 0x51, 0x4d, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x41, 0x52, 0x51, 0x4d, 0x54, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x52, 0x51, 0x4d, 0x54, 0x5f, 0x4b, 0x4c,
	0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x52, 0x51, 0x4d, 0x54, 0x5f,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x41, 0x52, 0x51, 0x4d, 0x54, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x10, 0x04, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66,
	0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_proto_rawDescOnce sync.Once
	file_fip_def_proto_rawDescData = file_fip_def_proto_rawDesc
)

func file_fip_def_proto_rawDescGZIP() []byte {
	file_fip_def_proto_rawDescOnce.Do(func() {
		file_fip_def_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_proto_rawDescData)
	})
	return file_fip_def_proto_rawDescData
}

var file_fip_def_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_fip_def_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_fip_def_proto_goTypes = []interface{}{
	(EDataTimeType)(0),             // 0: fippb.EDataTimeType
	(EQuotAttr)(0),                 // 1: fippb.EQuotAttr
	(EQuotLateralType)(0),          // 2: fippb.EQuotLateralType
	(EQuotType)(0),                 // 3: fippb.EQuotType
	(MatchType)(0),                 // 4: fippb.MatchType
	(RealQuotType)(0),              // 5: fippb.RealQuotType
	(EIncQuotType)(0),              // 6: fippb.EIncQuotType
	(EIncBestQuotType)(0),          // 7: fippb.EIncBestQuotType
	(EIncBestPrcOrdQtyType)(0),     // 8: fippb.EIncBestPrcOrdQtyType
	(EIncOptPropertyType)(0),       // 9: fippb.EIncOptPropertyType
	(EIncOptParaType)(0),           // 10: fippb.EIncOptParaType
	(ESubQuotBy)(0),                // 11: fippb.ESubQuotBy
	(ReqType)(0),                   // 12: fippb.ReqType
	(SubType)(0),                   // 13: fippb.SubType
	(OEFlag)(0),                    // 14: fippb.OEFlag
	(EReqLstType)(0),               // 15: fippb.EReqLstType
	(ESvrStatus)(0),                // 16: fippb.ESvrStatus
	(EKLineType)(0),                // 17: fippb.EKLineType
	(EContractType)(0),             // 18: fippb.EContractType
	(EOptType)(0),                  // 19: fippb.EOptType
	(EVarietyType)(0),              // 20: fippb.EVarietyType
	(EStrikeWayType)(0),            // 21: fippb.EStrikeWayType
	(EFtrDuration)(0),              // 22: fippb.EFtrDuration
	(VolumnAvgType)(0),             // 23: fippb.VolumnAvgType
	(EPriceCalcType)(0),            // 24: fippb.EPriceCalcType
	(ECombineType)(0),              // 25: fippb.ECombineType
	(ArbiHisServerHandleType)(0),   // 26: fippb.ArbiHisServerHandleType
	(FipArbiRealQuotModuleType)(0), // 27: fippb.FipArbiRealQuotModuleType
	(*SubscribeElem)(nil),          // 28: fippb.SubscribeElem
	(*SubscribeQry)(nil),           // 29: fippb.SubscribeQry
	(*NoChgQuot)(nil),              // 30: fippb.NoChgQuot
	(*ChgQuot)(nil),                // 31: fippb.ChgQuot
	(*ExtraBest)(nil),              // 32: fippb.ExtraBest
	(*BestQuot)(nil),               // 33: fippb.BestQuot
	(*OptPara)(nil),                // 34: fippb.OptPara
	(*VolumnAccumulate)(nil),       // 35: fippb.VolumnAccumulate
	(*VolumnOE)(nil),               // 36: fippb.VolumnOE
	(*VolumnAvgVol)(nil),           // 37: fippb.VolumnAvgVol
	(*PrcQtyElem)(nil),             // 38: fippb.PrcQtyElem
	(*MBLQuot)(nil),                // 39: fippb.MBLQuot
	(*OrdPrcQtyElem)(nil),          // 40: fippb.OrdPrcQtyElem
	(*BestPrcOrdQty)(nil),          // 41: fippb.BestPrcOrdQty
	(*FtrVarietyElem)(nil),         // 42: fippb.FtrVarietyElem
	(*OptVarietyElem)(nil),         // 43: fippb.OptVarietyElem
	(*IdxCatElem)(nil),             // 44: fippb.IdxCatElem
	(*FtrContractElem)(nil),        // 45: fippb.FtrContractElem
	(*OptUnderlyingElem)(nil),      // 46: fippb.OptUnderlyingElem
	(*SpotVarietyElem)(nil),        // 47: fippb.SpotVarietyElem
	(*IdxContractElem)(nil),        // 48: fippb.IdxContractElem
	(*ArbiContractElem)(nil),       // 49: fippb.ArbiContractElem
	(*FipArbiContractElem)(nil),    // 50: fippb.FipArbiContractElem
	(*FipArbiVarietyElem)(nil),     // 51: fippb.FipArbiVarietyElem
	(*IdxVarietyElem)(nil),         // 52: fippb.IdxVarietyElem
	(*OptContractElem)(nil),        // 53: fippb.OptContractElem
	(*ExchangeElem)(nil),           // 54: fippb.ExchangeElem
	(*VtyQuotStaElem)(nil),         // 55: fippb.VtyQuotStaElem
	(*OptQuotStaElem)(nil),         // 56: fippb.OptQuotStaElem
	(*HisMatchElem)(nil),           // 57: fippb.HisMatchElem
	(*TPElem)(nil),                 // 58: fippb.TPElem
	(*TSElem)(nil),                 // 59: fippb.TSElem
	(*KLineElem)(nil),              // 60: fippb.KLineElem
	(*IndexConf)(nil),              // 61: fippb.IndexConf
	(*QuotBrief)(nil),              // 62: fippb.QuotBrief
	(*FtrVarietyInfoElem)(nil),     // 63: fippb.FtrVarietyInfoElem
	(*IncreaseAnnualElem)(nil),     // 64: fippb.IncreaseAnnualElem
	(EExchgID)(0),                  // 65: fippb.EExchgID
}
var file_fip_def_proto_depIdxs = []int32{
	65, // 0: fippb.SubscribeElem.exchgid:type_name -> fippb.EExchgID
	11, // 1: fippb.SubscribeElem.type:type_name -> fippb.ESubQuotBy
	65, // 2: fippb.SubscribeQry.exchgid:type_name -> fippb.EExchgID
	14, // 3: fippb.ExtraBest.OE:type_name -> fippb.OEFlag
	4,  // 4: fippb.ExtraBest.MatType:type_name -> fippb.MatchType
	65, // 5: fippb.BestQuot.exchgid:type_name -> fippb.EExchgID
	30, // 6: fippb.BestQuot.NoChg:type_name -> fippb.NoChgQuot
	31, // 7: fippb.BestQuot.chg:type_name -> fippb.ChgQuot
	32, // 8: fippb.BestQuot.extra:type_name -> fippb.ExtraBest
	2,  // 9: fippb.BestQuot.lateralQuotType:type_name -> fippb.EQuotLateralType
	23, // 10: fippb.VolumnAvgVol.VolAvgType:type_name -> fippb.VolumnAvgType
	40, // 11: fippb.BestPrcOrdQty.Buy:type_name -> fippb.OrdPrcQtyElem
	40, // 12: fippb.BestPrcOrdQty.Sell:type_name -> fippb.OrdPrcQtyElem
	65, // 13: fippb.FtrVarietyElem.exchgid:type_name -> fippb.EExchgID
	20, // 14: fippb.FtrVarietyElem.VarietyType:type_name -> fippb.EVarietyType
	22, // 15: fippb.FtrVarietyElem.FtrDuartion:type_name -> fippb.EFtrDuration
	65, // 16: fippb.OptVarietyElem.exchgid:type_name -> fippb.EExchgID
	20, // 17: fippb.OptVarietyElem.VarietyType:type_name -> fippb.EVarietyType
	21, // 18: fippb.OptVarietyElem.StrikeWay:type_name -> fippb.EStrikeWayType
	19, // 19: fippb.OptVarietyElem.OptType:type_name -> fippb.EOptType
	65, // 20: fippb.IdxCatElem.ExchgID:type_name -> fippb.EExchgID
	65, // 21: fippb.FtrContractElem.exchgid:type_name -> fippb.EExchgID
	18, // 22: fippb.FtrContractElem.ContractType:type_name -> fippb.EContractType
	65, // 23: fippb.OptUnderlyingElem.exchgid:type_name -> fippb.EExchgID
	65, // 24: fippb.OptUnderlyingElem.underlyingExchgid:type_name -> fippb.EExchgID
	65, // 25: fippb.SpotVarietyElem.exchgid:type_name -> fippb.EExchgID
	65, // 26: fippb.IdxContractElem.ExchgID:type_name -> fippb.EExchgID
	18, // 27: fippb.IdxContractElem.ContractType:type_name -> fippb.EContractType
	52, // 28: fippb.IdxContractElem.VatList:type_name -> fippb.IdxVarietyElem
	20, // 29: fippb.IdxContractElem.VarietyType:type_name -> fippb.EVarietyType
	65, // 30: fippb.ArbiContractElem.Exchgid:type_name -> fippb.EExchgID
	18, // 31: fippb.ArbiContractElem.ContractType:type_name -> fippb.EContractType
	65, // 32: fippb.FipArbiContractElem.Leg1ExchgID:type_name -> fippb.EExchgID
	65, // 33: fippb.FipArbiContractElem.Leg2ExchgID:type_name -> fippb.EExchgID
	18, // 34: fippb.FipArbiContractElem.ContractType:type_name -> fippb.EContractType
	24, // 35: fippb.FipArbiContractElem.CalcType:type_name -> fippb.EPriceCalcType
	65, // 36: fippb.FipArbiVarietyElem.Leg1ExchgID:type_name -> fippb.EExchgID
	65, // 37: fippb.FipArbiVarietyElem.Leg2ExchgID:type_name -> fippb.EExchgID
	20, // 38: fippb.FipArbiVarietyElem.VarietyType:type_name -> fippb.EVarietyType
	24, // 39: fippb.FipArbiVarietyElem.CalcType:type_name -> fippb.EPriceCalcType
	25, // 40: fippb.FipArbiVarietyElem.CombineType:type_name -> fippb.ECombineType
	18, // 41: fippb.IdxVarietyElem.ContractType:type_name -> fippb.EContractType
	65, // 42: fippb.OptContractElem.exchgid:type_name -> fippb.EExchgID
	18, // 43: fippb.OptContractElem.ContractType:type_name -> fippb.EContractType
	65, // 44: fippb.ExchangeElem.exchgid:type_name -> fippb.EExchgID
	2,  // 45: fippb.VtyQuotStaElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	2,  // 46: fippb.OptQuotStaElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	14, // 47: fippb.HisMatchElem.OE:type_name -> fippb.OEFlag
	2,  // 48: fippb.HisMatchElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	2,  // 49: fippb.TPElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	2,  // 50: fippb.TSElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	2,  // 51: fippb.KLineElem.lateralQuotType:type_name -> fippb.EQuotLateralType
	2,  // 52: fippb.QuotBrief.lateralQuotType:type_name -> fippb.EQuotLateralType
	65, // 53: fippb.QuotBrief.exchgid:type_name -> fippb.EExchgID
	22, // 54: fippb.FtrVarietyInfoElem.FtrDuartion:type_name -> fippb.EFtrDuration
	20, // 55: fippb.FtrVarietyInfoElem.VarietyType:type_name -> fippb.EVarietyType
	65, // 56: fippb.IncreaseAnnualElem.ExchgId:type_name -> fippb.EExchgID
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_fip_def_proto_init() }
func file_fip_def_proto_init() {
	if File_fip_def_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_def_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeQry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoChgQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChgQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraBest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumnAccumulate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumnOE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumnAvgVol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrcQtyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBLQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdPrcQtyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestPrcOrdQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtrVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdxCatElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtrContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptUnderlyingElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdxContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbiContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FipArbiContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FipArbiVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdxVarietyElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VtyQuotStaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptQuotStaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HisMatchElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KLineElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtrVarietyInfoElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseAnnualElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_proto_goTypes,
		DependencyIndexes: file_fip_def_proto_depIdxs,
		EnumInfos:         file_fip_def_proto_enumTypes,
		MessageInfos:      file_fip_def_proto_msgTypes,
	}.Build()
	File_fip_def_proto = out.File
	file_fip_def_proto_rawDesc = nil
	file_fip_def_proto_goTypes = nil
	file_fip_def_proto_depIdxs = nil
}
