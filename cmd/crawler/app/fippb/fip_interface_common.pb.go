//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 通用业务接口定义
//
// @date 2023-5-29
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_common.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 请求查询监控任务
// @date 2023-5-29
// @note 协议号 client-proxy:<1101> proxy-monitor:<20001>
type ReqQryMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID          uint32         `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                           // 请求ID
	UserID         string         `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                                          // 账号ID
	MonitorStatus  EMonitorStatus `protobuf:"varint,3,opt,name=monitorStatus,proto3,enum=fippb.EMonitorStatus" json:"monitorStatus,omitempty"` // 查询类型：1-监控中、2-已提醒，监控中的查询全部，已提醒需要根据WarnID指定查询个数
	StartWarnID    uint64         `protobuf:"varint,4,opt,name=startWarnID,proto3" json:"startWarnID,omitempty"`                               // 起始WarnID，如果是0，则从最大的WarnID开始查。
	QryWarnedCount uint32         `protobuf:"varint,5,opt,name=qryWarnedCount,proto3" json:"qryWarnedCount,omitempty"`                         // 查询数量。查询WarnID小于startWarnID且WarnID最大的qryWarnedCount条数据；如果startWarnID是0，则查询WarnID最大的qryWarnedCount条数据。
}

func (x *ReqQryMonitor) Reset() {
	*x = ReqQryMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryMonitor) ProtoMessage() {}

func (x *ReqQryMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryMonitor.ProtoReflect.Descriptor instead.
func (*ReqQryMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{0}
}

func (x *ReqQryMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReqQryMonitor) GetMonitorStatus() EMonitorStatus {
	if x != nil {
		return x.MonitorStatus
	}
	return EMonitorStatus_MSNull
}

func (x *ReqQryMonitor) GetStartWarnID() uint64 {
	if x != nil {
		return x.StartWarnID
	}
	return 0
}

func (x *ReqQryMonitor) GetQryWarnedCount() uint32 {
	if x != nil {
		return x.QryWarnedCount
	}
	return 0
}

// *
// @brief 请求查询监控任务响应
// @date 2023-5-29
// @note 协议号 client-proxy:<1102> proxy-monitor:<20002>
type RspQryMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID    uint32         `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求ID
	UserID   string         `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                        // 账号ID
	ErrorID  uint32         `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误ID
	ErrorMsg string         `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                    // 错误信息
	ElemList []*MonitorElem `protobuf:"bytes,5,rep,name=elemList,proto3" json:"elemList,omitempty"`                    // 监控任务列表
	Index    uint32         `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`                         // 分包索引
	PkgType  EPkgType       `protobuf:"varint,7,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标识：0-单包、1-分包首包、2-分包中间包、3-分包末包
}

func (x *RspQryMonitor) Reset() {
	*x = RspQryMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryMonitor) ProtoMessage() {}

func (x *RspQryMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryMonitor.ProtoReflect.Descriptor instead.
func (*RspQryMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{1}
}

func (x *RspQryMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspQryMonitor) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryMonitor) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspQryMonitor) GetElemList() []*MonitorElem {
	if x != nil {
		return x.ElemList
	}
	return nil
}

func (x *RspQryMonitor) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspQryMonitor) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求增加监控任务
// @date 2023-5-29
// @note 协议号 client-proxy:<1103> proxy-monitor:<20003>
type ReqAddMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID             uint32                `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                                    // 请求ID 必须递增
	UserID            string                `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                                                   // 账号ID
	MonitorType       EMonitorType          `protobuf:"varint,3,opt,name=monitorType,proto3,enum=fippb.EMonitorType" json:"monitorType,omitempty"`                // 监控类型
	MonitorConType    EMonitorConditionType `protobuf:"varint,4,opt,name=monitorConType,proto3,enum=fippb.EMonitorConditionType" json:"monitorConType,omitempty"` // 监控条件类型
	NotifyType        ENotifyType           `protobuf:"varint,5,opt,name=notifyType,proto3,enum=fippb.ENotifyType" json:"notifyType,omitempty"`                   // 推送方式
	NotifyFrequency   ENotifyFrequency      `protobuf:"varint,6,opt,name=notifyFrequency,proto3,enum=fippb.ENotifyFrequency" json:"notifyFrequency,omitempty"`    // 推送频率
	ElemList          []*ContractInfoElem   `protobuf:"bytes,7,rep,name=elemList,proto3" json:"elemList,omitempty"`                                               // 合约信息：独立预警-1个、组合预警-2个、移仓换月-2个（移动端新增时填入2个，第1个表示品种，第2个表示变化前的主力合约）
	PriceCondition    float64               `protobuf:"fixed64,8,opt,name=priceCondition,proto3" json:"priceCondition,omitempty"`                                 // 价格类预警触发条件，适用于独立预警价格涨跌、独立预警日涨跌幅、组合预警价差
	PositionCondition uint64                `protobuf:"varint,9,opt,name=positionCondition,proto3" json:"positionCondition,omitempty"`                            // 持仓类预警触发条件，适用于组合预警的持仓差
	Message           string                `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`                                                // 备注
}

func (x *ReqAddMonitor) Reset() {
	*x = ReqAddMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddMonitor) ProtoMessage() {}

func (x *ReqAddMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddMonitor.ProtoReflect.Descriptor instead.
func (*ReqAddMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{2}
}

func (x *ReqAddMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqAddMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReqAddMonitor) GetMonitorType() EMonitorType {
	if x != nil {
		return x.MonitorType
	}
	return EMonitorType_MTNull
}

func (x *ReqAddMonitor) GetMonitorConType() EMonitorConditionType {
	if x != nil {
		return x.MonitorConType
	}
	return EMonitorConditionType_MCTNull
}

func (x *ReqAddMonitor) GetNotifyType() ENotifyType {
	if x != nil {
		return x.NotifyType
	}
	return ENotifyType_NTNull
}

func (x *ReqAddMonitor) GetNotifyFrequency() ENotifyFrequency {
	if x != nil {
		return x.NotifyFrequency
	}
	return ENotifyFrequency_NFNull
}

func (x *ReqAddMonitor) GetElemList() []*ContractInfoElem {
	if x != nil {
		return x.ElemList
	}
	return nil
}

func (x *ReqAddMonitor) GetPriceCondition() float64 {
	if x != nil {
		return x.PriceCondition
	}
	return 0
}

func (x *ReqAddMonitor) GetPositionCondition() uint64 {
	if x != nil {
		return x.PositionCondition
	}
	return 0
}

func (x *ReqAddMonitor) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// *
// @brief 请求增加监控任务响应
// @date 2023-5-29
// @note 协议号 client-proxy:<1104> proxy-monitor:<20004>
type RspAddMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID     uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`         // 请求ID
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`        // 账号ID
	MonitorID uint64 `protobuf:"varint,3,opt,name=monitorID,proto3" json:"monitorID,omitempty"` // 监控预警任务ID
	ErrorID   uint32 `protobuf:"varint,4,opt,name=errorID,proto3" json:"errorID,omitempty"`     // 错误ID
	ErrorMsg  string `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`    // 错误信息
}

func (x *RspAddMonitor) Reset() {
	*x = RspAddMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAddMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAddMonitor) ProtoMessage() {}

func (x *RspAddMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAddMonitor.ProtoReflect.Descriptor instead.
func (*RspAddMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{3}
}

func (x *RspAddMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspAddMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspAddMonitor) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *RspAddMonitor) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspAddMonitor) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 请求删除监控任务
// @date 2023-5-29
// @note 协议号 client-proxy:<1105> proxy-monitor:<20005>
type ReqDeleteMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID       uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                    // 请求ID
	UserID      string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                   // 账号ID
	MonitorList []uint64 `protobuf:"varint,3,rep,packed,name=monitorList,proto3" json:"monitorList,omitempty"` // 待删除的monitorID列表，可以批量删除
}

func (x *ReqDeleteMonitor) Reset() {
	*x = ReqDeleteMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMonitor) ProtoMessage() {}

func (x *ReqDeleteMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMonitor.ProtoReflect.Descriptor instead.
func (*ReqDeleteMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{4}
}

func (x *ReqDeleteMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqDeleteMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReqDeleteMonitor) GetMonitorList() []uint64 {
	if x != nil {
		return x.MonitorList
	}
	return nil
}

// *
// @brief 请求删除监控任务响应
// @date 2023-5-29
// @note 协议号 client-proxy:<1106> proxy-monitor:<20006>
type RspDeleteMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID    uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`      // 请求ID
	UserID   string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`     // 账号ID
	ErrorID  uint32 `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`  // 错误ID
	ErrorMsg string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"` // 错误信息
}

func (x *RspDeleteMonitor) Reset() {
	*x = RspDeleteMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDeleteMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDeleteMonitor) ProtoMessage() {}

func (x *RspDeleteMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDeleteMonitor.ProtoReflect.Descriptor instead.
func (*RspDeleteMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{5}
}

func (x *RspDeleteMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspDeleteMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspDeleteMonitor) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspDeleteMonitor) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 请求更新监控任务
// @date 2023-5-29
// @note 协议号 client-proxy:<1107> proxy-monitor:<20007>
type ReqUpdateMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID             uint32           `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                                 // 请求ID
	UserID            string           `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                                                // 账号ID
	MonitorID         uint64           `protobuf:"varint,3,opt,name=monitorID,proto3" json:"monitorID,omitempty"`                                         // 监控预警任务ID
	NotifyType        ENotifyType      `protobuf:"varint,4,opt,name=notifyType,proto3,enum=fippb.ENotifyType" json:"notifyType,omitempty"`                // 推送方式
	NotifyFrequency   ENotifyFrequency `protobuf:"varint,5,opt,name=notifyFrequency,proto3,enum=fippb.ENotifyFrequency" json:"notifyFrequency,omitempty"` // 推送频率
	PriceCondition    float64          `protobuf:"fixed64,6,opt,name=priceCondition,proto3" json:"priceCondition,omitempty"`                              // 价格类预警触发条件，适用于独立预警价格涨跌、独立预警日涨跌幅、组合预警价差
	PositionCondition uint64           `protobuf:"varint,7,opt,name=positionCondition,proto3" json:"positionCondition,omitempty"`                         // 持仓类预警触发条件，适用于组合预警的持仓差
	Message           string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                                              // 备注
}

func (x *ReqUpdateMonitor) Reset() {
	*x = ReqUpdateMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateMonitor) ProtoMessage() {}

func (x *ReqUpdateMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateMonitor.ProtoReflect.Descriptor instead.
func (*ReqUpdateMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{6}
}

func (x *ReqUpdateMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqUpdateMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReqUpdateMonitor) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *ReqUpdateMonitor) GetNotifyType() ENotifyType {
	if x != nil {
		return x.NotifyType
	}
	return ENotifyType_NTNull
}

func (x *ReqUpdateMonitor) GetNotifyFrequency() ENotifyFrequency {
	if x != nil {
		return x.NotifyFrequency
	}
	return ENotifyFrequency_NFNull
}

func (x *ReqUpdateMonitor) GetPriceCondition() float64 {
	if x != nil {
		return x.PriceCondition
	}
	return 0
}

func (x *ReqUpdateMonitor) GetPositionCondition() uint64 {
	if x != nil {
		return x.PositionCondition
	}
	return 0
}

func (x *ReqUpdateMonitor) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// *
// @brief 请求更新监控任务响应
// @date 2023-5-29
// @note 协议号 client-proxy:<1108> proxy-monitor:<20008>
type RspUpdateMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID     uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`         // 请求ID
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`        // 账号ID
	MonitorID uint64 `protobuf:"varint,3,opt,name=monitorID,proto3" json:"monitorID,omitempty"` // 监控预警任务ID
	ErrorID   uint32 `protobuf:"varint,4,opt,name=errorID,proto3" json:"errorID,omitempty"`     // 错误ID
	ErrorMsg  string `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`    // 错误信息
}

func (x *RspUpdateMonitor) Reset() {
	*x = RspUpdateMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUpdateMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUpdateMonitor) ProtoMessage() {}

func (x *RspUpdateMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUpdateMonitor.ProtoReflect.Descriptor instead.
func (*RspUpdateMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{7}
}

func (x *RspUpdateMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspUpdateMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspUpdateMonitor) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *RspUpdateMonitor) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspUpdateMonitor) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 请求设置监控任务启停状态
// @date 2023-5-29
// @note 协议号 client-proxy:<1109> proxy-monitor:<20009>
type ReqSetMonitorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID     uint32     `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求ID
	UserID    string     `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`                              // 账号ID
	MonitorID uint64     `protobuf:"varint,3,opt,name=monitorID,proto3" json:"monitorID,omitempty"`                       // 监控预警任务ID
	RunStatus ERunStatus `protobuf:"varint,4,opt,name=runStatus,proto3,enum=fippb.ERunStatus" json:"runStatus,omitempty"` // 生效状态
}

func (x *ReqSetMonitorStatus) Reset() {
	*x = ReqSetMonitorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetMonitorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetMonitorStatus) ProtoMessage() {}

func (x *ReqSetMonitorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetMonitorStatus.ProtoReflect.Descriptor instead.
func (*ReqSetMonitorStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{8}
}

func (x *ReqSetMonitorStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSetMonitorStatus) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReqSetMonitorStatus) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *ReqSetMonitorStatus) GetRunStatus() ERunStatus {
	if x != nil {
		return x.RunStatus
	}
	return ERunStatus_RSNull
}

// *
// @brief 请求设置监控任务启停状态响应
// @date 2023-5-29
// @note 协议号 client-proxy:<1110> proxy-monitor:<20010>
type RspSetMonitorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID     uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`         // 请求ID
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`        // 账号ID
	MonitorID uint64 `protobuf:"varint,3,opt,name=monitorID,proto3" json:"monitorID,omitempty"` // 监控预警任务ID
	ErrorID   uint32 `protobuf:"varint,4,opt,name=errorID,proto3" json:"errorID,omitempty"`     // 错误ID
	ErrorMsg  string `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`    // 错误信息
}

func (x *RspSetMonitorStatus) Reset() {
	*x = RspSetMonitorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSetMonitorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSetMonitorStatus) ProtoMessage() {}

func (x *RspSetMonitorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSetMonitorStatus.ProtoReflect.Descriptor instead.
func (*RspSetMonitorStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{9}
}

func (x *RspSetMonitorStatus) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSetMonitorStatus) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspSetMonitorStatus) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *RspSetMonitorStatus) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspSetMonitorStatus) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// *
// @brief 监控预警通知
// @date 2023-5-29
// @note 协议号 client-proxy:<1111> proxy-monitor:<20011>
type NotifyMonitorWarn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ENotifyEventType `protobuf:"varint,1,opt,name=type,proto3,enum=fippb.ENotifyEventType" json:"type,omitempty"` // 通知消息类型
	Elem *MonitorElem     `protobuf:"bytes,2,opt,name=elem,proto3" json:"elem,omitempty"`                              // 监控预警任务信息
}

func (x *NotifyMonitorWarn) Reset() {
	*x = NotifyMonitorWarn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMonitorWarn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMonitorWarn) ProtoMessage() {}

func (x *NotifyMonitorWarn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMonitorWarn.ProtoReflect.Descriptor instead.
func (*NotifyMonitorWarn) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{10}
}

func (x *NotifyMonitorWarn) GetType() ENotifyEventType {
	if x != nil {
		return x.Type
	}
	return ENotifyEventType_NENull
}

func (x *NotifyMonitorWarn) GetElem() *MonitorElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

// *
// @brief 监控任务变化通知
// @date 2023-5-29
// @note 协议号 client-proxy:<1112> proxy-monitor:<20012>
type NotifyMonitorChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ENotifyEventType `protobuf:"varint,1,opt,name=type,proto3,enum=fippb.ENotifyEventType" json:"type,omitempty"` // 通知消息类型
	Elem   *MonitorElem     `protobuf:"bytes,2,opt,name=elem,proto3" json:"elem,omitempty"`                              // 监控预警任务信息
	IsLast bool             `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`                         // 删除可以进行批量操作，用于区分是否是最后一个
}

func (x *NotifyMonitorChange) Reset() {
	*x = NotifyMonitorChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMonitorChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMonitorChange) ProtoMessage() {}

func (x *NotifyMonitorChange) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMonitorChange.ProtoReflect.Descriptor instead.
func (*NotifyMonitorChange) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyMonitorChange) GetType() ENotifyEventType {
	if x != nil {
		return x.Type
	}
	return ENotifyEventType_NENull
}

func (x *NotifyMonitorChange) GetElem() *MonitorElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *NotifyMonitorChange) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// *
// @brief 请求查询用户可设置预警数量最大值
// @date 2023-7-17
// @note 协议号 client-proxy:<1113> proxy-monitor:<20013>
type ReqQryMaxMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID  uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`  // 请求ID
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"` // 账号ID
}

func (x *ReqQryMaxMonitor) Reset() {
	*x = ReqQryMaxMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQryMaxMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQryMaxMonitor) ProtoMessage() {}

func (x *ReqQryMaxMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQryMaxMonitor.ProtoReflect.Descriptor instead.
func (*ReqQryMaxMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{12}
}

func (x *ReqQryMaxMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqQryMaxMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// *
// @brief 请求查询用户可设置预警数量最大值响应
// @date 2023-7-17
// @note 协议号 client-proxy:<1114> proxy-monitor:<20014>
type RspQryMaxMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`           // 请求ID
	UserID     string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`          // 账号ID
	ErrorID    uint32 `protobuf:"varint,3,opt,name=errorID,proto3" json:"errorID,omitempty"`       // 错误ID
	ErrorMsg   string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`      // 错误信息
	MaxSingle  int32  `protobuf:"varint,5,opt,name=maxSingle,proto3" json:"maxSingle,omitempty"`   // 单个账号支持最大独立预警数量，小于0表示不限制个数
	MaxCombine int32  `protobuf:"varint,6,opt,name=maxCombine,proto3" json:"maxCombine,omitempty"` // 单个账号支持最大组合预警数量，小于0表示不限制个数
}

func (x *RspQryMaxMonitor) Reset() {
	*x = RspQryMaxMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspQryMaxMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspQryMaxMonitor) ProtoMessage() {}

func (x *RspQryMaxMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspQryMaxMonitor.ProtoReflect.Descriptor instead.
func (*RspQryMaxMonitor) Descriptor() ([]byte, []int) {
	return file_fip_interface_common_proto_rawDescGZIP(), []int{13}
}

func (x *RspQryMaxMonitor) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspQryMaxMonitor) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RspQryMaxMonitor) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspQryMaxMonitor) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RspQryMaxMonitor) GetMaxSingle() int32 {
	if x != nil {
		return x.MaxSingle
	}
	return 0
}

func (x *RspQryMaxMonitor) GetMaxCombine() int32 {
	if x != nil {
		return x.MaxCombine
	}
	return 0
}

var File_fip_interface_common_proto protoreflect.FileDescriptor

var file_fip_interface_common_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x72,
	0x79, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x71, 0x72, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x10, 0x52, 0x73,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x52,
	0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0x68, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x22,
	0x40, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_common_proto_rawDescOnce sync.Once
	file_fip_interface_common_proto_rawDescData = file_fip_interface_common_proto_rawDesc
)

func file_fip_interface_common_proto_rawDescGZIP() []byte {
	file_fip_interface_common_proto_rawDescOnce.Do(func() {
		file_fip_interface_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_common_proto_rawDescData)
	})
	return file_fip_interface_common_proto_rawDescData
}

var file_fip_interface_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_fip_interface_common_proto_goTypes = []interface{}{
	(*ReqQryMonitor)(nil),       // 0: fippb.ReqQryMonitor
	(*RspQryMonitor)(nil),       // 1: fippb.RspQryMonitor
	(*ReqAddMonitor)(nil),       // 2: fippb.ReqAddMonitor
	(*RspAddMonitor)(nil),       // 3: fippb.RspAddMonitor
	(*ReqDeleteMonitor)(nil),    // 4: fippb.ReqDeleteMonitor
	(*RspDeleteMonitor)(nil),    // 5: fippb.RspDeleteMonitor
	(*ReqUpdateMonitor)(nil),    // 6: fippb.ReqUpdateMonitor
	(*RspUpdateMonitor)(nil),    // 7: fippb.RspUpdateMonitor
	(*ReqSetMonitorStatus)(nil), // 8: fippb.ReqSetMonitorStatus
	(*RspSetMonitorStatus)(nil), // 9: fippb.RspSetMonitorStatus
	(*NotifyMonitorWarn)(nil),   // 10: fippb.NotifyMonitorWarn
	(*NotifyMonitorChange)(nil), // 11: fippb.NotifyMonitorChange
	(*ReqQryMaxMonitor)(nil),    // 12: fippb.ReqQryMaxMonitor
	(*RspQryMaxMonitor)(nil),    // 13: fippb.RspQryMaxMonitor
	(EMonitorStatus)(0),         // 14: fippb.EMonitorStatus
	(*MonitorElem)(nil),         // 15: fippb.MonitorElem
	(EPkgType)(0),               // 16: fippb.EPkgType
	(EMonitorType)(0),           // 17: fippb.EMonitorType
	(EMonitorConditionType)(0),  // 18: fippb.EMonitorConditionType
	(ENotifyType)(0),            // 19: fippb.ENotifyType
	(ENotifyFrequency)(0),       // 20: fippb.ENotifyFrequency
	(*ContractInfoElem)(nil),    // 21: fippb.ContractInfoElem
	(ERunStatus)(0),             // 22: fippb.ERunStatus
	(ENotifyEventType)(0),       // 23: fippb.ENotifyEventType
}
var file_fip_interface_common_proto_depIdxs = []int32{
	14, // 0: fippb.ReqQryMonitor.monitorStatus:type_name -> fippb.EMonitorStatus
	15, // 1: fippb.RspQryMonitor.elemList:type_name -> fippb.MonitorElem
	16, // 2: fippb.RspQryMonitor.pkgType:type_name -> fippb.EPkgType
	17, // 3: fippb.ReqAddMonitor.monitorType:type_name -> fippb.EMonitorType
	18, // 4: fippb.ReqAddMonitor.monitorConType:type_name -> fippb.EMonitorConditionType
	19, // 5: fippb.ReqAddMonitor.notifyType:type_name -> fippb.ENotifyType
	20, // 6: fippb.ReqAddMonitor.notifyFrequency:type_name -> fippb.ENotifyFrequency
	21, // 7: fippb.ReqAddMonitor.elemList:type_name -> fippb.ContractInfoElem
	19, // 8: fippb.ReqUpdateMonitor.notifyType:type_name -> fippb.ENotifyType
	20, // 9: fippb.ReqUpdateMonitor.notifyFrequency:type_name -> fippb.ENotifyFrequency
	22, // 10: fippb.ReqSetMonitorStatus.runStatus:type_name -> fippb.ERunStatus
	23, // 11: fippb.NotifyMonitorWarn.type:type_name -> fippb.ENotifyEventType
	15, // 12: fippb.NotifyMonitorWarn.elem:type_name -> fippb.MonitorElem
	23, // 13: fippb.NotifyMonitorChange.type:type_name -> fippb.ENotifyEventType
	15, // 14: fippb.NotifyMonitorChange.elem:type_name -> fippb.MonitorElem
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_fip_interface_common_proto_init() }
func file_fip_interface_common_proto_init() {
	if File_fip_interface_common_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAddMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDeleteMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUpdateMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetMonitorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSetMonitorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMonitorWarn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMonitorChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQryMaxMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspQryMaxMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_common_proto_goTypes,
		DependencyIndexes: file_fip_interface_common_proto_depIdxs,
		MessageInfos:      file_fip_interface_common_proto_msgTypes,
	}.Build()
	File_fip_interface_common_proto = out.File
	file_fip_interface_common_proto_rawDesc = nil
	file_fip_interface_common_proto_goTypes = nil
	file_fip_interface_common_proto_depIdxs = nil
}
