//*
// Copyright (C) 2015-2023，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 通用业务类型定义
//
// @date 2023-5-29
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def_common.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 监控类型
type EMonitorType int32

const (
	EMonitorType_MTNull    EMonitorType = 0 // 默认
	EMonitorType_MTSingle  EMonitorType = 1 // 独立预警
	EMonitorType_MTCombine EMonitorType = 2 // 组合预警
)

// Enum value maps for EMonitorType.
var (
	EMonitorType_name = map[int32]string{
		0: "MTNull",
		1: "MTSingle",
		2: "MTCombine",
	}
	EMonitorType_value = map[string]int32{
		"MTNull":    0,
		"MTSingle":  1,
		"MTCombine": 2,
	}
)

func (x EMonitorType) Enum() *EMonitorType {
	p := new(EMonitorType)
	*p = x
	return p
}

func (x EMonitorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonitorType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[0].Descriptor()
}

func (EMonitorType) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[0]
}

func (x EMonitorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMonitorType.Descriptor instead.
func (EMonitorType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{0}
}

// 监控条件类型
type EMonitorConditionType int32

const (
	EMonitorConditionType_MCTNull EMonitorConditionType = 0 // 默认
	// 以下是独立预警
	EMonitorConditionType_MCTPriceUp        EMonitorConditionType = 1 // 价格涨到
	EMonitorConditionType_MCTPriceDown      EMonitorConditionType = 2 // 价格跌到
	EMonitorConditionType_MCTIncreaseTo     EMonitorConditionType = 3 // 日涨幅超过%
	EMonitorConditionType_MCTDecreaseTo     EMonitorConditionType = 4 // 日跌幅超过%
	EMonitorConditionType_MCTMainContChange EMonitorConditionType = 5 // 主力合约移仓换月
	// 以下是组合预警
	EMonitorConditionType_MCTPositionDiffGreater EMonitorConditionType = 100 // 合约1持仓量高于合约2持仓量X手
	EMonitorConditionType_MCTPositionDiffLess    EMonitorConditionType = 101 // 合约1持仓量低于合约2持仓量X手
	EMonitorConditionType_MCTPriceDiffGreater    EMonitorConditionType = 102 // 合约1的价格高于合约2的价格X元
	EMonitorConditionType_MCTPriceDiffLess       EMonitorConditionType = 103 // 合约1的价格低于合约2的价格X元
)

// Enum value maps for EMonitorConditionType.
var (
	EMonitorConditionType_name = map[int32]string{
		0:   "MCTNull",
		1:   "MCTPriceUp",
		2:   "MCTPriceDown",
		3:   "MCTIncreaseTo",
		4:   "MCTDecreaseTo",
		5:   "MCTMainContChange",
		100: "MCTPositionDiffGreater",
		101: "MCTPositionDiffLess",
		102: "MCTPriceDiffGreater",
		103: "MCTPriceDiffLess",
	}
	EMonitorConditionType_value = map[string]int32{
		"MCTNull":                0,
		"MCTPriceUp":             1,
		"MCTPriceDown":           2,
		"MCTIncreaseTo":          3,
		"MCTDecreaseTo":          4,
		"MCTMainContChange":      5,
		"MCTPositionDiffGreater": 100,
		"MCTPositionDiffLess":    101,
		"MCTPriceDiffGreater":    102,
		"MCTPriceDiffLess":       103,
	}
)

func (x EMonitorConditionType) Enum() *EMonitorConditionType {
	p := new(EMonitorConditionType)
	*p = x
	return p
}

func (x EMonitorConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonitorConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[1].Descriptor()
}

func (EMonitorConditionType) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[1]
}

func (x EMonitorConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMonitorConditionType.Descriptor instead.
func (EMonitorConditionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{1}
}

// 推送方式
type ENotifyType int32

const (
	ENotifyType_NTNull         ENotifyType = 0 // 默认
	ENotifyType_NTAppMsgBanner ENotifyType = 1 // APP内通知
	ENotifyType_NTAppMsgPush   ENotifyType = 2 // APP通知
)

// Enum value maps for ENotifyType.
var (
	ENotifyType_name = map[int32]string{
		0: "NTNull",
		1: "NTAppMsgBanner",
		2: "NTAppMsgPush",
	}
	ENotifyType_value = map[string]int32{
		"NTNull":         0,
		"NTAppMsgBanner": 1,
		"NTAppMsgPush":   2,
	}
)

func (x ENotifyType) Enum() *ENotifyType {
	p := new(ENotifyType)
	*p = x
	return p
}

func (x ENotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[2].Descriptor()
}

func (ENotifyType) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[2]
}

func (x ENotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENotifyType.Descriptor instead.
func (ENotifyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{2}
}

// 推送频率
type ENotifyFrequency int32

const (
	ENotifyFrequency_NFNull                  ENotifyFrequency = 0 // 默认
	ENotifyFrequency_NFFrequencyOnce         ENotifyFrequency = 1 // 仅提醒一次(仅提醒一次,提醒后关闭预警)
	ENotifyFrequency_NFFrequencyOnceEveryDay ENotifyFrequency = 2 // 每日一次(每个交易日第一次达到条件时预警)
)

// Enum value maps for ENotifyFrequency.
var (
	ENotifyFrequency_name = map[int32]string{
		0: "NFNull",
		1: "NFFrequencyOnce",
		2: "NFFrequencyOnceEveryDay",
	}
	ENotifyFrequency_value = map[string]int32{
		"NFNull":                  0,
		"NFFrequencyOnce":         1,
		"NFFrequencyOnceEveryDay": 2,
	}
)

func (x ENotifyFrequency) Enum() *ENotifyFrequency {
	p := new(ENotifyFrequency)
	*p = x
	return p
}

func (x ENotifyFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotifyFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[3].Descriptor()
}

func (ENotifyFrequency) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[3]
}

func (x ENotifyFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENotifyFrequency.Descriptor instead.
func (ENotifyFrequency) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{3}
}

// 监控状态
type EMonitorStatus int32

const (
	EMonitorStatus_MSNull       EMonitorStatus = 0 // 默认
	EMonitorStatus_MSMonitoring EMonitorStatus = 1 // 监控中
	EMonitorStatus_MSWarned     EMonitorStatus = 2 // 已警告、已提醒
)

// Enum value maps for EMonitorStatus.
var (
	EMonitorStatus_name = map[int32]string{
		0: "MSNull",
		1: "MSMonitoring",
		2: "MSWarned",
	}
	EMonitorStatus_value = map[string]int32{
		"MSNull":       0,
		"MSMonitoring": 1,
		"MSWarned":     2,
	}
)

func (x EMonitorStatus) Enum() *EMonitorStatus {
	p := new(EMonitorStatus)
	*p = x
	return p
}

func (x EMonitorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonitorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[4].Descriptor()
}

func (EMonitorStatus) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[4]
}

func (x EMonitorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMonitorStatus.Descriptor instead.
func (EMonitorStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{4}
}

// 生效状态
type ERunStatus int32

const (
	ERunStatus_RSNull ERunStatus = 0 // 默认
	ERunStatus_RSRun  ERunStatus = 1 // 运行中
	ERunStatus_RSStop ERunStatus = 2 // 停止
)

// Enum value maps for ERunStatus.
var (
	ERunStatus_name = map[int32]string{
		0: "RSNull",
		1: "RSRun",
		2: "RSStop",
	}
	ERunStatus_value = map[string]int32{
		"RSNull": 0,
		"RSRun":  1,
		"RSStop": 2,
	}
)

func (x ERunStatus) Enum() *ERunStatus {
	p := new(ERunStatus)
	*p = x
	return p
}

func (x ERunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[5].Descriptor()
}

func (ERunStatus) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[5]
}

func (x ERunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERunStatus.Descriptor instead.
func (ERunStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{5}
}

// 合约状态
type EContractStatus int32

const (
	EContractStatus_CSNull           EContractStatus = 0 // 默认
	EContractStatus_CSTrading        EContractStatus = 1 // 合约有效
	EContractStatus_CSSingleExpired  EContractStatus = 2 // 独立预警合约过期
	EContractStatus_CSCombExpired1   EContractStatus = 3 // 组合预警合约1过期
	EContractStatus_CSCombExpired2   EContractStatus = 4 // 组合预警合约2过期
	EContractStatus_CSCombExpiredAll EContractStatus = 5 // 组合预警合约全部过期
)

// Enum value maps for EContractStatus.
var (
	EContractStatus_name = map[int32]string{
		0: "CSNull",
		1: "CSTrading",
		2: "CSSingleExpired",
		3: "CSCombExpired1",
		4: "CSCombExpired2",
		5: "CSCombExpiredAll",
	}
	EContractStatus_value = map[string]int32{
		"CSNull":           0,
		"CSTrading":        1,
		"CSSingleExpired":  2,
		"CSCombExpired1":   3,
		"CSCombExpired2":   4,
		"CSCombExpiredAll": 5,
	}
)

func (x EContractStatus) Enum() *EContractStatus {
	p := new(EContractStatus)
	*p = x
	return p
}

func (x EContractStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContractStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[6].Descriptor()
}

func (EContractStatus) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[6]
}

func (x EContractStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EContractStatus.Descriptor instead.
func (EContractStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{6}
}

// 通知事件类型
type ENotifyEventType int32

const (
	ENotifyEventType_NENull            ENotifyEventType = 0 // 默认
	ENotifyEventType_NETAdd            ENotifyEventType = 1 // 新增
	ENotifyEventType_NETDelete         ENotifyEventType = 2 // 删除
	ENotifyEventType_NETUpdate         ENotifyEventType = 3 // 修改
	ENotifyEventType_NETSetStatus      ENotifyEventType = 4 // 设置生效状态
	ENotifyEventType_NETRemonitor      ENotifyEventType = 5 // 重新监控，每日提醒任务交易日切换后要重新监控
	ENotifyEventType_NETExpired        ENotifyEventType = 6 // 合约过期
	ENotifyEventType_NETUpDwonWarn     ENotifyEventType = 7 // 合约涨跌预警触发
	ENotifyEventType_NETMainChangeWarn ENotifyEventType = 8 // 移仓换月预警触发
	ENotifyEventType_NETCombineWarn    ENotifyEventType = 9 // 组合预警触发
)

// Enum value maps for ENotifyEventType.
var (
	ENotifyEventType_name = map[int32]string{
		0: "NENull",
		1: "NETAdd",
		2: "NETDelete",
		3: "NETUpdate",
		4: "NETSetStatus",
		5: "NETRemonitor",
		6: "NETExpired",
		7: "NETUpDwonWarn",
		8: "NETMainChangeWarn",
		9: "NETCombineWarn",
	}
	ENotifyEventType_value = map[string]int32{
		"NENull":            0,
		"NETAdd":            1,
		"NETDelete":         2,
		"NETUpdate":         3,
		"NETSetStatus":      4,
		"NETRemonitor":      5,
		"NETExpired":        6,
		"NETUpDwonWarn":     7,
		"NETMainChangeWarn": 8,
		"NETCombineWarn":    9,
	}
)

func (x ENotifyEventType) Enum() *ENotifyEventType {
	p := new(ENotifyEventType)
	*p = x
	return p
}

func (x ENotifyEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotifyEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_common_proto_enumTypes[7].Descriptor()
}

func (ENotifyEventType) Type() protoreflect.EnumType {
	return &file_fip_def_common_proto_enumTypes[7]
}

func (x ENotifyEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENotifyEventType.Descriptor instead.
func (ENotifyEventType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{7}
}

// 合约信息
type ContractInfoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
	ContractID string   `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约ID/品种ID
}

func (x *ContractInfoElem) Reset() {
	*x = ContractInfoElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfoElem) ProtoMessage() {}

func (x *ContractInfoElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfoElem.ProtoReflect.Descriptor instead.
func (*ContractInfoElem) Descriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{0}
}

func (x *ContractInfoElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ContractInfoElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// 监控信息
type MonitorElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorID         uint64                `protobuf:"varint,1,opt,name=monitorID,proto3" json:"monitorID,omitempty"`                                            // 监控预警任务ID
	WarnID            uint64                `protobuf:"varint,2,opt,name=warnID,proto3" json:"warnID,omitempty"`                                                  // 预警ID，一个监控预警任务可能被触发多次
	UserID            string                `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`                                                   // 账号ID
	MonitorType       EMonitorType          `protobuf:"varint,4,opt,name=monitorType,proto3,enum=fippb.EMonitorType" json:"monitorType,omitempty"`                // 监控类型
	MonitorConType    EMonitorConditionType `protobuf:"varint,5,opt,name=monitorConType,proto3,enum=fippb.EMonitorConditionType" json:"monitorConType,omitempty"` // 监控条件类型
	NotifyType        ENotifyType           `protobuf:"varint,6,opt,name=notifyType,proto3,enum=fippb.ENotifyType" json:"notifyType,omitempty"`                   // 推送方式
	NotifyFrequency   ENotifyFrequency      `protobuf:"varint,7,opt,name=notifyFrequency,proto3,enum=fippb.ENotifyFrequency" json:"notifyFrequency,omitempty"`    // 推送频率
	ElemList          []*ContractInfoElem   `protobuf:"bytes,8,rep,name=elemList,proto3" json:"elemList,omitempty"`                                               // 合约信息：独立预警-1个、组合预警-2个、移仓换月-3个（第1个表示品种，第2个表示变化前的主力合约，若主力合约发生变化第3个表示变化后的主力合约）
	ContractStatus    EContractStatus       `protobuf:"varint,9,opt,name=contractStatus,proto3,enum=fippb.EContractStatus" json:"contractStatus,omitempty"`       // 合约有效性，标记contIDList中的合约是否下线过期
	PriceCondition    float64               `protobuf:"fixed64,10,opt,name=priceCondition,proto3" json:"priceCondition,omitempty"`                                // 价格类预警触发条件，适用于独立预警价格涨跌、独立预警日涨跌幅、组合预警价差
	PositionCondition uint64                `protobuf:"varint,11,opt,name=positionCondition,proto3" json:"positionCondition,omitempty"`                           // 持仓类预警触发条件，适用于组合预警的持仓差
	Message           string                `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`                                                // 备注，用户可为每个任务设置不超过20个字的备注信息
	MonitorStatus     EMonitorStatus        `protobuf:"varint,13,opt,name=monitorStatus,proto3,enum=fippb.EMonitorStatus" json:"monitorStatus,omitempty"`         // 监控状态
	RunStatus         ERunStatus            `protobuf:"varint,14,opt,name=runStatus,proto3,enum=fippb.ERunStatus" json:"runStatus,omitempty"`                     // 生效状态
	WarnTime          uint64                `protobuf:"varint,15,opt,name=warnTime,proto3" json:"warnTime,omitempty"`                                             // 预警时间，unix时间戳，毫秒
	CreateTime        uint64                `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`                                         // 创建时间，unix时间戳，毫秒
	UpdateTime        uint64                `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                         // 更新时间，unix时间戳，毫秒
}

func (x *MonitorElem) Reset() {
	*x = MonitorElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorElem) ProtoMessage() {}

func (x *MonitorElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorElem.ProtoReflect.Descriptor instead.
func (*MonitorElem) Descriptor() ([]byte, []int) {
	return file_fip_def_common_proto_rawDescGZIP(), []int{1}
}

func (x *MonitorElem) GetMonitorID() uint64 {
	if x != nil {
		return x.MonitorID
	}
	return 0
}

func (x *MonitorElem) GetWarnID() uint64 {
	if x != nil {
		return x.WarnID
	}
	return 0
}

func (x *MonitorElem) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MonitorElem) GetMonitorType() EMonitorType {
	if x != nil {
		return x.MonitorType
	}
	return EMonitorType_MTNull
}

func (x *MonitorElem) GetMonitorConType() EMonitorConditionType {
	if x != nil {
		return x.MonitorConType
	}
	return EMonitorConditionType_MCTNull
}

func (x *MonitorElem) GetNotifyType() ENotifyType {
	if x != nil {
		return x.NotifyType
	}
	return ENotifyType_NTNull
}

func (x *MonitorElem) GetNotifyFrequency() ENotifyFrequency {
	if x != nil {
		return x.NotifyFrequency
	}
	return ENotifyFrequency_NFNull
}

func (x *MonitorElem) GetElemList() []*ContractInfoElem {
	if x != nil {
		return x.ElemList
	}
	return nil
}

func (x *MonitorElem) GetContractStatus() EContractStatus {
	if x != nil {
		return x.ContractStatus
	}
	return EContractStatus_CSNull
}

func (x *MonitorElem) GetPriceCondition() float64 {
	if x != nil {
		return x.PriceCondition
	}
	return 0
}

func (x *MonitorElem) GetPositionCondition() uint64 {
	if x != nil {
		return x.PositionCondition
	}
	return 0
}

func (x *MonitorElem) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MonitorElem) GetMonitorStatus() EMonitorStatus {
	if x != nil {
		return x.MonitorStatus
	}
	return EMonitorStatus_MSNull
}

func (x *MonitorElem) GetRunStatus() ERunStatus {
	if x != nil {
		return x.RunStatus
	}
	return ERunStatus_RSNull
}

func (x *MonitorElem) GetWarnTime() uint64 {
	if x != nil {
		return x.WarnTime
	}
	return 0
}

func (x *MonitorElem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MonitorElem) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_fip_def_common_proto protoreflect.FileDescriptor

var file_fip_def_common_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66,
	0x69, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x63, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x22, 0xfe, 0x05, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x77, 0x61, 0x72, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x37, 0x0a, 0x0c, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0xe7,
	0x01, 0x0a, 0x15, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x43, 0x54, 0x4e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x43, 0x54, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x43, 0x54, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x43, 0x54, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x43,
	0x54, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x43, 0x54, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x43, 0x54, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x64,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x43, 0x54, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x66, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x43, 0x54,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x43, 0x54, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x67, 0x2a, 0x3f, 0x0a, 0x0b, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x54, 0x4e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x54, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x54, 0x41, 0x70, 0x70,
	0x4d, 0x73, 0x67, 0x50, 0x75, 0x73, 0x68, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x10, 0x45, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x46, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x46, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x46, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0e, 0x45,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x53, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x53, 0x57, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x0a, 0x45, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x53, 0x4e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x52, 0x75, 0x6e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x53, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x0f, 0x45, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x53, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x53, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x53, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x53, 0x43, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x31, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x53, 0x43, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x32, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x53, 0x43, 0x6f, 0x6d, 0x62, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x10, 0x05, 0x2a, 0xba, 0x01, 0x0a, 0x10,
	0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x45, 0x54, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x52,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45,
	0x54, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45,
	0x54, 0x55, 0x70, 0x44, 0x77, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x45, 0x54, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x09, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64,
	0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_common_proto_rawDescOnce sync.Once
	file_fip_def_common_proto_rawDescData = file_fip_def_common_proto_rawDesc
)

func file_fip_def_common_proto_rawDescGZIP() []byte {
	file_fip_def_common_proto_rawDescOnce.Do(func() {
		file_fip_def_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_common_proto_rawDescData)
	})
	return file_fip_def_common_proto_rawDescData
}

var file_fip_def_common_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_fip_def_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fip_def_common_proto_goTypes = []interface{}{
	(EMonitorType)(0),          // 0: fippb.EMonitorType
	(EMonitorConditionType)(0), // 1: fippb.EMonitorConditionType
	(ENotifyType)(0),           // 2: fippb.ENotifyType
	(ENotifyFrequency)(0),      // 3: fippb.ENotifyFrequency
	(EMonitorStatus)(0),        // 4: fippb.EMonitorStatus
	(ERunStatus)(0),            // 5: fippb.ERunStatus
	(EContractStatus)(0),       // 6: fippb.EContractStatus
	(ENotifyEventType)(0),      // 7: fippb.ENotifyEventType
	(*ContractInfoElem)(nil),   // 8: fippb.ContractInfoElem
	(*MonitorElem)(nil),        // 9: fippb.MonitorElem
	(EExchgID)(0),              // 10: fippb.EExchgID
}
var file_fip_def_common_proto_depIdxs = []int32{
	10, // 0: fippb.ContractInfoElem.exchangeID:type_name -> fippb.EExchgID
	0,  // 1: fippb.MonitorElem.monitorType:type_name -> fippb.EMonitorType
	1,  // 2: fippb.MonitorElem.monitorConType:type_name -> fippb.EMonitorConditionType
	2,  // 3: fippb.MonitorElem.notifyType:type_name -> fippb.ENotifyType
	3,  // 4: fippb.MonitorElem.notifyFrequency:type_name -> fippb.ENotifyFrequency
	8,  // 5: fippb.MonitorElem.elemList:type_name -> fippb.ContractInfoElem
	6,  // 6: fippb.MonitorElem.contractStatus:type_name -> fippb.EContractStatus
	4,  // 7: fippb.MonitorElem.monitorStatus:type_name -> fippb.EMonitorStatus
	5,  // 8: fippb.MonitorElem.runStatus:type_name -> fippb.ERunStatus
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fip_def_common_proto_init() }
func file_fip_def_common_proto_init() {
	if File_fip_def_common_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_def_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfoElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_common_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_common_proto_goTypes,
		DependencyIndexes: file_fip_def_common_proto_depIdxs,
		EnumInfos:         file_fip_def_common_proto_enumTypes,
		MessageInfos:      file_fip_def_common_proto_msgTypes,
	}.Build()
	File_fip_def_common_proto = out.File
	file_fip_def_common_proto_rawDesc = nil
	file_fip_def_common_proto_goTypes = nil
	file_fip_def_common_proto_depIdxs = nil
}
