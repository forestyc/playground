//*
// Copyright (C) 2017-2022，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 贵金属现货业务（Precious group metal spot）类型及数据定义
//        针对上海黄金交易所行情接入需求（2022）
// @author mengxin@dce.com.cn
//
// @date 2022-5-10
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def_pgm.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPgmErrorCode int32

const (
	EPgmErrorCode_PgmAll_Success              EPgmErrorCode = 0   // 表示成功
	EPgmErrorCode_PgmReal_InvalidExchangeId   EPgmErrorCode = 100 // 交易所id错误
	EPgmErrorCode_PgmReal_PriceError          EPgmErrorCode = 101 // 获取分价数据包错误
	EPgmErrorCode_PgmReal_VolumeError         EPgmErrorCode = 102 // 获取分笔数据包错误
	EPgmErrorCode_PgmHis_Error                EPgmErrorCode = 200 // 错误
	EPgmErrorCode_PgmHis_InvalidParams        EPgmErrorCode = 201 // 无效参数
	EPgmErrorCode_PgmHis_InitMore             EPgmErrorCode = 202 // 重复初始化
	EPgmErrorCode_PgmHis_InitFirst            EPgmErrorCode = 203 // 必须先初始化
	EPgmErrorCode_PgmHis_SendError            EPgmErrorCode = 204 // 发送数据错误
	EPgmErrorCode_PgmHis_MmapError            EPgmErrorCode = 205 // mmap内存映射错误
	EPgmErrorCode_PgmHis_OpenError            EPgmErrorCode = 206 // 打开文件错误
	EPgmErrorCode_PgmHis_WriteError           EPgmErrorCode = 207 // 写文件错误
	EPgmErrorCode_PgmHis_EmptyData            EPgmErrorCode = 208 // 空数据
	EPgmErrorCode_PgmHis_AllocMemError        EPgmErrorCode = 209 // 申请内存错误
	EPgmErrorCode_PgmHis_LoadError            EPgmErrorCode = 210 // 加载数据错误
	EPgmErrorCode_PgmHis_PBUnMarshalError     EPgmErrorCode = 211 // pb包序列化错误
	EPgmErrorCode_PgmHis_OtherError           EPgmErrorCode = 299 // 历史的其它错误
	EPgmErrorCode_PgmManage_InvalidExchangeId EPgmErrorCode = 300 // 交易所id错误
	EPgmErrorCode_PgmManage_EmptyData         EPgmErrorCode = 301 // 空数据
)

// Enum value maps for EPgmErrorCode.
var (
	EPgmErrorCode_name = map[int32]string{
		0:   "PgmAll_Success",
		100: "PgmReal_InvalidExchangeId",
		101: "PgmReal_PriceError",
		102: "PgmReal_VolumeError",
		200: "PgmHis_Error",
		201: "PgmHis_InvalidParams",
		202: "PgmHis_InitMore",
		203: "PgmHis_InitFirst",
		204: "PgmHis_SendError",
		205: "PgmHis_MmapError",
		206: "PgmHis_OpenError",
		207: "PgmHis_WriteError",
		208: "PgmHis_EmptyData",
		209: "PgmHis_AllocMemError",
		210: "PgmHis_LoadError",
		211: "PgmHis_PBUnMarshalError",
		299: "PgmHis_OtherError",
		300: "PgmManage_InvalidExchangeId",
		301: "PgmManage_EmptyData",
	}
	EPgmErrorCode_value = map[string]int32{
		"PgmAll_Success":              0,
		"PgmReal_InvalidExchangeId":   100,
		"PgmReal_PriceError":          101,
		"PgmReal_VolumeError":         102,
		"PgmHis_Error":                200,
		"PgmHis_InvalidParams":        201,
		"PgmHis_InitMore":             202,
		"PgmHis_InitFirst":            203,
		"PgmHis_SendError":            204,
		"PgmHis_MmapError":            205,
		"PgmHis_OpenError":            206,
		"PgmHis_WriteError":           207,
		"PgmHis_EmptyData":            208,
		"PgmHis_AllocMemError":        209,
		"PgmHis_LoadError":            210,
		"PgmHis_PBUnMarshalError":     211,
		"PgmHis_OtherError":           299,
		"PgmManage_InvalidExchangeId": 300,
		"PgmManage_EmptyData":         301,
	}
)

func (x EPgmErrorCode) Enum() *EPgmErrorCode {
	p := new(EPgmErrorCode)
	*p = x
	return p
}

func (x EPgmErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[0].Descriptor()
}

func (EPgmErrorCode) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[0]
}

func (x EPgmErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmErrorCode.Descriptor instead.
func (EPgmErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{0}
}

// 贵金属业务合约类型 注意：不要与EContractType重复,不要与ESecStockType重复
type EPgmContractType int32

const (
	EPgmContractType_EPgmContractType_ALL EPgmContractType = 0    //泛指所有贵金属业务
	EPgmContractType_EPgmContractType_SGE EPgmContractType = 2001 //上海黄金业务(默认值)
)

// Enum value maps for EPgmContractType.
var (
	EPgmContractType_name = map[int32]string{
		0:    "EPgmContractType_ALL",
		2001: "EPgmContractType_SGE",
	}
	EPgmContractType_value = map[string]int32{
		"EPgmContractType_ALL": 0,
		"EPgmContractType_SGE": 2001,
	}
)

func (x EPgmContractType) Enum() *EPgmContractType {
	p := new(EPgmContractType)
	*p = x
	return p
}

func (x EPgmContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[1].Descriptor()
}

func (EPgmContractType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[1]
}

func (x EPgmContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmContractType.Descriptor instead.
func (EPgmContractType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{1}
}

// PGM 合约状态类型（竞价bid）
type EPgmInstStateType int32

const (
	EPgmInstStateType_PGMIST_Bid_Initializing         EPgmInstStateType = 0   //0-初始化中,
	EPgmInstStateType_PGMIST_Bid_Initialized          EPgmInstStateType = 1   //1-初始化完成，
	EPgmInstStateType_PGMIST_Bid_Open                 EPgmInstStateType = 2   //2-开盘，
	EPgmInstStateType_PGMIST_Bid_AuctionOrdering      EPgmInstStateType = 3   //3-竞价报单，
	EPgmInstStateType_PGMIST_Bid_AuctionMatch         EPgmInstStateType = 4   //4-竞价撮合，
	EPgmInstStateType_PGMIST_Bid_Continous            EPgmInstStateType = 5   //5-连续交易，
	EPgmInstStateType_PGMIST_Bid_Pause                EPgmInstStateType = 6   //6-暂停，
	EPgmInstStateType_PGMIST_Bid_DelivDecl            EPgmInstStateType = 7   //7-交割申报，
	EPgmInstStateType_PGMIST_Bid_DelivDeclEnds        EPgmInstStateType = 8   //8-交割申报结束，
	EPgmInstStateType_PGMIST_Bid_NeutralWarehouseDecl EPgmInstStateType = 9   //9-中立仓申报，
	EPgmInstStateType_PGMIST_Bid_DelivDeclMatch       EPgmInstStateType = 10  //A-交割申报撮合,
	EPgmInstStateType_PGMIST_Bid_Close                EPgmInstStateType = 11  //B-收盘
	EPgmInstStateType_PGMIST_Bid_Unknow               EPgmInstStateType = 127 //未知状态类型
)

// Enum value maps for EPgmInstStateType.
var (
	EPgmInstStateType_name = map[int32]string{
		0:   "PGMIST_Bid_Initializing",
		1:   "PGMIST_Bid_Initialized",
		2:   "PGMIST_Bid_Open",
		3:   "PGMIST_Bid_AuctionOrdering",
		4:   "PGMIST_Bid_AuctionMatch",
		5:   "PGMIST_Bid_Continous",
		6:   "PGMIST_Bid_Pause",
		7:   "PGMIST_Bid_DelivDecl",
		8:   "PGMIST_Bid_DelivDeclEnds",
		9:   "PGMIST_Bid_NeutralWarehouseDecl",
		10:  "PGMIST_Bid_DelivDeclMatch",
		11:  "PGMIST_Bid_Close",
		127: "PGMIST_Bid_Unknow",
	}
	EPgmInstStateType_value = map[string]int32{
		"PGMIST_Bid_Initializing":         0,
		"PGMIST_Bid_Initialized":          1,
		"PGMIST_Bid_Open":                 2,
		"PGMIST_Bid_AuctionOrdering":      3,
		"PGMIST_Bid_AuctionMatch":         4,
		"PGMIST_Bid_Continous":            5,
		"PGMIST_Bid_Pause":                6,
		"PGMIST_Bid_DelivDecl":            7,
		"PGMIST_Bid_DelivDeclEnds":        8,
		"PGMIST_Bid_NeutralWarehouseDecl": 9,
		"PGMIST_Bid_DelivDeclMatch":       10,
		"PGMIST_Bid_Close":                11,
		"PGMIST_Bid_Unknow":               127,
	}
)

func (x EPgmInstStateType) Enum() *EPgmInstStateType {
	p := new(EPgmInstStateType)
	*p = x
	return p
}

func (x EPgmInstStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmInstStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[2].Descriptor()
}

func (EPgmInstStateType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[2]
}

func (x EPgmInstStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmInstStateType.Descriptor instead.
func (EPgmInstStateType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{2}
}

// PGM 合约状态类型（询价inquiry）暂不支持
type EPgmInstStateTypeForInquiry int32

const (
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_itializing  EPgmInstStateTypeForInquiry = 0   //0-初始化中;
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Initialized EPgmInstStateTypeForInquiry = 1   //1-初始化完成;
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Open        EPgmInstStateTypeForInquiry = 2   //2-开盘;
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Continous   EPgmInstStateTypeForInquiry = 3   //3-连续交易;
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Pause       EPgmInstStateTypeForInquiry = 4   //4-暂停;
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Close       EPgmInstStateTypeForInquiry = 5   //5-收盘
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_RegEnds     EPgmInstStateTypeForInquiry = 6   //6-登记结束
	EPgmInstStateTypeForInquiry_PGMIST_Inquiry_Unknow      EPgmInstStateTypeForInquiry = 127 //未知状态类型
)

// Enum value maps for EPgmInstStateTypeForInquiry.
var (
	EPgmInstStateTypeForInquiry_name = map[int32]string{
		0:   "PGMIST_Inquiry_itializing",
		1:   "PGMIST_Inquiry_Initialized",
		2:   "PGMIST_Inquiry_Open",
		3:   "PGMIST_Inquiry_Continous",
		4:   "PGMIST_Inquiry_Pause",
		5:   "PGMIST_Inquiry_Close",
		6:   "PGMIST_Inquiry_RegEnds",
		127: "PGMIST_Inquiry_Unknow",
	}
	EPgmInstStateTypeForInquiry_value = map[string]int32{
		"PGMIST_Inquiry_itializing":  0,
		"PGMIST_Inquiry_Initialized": 1,
		"PGMIST_Inquiry_Open":        2,
		"PGMIST_Inquiry_Continous":   3,
		"PGMIST_Inquiry_Pause":       4,
		"PGMIST_Inquiry_Close":       5,
		"PGMIST_Inquiry_RegEnds":     6,
		"PGMIST_Inquiry_Unknow":      127,
	}
)

func (x EPgmInstStateTypeForInquiry) Enum() *EPgmInstStateTypeForInquiry {
	p := new(EPgmInstStateTypeForInquiry)
	*p = x
	return p
}

func (x EPgmInstStateTypeForInquiry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmInstStateTypeForInquiry) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[3].Descriptor()
}

func (EPgmInstStateTypeForInquiry) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[3]
}

func (x EPgmInstStateTypeForInquiry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmInstStateTypeForInquiry.Descriptor instead.
func (EPgmInstStateTypeForInquiry) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{3}
}

// PGM 合约状态类型（报价quote price）暂不支持
type EPgmInstStateTypeForQuote int32

const (
	EPgmInstStateTypeForQuote_PGMIST_Quote_Initializing   EPgmInstStateTypeForQuote = 0   //0-初始化中;
	EPgmInstStateTypeForQuote_PGMIST_Quote_Initialized    EPgmInstStateTypeForQuote = 1   //1-初始化完成;
	EPgmInstStateTypeForQuote_PGMIST_Quote_Open           EPgmInstStateTypeForQuote = 2   //2-开盘;
	EPgmInstStateTypeForQuote_PGMIST_Quote_BidderOrdering EPgmInstStateTypeForQuote = 3   //3-报价商报单；
	EPgmInstStateTypeForQuote_PGMIST_Quote_Continous      EPgmInstStateTypeForQuote = 4   //4-连续交易;
	EPgmInstStateTypeForQuote_PGMIST_Quote_Pause          EPgmInstStateTypeForQuote = 5   //5-暂停;
	EPgmInstStateTypeForQuote_PGMIST_Quote_Close          EPgmInstStateTypeForQuote = 6   //6-收盘
	EPgmInstStateTypeForQuote_PGMIST_Quote_Unknow         EPgmInstStateTypeForQuote = 127 //未知状态类型
)

// Enum value maps for EPgmInstStateTypeForQuote.
var (
	EPgmInstStateTypeForQuote_name = map[int32]string{
		0:   "PGMIST_Quote_Initializing",
		1:   "PGMIST_Quote_Initialized",
		2:   "PGMIST_Quote_Open",
		3:   "PGMIST_Quote_BidderOrdering",
		4:   "PGMIST_Quote_Continous",
		5:   "PGMIST_Quote_Pause",
		6:   "PGMIST_Quote_Close",
		127: "PGMIST_Quote_Unknow",
	}
	EPgmInstStateTypeForQuote_value = map[string]int32{
		"PGMIST_Quote_Initializing":   0,
		"PGMIST_Quote_Initialized":    1,
		"PGMIST_Quote_Open":           2,
		"PGMIST_Quote_BidderOrdering": 3,
		"PGMIST_Quote_Continous":      4,
		"PGMIST_Quote_Pause":          5,
		"PGMIST_Quote_Close":          6,
		"PGMIST_Quote_Unknow":         127,
	}
)

func (x EPgmInstStateTypeForQuote) Enum() *EPgmInstStateTypeForQuote {
	p := new(EPgmInstStateTypeForQuote)
	*p = x
	return p
}

func (x EPgmInstStateTypeForQuote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmInstStateTypeForQuote) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[4].Descriptor()
}

func (EPgmInstStateTypeForQuote) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[4]
}

func (x EPgmInstStateTypeForQuote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmInstStateTypeForQuote.Descriptor instead.
func (EPgmInstStateTypeForQuote) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{4}
}

// PGM品种类别
type EPgmVarietyType int32

const (
	EPgmVarietyType_PgmVariety_Null      EPgmVarietyType = 0 //未知品种
	EPgmVarietyType_PgmVariety_Gold      EPgmVarietyType = 1 //1-黄金
	EPgmVarietyType_PgmVariety_Platinum  EPgmVarietyType = 2 //2-铂金
	EPgmVarietyType_PgmVariety_Silver    EPgmVarietyType = 3 //3-白银
	EPgmVarietyType_PgmVariety_Palladium EPgmVarietyType = 4 //4-钯金
)

// Enum value maps for EPgmVarietyType.
var (
	EPgmVarietyType_name = map[int32]string{
		0: "PgmVariety_Null",
		1: "PgmVariety_Gold",
		2: "PgmVariety_Platinum",
		3: "PgmVariety_Silver",
		4: "PgmVariety_Palladium",
	}
	EPgmVarietyType_value = map[string]int32{
		"PgmVariety_Null":      0,
		"PgmVariety_Gold":      1,
		"PgmVariety_Platinum":  2,
		"PgmVariety_Silver":    3,
		"PgmVariety_Palladium": 4,
	}
)

func (x EPgmVarietyType) Enum() *EPgmVarietyType {
	p := new(EPgmVarietyType)
	*p = x
	return p
}

func (x EPgmVarietyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmVarietyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[5].Descriptor()
}

func (EPgmVarietyType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[5]
}

func (x EPgmVarietyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmVarietyType.Descriptor instead.
func (EPgmVarietyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{5}
}

// PGM活跃标志
type EPgmFlagType int32

const (
	EPgmFlagType_Pgm_Inactive EPgmFlagType = 0 //0-否
	EPgmFlagType_Pgm_Active   EPgmFlagType = 1 //1-活跃
)

// Enum value maps for EPgmFlagType.
var (
	EPgmFlagType_name = map[int32]string{
		0: "Pgm_Inactive",
		1: "Pgm_Active",
	}
	EPgmFlagType_value = map[string]int32{
		"Pgm_Inactive": 0,
		"Pgm_Active":   1,
	}
)

func (x EPgmFlagType) Enum() *EPgmFlagType {
	p := new(EPgmFlagType)
	*p = x
	return p
}

func (x EPgmFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[6].Descriptor()
}

func (EPgmFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[6]
}

func (x EPgmFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmFlagType.Descriptor instead.
func (EPgmFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{6}
}

// PGM重量单位
type EPgmWeightUnit int32

const (
	EPgmWeightUnit_PgmWeightUnit_Null     EPgmWeightUnit = 0 //未知重量单位
	EPgmWeightUnit_PgmWeightUnit_Gram     EPgmWeightUnit = 1 //01-克
	EPgmWeightUnit_PgmWeightUnit_Kilogram EPgmWeightUnit = 2 //02-千克
	EPgmWeightUnit_PgmWeightUnit_Ounce    EPgmWeightUnit = 3 //03-盎司
)

// Enum value maps for EPgmWeightUnit.
var (
	EPgmWeightUnit_name = map[int32]string{
		0: "PgmWeightUnit_Null",
		1: "PgmWeightUnit_Gram",
		2: "PgmWeightUnit_Kilogram",
		3: "PgmWeightUnit_Ounce",
	}
	EPgmWeightUnit_value = map[string]int32{
		"PgmWeightUnit_Null":     0,
		"PgmWeightUnit_Gram":     1,
		"PgmWeightUnit_Kilogram": 2,
		"PgmWeightUnit_Ounce":    3,
	}
)

func (x EPgmWeightUnit) Enum() *EPgmWeightUnit {
	p := new(EPgmWeightUnit)
	*p = x
	return p
}

func (x EPgmWeightUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmWeightUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[7].Descriptor()
}

func (EPgmWeightUnit) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[7]
}

func (x EPgmWeightUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmWeightUnit.Descriptor instead.
func (EPgmWeightUnit) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{7}
}

// PGM市场代码(MARKET_ID_TYPE) 0-00-现货,1-01-即期,2-02-递延,3-03-询价市场,4-04-定价市场,10-10-保证金询价
type EPgmMarketID int32

const (
	EPgmMarketID_PgmMarketID_Spot          EPgmMarketID = 0   //00-现货
	EPgmMarketID_PgmMarketID_Immediate     EPgmMarketID = 1   //01-即期
	EPgmMarketID_PgmMarketID_Deferment     EPgmMarketID = 2   //02-递延
	EPgmMarketID_PgmMarketID_InquiryMarket EPgmMarketID = 3   //03-询价市场
	EPgmMarketID_PgmMarketID_PricingMarket EPgmMarketID = 4   //04-定价市场
	EPgmMarketID_PgmMarketID_MarginInquiry EPgmMarketID = 10  //10-保证金询价
	EPgmMarketID_PgmMarketID_Unknow        EPgmMarketID = 127 //未知MarketID
)

// Enum value maps for EPgmMarketID.
var (
	EPgmMarketID_name = map[int32]string{
		0:   "PgmMarketID_Spot",
		1:   "PgmMarketID_Immediate",
		2:   "PgmMarketID_Deferment",
		3:   "PgmMarketID_InquiryMarket",
		4:   "PgmMarketID_PricingMarket",
		10:  "PgmMarketID_MarginInquiry",
		127: "PgmMarketID_Unknow",
	}
	EPgmMarketID_value = map[string]int32{
		"PgmMarketID_Spot":          0,
		"PgmMarketID_Immediate":     1,
		"PgmMarketID_Deferment":     2,
		"PgmMarketID_InquiryMarket": 3,
		"PgmMarketID_PricingMarket": 4,
		"PgmMarketID_MarginInquiry": 10,
		"PgmMarketID_Unknow":        127,
	}
)

func (x EPgmMarketID) Enum() *EPgmMarketID {
	p := new(EPgmMarketID)
	*p = x
	return p
}

func (x EPgmMarketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMarketID) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[8].Descriptor()
}

func (EPgmMarketID) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[8]
}

func (x EPgmMarketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMarketID.Descriptor instead.
func (EPgmMarketID) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{8}
}

// PGM市场状态
type EPgmMarketState int32

const (
	EPgmMarketState_PgmMarketState_Itializing         EPgmMarketState = 0   //0-初始化中;
	EPgmMarketState_PgmMarketState_Initialized        EPgmMarketState = 1   //1-初始化完成;
	EPgmMarketState_PgmMarketState_Open               EPgmMarketState = 2   //2-开盘;
	EPgmMarketState_PgmMarketState_Continous          EPgmMarketState = 3   //3-连续交易;
	EPgmMarketState_PgmMarketState_Pause              EPgmMarketState = 4   //4-暂停;
	EPgmMarketState_PgmMarketState_Close              EPgmMarketState = 5   //5-收盘
	EPgmMarketState_PgmMarketState_PendingLiquidation EPgmMarketState = 6   //6-等待清算
	EPgmMarketState_PgmMarketState_Unknow             EPgmMarketState = 127 //未知市场状态
)

// Enum value maps for EPgmMarketState.
var (
	EPgmMarketState_name = map[int32]string{
		0:   "PgmMarketState_Itializing",
		1:   "PgmMarketState_Initialized",
		2:   "PgmMarketState_Open",
		3:   "PgmMarketState_Continous",
		4:   "PgmMarketState_Pause",
		5:   "PgmMarketState_Close",
		6:   "PgmMarketState_PendingLiquidation",
		127: "PgmMarketState_Unknow",
	}
	EPgmMarketState_value = map[string]int32{
		"PgmMarketState_Itializing":         0,
		"PgmMarketState_Initialized":        1,
		"PgmMarketState_Open":               2,
		"PgmMarketState_Continous":          3,
		"PgmMarketState_Pause":              4,
		"PgmMarketState_Close":              5,
		"PgmMarketState_PendingLiquidation": 6,
		"PgmMarketState_Unknow":             127,
	}
)

func (x EPgmMarketState) Enum() *EPgmMarketState {
	p := new(EPgmMarketState)
	*p = x
	return p
}

func (x EPgmMarketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMarketState) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[9].Descriptor()
}

func (EPgmMarketState) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[9]
}

func (x EPgmMarketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMarketState.Descriptor instead.
func (EPgmMarketState) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{9}
}

// PGM 市场类型 MARKET_TYPE_TYPE： s-现货,d-递延,f-期货,w-远期/即期,q-询价，p-报价保证金，r-保证金询价
type EPgmMarketType int32

const (
	EPgmMarketType_PgmMarketType_Spot          EPgmMarketType = 0   //s-现货
	EPgmMarketType_PgmMarketType_Deferment     EPgmMarketType = 1   //d-递延
	EPgmMarketType_PgmMarketType_Future        EPgmMarketType = 2   //f-递延
	EPgmMarketType_PgmMarketType_Swap          EPgmMarketType = 3   //w-远期/即期
	EPgmMarketType_PgmMarketType_InquiryMarket EPgmMarketType = 4   //q-询价市场
	EPgmMarketType_PgmMarketType_PricingMarket EPgmMarketType = 5   //p-定价市场
	EPgmMarketType_PgmMarketType_MarginInquiry EPgmMarketType = 6   //r-保证金询价
	EPgmMarketType_PgmMarketType_Unknow        EPgmMarketType = 127 // 未知市场类型
)

// Enum value maps for EPgmMarketType.
var (
	EPgmMarketType_name = map[int32]string{
		0:   "PgmMarketType_Spot",
		1:   "PgmMarketType_Deferment",
		2:   "PgmMarketType_Future",
		3:   "PgmMarketType_Swap",
		4:   "PgmMarketType_InquiryMarket",
		5:   "PgmMarketType_PricingMarket",
		6:   "PgmMarketType_MarginInquiry",
		127: "PgmMarketType_Unknow",
	}
	EPgmMarketType_value = map[string]int32{
		"PgmMarketType_Spot":          0,
		"PgmMarketType_Deferment":     1,
		"PgmMarketType_Future":        2,
		"PgmMarketType_Swap":          3,
		"PgmMarketType_InquiryMarket": 4,
		"PgmMarketType_PricingMarket": 5,
		"PgmMarketType_MarginInquiry": 6,
		"PgmMarketType_Unknow":        127,
	}
)

func (x EPgmMarketType) Enum() *EPgmMarketType {
	p := new(EPgmMarketType)
	*p = x
	return p
}

func (x EPgmMarketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMarketType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[10].Descriptor()
}

func (EPgmMarketType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[10]
}

func (x EPgmMarketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMarketType.Descriptor instead.
func (EPgmMarketType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{10}
}

// PGM 期限类型
type EPgmPeriodType int32

const (
	EPgmPeriodType_PgmPeriodType_Today    EPgmPeriodType = 0   //TODAY
	EPgmPeriodType_PgmPeriodType_Tomorrow EPgmPeriodType = 1   //TOMORROW
	EPgmPeriodType_PgmPeriodType_Spot     EPgmPeriodType = 2   //SPOT
	EPgmPeriodType_PgmPeriodType_O_N      EPgmPeriodType = 3   //O/N
	EPgmPeriodType_PgmPeriodType_1Week    EPgmPeriodType = 4   //1W
	EPgmPeriodType_PgmPeriodType_2Weeks   EPgmPeriodType = 5   //2W
	EPgmPeriodType_PgmPeriodType_3Weeks   EPgmPeriodType = 6   //3W
	EPgmPeriodType_PgmPeriodType_1Month   EPgmPeriodType = 7   //1M
	EPgmPeriodType_PgmPeriodType_2Months  EPgmPeriodType = 8   //2M
	EPgmPeriodType_PgmPeriodType_3Months  EPgmPeriodType = 9   //3M
	EPgmPeriodType_PgmPeriodType_4Month   EPgmPeriodType = 10  //4M
	EPgmPeriodType_PgmPeriodType_5Months  EPgmPeriodType = 11  //5M
	EPgmPeriodType_PgmPeriodType_6Months  EPgmPeriodType = 12  //6M
	EPgmPeriodType_PgmPeriodType_9Month   EPgmPeriodType = 13  //9M
	EPgmPeriodType_PgmPeriodType_1Year    EPgmPeriodType = 14  //1Y
	EPgmPeriodType_PgmPeriodType_Broken   EPgmPeriodType = 15  //3M
	EPgmPeriodType_PgmPeriodType_Unknow   EPgmPeriodType = 127 // 未知期限类型
)

// Enum value maps for EPgmPeriodType.
var (
	EPgmPeriodType_name = map[int32]string{
		0:   "PgmPeriodType_Today",
		1:   "PgmPeriodType_Tomorrow",
		2:   "PgmPeriodType_Spot",
		3:   "PgmPeriodType_O_N",
		4:   "PgmPeriodType_1Week",
		5:   "PgmPeriodType_2Weeks",
		6:   "PgmPeriodType_3Weeks",
		7:   "PgmPeriodType_1Month",
		8:   "PgmPeriodType_2Months",
		9:   "PgmPeriodType_3Months",
		10:  "PgmPeriodType_4Month",
		11:  "PgmPeriodType_5Months",
		12:  "PgmPeriodType_6Months",
		13:  "PgmPeriodType_9Month",
		14:  "PgmPeriodType_1Year",
		15:  "PgmPeriodType_Broken",
		127: "PgmPeriodType_Unknow",
	}
	EPgmPeriodType_value = map[string]int32{
		"PgmPeriodType_Today":    0,
		"PgmPeriodType_Tomorrow": 1,
		"PgmPeriodType_Spot":     2,
		"PgmPeriodType_O_N":      3,
		"PgmPeriodType_1Week":    4,
		"PgmPeriodType_2Weeks":   5,
		"PgmPeriodType_3Weeks":   6,
		"PgmPeriodType_1Month":   7,
		"PgmPeriodType_2Months":  8,
		"PgmPeriodType_3Months":  9,
		"PgmPeriodType_4Month":   10,
		"PgmPeriodType_5Months":  11,
		"PgmPeriodType_6Months":  12,
		"PgmPeriodType_9Month":   13,
		"PgmPeriodType_1Year":    14,
		"PgmPeriodType_Broken":   15,
		"PgmPeriodType_Unknow":   127,
	}
)

func (x EPgmPeriodType) Enum() *EPgmPeriodType {
	p := new(EPgmPeriodType)
	*p = x
	return p
}

func (x EPgmPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[11].Descriptor()
}

func (EPgmPeriodType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[11]
}

func (x EPgmPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmPeriodType.Descriptor instead.
func (EPgmPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{11}
}

// PGM 价格类型
type EPgmPriceType int32

const (
	EPgmPriceType_PgmPriceType_Null        EPgmPriceType = 0
	EPgmPriceType_PgmPriceType_YuanPerGram EPgmPriceType = 1 //精度6位-精确到分-黄金/铂金/钯金：元/克
	EPgmPriceType_PgmPriceType_YuanPerKg   EPgmPriceType = 2 //精度- 0.000001元 --白银：元/千克
)

// Enum value maps for EPgmPriceType.
var (
	EPgmPriceType_name = map[int32]string{
		0: "PgmPriceType_Null",
		1: "PgmPriceType_YuanPerGram",
		2: "PgmPriceType_YuanPerKg",
	}
	EPgmPriceType_value = map[string]int32{
		"PgmPriceType_Null":        0,
		"PgmPriceType_YuanPerGram": 1,
		"PgmPriceType_YuanPerKg":   2,
	}
)

func (x EPgmPriceType) Enum() *EPgmPriceType {
	p := new(EPgmPriceType)
	*p = x
	return p
}

func (x EPgmPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[12].Descriptor()
}

func (EPgmPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[12]
}

func (x EPgmPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmPriceType.Descriptor instead.
func (EPgmPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{12}
}

// PGM 申报阶段、申报方式
type EPgmC1Type int32

const (
	EPgmC1Type_PgmC1Type_Null              EPgmC1Type = 0
	EPgmC1Type_PgmC1Type_MarketDecl        EPgmC1Type = 1 //1-市场申报；
	EPgmC1Type_PgmC1Type_SupplementaryDecl EPgmC1Type = 2 //2-补充申报；
	EPgmC1Type_PgmC1Type_ApportionmentDecl EPgmC1Type = 3 //3-分摊申报
)

// Enum value maps for EPgmC1Type.
var (
	EPgmC1Type_name = map[int32]string{
		0: "PgmC1Type_Null",
		1: "PgmC1Type_MarketDecl",
		2: "PgmC1Type_SupplementaryDecl",
		3: "PgmC1Type_ApportionmentDecl",
	}
	EPgmC1Type_value = map[string]int32{
		"PgmC1Type_Null":              0,
		"PgmC1Type_MarketDecl":        1,
		"PgmC1Type_SupplementaryDecl": 2,
		"PgmC1Type_ApportionmentDecl": 3,
	}
)

func (x EPgmC1Type) Enum() *EPgmC1Type {
	p := new(EPgmC1Type)
	*p = x
	return p
}

func (x EPgmC1Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmC1Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[13].Descriptor()
}

func (EPgmC1Type) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[13]
}

func (x EPgmC1Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmC1Type.Descriptor instead.
func (EPgmC1Type) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{13}
}

// PGM K线类型
type EPgmKLineType int32

const (
	EPgmKLineType_PgmKLine_Minute_1  EPgmKLineType = 0   // 1分钟K线
	EPgmKLineType_PgmKLine_Minute_3  EPgmKLineType = 1   // 3分钟K线
	EPgmKLineType_PgmKLine_Minute_5  EPgmKLineType = 2   // 5分钟K线
	EPgmKLineType_PgmKLine_Minute_10 EPgmKLineType = 3   // 10分钟K线
	EPgmKLineType_PgmKLine_Minute_15 EPgmKLineType = 4   // 15分钟K线
	EPgmKLineType_PgmKLine_Minute_30 EPgmKLineType = 5   // 30分钟K线
	EPgmKLineType_PgmKLine_Hour_1    EPgmKLineType = 6   // 1小时K线
	EPgmKLineType_PgmKLine_Hour_2    EPgmKLineType = 7   // 2小时K线
	EPgmKLineType_PgmKLine_Hour_3    EPgmKLineType = 8   // 3小时K线
	EPgmKLineType_PgmKLine_Hour_4    EPgmKLineType = 9   // 4小时K线
	EPgmKLineType_PgmKLine_Day       EPgmKLineType = 10  // 日K线
	EPgmKLineType_PgmKLine_Week_1    EPgmKLineType = 11  // 1周K线
	EPgmKLineType_PgmKLine_Month_1   EPgmKLineType = 12  // 1月K线
	EPgmKLineType_PgmKLine_Quarter_1 EPgmKLineType = 13  // 1季K线
	EPgmKLineType_PgmKLine_Year_1    EPgmKLineType = 14  // 1年K线
	EPgmKLineType_PgmKLine_Unknow    EPgmKLineType = 127 // 未知K线期限类型
)

// Enum value maps for EPgmKLineType.
var (
	EPgmKLineType_name = map[int32]string{
		0:   "PgmKLine_Minute_1",
		1:   "PgmKLine_Minute_3",
		2:   "PgmKLine_Minute_5",
		3:   "PgmKLine_Minute_10",
		4:   "PgmKLine_Minute_15",
		5:   "PgmKLine_Minute_30",
		6:   "PgmKLine_Hour_1",
		7:   "PgmKLine_Hour_2",
		8:   "PgmKLine_Hour_3",
		9:   "PgmKLine_Hour_4",
		10:  "PgmKLine_Day",
		11:  "PgmKLine_Week_1",
		12:  "PgmKLine_Month_1",
		13:  "PgmKLine_Quarter_1",
		14:  "PgmKLine_Year_1",
		127: "PgmKLine_Unknow",
	}
	EPgmKLineType_value = map[string]int32{
		"PgmKLine_Minute_1":  0,
		"PgmKLine_Minute_3":  1,
		"PgmKLine_Minute_5":  2,
		"PgmKLine_Minute_10": 3,
		"PgmKLine_Minute_15": 4,
		"PgmKLine_Minute_30": 5,
		"PgmKLine_Hour_1":    6,
		"PgmKLine_Hour_2":    7,
		"PgmKLine_Hour_3":    8,
		"PgmKLine_Hour_4":    9,
		"PgmKLine_Day":       10,
		"PgmKLine_Week_1":    11,
		"PgmKLine_Month_1":   12,
		"PgmKLine_Quarter_1": 13,
		"PgmKLine_Year_1":    14,
		"PgmKLine_Unknow":    127,
	}
)

func (x EPgmKLineType) Enum() *EPgmKLineType {
	p := new(EPgmKLineType)
	*p = x
	return p
}

func (x EPgmKLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmKLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[14].Descriptor()
}

func (EPgmKLineType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[14]
}

func (x EPgmKLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmKLineType.Descriptor instead.
func (EPgmKLineType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{14}
}

// PGM 均量类型
type EPgmAvgVolumeType int32

const (
	EPgmAvgVolumeType_PgmAVT_LastDay     EPgmAvgVolumeType = 0   // 昨日均量计算
	EPgmAvgVolumeType_PgmAVT_FstContract EPgmAvgVolumeType = 1   // 合约第一天上市
	EPgmAvgVolumeType_PgmAVT_FstVariey   EPgmAvgVolumeType = 2   // 品种第一天上市
	EPgmAvgVolumeType_PgmAVT_Unknow      EPgmAvgVolumeType = 127 // 未知均量类型
)

// Enum value maps for EPgmAvgVolumeType.
var (
	EPgmAvgVolumeType_name = map[int32]string{
		0:   "PgmAVT_LastDay",
		1:   "PgmAVT_FstContract",
		2:   "PgmAVT_FstVariey",
		127: "PgmAVT_Unknow",
	}
	EPgmAvgVolumeType_value = map[string]int32{
		"PgmAVT_LastDay":     0,
		"PgmAVT_FstContract": 1,
		"PgmAVT_FstVariey":   2,
		"PgmAVT_Unknow":      127,
	}
)

func (x EPgmAvgVolumeType) Enum() *EPgmAvgVolumeType {
	p := new(EPgmAvgVolumeType)
	*p = x
	return p
}

func (x EPgmAvgVolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmAvgVolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[15].Descriptor()
}

func (EPgmAvgVolumeType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[15]
}

func (x EPgmAvgVolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmAvgVolumeType.Descriptor instead.
func (EPgmAvgVolumeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{15}
}

// PGM 成交方向
type EPgmMatchType int32

const (
	EPgmMatchType_PgmMT_Null      EPgmMatchType = 0 // 默认null
	EPgmMatchType_PgmMT_BuyMatch  EPgmMatchType = 1 // 买盘(买成交)
	EPgmMatchType_PgmMT_SellMatch EPgmMatchType = 2 // 卖盘(卖成交)
)

// Enum value maps for EPgmMatchType.
var (
	EPgmMatchType_name = map[int32]string{
		0: "PgmMT_Null",
		1: "PgmMT_BuyMatch",
		2: "PgmMT_SellMatch",
	}
	EPgmMatchType_value = map[string]int32{
		"PgmMT_Null":      0,
		"PgmMT_BuyMatch":  1,
		"PgmMT_SellMatch": 2,
	}
)

func (x EPgmMatchType) Enum() *EPgmMatchType {
	p := new(EPgmMatchType)
	*p = x
	return p
}

func (x EPgmMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[16].Descriptor()
}

func (EPgmMatchType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[16]
}

func (x EPgmMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMatchType.Descriptor instead.
func (EPgmMatchType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{16}
}

// PGM 支付方向类型
type EPgmPayDirType int32

const (
	EPgmPayDirType_PgmPayDir_Null        EPgmPayDirType = 0
	EPgmPayDirType_PgmPayDir_LongToShort EPgmPayDirType = 1 // 1-多付空
	EPgmPayDirType_PgmPayDir_ShortToLong EPgmPayDirType = 2 // 2-空付多
	EPgmPayDirType_PgmPayDir_Close       EPgmPayDirType = 3 // 3-平
	EPgmPayDirType_PgmPayDir_Payer       EPgmPayDirType = 4 // p-付款方/本方付
	EPgmPayDirType_PgmPayDir_Receiver    EPgmPayDirType = 5 // r-收款方/对方付
)

// Enum value maps for EPgmPayDirType.
var (
	EPgmPayDirType_name = map[int32]string{
		0: "PgmPayDir_Null",
		1: "PgmPayDir_LongToShort",
		2: "PgmPayDir_ShortToLong",
		3: "PgmPayDir_Close",
		4: "PgmPayDir_Payer",
		5: "PgmPayDir_Receiver",
	}
	EPgmPayDirType_value = map[string]int32{
		"PgmPayDir_Null":        0,
		"PgmPayDir_LongToShort": 1,
		"PgmPayDir_ShortToLong": 2,
		"PgmPayDir_Close":       3,
		"PgmPayDir_Payer":       4,
		"PgmPayDir_Receiver":    5,
	}
)

func (x EPgmPayDirType) Enum() *EPgmPayDirType {
	p := new(EPgmPayDirType)
	*p = x
	return p
}

func (x EPgmPayDirType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmPayDirType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[17].Descriptor()
}

func (EPgmPayDirType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[17]
}

func (x EPgmPayDirType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmPayDirType.Descriptor instead.
func (EPgmPayDirType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{17}
}

// PGM 交易所运行状态
type EPgmExchangeStateType int32

const (
	EPgmExchangeStateType_PgmExchangeStateType_Itializing      EPgmExchangeStateType = 0   // 0-初始化;
	EPgmExchangeStateType_PgmExchangeStateType_Initialized     EPgmExchangeStateType = 1   // 1-初始化完成;
	EPgmExchangeStateType_PgmExchangeStateType_Open            EPgmExchangeStateType = 2   // 2-开市;
	EPgmExchangeStateType_PgmExchangeStateType_Close           EPgmExchangeStateType = 3   // 3-收市
	EPgmExchangeStateType_PgmExchangeStateType_Settling        EPgmExchangeStateType = 4   // 4-正在结算;
	EPgmExchangeStateType_PgmExchangeStateType_SettleFinished  EPgmExchangeStateType = 5   // 5-结算完成;
	EPgmExchangeStateType_PgmExchangeStateType_T0Finished      EPgmExchangeStateType = 6   // 6 T+0财务处理完成
	EPgmExchangeStateType_PgmExchangeStateType_CheckInFinished EPgmExchangeStateType = 7   // 7-日终登帐完成
	EPgmExchangeStateType_PgmExchangeStateType_Unknow          EPgmExchangeStateType = 127 // 未知交易所运行状态类型
)

// Enum value maps for EPgmExchangeStateType.
var (
	EPgmExchangeStateType_name = map[int32]string{
		0:   "PgmExchangeStateType_Itializing",
		1:   "PgmExchangeStateType_Initialized",
		2:   "PgmExchangeStateType_Open",
		3:   "PgmExchangeStateType_Close",
		4:   "PgmExchangeStateType_Settling",
		5:   "PgmExchangeStateType_SettleFinished",
		6:   "PgmExchangeStateType_T0Finished",
		7:   "PgmExchangeStateType_CheckInFinished",
		127: "PgmExchangeStateType_Unknow",
	}
	EPgmExchangeStateType_value = map[string]int32{
		"PgmExchangeStateType_Itializing":      0,
		"PgmExchangeStateType_Initialized":     1,
		"PgmExchangeStateType_Open":            2,
		"PgmExchangeStateType_Close":           3,
		"PgmExchangeStateType_Settling":        4,
		"PgmExchangeStateType_SettleFinished":  5,
		"PgmExchangeStateType_T0Finished":      6,
		"PgmExchangeStateType_CheckInFinished": 7,
		"PgmExchangeStateType_Unknow":          127,
	}
)

func (x EPgmExchangeStateType) Enum() *EPgmExchangeStateType {
	p := new(EPgmExchangeStateType)
	*p = x
	return p
}

func (x EPgmExchangeStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmExchangeStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[18].Descriptor()
}

func (EPgmExchangeStateType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[18]
}

func (x EPgmExchangeStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmExchangeStateType.Descriptor instead.
func (EPgmExchangeStateType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{18}
}

// PGM 交易类型
type EPgmTradeType int32

const (
	EPgmTradeType_PgmTradeType_Spot    EPgmTradeType = 0   // 即期s
	EPgmTradeType_PgmTradeType_Forward EPgmTradeType = 1   // 远期f
	EPgmTradeType_PgmTradeType_Swap    EPgmTradeType = 2   // 掉期w
	EPgmTradeType_PgmTradeType_Unknow  EPgmTradeType = 127 // 未知
)

// Enum value maps for EPgmTradeType.
var (
	EPgmTradeType_name = map[int32]string{
		0:   "PgmTradeType_Spot",
		1:   "PgmTradeType_Forward",
		2:   "PgmTradeType_Swap",
		127: "PgmTradeType_Unknow",
	}
	EPgmTradeType_value = map[string]int32{
		"PgmTradeType_Spot":    0,
		"PgmTradeType_Forward": 1,
		"PgmTradeType_Swap":    2,
		"PgmTradeType_Unknow":  127,
	}
)

func (x EPgmTradeType) Enum() *EPgmTradeType {
	p := new(EPgmTradeType)
	*p = x
	return p
}

func (x EPgmTradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmTradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[19].Descriptor()
}

func (EPgmTradeType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[19]
}

func (x EPgmTradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmTradeType.Descriptor instead.
func (EPgmTradeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{19}
}

// PGM租借利率品种 RATE_VARIETY_ID_TYPE
type EPgmRateVarietyType int32

const (
	EPgmRateVarietyType_PgmRateVariety_Null     EPgmRateVarietyType = 0
	EPgmRateVarietyType_PgmRateVariety_Gold     EPgmRateVarietyType = 1 // 1-黄金
	EPgmRateVarietyType_PgmRateVariety_Platinum EPgmRateVarietyType = 2 // 2-铂金
	EPgmRateVarietyType_PgmRateVariety_Silver   EPgmRateVarietyType = 3 // 3-白银
)

// Enum value maps for EPgmRateVarietyType.
var (
	EPgmRateVarietyType_name = map[int32]string{
		0: "PgmRateVariety_Null",
		1: "PgmRateVariety_Gold",
		2: "PgmRateVariety_Platinum",
		3: "PgmRateVariety_Silver",
	}
	EPgmRateVarietyType_value = map[string]int32{
		"PgmRateVariety_Null":     0,
		"PgmRateVariety_Gold":     1,
		"PgmRateVariety_Platinum": 2,
		"PgmRateVariety_Silver":   3,
	}
)

func (x EPgmRateVarietyType) Enum() *EPgmRateVarietyType {
	p := new(EPgmRateVarietyType)
	*p = x
	return p
}

func (x EPgmRateVarietyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmRateVarietyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[20].Descriptor()
}

func (EPgmRateVarietyType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[20]
}

func (x EPgmRateVarietyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmRateVarietyType.Descriptor instead.
func (EPgmRateVarietyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{20}
}

// PGM 修改标识 ISUPDATE_TYPE
type EPgmIsUpdateType int32

const (
	EPgmIsUpdateType_PgmIsUpdate_Once   EPgmIsUpdateType = 0 // 0-表示同一品种只报价一次
	EPgmIsUpdateType_PgmIsUpdate_Repeat EPgmIsUpdateType = 1 // 1-表示该品种重复报价
)

// Enum value maps for EPgmIsUpdateType.
var (
	EPgmIsUpdateType_name = map[int32]string{
		0: "PgmIsUpdate_Once",
		1: "PgmIsUpdate_Repeat",
	}
	EPgmIsUpdateType_value = map[string]int32{
		"PgmIsUpdate_Once":   0,
		"PgmIsUpdate_Repeat": 1,
	}
)

func (x EPgmIsUpdateType) Enum() *EPgmIsUpdateType {
	p := new(EPgmIsUpdateType)
	*p = x
	return p
}

func (x EPgmIsUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmIsUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[21].Descriptor()
}

func (EPgmIsUpdateType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[21]
}

func (x EPgmIsUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmIsUpdateType.Descriptor instead.
func (EPgmIsUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{21}
}

// PGM 报价会员属性 MEMBER_ATTR_TYPE
type EPgmMemberAttrType int32

const (
	EPgmMemberAttrType_PgmMemberAttr_Null              EPgmMemberAttrType = 0
	EPgmMemberAttrType_PgmMemberAttr_FullMember        EPgmMemberAttrType = 1 // 1-表示正式
	EPgmMemberAttrType_PgmMemberAttr_AlternativeMember EPgmMemberAttrType = 2 // 2-表示备选
)

// Enum value maps for EPgmMemberAttrType.
var (
	EPgmMemberAttrType_name = map[int32]string{
		0: "PgmMemberAttr_Null",
		1: "PgmMemberAttr_FullMember",
		2: "PgmMemberAttr_AlternativeMember",
	}
	EPgmMemberAttrType_value = map[string]int32{
		"PgmMemberAttr_Null":              0,
		"PgmMemberAttr_FullMember":        1,
		"PgmMemberAttr_AlternativeMember": 2,
	}
)

func (x EPgmMemberAttrType) Enum() *EPgmMemberAttrType {
	p := new(EPgmMemberAttrType)
	*p = x
	return p
}

func (x EPgmMemberAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMemberAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[22].Descriptor()
}

func (EPgmMemberAttrType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[22]
}

func (x EPgmMemberAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMemberAttrType.Descriptor instead.
func (EPgmMemberAttrType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{22}
}

// PGM 报价会员状态 MEMBER_STATUS_TYPE
type EPgmMemberStatusType int32

const (
	EPgmMemberStatusType_PgmMemberStatus_Null    EPgmMemberStatusType = 0 // 0
	EPgmMemberStatusType_PgmMemberStatus_Enable  EPgmMemberStatusType = 1 // 1-表示启用
	EPgmMemberStatusType_PgmMemberStatus_Disable EPgmMemberStatusType = 2 // 2-表示停用
)

// Enum value maps for EPgmMemberStatusType.
var (
	EPgmMemberStatusType_name = map[int32]string{
		0: "PgmMemberStatus_Null",
		1: "PgmMemberStatus_Enable",
		2: "PgmMemberStatus_Disable",
	}
	EPgmMemberStatusType_value = map[string]int32{
		"PgmMemberStatus_Null":    0,
		"PgmMemberStatus_Enable":  1,
		"PgmMemberStatus_Disable": 2,
	}
)

func (x EPgmMemberStatusType) Enum() *EPgmMemberStatusType {
	p := new(EPgmMemberStatusType)
	*p = x
	return p
}

func (x EPgmMemberStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmMemberStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[23].Descriptor()
}

func (EPgmMemberStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[23]
}

func (x EPgmMemberStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmMemberStatusType.Descriptor instead.
func (EPgmMemberStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{23}
}

// PGM 计算发布标识 PUB_STATUS_TYPE
type EPgmPublishStatusType int32

const (
	EPgmPublishStatusType_PgmPubStatus_NoQuote      EPgmPublishStatusType = 0   // 0-表示不报价
	EPgmPublishStatusType_PgmPubStatus_CalcButNoPub EPgmPublishStatusType = 1   // 1-表示计算但不发布
	EPgmPublishStatusType_PgmPubStatus_CalcAndPub   EPgmPublishStatusType = 2   // 2-表示计算并发布
	EPgmPublishStatusType_PgmPubStatus_Unknow       EPgmPublishStatusType = 127 // 未知
)

// Enum value maps for EPgmPublishStatusType.
var (
	EPgmPublishStatusType_name = map[int32]string{
		0:   "PgmPubStatus_NoQuote",
		1:   "PgmPubStatus_CalcButNoPub",
		2:   "PgmPubStatus_CalcAndPub",
		127: "PgmPubStatus_Unknow",
	}
	EPgmPublishStatusType_value = map[string]int32{
		"PgmPubStatus_NoQuote":      0,
		"PgmPubStatus_CalcButNoPub": 1,
		"PgmPubStatus_CalcAndPub":   2,
		"PgmPubStatus_Unknow":       127,
	}
)

func (x EPgmPublishStatusType) Enum() *EPgmPublishStatusType {
	p := new(EPgmPublishStatusType)
	*p = x
	return p
}

func (x EPgmPublishStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmPublishStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[24].Descriptor()
}

func (EPgmPublishStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[24]
}

func (x EPgmPublishStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmPublishStatusType.Descriptor instead.
func (EPgmPublishStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{24}
}

// PGM订阅类型
type EPgmSubType int32

const (
	EPgmSubType_PgmST_Add        EPgmSubType = 0 // 新增订阅(不覆盖之前订阅)
	EPgmSubType_PgmST_CancelPart EPgmSubType = 1 // 取消list范围内的订阅
	EPgmSubType_PgmST_CancelAll  EPgmSubType = 2 // 取消所有订阅
	EPgmSubType_PgmST_Update     EPgmSubType = 3 // 更换订阅(覆盖之前订阅)
)

// Enum value maps for EPgmSubType.
var (
	EPgmSubType_name = map[int32]string{
		0: "PgmST_Add",
		1: "PgmST_CancelPart",
		2: "PgmST_CancelAll",
		3: "PgmST_Update",
	}
	EPgmSubType_value = map[string]int32{
		"PgmST_Add":        0,
		"PgmST_CancelPart": 1,
		"PgmST_CancelAll":  2,
		"PgmST_Update":     3,
	}
)

func (x EPgmSubType) Enum() *EPgmSubType {
	p := new(EPgmSubType)
	*p = x
	return p
}

func (x EPgmSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[25].Descriptor()
}

func (EPgmSubType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[25]
}

func (x EPgmSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmSubType.Descriptor instead.
func (EPgmSubType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{25}
}

// PGM订阅合约类型
type EPgmSubContractType int32

const (
	EPgmSubContractType_PgmSCT_Exchange    EPgmSubContractType = 0 // 按交易所订阅，订阅黄金交易所下全部行情
	EPgmSubContractType_PgmSCT_Contract    EPgmSubContractType = 1 // 按合约订阅，如iAu9999、Au100g等
	EPgmSubContractType_PgmSCT_VarietyType EPgmSubContractType = 2 // 按品种类型型订阅，如：黄金、白银、铂金、其它
	EPgmSubContractType_PgmSCT_Underlying  EPgmSubContractType = 3 // 按期权标的订阅(贵金属业务暂未涉及)
	EPgmSubContractType_PgmSCT_MarketID    EPgmSubContractType = 4 // 按市场代码列4别进行订阅，参见EPgmMarketID定义。00-现货，01-即期，02-递延，03-询价市场，04-定价市场，10-保证金询价
)

// Enum value maps for EPgmSubContractType.
var (
	EPgmSubContractType_name = map[int32]string{
		0: "PgmSCT_Exchange",
		1: "PgmSCT_Contract",
		2: "PgmSCT_VarietyType",
		3: "PgmSCT_Underlying",
		4: "PgmSCT_MarketID",
	}
	EPgmSubContractType_value = map[string]int32{
		"PgmSCT_Exchange":    0,
		"PgmSCT_Contract":    1,
		"PgmSCT_VarietyType": 2,
		"PgmSCT_Underlying":  3,
		"PgmSCT_MarketID":    4,
	}
)

func (x EPgmSubContractType) Enum() *EPgmSubContractType {
	p := new(EPgmSubContractType)
	*p = x
	return p
}

func (x EPgmSubContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmSubContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[26].Descriptor()
}

func (EPgmSubContractType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[26]
}

func (x EPgmSubContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmSubContractType.Descriptor instead.
func (EPgmSubContractType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{26}
}

// PGM货币类型 不涉及
type EPgmCurrencyType int32

const (
	EPgmCurrencyType_PgmCT_RMB    EPgmCurrencyType = 0   // 人民币
	EPgmCurrencyType_PgmCT_HKD    EPgmCurrencyType = 1   // 港元
	EPgmCurrencyType_PgmCT_USD    EPgmCurrencyType = 2   // 美元
	EPgmCurrencyType_PgmCT_TWD    EPgmCurrencyType = 3   // 台币
	EPgmCurrencyType_PgmCT_JPY    EPgmCurrencyType = 4   // 日元
	EPgmCurrencyType_PgmCT_Unknow EPgmCurrencyType = 127 // 未知
)

// Enum value maps for EPgmCurrencyType.
var (
	EPgmCurrencyType_name = map[int32]string{
		0:   "PgmCT_RMB",
		1:   "PgmCT_HKD",
		2:   "PgmCT_USD",
		3:   "PgmCT_TWD",
		4:   "PgmCT_JPY",
		127: "PgmCT_Unknow",
	}
	EPgmCurrencyType_value = map[string]int32{
		"PgmCT_RMB":    0,
		"PgmCT_HKD":    1,
		"PgmCT_USD":    2,
		"PgmCT_TWD":    3,
		"PgmCT_JPY":    4,
		"PgmCT_Unknow": 127,
	}
)

func (x EPgmCurrencyType) Enum() *EPgmCurrencyType {
	p := new(EPgmCurrencyType)
	*p = x
	return p
}

func (x EPgmCurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmCurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[27].Descriptor()
}

func (EPgmCurrencyType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[27]
}

func (x EPgmCurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmCurrencyType.Descriptor instead.
func (EPgmCurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{27}
}

// 期权行权方式
type EOptExerciseType int32

const (
	EOptExerciseType_OptET_Amercia  EOptExerciseType = 0   // 美式.期权买方在到期日前任何一天被执行
	EOptExerciseType_OptET_Bermuda  EOptExerciseType = 1   // 百慕大式.期权买方在到期日前规定一些列时间行权
	EOptExerciseType_OptET_European EOptExerciseType = 2   // 欧式.期权买方在到期日当天被执行
	EOptExerciseType_OptET_Unknow   EOptExerciseType = 127 // 未知
)

// Enum value maps for EOptExerciseType.
var (
	EOptExerciseType_name = map[int32]string{
		0:   "OptET_Amercia",
		1:   "OptET_Bermuda",
		2:   "OptET_European",
		127: "OptET_Unknow",
	}
	EOptExerciseType_value = map[string]int32{
		"OptET_Amercia":  0,
		"OptET_Bermuda":  1,
		"OptET_European": 2,
		"OptET_Unknow":   127,
	}
)

func (x EOptExerciseType) Enum() *EOptExerciseType {
	p := new(EOptExerciseType)
	*p = x
	return p
}

func (x EOptExerciseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptExerciseType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[28].Descriptor()
}

func (EOptExerciseType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[28]
}

func (x EOptExerciseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOptExerciseType.Descriptor instead.
func (EOptExerciseType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{28}
}

// 认购认沽
type ECallOrPut int32

const (
	ECallOrPut_COP_NULL ECallOrPut = 0
	ECallOrPut_COP_CALL ECallOrPut = 1 // 认购
	ECallOrPut_COP_PUT  ECallOrPut = 2 // 认沽
)

// Enum value maps for ECallOrPut.
var (
	ECallOrPut_name = map[int32]string{
		0: "COP_NULL",
		1: "COP_CALL",
		2: "COP_PUT",
	}
	ECallOrPut_value = map[string]int32{
		"COP_NULL": 0,
		"COP_CALL": 1,
		"COP_PUT":  2,
	}
)

func (x ECallOrPut) Enum() *ECallOrPut {
	p := new(ECallOrPut)
	*p = x
	return p
}

func (x ECallOrPut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECallOrPut) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[29].Descriptor()
}

func (ECallOrPut) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[29]
}

func (x ECallOrPut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECallOrPut.Descriptor instead.
func (ECallOrPut) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{29}
}

// PGM 服务状态
type EPgmServiceStatus int32

const (
	EPgmServiceStatus_PgmBegin EPgmServiceStatus = 0 // 服务启动状态
	EPgmServiceStatus_PgmReady EPgmServiceStatus = 1 // 服务准备就绪
	EPgmServiceStatus_PgmClose EPgmServiceStatus = 2 // 服务关闭状态
)

// Enum value maps for EPgmServiceStatus.
var (
	EPgmServiceStatus_name = map[int32]string{
		0: "PgmBegin",
		1: "PgmReady",
		2: "PgmClose",
	}
	EPgmServiceStatus_value = map[string]int32{
		"PgmBegin": 0,
		"PgmReady": 1,
		"PgmClose": 2,
	}
)

func (x EPgmServiceStatus) Enum() *EPgmServiceStatus {
	p := new(EPgmServiceStatus)
	*p = x
	return p
}

func (x EPgmServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[30].Descriptor()
}

func (EPgmServiceStatus) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[30]
}

func (x EPgmServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmServiceStatus.Descriptor instead.
func (EPgmServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{30}
}

// PGM 开平性质
type EPgmOffsetFlag int32

const (
	EPgmOffsetFlag_PgmOF_Null        EPgmOffsetFlag = 0  // 默认null
	EPgmOffsetFlag_PgmOF_OpenDouble  EPgmOffsetFlag = 1  // 双开
	EPgmOffsetFlag_PgmOF_OpenMulti   EPgmOffsetFlag = 2  // 多开
	EPgmOffsetFlag_PgmOF_OpenNil     EPgmOffsetFlag = 3  // 空开
	EPgmOffsetFlag_PgmOF_CloseDouble EPgmOffsetFlag = 4  // 双平
	EPgmOffsetFlag_PgmOF_CloseMulti  EPgmOffsetFlag = 5  // 多平
	EPgmOffsetFlag_PgmOF_CloseNil    EPgmOffsetFlag = 6  // 空平
	EPgmOffsetFlag_PgmOF_ChangePeer  EPgmOffsetFlag = 7  // 换手
	EPgmOffsetFlag_PgmOF_ChangeMulti EPgmOffsetFlag = 8  // 多换
	EPgmOffsetFlag_PgmOF_ChangeNil   EPgmOffsetFlag = 9  // 空换
	EPgmOffsetFlag_PgmOF_NilType     EPgmOffsetFlag = 10 // 不满足买盘和卖盘条件
)

// Enum value maps for EPgmOffsetFlag.
var (
	EPgmOffsetFlag_name = map[int32]string{
		0:  "PgmOF_Null",
		1:  "PgmOF_OpenDouble",
		2:  "PgmOF_OpenMulti",
		3:  "PgmOF_OpenNil",
		4:  "PgmOF_CloseDouble",
		5:  "PgmOF_CloseMulti",
		6:  "PgmOF_CloseNil",
		7:  "PgmOF_ChangePeer",
		8:  "PgmOF_ChangeMulti",
		9:  "PgmOF_ChangeNil",
		10: "PgmOF_NilType",
	}
	EPgmOffsetFlag_value = map[string]int32{
		"PgmOF_Null":        0,
		"PgmOF_OpenDouble":  1,
		"PgmOF_OpenMulti":   2,
		"PgmOF_OpenNil":     3,
		"PgmOF_CloseDouble": 4,
		"PgmOF_CloseMulti":  5,
		"PgmOF_CloseNil":    6,
		"PgmOF_ChangePeer":  7,
		"PgmOF_ChangeMulti": 8,
		"PgmOF_ChangeNil":   9,
		"PgmOF_NilType":     10,
	}
)

func (x EPgmOffsetFlag) Enum() *EPgmOffsetFlag {
	p := new(EPgmOffsetFlag)
	*p = x
	return p
}

func (x EPgmOffsetFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmOffsetFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[31].Descriptor()
}

func (EPgmOffsetFlag) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[31]
}

func (x EPgmOffsetFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmOffsetFlag.Descriptor instead.
func (EPgmOffsetFlag) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{31}
}

// 历史服务处理消息类型(中继内部使用)
type EPgmHandleType int32

const (
	EPgmHandleType_PgmHT_TimeChart   EPgmHandleType = 0 // 分时数据处理完毕
	EPgmHandleType_PgmHT_MatchDetail EPgmHandleType = 1 // 成交明细数据处理完毕
	EPgmHandleType_PgmHT_KLine       EPgmHandleType = 2 // K线数据处理完毕
)

// Enum value maps for EPgmHandleType.
var (
	EPgmHandleType_name = map[int32]string{
		0: "PgmHT_TimeChart",
		1: "PgmHT_MatchDetail",
		2: "PgmHT_KLine",
	}
	EPgmHandleType_value = map[string]int32{
		"PgmHT_TimeChart":   0,
		"PgmHT_MatchDetail": 1,
		"PgmHT_KLine":       2,
	}
)

func (x EPgmHandleType) Enum() *EPgmHandleType {
	p := new(EPgmHandleType)
	*p = x
	return p
}

func (x EPgmHandleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPgmHandleType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_pgm_proto_enumTypes[32].Descriptor()
}

func (EPgmHandleType) Type() protoreflect.EnumType {
	return &file_fip_def_pgm_proto_enumTypes[32]
}

func (x EPgmHandleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPgmHandleType.Descriptor instead.
func (EPgmHandleType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{32}
}

// 贵金属业务(PGM)分时数据
type PgmTSChartElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate          string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                     // 交易日期，例如20170808
	Timestamp          uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime            string  `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                         // tick生成时间,例如08:55:06.818
	LastPrice          float64 `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                   // 最新价
	AvgPrice           float64 `protobuf:"fixed64,5,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                     // 均价
	TotalPosition      uint64  `protobuf:"varint,6,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`            // 持仓量
	TotalVolume        uint64  `protobuf:"varint,7,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`                // 成交量
	Turnover           float64 `protobuf:"fixed64,8,opt,name=turnover,proto3" json:"turnover,omitempty"`                     // 成交额
	PreSettlementPrice float64 `protobuf:"fixed64,9,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"` // 昨结算价
	HighPrice          float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                  // 最高价
	LowPrice           float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                    // 最低价
	SeqNo              uint64  `protobuf:"varint,12,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                           // 序号（内部使用）
}

func (x *PgmTSChartElem) Reset() {
	*x = PgmTSChartElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmTSChartElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmTSChartElem) ProtoMessage() {}

func (x *PgmTSChartElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmTSChartElem.ProtoReflect.Descriptor instead.
func (*PgmTSChartElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{0}
}

func (x *PgmTSChartElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *PgmTSChartElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PgmTSChartElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *PgmTSChartElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *PgmTSChartElem) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *PgmTSChartElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *PgmTSChartElem) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *PgmTSChartElem) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *PgmTSChartElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *PgmTSChartElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *PgmTSChartElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *PgmTSChartElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 贵金属业务(PGM)成交明细数据
type PgmMatchDetailElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate      string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`            // 交易日期，例如20170808
	Timestamp      uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`           // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime        string  `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                // tick生成时间，例如08:55:06.818
	LastPrice      float64 `protobuf:"fixed64,4,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`          // 最新价
	LastVolume     uint64  `protobuf:"varint,5,opt,name=lastVolume,proto3" json:"lastVolume,omitempty"`         // 最新成交量（现手）
	PositionChange int64   `protobuf:"varint,6,opt,name=positionChange,proto3" json:"positionChange,omitempty"` // 增仓
	OffsetFlag     uint32  `protobuf:"varint,7,opt,name=offsetFlag,proto3" json:"offsetFlag,omitempty"`         // 开平性质, 参见EPgmOffsetFlag类型
	MatchType      uint32  `protobuf:"varint,8,opt,name=matchType,proto3" json:"matchType,omitempty"`           // 成交方向(买盘1，卖盘2), 参见EPgmMatchType类型
	SeqNo          uint64  `protobuf:"varint,9,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                   // 序号（内部使用）
}

func (x *PgmMatchDetailElem) Reset() {
	*x = PgmMatchDetailElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmMatchDetailElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmMatchDetailElem) ProtoMessage() {}

func (x *PgmMatchDetailElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmMatchDetailElem.ProtoReflect.Descriptor instead.
func (*PgmMatchDetailElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{1}
}

func (x *PgmMatchDetailElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *PgmMatchDetailElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PgmMatchDetailElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *PgmMatchDetailElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *PgmMatchDetailElem) GetLastVolume() uint64 {
	if x != nil {
		return x.LastVolume
	}
	return 0
}

func (x *PgmMatchDetailElem) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *PgmMatchDetailElem) GetOffsetFlag() uint32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *PgmMatchDetailElem) GetMatchType() uint32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *PgmMatchDetailElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 贵金属业务(PGM)K线数据
type PgmKLineElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate           string  `protobuf:"bytes,1,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 交易日期，例如20170808
	Timestamp           uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 时间戳（基于1970时间，精确到ms），例如1501808867001
	GenTime             string  `protobuf:"bytes,3,opt,name=genTime,proto3" json:"genTime,omitempty"`                            // tick生成时间，例如08:55:06.818
	TotalPosition       uint64  `protobuf:"varint,4,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`               // 持仓量(PGM中不使用该字段)
	CycleVolume         uint64  `protobuf:"varint,5,opt,name=cycleVolume,proto3" json:"cycleVolume,omitempty"`                   // 该周期成交量
	CycleTurnover       float64 `protobuf:"fixed64,6,opt,name=cycleTurnover,proto3" json:"cycleTurnover,omitempty"`              // 该周期成交额
	PreSettlementPrice  float64 `protobuf:"fixed64,7,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`    // 昨结算价
	OpenPrice           float64 `protobuf:"fixed64,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                      // 开盘价
	ClosePrice          float64 `protobuf:"fixed64,9,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                    // 收盘价
	HighPrice           float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                     // 最高价
	LowPrice            float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                       // 最低价
	RealSettlementPrice float64 `protobuf:"fixed64,12,opt,name=realSettlementPrice,proto3" json:"realSettlementPrice,omitempty"` // 实时结算价
	SeqNo               uint64  `protobuf:"varint,13,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                              // 序号（内部使用）
}

func (x *PgmKLineElem) Reset() {
	*x = PgmKLineElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmKLineElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmKLineElem) ProtoMessage() {}

func (x *PgmKLineElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmKLineElem.ProtoReflect.Descriptor instead.
func (*PgmKLineElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{2}
}

func (x *PgmKLineElem) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *PgmKLineElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PgmKLineElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *PgmKLineElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *PgmKLineElem) GetCycleVolume() uint64 {
	if x != nil {
		return x.CycleVolume
	}
	return 0
}

func (x *PgmKLineElem) GetCycleTurnover() float64 {
	if x != nil {
		return x.CycleTurnover
	}
	return 0
}

func (x *PgmKLineElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *PgmKLineElem) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *PgmKLineElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *PgmKLineElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *PgmKLineElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *PgmKLineElem) GetRealSettlementPrice() float64 {
	if x != nil {
		return x.RealSettlementPrice
	}
	return 0
}

func (x *PgmKLineElem) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 贵金属业务(PGM)
type PgmTimePriceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price      float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`          // 价格
	BuyVolume  uint64  `protobuf:"varint,2,opt,name=buyVolume,proto3" json:"buyVolume,omitempty"`   // 买盘量
	SellVolume uint64  `protobuf:"varint,3,opt,name=sellVolume,proto3" json:"sellVolume,omitempty"` // 卖盘量
	BuyCount   uint64  `protobuf:"varint,4,opt,name=buyCount,proto3" json:"buyCount,omitempty"`     // 买盘成交笔数
	SellCount  uint64  `protobuf:"varint,5,opt,name=sellCount,proto3" json:"sellCount,omitempty"`   // 卖盘成交笔数
}

func (x *PgmTimePriceElem) Reset() {
	*x = PgmTimePriceElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmTimePriceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmTimePriceElem) ProtoMessage() {}

func (x *PgmTimePriceElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmTimePriceElem.ProtoReflect.Descriptor instead.
func (*PgmTimePriceElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{3}
}

func (x *PgmTimePriceElem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PgmTimePriceElem) GetBuyVolume() uint64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *PgmTimePriceElem) GetSellVolume() uint64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *PgmTimePriceElem) GetBuyCount() uint64 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *PgmTimePriceElem) GetSellCount() uint64 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

// 贵金属业务(PGM)分笔数据-开平类别统计
type PgmOffsetStaElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongChangeVolume       uint64 `protobuf:"varint,1,opt,name=longChangeVolume,proto3" json:"longChangeVolume,omitempty"`              // 多换量
	ShotChangeVolume       uint64 `protobuf:"varint,2,opt,name=shotChangeVolume,proto3" json:"shotChangeVolume,omitempty"`              // 空换量
	DoubleOpenVolume       uint64 `protobuf:"varint,3,opt,name=doubleOpenVolume,proto3" json:"doubleOpenVolume,omitempty"`              // 双开量
	DoubleCloseVolume      uint64 `protobuf:"varint,4,opt,name=doubleCloseVolume,proto3" json:"doubleCloseVolume,omitempty"`            // 双平量
	LongOpenVolume         uint64 `protobuf:"varint,5,opt,name=longOpenVolume,proto3" json:"longOpenVolume,omitempty"`                  // 多开量
	LongOpenChangeVolume   uint64 `protobuf:"varint,6,opt,name=longOpenChangeVolume,proto3" json:"longOpenChangeVolume,omitempty"`      // 多开换手量
	ShortOpenVolume        uint64 `protobuf:"varint,7,opt,name=shortOpenVolume,proto3" json:"shortOpenVolume,omitempty"`                // 空开量
	ShortOpenChangeVolume  uint64 `protobuf:"varint,8,opt,name=shortOpenChangeVolume,proto3" json:"shortOpenChangeVolume,omitempty"`    // 空开换手量
	LongCloseVolume        uint64 `protobuf:"varint,9,opt,name=longCloseVolume,proto3" json:"longCloseVolume,omitempty"`                // 多平量
	LongCloseChangeVolume  uint64 `protobuf:"varint,10,opt,name=longCloseChangeVolume,proto3" json:"longCloseChangeVolume,omitempty"`   // 多平换手量
	ShortCloseVolume       uint64 `protobuf:"varint,11,opt,name=shortCloseVolume,proto3" json:"shortCloseVolume,omitempty"`             // 空平量
	ShortCloseChangeVolume uint64 `protobuf:"varint,12,opt,name=shortCloseChangeVolume,proto3" json:"shortCloseChangeVolume,omitempty"` // 空平换手量
}

func (x *PgmOffsetStaElem) Reset() {
	*x = PgmOffsetStaElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmOffsetStaElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmOffsetStaElem) ProtoMessage() {}

func (x *PgmOffsetStaElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmOffsetStaElem.ProtoReflect.Descriptor instead.
func (*PgmOffsetStaElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{4}
}

func (x *PgmOffsetStaElem) GetLongChangeVolume() uint64 {
	if x != nil {
		return x.LongChangeVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetShotChangeVolume() uint64 {
	if x != nil {
		return x.ShotChangeVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetDoubleOpenVolume() uint64 {
	if x != nil {
		return x.DoubleOpenVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetDoubleCloseVolume() uint64 {
	if x != nil {
		return x.DoubleCloseVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetLongOpenVolume() uint64 {
	if x != nil {
		return x.LongOpenVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetLongOpenChangeVolume() uint64 {
	if x != nil {
		return x.LongOpenChangeVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetShortOpenVolume() uint64 {
	if x != nil {
		return x.ShortOpenVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetShortOpenChangeVolume() uint64 {
	if x != nil {
		return x.ShortOpenChangeVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetLongCloseVolume() uint64 {
	if x != nil {
		return x.LongCloseVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetLongCloseChangeVolume() uint64 {
	if x != nil {
		return x.LongCloseChangeVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetShortCloseVolume() uint64 {
	if x != nil {
		return x.ShortCloseVolume
	}
	return 0
}

func (x *PgmOffsetStaElem) GetShortCloseChangeVolume() uint64 {
	if x != nil {
		return x.ShortCloseChangeVolume
	}
	return 0
}

// 贵金属业务(PGM)当前均量及类型
type PgmAvgVolumeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgVolume     uint64 `protobuf:"varint,1,opt,name=avgVolume,proto3" json:"avgVolume,omitempty"`         // 当前均量
	AvgVolumeType uint32 `protobuf:"varint,2,opt,name=avgVolumeType,proto3" json:"avgVolumeType,omitempty"` // 当前均量类型，参见EPgmAvgVolumeType定义。0-昨日均量计算,1-合约第一天上市,2-品种第一天上市
}

func (x *PgmAvgVolumeElem) Reset() {
	*x = PgmAvgVolumeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmAvgVolumeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmAvgVolumeElem) ProtoMessage() {}

func (x *PgmAvgVolumeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmAvgVolumeElem.ProtoReflect.Descriptor instead.
func (*PgmAvgVolumeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{5}
}

func (x *PgmAvgVolumeElem) GetAvgVolume() uint64 {
	if x != nil {
		return x.AvgVolume
	}
	return 0
}

func (x *PgmAvgVolumeElem) GetAvgVolumeType() uint32 {
	if x != nil {
		return x.AvgVolumeType
	}
	return 0
}

// 贵金属业务(PGM)交易所信息
type PgmExchangeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 交易所名称
	EnglishName   string   `protobuf:"bytes,3,opt,name=englishName,proto3" json:"englishName,omitempty"`                    // 交易所英文名称
	ExchangeState uint32   `protobuf:"varint,4,opt,name=exchangeState,proto3" json:"exchangeState,omitempty"`               // 交易所运行状态，参见EPgmExchangeStateType定义。0-初始化，1-初始化完成，2-开市，3-收市，4-正在结算，5-结算完成，6-T+0财务处理完成，7-日终登帐完成
	AnnounceTime  string   `protobuf:"bytes,5,opt,name=announceTime,proto3" json:"announceTime,omitempty"`                  // 发布时间HH:MM:SS
}

func (x *PgmExchangeElem) Reset() {
	*x = PgmExchangeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmExchangeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmExchangeElem) ProtoMessage() {}

func (x *PgmExchangeElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmExchangeElem.ProtoReflect.Descriptor instead.
func (*PgmExchangeElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{6}
}

func (x *PgmExchangeElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmExchangeElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PgmExchangeElem) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *PgmExchangeElem) GetExchangeState() uint32 {
	if x != nil {
		return x.ExchangeState
	}
	return 0
}

func (x *PgmExchangeElem) GetAnnounceTime() string {
	if x != nil {
		return x.AnnounceTime
	}
	return ""
}

// 贵金属业务(PGM)订阅消息体
type PgmSubElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID   EExchgID            `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`                // 交易所
	ContractType EPgmSubContractType `protobuf:"varint,2,opt,name=contractType,proto3,enum=fippb.EPgmSubContractType" json:"contractType,omitempty"` // PGM合约订阅类型，参见EPgmSubContractType定义。 0-按交易所订阅，1-按合约订阅，2-按品种类型订阅，3-按期权标的订阅,4-按市场代码类别订阅
	ContractID   string              `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                                     // 合约id
}

func (x *PgmSubElem) Reset() {
	*x = PgmSubElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmSubElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmSubElem) ProtoMessage() {}

func (x *PgmSubElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmSubElem.ProtoReflect.Descriptor instead.
func (*PgmSubElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{7}
}

func (x *PgmSubElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmSubElem) GetContractType() EPgmSubContractType {
	if x != nil {
		return x.ContractType
	}
	return EPgmSubContractType_PgmSCT_Exchange
}

func (x *PgmSubElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// 上海黄金交易所(SGE)合约信息 QDI风格。在从QDI解析SGE合约，获取并解析后将转换为"财讯通风格/PgmContractElem"，在中继采集模块内部使用
type QdiInstInfoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID  EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	InstID      string   `protobuf:"bytes,2,opt,name=instID,proto3" json:"instID,omitempty"`                              // 合约代码
	InstCode    string   `protobuf:"bytes,3,opt,name=instCode,proto3" json:"instCode,omitempty"`                          // 合约业务编码
	InstName    string   `protobuf:"bytes,4,opt,name=instName,proto3" json:"instName,omitempty"`                          // 合约名称
	MarketID    int32    `protobuf:"varint,5,opt,name=marketID,proto3" json:"marketID,omitempty"`                         // 市场代码，参见EPgmMarketID定义。00-现货，01-即期，02-递延，03-询价市场，04-定价市场，10-保证金询价
	VarietyType uint32   `protobuf:"varint,6,opt,name=varietyType,proto3" json:"varietyType,omitempty"`                   // 品种类别，参见EPgmVarietyType。1-黄金，2-铂金，3-白银,4-钯金
	VarietyID   string   `protobuf:"bytes,7,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                        // 交割品种代码 VARIETY_ID_TYPE 1-黄金，2-铂金，3-白银,4-钯金
	InstUnit    uint64   `protobuf:"varint,8,opt,name=instUnit,proto3" json:"instUnit,omitempty"`                         // 交易单位数量 INST_UNIT_TYPE
	Tick        float64  `protobuf:"fixed64,9,opt,name=tick,proto3" json:"tick,omitempty"`                                // 最小变动价位 PRICE_TYPE
	MaxHand     uint32   `protobuf:"varint,10,opt,name=maxHand,proto3" json:"maxHand,omitempty"`                          // 最大申报限量(单手) QUANTITY_TYPE
	MinHand     uint32   `protobuf:"varint,11,opt,name=minHand,proto3" json:"minHand,omitempty"`                          // 最小申报限量(单手) QUANTITY_TYPE
	UpperLimit  float64  `protobuf:"fixed64,12,opt,name=upperLimit,proto3" json:"upperLimit,omitempty"`                   // 涨停板率（RATE_TYPE）
	LowerLimit  float64  `protobuf:"fixed64,13,opt,name=lowerLimit,proto3" json:"lowerLimit,omitempty"`                   // 跌停板率（RATE_TYPE）
	OpenFlag    uint32   `protobuf:"varint,14,opt,name=openFlag,proto3" json:"openFlag,omitempty"`                        // 合约活跃标志，参见EPgmFlagType定义。 1-活跃，2-不活跃，3-只平，4-只开
	InstState   uint32   `protobuf:"varint,15,opt,name=instState,proto3" json:"instState,omitempty"`                      // 合约交易状态，参见EPgmInstStateType定义。0-初始化中，1-初始化完成，2-开盘，3-竞价报单，4-竞价撮合
	// 5-连续交易，6-暂停，7-交割申报，8-交割申报结束，9-中立仓申报，A-交割申报撮合,B-收盘
	RefPrice    float64 `protobuf:"fixed64,16,opt,name=refPrice,proto3" json:"refPrice,omitempty"`      // 参考价
	RecvRate    float64 `protobuf:"fixed64,17,opt,name=recvRate,proto3" json:"recvRate,omitempty"`      // 卖方收款比例
	DueDate     string  `protobuf:"bytes,18,opt,name=dueDate,proto3" json:"dueDate,omitempty"`          // 到期日
	DeliveryDay uint32  `protobuf:"varint,19,opt,name=deliveryDay,proto3" json:"deliveryDay,omitempty"` // 合约到期日, 交割间隔天数QUANTITY_TYPE
}

func (x *QdiInstInfoElem) Reset() {
	*x = QdiInstInfoElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QdiInstInfoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QdiInstInfoElem) ProtoMessage() {}

func (x *QdiInstInfoElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QdiInstInfoElem.ProtoReflect.Descriptor instead.
func (*QdiInstInfoElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{8}
}

func (x *QdiInstInfoElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *QdiInstInfoElem) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *QdiInstInfoElem) GetInstCode() string {
	if x != nil {
		return x.InstCode
	}
	return ""
}

func (x *QdiInstInfoElem) GetInstName() string {
	if x != nil {
		return x.InstName
	}
	return ""
}

func (x *QdiInstInfoElem) GetMarketID() int32 {
	if x != nil {
		return x.MarketID
	}
	return 0
}

func (x *QdiInstInfoElem) GetVarietyType() uint32 {
	if x != nil {
		return x.VarietyType
	}
	return 0
}

func (x *QdiInstInfoElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *QdiInstInfoElem) GetInstUnit() uint64 {
	if x != nil {
		return x.InstUnit
	}
	return 0
}

func (x *QdiInstInfoElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *QdiInstInfoElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *QdiInstInfoElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *QdiInstInfoElem) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *QdiInstInfoElem) GetLowerLimit() float64 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *QdiInstInfoElem) GetOpenFlag() uint32 {
	if x != nil {
		return x.OpenFlag
	}
	return 0
}

func (x *QdiInstInfoElem) GetInstState() uint32 {
	if x != nil {
		return x.InstState
	}
	return 0
}

func (x *QdiInstInfoElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *QdiInstInfoElem) GetRecvRate() float64 {
	if x != nil {
		return x.RecvRate
	}
	return 0
}

func (x *QdiInstInfoElem) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *QdiInstInfoElem) GetDeliveryDay() uint32 {
	if x != nil {
		return x.DeliveryDay
	}
	return 0
}

// PGM标准合约定义，财讯通风格，用在proxy对外输出和中继内部使用
type PgmContractElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID     EExchgID         `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`              // 交易所id
	ContractID     string           `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`                                   // 合约id
	MarketID       int32            `protobuf:"varint,3,opt,name=marketID,proto3" json:"marketID,omitempty"`                                      // 市场代码，参见EPgmMarketID定义。00-现货，01-即期，02-递延，03-询价市场，04-定价市场，10-保证金询价
	ContractName   string           `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`                               // 合约名称
	ShortName      string           `protobuf:"bytes,5,opt,name=shortName,proto3" json:"shortName,omitempty"`                                     // 合约简称
	EnglishName    string           `protobuf:"bytes,6,opt,name=englishName,proto3" json:"englishName,omitempty"`                                 // 合约英文名称
	Tick           float64          `protobuf:"fixed64,7,opt,name=tick,proto3" json:"tick,omitempty"`                                             // 最小变动价位
	CurrencyType   uint32           `protobuf:"varint,8,opt,name=currencyType,proto3" json:"currencyType,omitempty"`                              // 货币类型，参见EPgmCurrencyType定义。0-人民币,1-港元,2-美元,3-台币,4-日元
	VarietyID      string           `protobuf:"bytes,9,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                                     // 交割品种代码 VARIETY_ID_TYPE 1-黄金，2-铂金，3-白银,4-钯金
	MaxHand        uint32           `protobuf:"varint,10,opt,name=maxHand,proto3" json:"maxHand,omitempty"`                                       // 最大申报限量(单手)
	MinHand        uint32           `protobuf:"varint,11,opt,name=minHand,proto3" json:"minHand,omitempty"`                                       // 最小申报限量(单手)
	RiseLimit      uint32           `protobuf:"varint,12,opt,name=riseLimit,proto3" json:"riseLimit,omitempty"`                                   // 涨停
	FallLimit      uint32           `protobuf:"varint,13,opt,name=fallLimit,proto3" json:"fallLimit,omitempty"`                                   // 跌停
	Unit           uint32           `protobuf:"varint,14,opt,name=unit,proto3" json:"unit,omitempty"`                                             // 合约乘数，交易单位数量 INST_UNIT_TYPE（long for 32位系统）
	RefPrice       float64          `protobuf:"fixed64,15,opt,name=refPrice,proto3" json:"refPrice,omitempty"`                                    // 参考价,基准价
	RecvRate       float64          `protobuf:"fixed64,16,opt,name=recvRate,proto3" json:"recvRate,omitempty"`                                    // 卖方收款比例
	OpenFlag       uint32           `protobuf:"varint,17,opt,name=openFlag,proto3" json:"openFlag,omitempty"`                                     // 合约活跃标志，参见EPgmFlagType定义。 1-活跃，2-不活跃，3-只平，4-只开
	ContractStatus uint32           `protobuf:"varint,18,opt,name=contractStatus,proto3" json:"contractStatus,omitempty"`                         // 合约交易状态，参见EPgmInstStateType定义。0-初始化中,1-初始化完成,2-开盘,3-竞价报单,4-竞价撮合,5-连续交易,6-暂停,7-交割申报,8-交割申报结束,9-中立仓申报,A-交割申报撮合,B-收盘
	DueDate        string           `protobuf:"bytes,19,opt,name=dueDate,proto3" json:"dueDate,omitempty"`                                        // 到期日
	DeliveryDay    uint32           `protobuf:"varint,20,opt,name=deliveryDay,proto3" json:"deliveryDay,omitempty"`                               // 合约到期日, 交割间隔天数
	ContractType   EPgmContractType `protobuf:"varint,21,opt,name=contractType,proto3,enum=fippb.EPgmContractType" json:"contractType,omitempty"` // 贵金属业务合约类型（业务标识从２００１开始定义）
}

func (x *PgmContractElem) Reset() {
	*x = PgmContractElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmContractElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmContractElem) ProtoMessage() {}

func (x *PgmContractElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmContractElem.ProtoReflect.Descriptor instead.
func (*PgmContractElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{9}
}

func (x *PgmContractElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmContractElem) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *PgmContractElem) GetMarketID() int32 {
	if x != nil {
		return x.MarketID
	}
	return 0
}

func (x *PgmContractElem) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *PgmContractElem) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *PgmContractElem) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *PgmContractElem) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *PgmContractElem) GetCurrencyType() uint32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *PgmContractElem) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *PgmContractElem) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *PgmContractElem) GetMinHand() uint32 {
	if x != nil {
		return x.MinHand
	}
	return 0
}

func (x *PgmContractElem) GetRiseLimit() uint32 {
	if x != nil {
		return x.RiseLimit
	}
	return 0
}

func (x *PgmContractElem) GetFallLimit() uint32 {
	if x != nil {
		return x.FallLimit
	}
	return 0
}

func (x *PgmContractElem) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *PgmContractElem) GetRefPrice() float64 {
	if x != nil {
		return x.RefPrice
	}
	return 0
}

func (x *PgmContractElem) GetRecvRate() float64 {
	if x != nil {
		return x.RecvRate
	}
	return 0
}

func (x *PgmContractElem) GetOpenFlag() uint32 {
	if x != nil {
		return x.OpenFlag
	}
	return 0
}

func (x *PgmContractElem) GetContractStatus() uint32 {
	if x != nil {
		return x.ContractStatus
	}
	return 0
}

func (x *PgmContractElem) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *PgmContractElem) GetDeliveryDay() uint32 {
	if x != nil {
		return x.DeliveryDay
	}
	return 0
}

func (x *PgmContractElem) GetContractType() EPgmContractType {
	if x != nil {
		return x.ContractType
	}
	return EPgmContractType_EPgmContractType_ALL
}

// PGM静态数据版本信息
type PgmStaticDataVersionElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	Version    uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                           // 时间戳，标记静态数据的标识
}

func (x *PgmStaticDataVersionElem) Reset() {
	*x = PgmStaticDataVersionElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmStaticDataVersionElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmStaticDataVersionElem) ProtoMessage() {}

func (x *PgmStaticDataVersionElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmStaticDataVersionElem.ProtoReflect.Descriptor instead.
func (*PgmStaticDataVersionElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{10}
}

func (x *PgmStaticDataVersionElem) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmStaticDataVersionElem) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// PGM 行情条目信息, QPI风格,采集程序内部使用
type MDEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice float64 `protobuf:"fixed64,1,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"` // 买价
	BidLot   uint64  `protobuf:"varint,2,opt,name=bidLot,proto3" json:"bidLot,omitempty"`      // 买量
	AskPrice float64 `protobuf:"fixed64,3,opt,name=askPrice,proto3" json:"askPrice,omitempty"` // 卖价
	AskLot   uint64  `protobuf:"varint,4,opt,name=askLot,proto3" json:"askLot,omitempty"`      // 卖量
}

func (x *MDEntryData) Reset() {
	*x = MDEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MDEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MDEntryData) ProtoMessage() {}

func (x *MDEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MDEntryData.ProtoReflect.Descriptor instead.
func (*MDEntryData) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{11}
}

func (x *MDEntryData) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MDEntryData) GetBidLot() uint64 {
	if x != nil {
		return x.BidLot
	}
	return 0
}

func (x *MDEntryData) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MDEntryData) GetAskLot() uint64 {
	if x != nil {
		return x.AskLot
	}
	return 0
}

// PGM 行情信息 QPI风格,从QPI中接收到的行情即为此种风格，采集程序内部使用，需转换为财讯通内部常用的行情格式输出
type QuotationInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstID          string         `protobuf:"bytes,1,opt,name=instID,proto3" json:"instID,omitempty"`                      //合约代码INST_ID_TYPE
	InstName        string         `protobuf:"bytes,2,opt,name=instName,proto3" json:"instName,omitempty"`                  //合约名称INST_NAME_TYPE
	SeqNo           uint64         `protobuf:"varint,3,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                       //行情序号SEQ_ID_TYPE
	PreSettlePrice  float64        `protobuf:"fixed64,4,opt,name=preSettlePrice,proto3" json:"preSettlePrice,omitempty"`    //昨结算价
	PreClosePrice   float64        `protobuf:"fixed64,5,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`      //昨收盘价
	OpenPrice       float64        `protobuf:"fixed64,6,opt,name=openPrice,proto3" json:"openPrice,omitempty"`              //开盘价
	ClosePrice      float64        `protobuf:"fixed64,7,opt,name=closePrice,proto3" json:"closePrice,omitempty"`            //收盘价
	HighPrice       float64        `protobuf:"fixed64,8,opt,name=highPrice,proto3" json:"highPrice,omitempty"`              //最高价
	LowPrice        float64        `protobuf:"fixed64,9,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                //最低价
	LtstPrice       float64        `protobuf:"fixed64,10,opt,name=ltstPrice,proto3" json:"ltstPrice,omitempty"`             //最新价
	SettlePrice     float64        `protobuf:"fixed64,11,opt,name=settlePrice,proto3" json:"settlePrice,omitempty"`         //结算价
	AveragePrice    float64        `protobuf:"fixed64,12,opt,name=averagePrice,proto3" json:"averagePrice,omitempty"`       //均价
	MdEntryDatas    []*MDEntryData `protobuf:"bytes,13,rep,name=mdEntryDatas,proto3" json:"mdEntryDatas,omitempty"`         //行情条目数据数组(买卖队列)
	MdedLength      uint32         `protobuf:"varint,14,opt,name=mdedLength,proto3" json:"mdedLength,omitempty"`            //行情条目数据数组长度QLENGTH_TYPE
	TurnOver        float64        `protobuf:"fixed64,15,opt,name=turnOver,proto3" json:"turnOver,omitempty"`               //成交额
	UpdtTime        string         `protobuf:"bytes,16,opt,name=updtTime,proto3" json:"updtTime,omitempty"`                 //更新时间
	TotalAmnt       uint64         `protobuf:"varint,17,opt,name=totalAmnt,proto3" json:"totalAmnt,omitempty"`              //持仓量
	TradeVolume     uint64         `protobuf:"varint,18,opt,name=tradeVolume,proto3" json:"tradeVolume,omitempty"`          //成交数量
	TradeWeight     float64        `protobuf:"fixed64,19,opt,name=tradeWeight,proto3" json:"tradeWeight,omitempty"`         //成交(双边)重量
	HighLimitPrice  float64        `protobuf:"fixed64,20,opt,name=highLimitPrice,proto3" json:"highLimitPrice,omitempty"`   //涨停板
	LowerLimitPrice float64        `protobuf:"fixed64,21,opt,name=lowerLimitPrice,proto3" json:"lowerLimitPrice,omitempty"` //跌停板
	UpDown          float64        `protobuf:"fixed64,22,opt,name=upDown,proto3" json:"upDown,omitempty"`                   //指数涨跌
	UpDownRate      float64        `protobuf:"fixed64,23,opt,name=upDownRate,proto3" json:"upDownRate,omitempty"`           //指数涨跌幅
	QuoteDate       string         `protobuf:"bytes,24,opt,name=quoteDate,proto3" json:"quoteDate,omitempty"`               //行情日期
	QuoteTime       string         `protobuf:"bytes,25,opt,name=quoteTime,proto3" json:"quoteTime,omitempty"`               //行情时间
}

func (x *QuotationInfoData) Reset() {
	*x = QuotationInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotationInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotationInfoData) ProtoMessage() {}

func (x *QuotationInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotationInfoData.ProtoReflect.Descriptor instead.
func (*QuotationInfoData) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{12}
}

func (x *QuotationInfoData) GetInstID() string {
	if x != nil {
		return x.InstID
	}
	return ""
}

func (x *QuotationInfoData) GetInstName() string {
	if x != nil {
		return x.InstName
	}
	return ""
}

func (x *QuotationInfoData) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *QuotationInfoData) GetPreSettlePrice() float64 {
	if x != nil {
		return x.PreSettlePrice
	}
	return 0
}

func (x *QuotationInfoData) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *QuotationInfoData) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *QuotationInfoData) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *QuotationInfoData) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *QuotationInfoData) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *QuotationInfoData) GetLtstPrice() float64 {
	if x != nil {
		return x.LtstPrice
	}
	return 0
}

func (x *QuotationInfoData) GetSettlePrice() float64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *QuotationInfoData) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *QuotationInfoData) GetMdEntryDatas() []*MDEntryData {
	if x != nil {
		return x.MdEntryDatas
	}
	return nil
}

func (x *QuotationInfoData) GetMdedLength() uint32 {
	if x != nil {
		return x.MdedLength
	}
	return 0
}

func (x *QuotationInfoData) GetTurnOver() float64 {
	if x != nil {
		return x.TurnOver
	}
	return 0
}

func (x *QuotationInfoData) GetUpdtTime() string {
	if x != nil {
		return x.UpdtTime
	}
	return ""
}

func (x *QuotationInfoData) GetTotalAmnt() uint64 {
	if x != nil {
		return x.TotalAmnt
	}
	return 0
}

func (x *QuotationInfoData) GetTradeVolume() uint64 {
	if x != nil {
		return x.TradeVolume
	}
	return 0
}

func (x *QuotationInfoData) GetTradeWeight() float64 {
	if x != nil {
		return x.TradeWeight
	}
	return 0
}

func (x *QuotationInfoData) GetHighLimitPrice() float64 {
	if x != nil {
		return x.HighLimitPrice
	}
	return 0
}

func (x *QuotationInfoData) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *QuotationInfoData) GetUpDown() float64 {
	if x != nil {
		return x.UpDown
	}
	return 0
}

func (x *QuotationInfoData) GetUpDownRate() float64 {
	if x != nil {
		return x.UpDownRate
	}
	return 0
}

func (x *QuotationInfoData) GetQuoteDate() string {
	if x != nil {
		return x.QuoteDate
	}
	return ""
}

func (x *QuotationInfoData) GetQuoteTime() string {
	if x != nil {
		return x.QuoteTime
	}
	return ""
}

// 贵金属业务最优行情
type PgmBestQuotElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreClosePrice      float64 `protobuf:"fixed64,1,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`           // 昨收盘价
	PreSettlementPrice float64 `protobuf:"fixed64,2,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"` // 昨结算价
	PrePosition        uint64  `protobuf:"varint,3,opt,name=prePosition,proto3" json:"prePosition,omitempty"`                // 初始持仓量
	UpLimitPrice       float64 `protobuf:"fixed64,4,opt,name=upLimitPrice,proto3" json:"upLimitPrice,omitempty"`             // 涨停板价
	LowLimitPrice      float64 `protobuf:"fixed64,5,opt,name=lowLimitPrice,proto3" json:"lowLimitPrice,omitempty"`           // 跌停板价
	OpenPrice          float64 `protobuf:"fixed64,6,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                   // 今开盘价
	SettlementPrice    float64 `protobuf:"fixed64,7,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`       // 今结算价
	ClosePrice         float64 `protobuf:"fixed64,8,opt,name=closePrice,proto3" json:"closePrice,omitempty"`                 // 今收盘价
	Turnover           float64 `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`                     // 总成交金额
	HighPrice          float64 `protobuf:"fixed64,10,opt,name=highPrice,proto3" json:"highPrice,omitempty"`                  // 最高价
	LowPrice           float64 `protobuf:"fixed64,11,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`                    // 最低价
	LastPrice          float64 `protobuf:"fixed64,12,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`                  // 最新价
	TotalPosition      uint64  `protobuf:"varint,13,opt,name=totalPosition,proto3" json:"totalPosition,omitempty"`           // 总持仓量
	TotalVolume        uint64  `protobuf:"varint,14,opt,name=totalVolume,proto3" json:"totalVolume,omitempty"`               // 总成交量
	TotalTradeNum      uint64  `protobuf:"varint,15,opt,name=totalTradeNum,proto3" json:"totalTradeNum,omitempty"`           // 总成交笔数(上金所中无此字段，待删除.20220630)
	BuyPrice1          float64 `protobuf:"fixed64,16,opt,name=buyPrice1,proto3" json:"buyPrice1,omitempty"`                  // 申买价
	BuyVolume1         uint64  `protobuf:"varint,17,opt,name=buyVolume1,proto3" json:"buyVolume1,omitempty"`                 // 申买量
	SellPrice1         float64 `protobuf:"fixed64,18,opt,name=sellPrice1,proto3" json:"sellPrice1,omitempty"`                // 申卖价
	SellVolume1        uint64  `protobuf:"varint,19,opt,name=sellVolume1,proto3" json:"sellVolume1,omitempty"`               // 申卖量
	TradeWeight        float64 `protobuf:"fixed64,20,opt,name=tradeWeight,proto3" json:"tradeWeight,omitempty"`              // 成交(双边)重量
	UpDown             float64 `protobuf:"fixed64,21,opt,name=upDown,proto3" json:"upDown,omitempty"`                        // 指数涨跌
	UpDownRate         float64 `protobuf:"fixed64,22,opt,name=upDownRate,proto3" json:"upDownRate,omitempty"`                // 指数涨跌幅
	Timestamp          uint64  `protobuf:"varint,23,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                   // 更新时间戳
	GenTime            string  `protobuf:"bytes,24,opt,name=genTime,proto3" json:"genTime,omitempty"`                        // 生成时间
}

func (x *PgmBestQuotElem) Reset() {
	*x = PgmBestQuotElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmBestQuotElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmBestQuotElem) ProtoMessage() {}

func (x *PgmBestQuotElem) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmBestQuotElem.ProtoReflect.Descriptor instead.
func (*PgmBestQuotElem) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{13}
}

func (x *PgmBestQuotElem) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetPrePosition() uint64 {
	if x != nil {
		return x.PrePosition
	}
	return 0
}

func (x *PgmBestQuotElem) GetUpLimitPrice() float64 {
	if x != nil {
		return x.UpLimitPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetLowLimitPrice() float64 {
	if x != nil {
		return x.LowLimitPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *PgmBestQuotElem) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *PgmBestQuotElem) GetTotalPosition() uint64 {
	if x != nil {
		return x.TotalPosition
	}
	return 0
}

func (x *PgmBestQuotElem) GetTotalVolume() uint64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *PgmBestQuotElem) GetTotalTradeNum() uint64 {
	if x != nil {
		return x.TotalTradeNum
	}
	return 0
}

func (x *PgmBestQuotElem) GetBuyPrice1() float64 {
	if x != nil {
		return x.BuyPrice1
	}
	return 0
}

func (x *PgmBestQuotElem) GetBuyVolume1() uint64 {
	if x != nil {
		return x.BuyVolume1
	}
	return 0
}

func (x *PgmBestQuotElem) GetSellPrice1() float64 {
	if x != nil {
		return x.SellPrice1
	}
	return 0
}

func (x *PgmBestQuotElem) GetSellVolume1() uint64 {
	if x != nil {
		return x.SellVolume1
	}
	return 0
}

func (x *PgmBestQuotElem) GetTradeWeight() float64 {
	if x != nil {
		return x.TradeWeight
	}
	return 0
}

func (x *PgmBestQuotElem) GetUpDown() float64 {
	if x != nil {
		return x.UpDown
	}
	return 0
}

func (x *PgmBestQuotElem) GetUpDownRate() float64 {
	if x != nil {
		return x.UpDownRate
	}
	return 0
}

func (x *PgmBestQuotElem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PgmBestQuotElem) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

// /< 贵金属业务深度行情域
type PgmMBLQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPrice float64 `protobuf:"fixed64,1,opt,name=orderPrice,proto3" json:"orderPrice,omitempty"` // 价格(卖N价或买N价)
	OrderQty   int32   `protobuf:"varint,2,opt,name=orderQty,proto3" json:"orderQty,omitempty"`      // 委托量(卖N量或买N量)
	BsFlag     int32   `protobuf:"varint,4,opt,name=bsFlag,proto3" json:"bsFlag,omitempty"`          // 买卖标志(EPgmMatchType：PgmMT_BuyMatch =1买盘；PgmMT_SellMatch =2卖盘)
	DeltaQty   int32   `protobuf:"varint,6,opt,name=deltaQty,proto3" json:"deltaQty,omitempty"`      // 委托量差(相比上一笔tick数据)
}

func (x *PgmMBLQuot) Reset() {
	*x = PgmMBLQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmMBLQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmMBLQuot) ProtoMessage() {}

func (x *PgmMBLQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmMBLQuot.ProtoReflect.Descriptor instead.
func (*PgmMBLQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{14}
}

func (x *PgmMBLQuot) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *PgmMBLQuot) GetOrderQty() int32 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *PgmMBLQuot) GetBsFlag() int32 {
	if x != nil {
		return x.BsFlag
	}
	return 0
}

func (x *PgmMBLQuot) GetDeltaQty() int32 {
	if x != nil {
		return x.DeltaQty
	}
	return 0
}

// 贵金属业务额外参数/扩展参数
type PgmExtraQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceChange    float64        `protobuf:"fixed64,1,opt,name=priceChange,proto3" json:"priceChange,omitempty"`                        // 现涨(当前最新价-上次最新价)
	OffsetFlag     EPgmOffsetFlag `protobuf:"varint,2,opt,name=offsetFlag,proto3,enum=fippb.EPgmOffsetFlag" json:"offsetFlag,omitempty"` // 开平(10种)
	PositionChange int64          `protobuf:"varint,3,opt,name=positionChange,proto3" json:"positionChange,omitempty"`                   // 总持仓量变化(当前总持仓量-上次总持仓量)
	VolumeChange   uint64         `protobuf:"varint,4,opt,name=volumeChange,proto3" json:"volumeChange,omitempty"`                       // 总成交量变化(当前总成交量-上次总成交量)
	MatchType      EPgmMatchType  `protobuf:"varint,5,opt,name=matchType,proto3,enum=fippb.EPgmMatchType" json:"matchType,omitempty"`    // 成交方向(PgmMT_BuyMatch =1买成交；PgmMT_SellMatch =2卖成交)
	AvgPrice       float64        `protobuf:"fixed64,6,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`                              // 当日均价(总成交金额/总成交量)
	TurnoverChange float64        `protobuf:"fixed64,7,opt,name=turnoverChange,proto3" json:"turnoverChange,omitempty"`                  // 总成交金额变化(当前总成交金额-上次总成交金额)
}

func (x *PgmExtraQuot) Reset() {
	*x = PgmExtraQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmExtraQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmExtraQuot) ProtoMessage() {}

func (x *PgmExtraQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmExtraQuot.ProtoReflect.Descriptor instead.
func (*PgmExtraQuot) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{15}
}

func (x *PgmExtraQuot) GetPriceChange() float64 {
	if x != nil {
		return x.PriceChange
	}
	return 0
}

func (x *PgmExtraQuot) GetOffsetFlag() EPgmOffsetFlag {
	if x != nil {
		return x.OffsetFlag
	}
	return EPgmOffsetFlag_PgmOF_Null
}

func (x *PgmExtraQuot) GetPositionChange() int64 {
	if x != nil {
		return x.PositionChange
	}
	return 0
}

func (x *PgmExtraQuot) GetVolumeChange() uint64 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *PgmExtraQuot) GetMatchType() EPgmMatchType {
	if x != nil {
		return x.MatchType
	}
	return EPgmMatchType_PgmMT_Null
}

func (x *PgmExtraQuot) GetAvgPrice() float64 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *PgmExtraQuot) GetTurnoverChange() float64 {
	if x != nil {
		return x.TurnoverChange
	}
	return 0
}

// 贵金属业务交割品种信息  QDI风格
type PgmVarietyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarietyID        string   `protobuf:"bytes,1,opt,name=varietyID,proto3" json:"varietyID,omitempty"`                         // 交割品种代码
	VarietyName      string   `protobuf:"bytes,2,opt,name=varietyName,proto3" json:"varietyName,omitempty"`                     // 交割品种全称
	VarietyAbbr      string   `protobuf:"bytes,3,opt,name=varietyAbbr,proto3" json:"varietyAbbr,omitempty"`                     // 交割品种简称
	VarietyType      string   `protobuf:"bytes,4,opt,name=varietyType,proto3" json:"varietyType,omitempty"`                     // 品种类别 1-黄金，2-铂金，3-白银,4-钯金
	MinPickup        float64  `protobuf:"fixed64,5,opt,name=minPickup,proto3" json:"minPickup,omitempty"`                       // 最小提货数量
	DefaultStdWeight float64  `protobuf:"fixed64,6,opt,name=defaultStdWeight,proto3" json:"defaultStdWeight,omitempty"`         // 默认条块标重
	PickupBase       float64  `protobuf:"fixed64,7,opt,name=pickupBase,proto3" json:"pickupBase,omitempty"`                     // 提货步长
	WeightUnit       string   `protobuf:"bytes,8,opt,name=weightUnit,proto3" json:"weightUnit,omitempty"`                       // 重量单位 01-克,02-千克,03-盎司
	DestroyFlag      string   `protobuf:"bytes,9,opt,name=destroyFlag,proto3" json:"destroyFlag,omitempty"`                     // 注销标志 '1' - 是 '0' - 否
	ExchangeID       EExchgID `protobuf:"varint,10,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *PgmVarietyInfo) Reset() {
	*x = PgmVarietyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmVarietyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmVarietyInfo) ProtoMessage() {}

func (x *PgmVarietyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmVarietyInfo.ProtoReflect.Descriptor instead.
func (*PgmVarietyInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{16}
}

func (x *PgmVarietyInfo) GetVarietyID() string {
	if x != nil {
		return x.VarietyID
	}
	return ""
}

func (x *PgmVarietyInfo) GetVarietyName() string {
	if x != nil {
		return x.VarietyName
	}
	return ""
}

func (x *PgmVarietyInfo) GetVarietyAbbr() string {
	if x != nil {
		return x.VarietyAbbr
	}
	return ""
}

func (x *PgmVarietyInfo) GetVarietyType() string {
	if x != nil {
		return x.VarietyType
	}
	return ""
}

func (x *PgmVarietyInfo) GetMinPickup() float64 {
	if x != nil {
		return x.MinPickup
	}
	return 0
}

func (x *PgmVarietyInfo) GetDefaultStdWeight() float64 {
	if x != nil {
		return x.DefaultStdWeight
	}
	return 0
}

func (x *PgmVarietyInfo) GetPickupBase() float64 {
	if x != nil {
		return x.PickupBase
	}
	return 0
}

func (x *PgmVarietyInfo) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

func (x *PgmVarietyInfo) GetDestroyFlag() string {
	if x != nil {
		return x.DestroyFlag
	}
	return ""
}

func (x *PgmVarietyInfo) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// 贵金属 交易所状态信息(QDI风格)
type PgmExchangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所代码
	ExchangeState string   `protobuf:"bytes,2,opt,name=exchangeState,proto3" json:"exchangeState,omitempty"`                // 交易所运行状态 0-初始化，1-初始化完成，2-开市，3-收市，4-正在结算，5-结算完成，6-T+0财务处理完成，7-日终登帐完成
	AnnounceTime  string   `protobuf:"bytes,3,opt,name=announceTime,proto3" json:"announceTime,omitempty"`                  // 发布时间
}

func (x *PgmExchangeInfo) Reset() {
	*x = PgmExchangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmExchangeInfo) ProtoMessage() {}

func (x *PgmExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmExchangeInfo.ProtoReflect.Descriptor instead.
func (*PgmExchangeInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{17}
}

func (x *PgmExchangeInfo) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmExchangeInfo) GetExchangeState() string {
	if x != nil {
		return x.ExchangeState
	}
	return ""
}

func (x *PgmExchangeInfo) GetAnnounceTime() string {
	if x != nil {
		return x.AnnounceTime
	}
	return ""
}

// 贵金属 交易所状态信息(财讯通风格)
type PgmExchangeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    EExchgID              `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"`                    // 交易所代码
	ExchangeState EPgmExchangeStateType `protobuf:"varint,2,opt,name=exchangeState,proto3,enum=fippb.EPgmExchangeStateType" json:"exchangeState,omitempty"` // 交易所运行状态 0-初始化，1-初始化完成，2-开市，3-收市，4-正在结算，5-结算完成，6-T+0财务处理完成，7-日终登帐完成
	AnnounceTime  string                `protobuf:"bytes,3,opt,name=announceTime,proto3" json:"announceTime,omitempty"`                                     // 发布时间
}

func (x *PgmExchangeStatus) Reset() {
	*x = PgmExchangeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_pgm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgmExchangeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgmExchangeStatus) ProtoMessage() {}

func (x *PgmExchangeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_pgm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgmExchangeStatus.ProtoReflect.Descriptor instead.
func (*PgmExchangeStatus) Descriptor() ([]byte, []int) {
	return file_fip_def_pgm_proto_rawDescGZIP(), []int{18}
}

func (x *PgmExchangeStatus) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *PgmExchangeStatus) GetExchangeState() EPgmExchangeStateType {
	if x != nil {
		return x.ExchangeState
	}
	return EPgmExchangeStateType_PgmExchangeStateType_Itializing
}

func (x *PgmExchangeStatus) GetAnnounceTime() string {
	if x != nil {
		return x.AnnounceTime
	}
	return ""
}

var File_fip_def_pgm_proto protoreflect.FileDescriptor

var file_fip_def_pgm_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x70, 0x67, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a,
	0x0e, 0x50, 0x67, 0x6d, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x0c, 0x50,
	0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x22,
	0xa0, 0x01, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc4, 0x04, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e,
	0x67, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x50, 0x67, 0x6d,
	0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x50, 0x67, 0x6d, 0x53, 0x75,
	0x62, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0xc0, 0x04, 0x0a, 0x0f, 0x51, 0x64, 0x69, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x61,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x22, 0xb1, 0x05, 0x0a, 0x0f, 0x50, 0x67,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x73,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79,
	0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a,
	0x18, 0x50, 0x67, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0b, 0x4d, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x4c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x62, 0x69, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x74, 0x22, 0xbf, 0x06, 0x0a, 0x11,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x74, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x74, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x4d, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x6d, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x06,
	0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x7c, 0x0a, 0x0a, 0x50, 0x67, 0x6d, 0x4d, 0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x73, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x51, 0x74, 0x79, 0x22, 0xab, 0x02,
	0x0a, 0x0c, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67,
	0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x0e,
	0x50, 0x67, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x41, 0x62, 0x62, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x41, 0x62, 0x62, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x64, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x8c, 0x01, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xe6, 0x03,
	0x0a, 0x0d, 0x45, 0x50, 0x67, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x5f, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67,
	0x6d, 0x52, 0x65, 0x61, 0x6c, 0x5f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0xc9,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x6f, 0x72, 0x65, 0x10, 0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x48, 0x69,
	0x73, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0xcb, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xcc, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f,
	0x4d, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xcd, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xce, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xcf, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50,
	0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10,
	0xd0, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x4d, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd1, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xd2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x50,
	0x42, 0x55, 0x6e, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xd3, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x48, 0x69, 0x73, 0x5f, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xab, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x67,
	0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x10, 0xac, 0x02, 0x12, 0x18, 0x0a, 0x13,
	0x50, 0x67, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x10, 0xad, 0x02, 0x2a, 0x47, 0x0a, 0x10, 0x45, 0x50, 0x67, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50,
	0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x47, 0x45, 0x10, 0xd1, 0x0f, 0x2a,
	0xf7, 0x02, 0x0a, 0x11, 0x45, 0x50, 0x67, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f,
	0x42, 0x69, 0x64, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64,
	0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69,
	0x64, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69,
	0x64, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x47,
	0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x44, 0x65, 0x63, 0x6c, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x47,
	0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x65,
	0x63, 0x6c, 0x45, 0x6e, 0x64, 0x73, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x47, 0x4d, 0x49,
	0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x44, 0x65, 0x63, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x69, 0x64,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0xfe, 0x01, 0x0a, 0x1b, 0x45, 0x50,
	0x67, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6f, 0x72, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x47, 0x4d,
	0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x47, 0x4d, 0x49,
	0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x47, 0x4d, 0x49,
	0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x47, 0x4d,
	0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x67, 0x45, 0x6e, 0x64, 0x73, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0xf5, 0x01, 0x0a, 0x19, 0x45,
	0x50, 0x67, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x47, 0x4d, 0x49,
	0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x47, 0x4d, 0x49, 0x53,
	0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x42, 0x69, 0x64,
	0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x47, 0x4d,
	0x49, 0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x47, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x47, 0x4d,
	0x49, 0x53, 0x54, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x10, 0x7f, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x45, 0x50, 0x67, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x67, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x50,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x50,
	0x61, 0x6c, 0x6c, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x04, 0x2a, 0x30, 0x0a, 0x0c, 0x45, 0x50,
	0x67, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x67,
	0x6d, 0x5f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x67, 0x6d, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x2a, 0x75, 0x0a, 0x0e,
	0x45, 0x50, 0x67, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x67, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x5f, 0x47, 0x72, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x67, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x5f,
	0x4b, 0x69, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67,
	0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x5f, 0x4f, 0x75, 0x6e, 0x63,
	0x65, 0x10, 0x03, 0x2a, 0xcf, 0x01, 0x0a, 0x0c, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x5f, 0x53, 0x70, 0x6f, 0x74, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0xfd, 0x01, 0x0a, 0x0f, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x67, 0x6d, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0xf4, 0x01, 0x0a, 0x0e, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x6f, 0x74, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x04,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10,
	0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0xc8, 0x03, 0x0a,
	0x0e, 0x45, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x67, 0x6d, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x6f, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x5f,
	0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x57,
	0x65, 0x65, 0x6b, 0x73, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x33, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x31, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67,
	0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x33, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x09,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x34, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67,
	0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x35, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x36, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x0c,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x39, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67,
	0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x59, 0x65, 0x61,
	0x72, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x0f, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x67, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x60, 0x0a, 0x0d, 0x45, 0x50, 0x67, 0x6d, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x67, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x59, 0x75, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x67, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59, 0x75,
	0x61, 0x6e, 0x50, 0x65, 0x72, 0x4b, 0x67, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x0a, 0x45, 0x50, 0x67,
	0x6d, 0x43, 0x31, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x67, 0x6d, 0x43, 0x31,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x67, 0x6d, 0x43, 0x31, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x63, 0x6c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x67, 0x6d, 0x43, 0x31, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x63, 0x6c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x67, 0x6d, 0x43, 0x31, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x63, 0x6c, 0x10, 0x03, 0x2a, 0xef, 0x02, 0x0a, 0x0d, 0x45, 0x50, 0x67, 0x6d,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d,
	0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x5f, 0x33, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x4b, 0x4c,
	0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x31, 0x30, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x35, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x33, 0x30, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x31, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x32, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x6f, 0x75,
	0x72, 0x5f, 0x33, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e,
	0x65, 0x5f, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x34, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x67,
	0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x44, 0x61, 0x79, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x5f, 0x31, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x31, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4b, 0x4c,
	0x69, 0x6e, 0x65, 0x5f, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x31, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x5f, 0x59, 0x65, 0x61, 0x72,
	0x5f, 0x31, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4b, 0x4c, 0x69, 0x6e, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x68, 0x0a, 0x11, 0x45, 0x50, 0x67,
	0x6d, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x67, 0x6d, 0x41, 0x56, 0x54, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x41, 0x56, 0x54, 0x5f, 0x46, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67,
	0x6d, 0x41, 0x56, 0x54, 0x5f, 0x46, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x79, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x67, 0x6d, 0x41, 0x56, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x10, 0x7f, 0x2a, 0x48, 0x0a, 0x0d, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x67, 0x6d, 0x4d, 0x54, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x67, 0x6d, 0x4d, 0x54, 0x5f, 0x42, 0x75,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4d,
	0x54, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x2a, 0x9c, 0x01,
	0x0a, 0x0e, 0x45, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69, 0x72, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69,
	0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69, 0x72, 0x5f, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67,
	0x6d, 0x50, 0x61, 0x79, 0x44, 0x69, 0x72, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69, 0x72, 0x5f, 0x50, 0x61, 0x79,
	0x65, 0x72, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x69,
	0x72, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x10, 0x05, 0x2a, 0xdd, 0x02, 0x0a,
	0x15, 0x45, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x30, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x70, 0x0a, 0x0d,
	0x45, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70,
	0x6f, 0x74, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x77, 0x61, 0x70, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x7f,
	0x0a, 0x13, 0x45, 0x50, 0x67, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x67, 0x6d, 0x52, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x67, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
	0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x67, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	0x75, 0x6d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x67, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x5f, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x10, 0x03, 0x2a,
	0x40, 0x0a, 0x10, 0x45, 0x50, 0x67, 0x6d, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x4f, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d,
	0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x10,
	0x01, 0x2a, 0x6f, 0x0a, 0x12, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x02, 0x2a, 0x69, 0x0a, 0x14, 0x45, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x67, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x2a, 0x86, 0x01,
	0x0a, 0x15, 0x45, 0x50, 0x67, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x67, 0x6d, 0x50, 0x75,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x67, 0x6d, 0x50, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x50, 0x75, 0x62, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x67, 0x6d, 0x50, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x43, 0x61, 0x6c, 0x63, 0x41, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x67, 0x6d, 0x50, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x59, 0x0a, 0x0b, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x67, 0x6d, 0x53, 0x54, 0x5f, 0x41,
	0x64, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x53, 0x54, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67,
	0x6d, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x67, 0x6d, 0x53, 0x54, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10,
	0x03, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d,
	0x53, 0x43, 0x54, 0x5f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x53, 0x43, 0x54, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x67, 0x6d, 0x53, 0x43, 0x54, 0x5f, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x67, 0x6d, 0x53, 0x43, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x53, 0x43, 0x54, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x10, 0x04, 0x2a, 0x6f, 0x0a, 0x10, 0x45, 0x50, 0x67, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x67, 0x6d, 0x43, 0x54, 0x5f, 0x52, 0x4d, 0x42, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x67,
	0x6d, 0x43, 0x54, 0x5f, 0x48, 0x4b, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x67, 0x6d,
	0x43, 0x54, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x67, 0x6d, 0x43,
	0x54, 0x5f, 0x54, 0x57, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x67, 0x6d, 0x43, 0x54,
	0x5f, 0x4a, 0x50, 0x59, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x67, 0x6d, 0x43, 0x54, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x5e, 0x0a, 0x10, 0x45, 0x4f, 0x70, 0x74,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x70, 0x74, 0x45, 0x54, 0x5f, 0x41, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x45, 0x54, 0x5f, 0x42, 0x65, 0x72, 0x6d, 0x75, 0x64, 0x61,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x45, 0x54, 0x5f, 0x45, 0x75, 0x72, 0x6f,
	0x70, 0x65, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x45, 0x54, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x7f, 0x2a, 0x35, 0x0a, 0x0a, 0x45, 0x43, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x50, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x50, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a,
	0x3d, 0x0a, 0x11, 0x45, 0x50, 0x67, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x67, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x67, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x67, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x2a, 0xf4,
	0x01, 0x0a, 0x0e, 0x45, 0x50, 0x67, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x4f, 0x46,
	0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x69, 0x6c, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x69, 0x6c, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0x08, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x6c,
	0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x67, 0x6d, 0x4f, 0x46, 0x5f, 0x4e, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x0a, 0x2a, 0x4d, 0x0a, 0x0e, 0x45, 0x50, 0x67, 0x6d, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x67, 0x6d, 0x48, 0x54,
	0x5f, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x67, 0x6d, 0x48, 0x54, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x67, 0x6d, 0x48, 0x54, 0x5f, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x10, 0x02, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64,
	0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_pgm_proto_rawDescOnce sync.Once
	file_fip_def_pgm_proto_rawDescData = file_fip_def_pgm_proto_rawDesc
)

func file_fip_def_pgm_proto_rawDescGZIP() []byte {
	file_fip_def_pgm_proto_rawDescOnce.Do(func() {
		file_fip_def_pgm_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_pgm_proto_rawDescData)
	})
	return file_fip_def_pgm_proto_rawDescData
}

var file_fip_def_pgm_proto_enumTypes = make([]protoimpl.EnumInfo, 33)
var file_fip_def_pgm_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_fip_def_pgm_proto_goTypes = []interface{}{
	(EPgmErrorCode)(0),               // 0: fippb.EPgmErrorCode
	(EPgmContractType)(0),            // 1: fippb.EPgmContractType
	(EPgmInstStateType)(0),           // 2: fippb.EPgmInstStateType
	(EPgmInstStateTypeForInquiry)(0), // 3: fippb.EPgmInstStateTypeForInquiry
	(EPgmInstStateTypeForQuote)(0),   // 4: fippb.EPgmInstStateTypeForQuote
	(EPgmVarietyType)(0),             // 5: fippb.EPgmVarietyType
	(EPgmFlagType)(0),                // 6: fippb.EPgmFlagType
	(EPgmWeightUnit)(0),              // 7: fippb.EPgmWeightUnit
	(EPgmMarketID)(0),                // 8: fippb.EPgmMarketID
	(EPgmMarketState)(0),             // 9: fippb.EPgmMarketState
	(EPgmMarketType)(0),              // 10: fippb.EPgmMarketType
	(EPgmPeriodType)(0),              // 11: fippb.EPgmPeriodType
	(EPgmPriceType)(0),               // 12: fippb.EPgmPriceType
	(EPgmC1Type)(0),                  // 13: fippb.EPgmC1Type
	(EPgmKLineType)(0),               // 14: fippb.EPgmKLineType
	(EPgmAvgVolumeType)(0),           // 15: fippb.EPgmAvgVolumeType
	(EPgmMatchType)(0),               // 16: fippb.EPgmMatchType
	(EPgmPayDirType)(0),              // 17: fippb.EPgmPayDirType
	(EPgmExchangeStateType)(0),       // 18: fippb.EPgmExchangeStateType
	(EPgmTradeType)(0),               // 19: fippb.EPgmTradeType
	(EPgmRateVarietyType)(0),         // 20: fippb.EPgmRateVarietyType
	(EPgmIsUpdateType)(0),            // 21: fippb.EPgmIsUpdateType
	(EPgmMemberAttrType)(0),          // 22: fippb.EPgmMemberAttrType
	(EPgmMemberStatusType)(0),        // 23: fippb.EPgmMemberStatusType
	(EPgmPublishStatusType)(0),       // 24: fippb.EPgmPublishStatusType
	(EPgmSubType)(0),                 // 25: fippb.EPgmSubType
	(EPgmSubContractType)(0),         // 26: fippb.EPgmSubContractType
	(EPgmCurrencyType)(0),            // 27: fippb.EPgmCurrencyType
	(EOptExerciseType)(0),            // 28: fippb.EOptExerciseType
	(ECallOrPut)(0),                  // 29: fippb.ECallOrPut
	(EPgmServiceStatus)(0),           // 30: fippb.EPgmServiceStatus
	(EPgmOffsetFlag)(0),              // 31: fippb.EPgmOffsetFlag
	(EPgmHandleType)(0),              // 32: fippb.EPgmHandleType
	(*PgmTSChartElem)(nil),           // 33: fippb.PgmTSChartElem
	(*PgmMatchDetailElem)(nil),       // 34: fippb.PgmMatchDetailElem
	(*PgmKLineElem)(nil),             // 35: fippb.PgmKLineElem
	(*PgmTimePriceElem)(nil),         // 36: fippb.PgmTimePriceElem
	(*PgmOffsetStaElem)(nil),         // 37: fippb.PgmOffsetStaElem
	(*PgmAvgVolumeElem)(nil),         // 38: fippb.PgmAvgVolumeElem
	(*PgmExchangeElem)(nil),          // 39: fippb.PgmExchangeElem
	(*PgmSubElem)(nil),               // 40: fippb.PgmSubElem
	(*QdiInstInfoElem)(nil),          // 41: fippb.QdiInstInfoElem
	(*PgmContractElem)(nil),          // 42: fippb.PgmContractElem
	(*PgmStaticDataVersionElem)(nil), // 43: fippb.PgmStaticDataVersionElem
	(*MDEntryData)(nil),              // 44: fippb.MDEntryData
	(*QuotationInfoData)(nil),        // 45: fippb.QuotationInfoData
	(*PgmBestQuotElem)(nil),          // 46: fippb.PgmBestQuotElem
	(*PgmMBLQuot)(nil),               // 47: fippb.PgmMBLQuot
	(*PgmExtraQuot)(nil),             // 48: fippb.PgmExtraQuot
	(*PgmVarietyInfo)(nil),           // 49: fippb.PgmVarietyInfo
	(*PgmExchangeInfo)(nil),          // 50: fippb.PgmExchangeInfo
	(*PgmExchangeStatus)(nil),        // 51: fippb.PgmExchangeStatus
	(EExchgID)(0),                    // 52: fippb.EExchgID
}
var file_fip_def_pgm_proto_depIdxs = []int32{
	52, // 0: fippb.PgmExchangeElem.exchangeID:type_name -> fippb.EExchgID
	52, // 1: fippb.PgmSubElem.exchangeID:type_name -> fippb.EExchgID
	26, // 2: fippb.PgmSubElem.contractType:type_name -> fippb.EPgmSubContractType
	52, // 3: fippb.QdiInstInfoElem.exchangeID:type_name -> fippb.EExchgID
	52, // 4: fippb.PgmContractElem.exchangeID:type_name -> fippb.EExchgID
	1,  // 5: fippb.PgmContractElem.contractType:type_name -> fippb.EPgmContractType
	52, // 6: fippb.PgmStaticDataVersionElem.exchangeID:type_name -> fippb.EExchgID
	44, // 7: fippb.QuotationInfoData.mdEntryDatas:type_name -> fippb.MDEntryData
	31, // 8: fippb.PgmExtraQuot.offsetFlag:type_name -> fippb.EPgmOffsetFlag
	16, // 9: fippb.PgmExtraQuot.matchType:type_name -> fippb.EPgmMatchType
	52, // 10: fippb.PgmVarietyInfo.exchangeID:type_name -> fippb.EExchgID
	52, // 11: fippb.PgmExchangeInfo.exchangeID:type_name -> fippb.EExchgID
	52, // 12: fippb.PgmExchangeStatus.exchangeID:type_name -> fippb.EExchgID
	18, // 13: fippb.PgmExchangeStatus.exchangeState:type_name -> fippb.EPgmExchangeStateType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_fip_def_pgm_proto_init() }
func file_fip_def_pgm_proto_init() {
	if File_fip_def_pgm_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_def_pgm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmTSChartElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmMatchDetailElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmKLineElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmTimePriceElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmOffsetStaElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmAvgVolumeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmExchangeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmSubElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QdiInstInfoElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmContractElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmStaticDataVersionElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MDEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotationInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmBestQuotElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmMBLQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmExtraQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmVarietyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmExchangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_pgm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgmExchangeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_pgm_proto_rawDesc,
			NumEnums:      33,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_pgm_proto_goTypes,
		DependencyIndexes: file_fip_def_pgm_proto_depIdxs,
		EnumInfos:         file_fip_def_pgm_proto_enumTypes,
		MessageInfos:      file_fip_def_pgm_proto_msgTypes,
	}.Build()
	File_fip_def_pgm_proto = out.File
	file_fip_def_pgm_proto_rawDesc = nil
	file_fip_def_pgm_proto_goTypes = nil
	file_fip_def_pgm_proto_depIdxs = nil
}
