//*
// Copyright (C) 2015-2016，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 实时行情接口proto定义
//
// @author <suzhongpo，mengwen>
//
// @date 2017-7-10
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 订阅行请求
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3015> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type ReqSubscribeQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64           `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`        // 账号ID
	MsgId     uint32           `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                // 流水号 ,旧字段名称为requestId
	Req       ReqType          `protobuf:"varint,3,opt,name=req,proto3,enum=fippb.ReqType" json:"req,omitempty"` // 请求类型,旧字段名称为type
	List      []*SubscribeElem `protobuf:"bytes,4,rep,name=List,proto3" json:"List,omitempty"`                   // 订阅列表//旧协议定义中为repeated SubElem subList
	DeviceNo  string           `protobuf:"bytes,5,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`           // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqSubscribeQuot) Reset() {
	*x = ReqSubscribeQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeQuot) ProtoMessage() {}

func (x *ReqSubscribeQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeQuot.ProtoReflect.Descriptor instead.
func (*ReqSubscribeQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{0}
}

func (x *ReqSubscribeQuot) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ReqSubscribeQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSubscribeQuot) GetReq() ReqType {
	if x != nil {
		return x.Req
	}
	return ReqType_Add
}

func (x *ReqSubscribeQuot) GetList() []*SubscribeElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReqSubscribeQuot) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 订阅行情响应
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3016> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type RspSubscribeQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  uint64         `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`                             // 账号ID
	MsgId      uint32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                     // 流水号      //旧协议为requestId
	ErrorId    uint32         `protobuf:"varint,3,opt,name=errorId,proto3" json:"errorId,omitempty"`                                 // 0:success, 非0:error，若无授权，也返回对应的错误码，参见ErrCode。
	Qry        *SubscribeQry  `protobuf:"bytes,4,opt,name=qry,proto3" json:"qry,omitempty"`                                          // 查询信息
	RealQuot   bool           `protobuf:"varint,5,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                               // true 实时行情；false延时行情(for cme添加)
	ResultCode AuthResultCode `protobuf:"varint,6,opt,name=resultCode,proto3,enum=fippb.AuthResultCode" json:"resultCode,omitempty"` // 返回状态码(for cme添加)
	AuthMsg    string         `protobuf:"bytes,7,opt,name=authMsg,proto3" json:"authMsg,omitempty"`                                  // 授权信息 or 错误原因(for cme添加)
}

func (x *RspSubscribeQuot) Reset() {
	*x = RspSubscribeQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeQuot) ProtoMessage() {}

func (x *RspSubscribeQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeQuot.ProtoReflect.Descriptor instead.
func (*RspSubscribeQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{1}
}

func (x *RspSubscribeQuot) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *RspSubscribeQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSubscribeQuot) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSubscribeQuot) GetQry() *SubscribeQry {
	if x != nil {
		return x.Qry
	}
	return nil
}

func (x *RspSubscribeQuot) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

func (x *RspSubscribeQuot) GetResultCode() AuthResultCode {
	if x != nil {
		return x.ResultCode
	}
	return AuthResultCode_AuthUnknow
}

func (x *RspSubscribeQuot) GetAuthMsg() string {
	if x != nil {
		return x.AuthMsg
	}
	return ""
}

// /< 订阅行情查询响应 协议号：3040
type RspSubscribeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*SubscribeQry `protobuf:"bytes,1,rep,name=Info,proto3" json:"Info,omitempty"`
}

func (x *RspSubscribeQuery) Reset() {
	*x = RspSubscribeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeQuery) ProtoMessage() {}

func (x *RspSubscribeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeQuery.ProtoReflect.Descriptor instead.
func (*RspSubscribeQuery) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{2}
}

func (x *RspSubscribeQuery) GetInfo() []*SubscribeQry {
	if x != nil {
		return x.Info
	}
	return nil
}

// *
// @brief 快照发送完毕
// @author <xiahuili>
// @date 2018-3-27
// @note 协议号 client-proxy:<协议号：3059>
// @modify
type RspSnapShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`       // 流水号
	ErrorId  uint32 `protobuf:"varint,2,opt,name=errorId,proto3" json:"errorId,omitempty"`   // 0:success, 非0:error
	RealQuot bool   `protobuf:"varint,3,opt,name=realQuot,proto3" json:"realQuot,omitempty"` // true 实时行情；false延时行情(for cme添加)
}

func (x *RspSnapShot) Reset() {
	*x = RspSnapShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSnapShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSnapShot) ProtoMessage() {}

func (x *RspSnapShot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSnapShot.ProtoReflect.Descriptor instead.
func (*RspSnapShot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{3}
}

func (x *RspSnapShot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSnapShot) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSnapShot) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 增值服务Level2实时结算价行情域
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3031> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyRTPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所     //旧协议为ExchangeId
	MsgId      uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	ContractID string   `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	Price      float64  `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`                        // 实时结算价  //旧协议RealTimePrice
	Timestamp  uint64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间（基于1970时间，精确到ms）
}

func (x *NotifyRTPrice) Reset() {
	*x = NotifyRTPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyRTPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyRTPrice) ProtoMessage() {}

func (x *NotifyRTPrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyRTPrice.ProtoReflect.Descriptor instead.
func (*NotifyRTPrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{4}
}

func (x *NotifyRTPrice) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyRTPrice) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyRTPrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifyRTPrice) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NotifyRTPrice) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 增值服务Level2委托统计行情域
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3032> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyOrderSta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid         EExchgID         `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                         //交易所     //旧协议为ExchangeId
	MsgId           uint32           `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                                 // 流水号
	ContractID      string           `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                                        //合约号
	TotalBuy        int32            `protobuf:"varint,4,opt,name=totalBuy,proto3" json:"totalBuy,omitempty"`                                           //买委托总量    //旧协议为TotalBuyOrderNum
	TotalSell       int32            `protobuf:"varint,5,opt,name=TotalSell,proto3" json:"TotalSell,omitempty"`                                         //卖委托总量    //旧协议为TotalSellOrderNum
	WABuyPrice      float64          `protobuf:"fixed64,6,opt,name=WABuyPrice,proto3" json:"WABuyPrice,omitempty"`                                      //加权平均委买价格     //旧协议为WeightedAverageBuyOrderPrice
	WASellPrice     float64          `protobuf:"fixed64,7,opt,name=WASellPrice,proto3" json:"WASellPrice,omitempty"`                                    //加权平均委卖价格     //旧协议为WeightedAverageSellOrderPrice
	Timestamp       uint64           `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         // 时间（基于1970时间，精确到ms）
	LateralQuotType EQuotLateralType `protobuf:"varint,9,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *NotifyOrderSta) Reset() {
	*x = NotifyOrderSta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOrderSta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOrderSta) ProtoMessage() {}

func (x *NotifyOrderSta) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOrderSta.ProtoReflect.Descriptor instead.
func (*NotifyOrderSta) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{5}
}

func (x *NotifyOrderSta) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyOrderSta) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOrderSta) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifyOrderSta) GetTotalBuy() int32 {
	if x != nil {
		return x.TotalBuy
	}
	return 0
}

func (x *NotifyOrderSta) GetTotalSell() int32 {
	if x != nil {
		return x.TotalSell
	}
	return 0
}

func (x *NotifyOrderSta) GetWABuyPrice() float64 {
	if x != nil {
		return x.WABuyPrice
	}
	return 0
}

func (x *NotifyOrderSta) GetWASellPrice() float64 {
	if x != nil {
		return x.WASellPrice
	}
	return 0
}

func (x *NotifyOrderSta) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotifyOrderSta) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// *
// @brief 期权增值计算
// @author <xuliang>
// @date 2017-10-17
// @note 协议号 client-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyOptProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheoryPrice float64 `protobuf:"fixed64,1,opt,name=theoryPrice,proto3" json:"theoryPrice,omitempty"`
	EmbedValue  float64 `protobuf:"fixed64,2,opt,name=embedValue,proto3" json:"embedValue,omitempty"`
	TimeValue   float64 `protobuf:"fixed64,3,opt,name=timeValue,proto3" json:"timeValue,omitempty"`
	ImpliedVol  float64 `protobuf:"fixed64,4,opt,name=impliedVol,proto3" json:"impliedVol,omitempty"`
	HistoryVol  float64 `protobuf:"fixed64,5,opt,name=historyVol,proto3" json:"historyVol,omitempty"`
}

func (x *NotifyOptProperty) Reset() {
	*x = NotifyOptProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOptProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOptProperty) ProtoMessage() {}

func (x *NotifyOptProperty) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOptProperty.ProtoReflect.Descriptor instead.
func (*NotifyOptProperty) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{6}
}

func (x *NotifyOptProperty) GetTheoryPrice() float64 {
	if x != nil {
		return x.TheoryPrice
	}
	return 0
}

func (x *NotifyOptProperty) GetEmbedValue() float64 {
	if x != nil {
		return x.EmbedValue
	}
	return 0
}

func (x *NotifyOptProperty) GetTimeValue() float64 {
	if x != nil {
		return x.TimeValue
	}
	return 0
}

func (x *NotifyOptProperty) GetImpliedVol() float64 {
	if x != nil {
		return x.ImpliedVol
	}
	return 0
}

func (x *NotifyOptProperty) GetHistoryVol() float64 {
	if x != nil {
		return x.HistoryVol
	}
	return 0
}

// *
// @brief 增值服务Level2分价成交量行情域
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3033> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyMatchPrcQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid         EExchgID         `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"`                         // 交易所        //旧协议为字段为ExchangeId
	MsgId           uint32           `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                                 // 流水号
	ContractID      string           `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                                        // 合约号
	List            []*PrcQtyElem    `protobuf:"bytes,4,rep,name=List,proto3" json:"List,omitempty"`                                                    // 分价成交量(5档)     //旧协议为repeated PriceQtyElem  PriceQtyList
	Timestamp       uint64           `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         // 时间（基于1970时间，精确到ms）
	LateralQuotType EQuotLateralType `protobuf:"varint,6,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
}

func (x *NotifyMatchPrcQty) Reset() {
	*x = NotifyMatchPrcQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMatchPrcQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMatchPrcQty) ProtoMessage() {}

func (x *NotifyMatchPrcQty) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMatchPrcQty.ProtoReflect.Descriptor instead.
func (*NotifyMatchPrcQty) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{7}
}

func (x *NotifyMatchPrcQty) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyMatchPrcQty) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyMatchPrcQty) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NotifyMatchPrcQty) GetList() []*PrcQtyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NotifyMatchPrcQty) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotifyMatchPrcQty) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

// *
// @brief 深度行情通知（客户端与proxy之间交互）
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3054> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyClientIncQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId       uint32             `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                            // 流水号
	IncQuotType []uint64           `protobuf:"varint,2,rep,packed,name=IncQuotType,proto3" json:"IncQuotType,omitempty"`         // 增量行情类型（按位进行标识，可以同时标识不同类型）
	QuotAttr    EQuotAttr          `protobuf:"varint,3,opt,name=QuotAttr,proto3,enum=fippb.EQuotAttr" json:"QuotAttr,omitempty"` // 行情属性
	ExchgId     EExchgID           `protobuf:"varint,4,opt,name=ExchgId,proto3,enum=fippb.EExchgID" json:"ExchgId,omitempty"`    // 交易所ID
	ContractId  string             `protobuf:"bytes,5,opt,name=ContractId,proto3" json:"ContractId,omitempty"`                   // 合约ID
	Best        *BestQuot          `protobuf:"bytes,6,opt,name=Best,proto3" json:"Best,omitempty"`                               // 最优行情(level1)
	MBLList     []*MBLQuot         `protobuf:"bytes,7,rep,name=MBLList,proto3" json:"MBLList,omitempty"`                         // 深度行情(level2)     //旧协议中字段为mbl
	OptParaList []*OptPara         `protobuf:"bytes,8,rep,name=OptParaList,proto3" json:"OptParaList,omitempty"`                 // 期权参数(level2)     //旧协议中字段为op
	Pq          *BestPrcOrdQty     `protobuf:"bytes,9,opt,name=pq,proto3" json:"pq,omitempty"`                                   // 最优报价委托数量行情域(level2)
	RealPrc     *NotifyRTPrice     `protobuf:"bytes,10,opt,name=RealPrc,proto3" json:"RealPrc,omitempty"`                        // 实时结算价
	OrderSta    *NotifyOrderSta    `protobuf:"bytes,11,opt,name=OrderSta,proto3" json:"OrderSta,omitempty"`                      // 委托统计行情域
	MatchPrcQty *NotifyMatchPrcQty `protobuf:"bytes,12,opt,name=MatchPrcQty,proto3" json:"MatchPrcQty,omitempty"`                // 分价成交量
	OptProperty *NotifyOptProperty `protobuf:"bytes,13,opt,name=OptProperty,proto3" json:"OptProperty,omitempty"`                // 期权属性
	Qt          EQuotType          `protobuf:"varint,14,opt,name=qt,proto3,enum=fippb.EQuotType" json:"qt,omitempty"`            // 行情类型
}

func (x *NotifyClientIncQuot) Reset() {
	*x = NotifyClientIncQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyClientIncQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyClientIncQuot) ProtoMessage() {}

func (x *NotifyClientIncQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyClientIncQuot.ProtoReflect.Descriptor instead.
func (*NotifyClientIncQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{8}
}

func (x *NotifyClientIncQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyClientIncQuot) GetIncQuotType() []uint64 {
	if x != nil {
		return x.IncQuotType
	}
	return nil
}

func (x *NotifyClientIncQuot) GetQuotAttr() EQuotAttr {
	if x != nil {
		return x.QuotAttr
	}
	return EQuotAttr_QANull
}

func (x *NotifyClientIncQuot) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyClientIncQuot) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NotifyClientIncQuot) GetBest() *BestQuot {
	if x != nil {
		return x.Best
	}
	return nil
}

func (x *NotifyClientIncQuot) GetMBLList() []*MBLQuot {
	if x != nil {
		return x.MBLList
	}
	return nil
}

func (x *NotifyClientIncQuot) GetOptParaList() []*OptPara {
	if x != nil {
		return x.OptParaList
	}
	return nil
}

func (x *NotifyClientIncQuot) GetPq() *BestPrcOrdQty {
	if x != nil {
		return x.Pq
	}
	return nil
}

func (x *NotifyClientIncQuot) GetRealPrc() *NotifyRTPrice {
	if x != nil {
		return x.RealPrc
	}
	return nil
}

func (x *NotifyClientIncQuot) GetOrderSta() *NotifyOrderSta {
	if x != nil {
		return x.OrderSta
	}
	return nil
}

func (x *NotifyClientIncQuot) GetMatchPrcQty() *NotifyMatchPrcQty {
	if x != nil {
		return x.MatchPrcQty
	}
	return nil
}

func (x *NotifyClientIncQuot) GetOptProperty() *NotifyOptProperty {
	if x != nil {
		return x.OptProperty
	}
	return nil
}

func (x *NotifyClientIncQuot) GetQt() EQuotType {
	if x != nil {
		return x.Qt
	}
	return EQuotType_QTNull
}

// *
// @brief 深度行情通知（服务端内部使用，客户端不再使用）
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyMktMBLQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32             `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                  // 流水号
	Best    *BestQuot          `protobuf:"bytes,2,opt,name=best,proto3" json:"best,omitempty"`                     // 最优行情
	OpList  []*OptPara         `protobuf:"bytes,3,rep,name=opList,proto3" json:"opList,omitempty"`                 // 期权参数(level2)     //旧协议中字段为op
	MblList []*MBLQuot         `protobuf:"bytes,4,rep,name=mblList,proto3" json:"mblList,omitempty"`               // 深度行情(level2)     //旧协议中字段为mbl
	Pq      *BestPrcOrdQty     `protobuf:"bytes,5,opt,name=pq,proto3" json:"pq,omitempty"`                         // 最优报价委托数量行情域(level2)
	Qat     EQuotAttr          `protobuf:"varint,6,opt,name=qat,proto3,enum=fippb.EQuotAttr" json:"qat,omitempty"` // 行情属性
	Qt      EQuotType          `protobuf:"varint,7,opt,name=qt,proto3,enum=fippb.EQuotType" json:"qt,omitempty"`   // 行情类型
	Cp      *NotifyRTPrice     `protobuf:"bytes,8,opt,name=cp,proto3" json:"cp,omitempty"`                         // 实时结算价
	Os      *NotifyOrderSta    `protobuf:"bytes,9,opt,name=os,proto3" json:"os,omitempty"`                         // 委托统计行情域(level2)
	Mpq     *NotifyMatchPrcQty `protobuf:"bytes,10,opt,name=mpq,proto3" json:"mpq,omitempty"`                      // 分价成交量(level2)
	Opr     *NotifyOptProperty `protobuf:"bytes,11,opt,name=opr,proto3" json:"opr,omitempty"`                      // 期权属性
	Match   bool               `protobuf:"varint,12,opt,name=match,proto3" json:"match,omitempty"`                 // 是否是成交行情 (服务端内部使用)
	Dst     bool               `protobuf:"varint,13,opt,name=dst,proto3" json:"dst,omitempty"`                     // 是否是夏令时   (服务端内部使用)
}

func (x *NotifyMktMBLQuot) Reset() {
	*x = NotifyMktMBLQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMktMBLQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMktMBLQuot) ProtoMessage() {}

func (x *NotifyMktMBLQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMktMBLQuot.ProtoReflect.Descriptor instead.
func (*NotifyMktMBLQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{9}
}

func (x *NotifyMktMBLQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyMktMBLQuot) GetBest() *BestQuot {
	if x != nil {
		return x.Best
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetOpList() []*OptPara {
	if x != nil {
		return x.OpList
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetMblList() []*MBLQuot {
	if x != nil {
		return x.MblList
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetPq() *BestPrcOrdQty {
	if x != nil {
		return x.Pq
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetQat() EQuotAttr {
	if x != nil {
		return x.Qat
	}
	return EQuotAttr_QANull
}

func (x *NotifyMktMBLQuot) GetQt() EQuotType {
	if x != nil {
		return x.Qt
	}
	return EQuotType_QTNull
}

func (x *NotifyMktMBLQuot) GetCp() *NotifyRTPrice {
	if x != nil {
		return x.Cp
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetOs() *NotifyOrderSta {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetMpq() *NotifyMatchPrcQty {
	if x != nil {
		return x.Mpq
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetOpr() *NotifyOptProperty {
	if x != nil {
		return x.Opr
	}
	return nil
}

func (x *NotifyMktMBLQuot) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *NotifyMktMBLQuot) GetDst() bool {
	if x != nil {
		return x.Dst
	}
	return false
}

type NotifyArbiBestQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32         `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Best    *BestQuot      `protobuf:"bytes,2,opt,name=best,proto3" json:"best,omitempty"`       // 最优行情
	MblList []*MBLQuot     `protobuf:"bytes,3,rep,name=mblList,proto3" json:"mblList,omitempty"` // 深度行情
	Pq      *BestPrcOrdQty `protobuf:"bytes,4,opt,name=pq,proto3" json:"pq,omitempty"`
	Qat     EQuotAttr      `protobuf:"varint,5,opt,name=qat,proto3,enum=fippb.EQuotAttr" json:"qat,omitempty"`
	Qt      EQuotType      `protobuf:"varint,6,opt,name=qt,proto3,enum=fippb.EQuotType" json:"qt,omitempty"`
}

func (x *NotifyArbiBestQuot) Reset() {
	*x = NotifyArbiBestQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyArbiBestQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyArbiBestQuot) ProtoMessage() {}

func (x *NotifyArbiBestQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyArbiBestQuot.ProtoReflect.Descriptor instead.
func (*NotifyArbiBestQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{10}
}

func (x *NotifyArbiBestQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyArbiBestQuot) GetBest() *BestQuot {
	if x != nil {
		return x.Best
	}
	return nil
}

func (x *NotifyArbiBestQuot) GetMblList() []*MBLQuot {
	if x != nil {
		return x.MblList
	}
	return nil
}

func (x *NotifyArbiBestQuot) GetPq() *BestPrcOrdQty {
	if x != nil {
		return x.Pq
	}
	return nil
}

func (x *NotifyArbiBestQuot) GetQat() EQuotAttr {
	if x != nil {
		return x.Qat
	}
	return EQuotAttr_QANull
}

func (x *NotifyArbiBestQuot) GetQt() EQuotType {
	if x != nil {
		return x.Qt
	}
	return EQuotType_QTNull
}

// *
// @brief 期权参数更新通知（服务端内部使用）
// @author <houyahui>
// @date 2021-8-23
// @note 协议号 collector-real<10021>
// @modify
type NotifyOptPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32   `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	Exchgid    EExchgID `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所Id
	OptPara    *OptPara `protobuf:"bytes,3,opt,name=optPara,proto3" json:"optPara,omitempty"`                      // 期权参数
	GenTime    string   `protobuf:"bytes,4,opt,name=genTime,proto3" json:"genTime,omitempty"`                      // 生成时间
	UpdateTime uint64   `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`               // 更新时间
}

func (x *NotifyOptPara) Reset() {
	*x = NotifyOptPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOptPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOptPara) ProtoMessage() {}

func (x *NotifyOptPara) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOptPara.ProtoReflect.Descriptor instead.
func (*NotifyOptPara) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyOptPara) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOptPara) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyOptPara) GetOptPara() *OptPara {
	if x != nil {
		return x.OptPara
	}
	return nil
}

func (x *NotifyOptPara) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *NotifyOptPara) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// *
// @brief 深度五档行情更新通知（服务端内部使用）
// @author <houyahui>
// @date 2021-11-25
// @note 协议号 collector-real<10022>
// @modify
type NotifyMBLQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	Exchgid    EExchgID   `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所Id
	ContractId string     `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                // 合约Id
	MblList    []*MBLQuot `protobuf:"bytes,4,rep,name=mblList,proto3" json:"mblList,omitempty"`                      // 深度行情(level2)
	TradeDate  string     `protobuf:"bytes,5,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	UpdateTime uint64     `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`               // 更新时间
}

func (x *NotifyMBLQuot) Reset() {
	*x = NotifyMBLQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMBLQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMBLQuot) ProtoMessage() {}

func (x *NotifyMBLQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMBLQuot.ProtoReflect.Descriptor instead.
func (*NotifyMBLQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyMBLQuot) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyMBLQuot) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyMBLQuot) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NotifyMBLQuot) GetMblList() []*MBLQuot {
	if x != nil {
		return x.MblList
	}
	return nil
}

func (x *NotifyMBLQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyMBLQuot) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// *
// @brief 最优报价委托更新通知（服务端内部使用）
// @author <houyahui>
// @date 2021-11-25
// @note 协议号 collector-real<10023>
// @modify
type NotifyBestPrcOrdQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32         `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	Exchgid    EExchgID       `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所Id
	ContractId string         `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                // 合约Id
	Pq         *BestPrcOrdQty `protobuf:"bytes,4,opt,name=pq,proto3" json:"pq,omitempty"`                                // 最优报价委托数量行情域(level2)
	TradeDate  string         `protobuf:"bytes,5,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期
	UpdateTime uint64         `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`               // 更新时间
}

func (x *NotifyBestPrcOrdQty) Reset() {
	*x = NotifyBestPrcOrdQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyBestPrcOrdQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyBestPrcOrdQty) ProtoMessage() {}

func (x *NotifyBestPrcOrdQty) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyBestPrcOrdQty.ProtoReflect.Descriptor instead.
func (*NotifyBestPrcOrdQty) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{13}
}

func (x *NotifyBestPrcOrdQty) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyBestPrcOrdQty) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyBestPrcOrdQty) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NotifyBestPrcOrdQty) GetPq() *BestPrcOrdQty {
	if x != nil {
		return x.Pq
	}
	return nil
}

func (x *NotifyBestPrcOrdQty) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *NotifyBestPrcOrdQty) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// *
// @brief 列表请求通知
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3022> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9001>
// @modify
type ReqLstRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32      `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	Type    EReqLstType `protobuf:"varint,2,opt,name=Type,proto3,enum=fippb.EReqLstType" json:"Type,omitempty"`    // 请求类型    //旧协议为EReqType    Type
	Exchgid EExchgID    `protobuf:"varint,3,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id    //旧协议为IDType      ExchangeId
	ContrID string      `protobuf:"bytes,4,opt,name=ContrID,proto3" json:"ContrID,omitempty"`                      // 期权标的物
	VtyID   string      `protobuf:"bytes,5,opt,name=VtyID,proto3" json:"VtyID,omitempty"`                          // 品种id        //旧协议为VarietyID
}

func (x *ReqLstRequest) Reset() {
	*x = ReqLstRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLstRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLstRequest) ProtoMessage() {}

func (x *ReqLstRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLstRequest.ProtoReflect.Descriptor instead.
func (*ReqLstRequest) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{14}
}

func (x *ReqLstRequest) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqLstRequest) GetType() EReqLstType {
	if x != nil {
		return x.Type
	}
	return EReqLstType_RTNull
}

func (x *ReqLstRequest) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ReqLstRequest) GetContrID() string {
	if x != nil {
		return x.ContrID
	}
	return ""
}

func (x *ReqLstRequest) GetVtyID() string {
	if x != nil {
		return x.VtyID
	}
	return ""
}

// *
// @brief 列表请求响应 仅出错时响应
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type RspTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req     *ReqLstRequest `protobuf:"bytes,1,opt,name=Req,proto3" json:"Req,omitempty"`          // 请求id       //旧协议为ReqTypeList     Req
	ErrorId uint32         `protobuf:"varint,2,opt,name=errorId,proto3" json:"errorId,omitempty"` // 0:success, errorId:error
}

func (x *RspTypeList) Reset() {
	*x = RspTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTypeList) ProtoMessage() {}

func (x *RspTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTypeList.ProtoReflect.Descriptor instead.
func (*RspTypeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{15}
}

func (x *RspTypeList) GetReq() *ReqLstRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *RspTypeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

// *
// @brief 期货品种列表
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3024> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9002>
// @modify
type RspFtrVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32            `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id      //旧协议为RequestId
	ErrorId uint32            `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	HasMain bool              `protobuf:"varint,3,opt,name=HasMain,proto3" json:"HasMain,omitempty"`                     // 是否有主力合约(前端判断是否显示“主力”标签)
	Index   uint32            `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool              `protobuf:"varint,5,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List    []*FtrVarietyElem `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`                            //旧协议字段为为FtrVlist
	Exchgid EExchgID          `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspFtrVarietyList) Reset() {
	*x = RspFtrVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFtrVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFtrVarietyList) ProtoMessage() {}

func (x *RspFtrVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFtrVarietyList.ProtoReflect.Descriptor instead.
func (*RspFtrVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{16}
}

func (x *RspFtrVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspFtrVarietyList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspFtrVarietyList) GetHasMain() bool {
	if x != nil {
		return x.HasMain
	}
	return false
}

func (x *RspFtrVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFtrVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFtrVarietyList) GetList() []*FtrVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFtrVarietyList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 期权品种列表
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3026> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*<9003>
// @modify
type RspOptVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32            `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id         //旧协议为RequestId
	ErrorId uint32            `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	Type    uint32            `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`                           // 列表类型EReqType
	Index   uint32            `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool              `protobuf:"varint,5,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List    []*OptVarietyElem `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`                            //旧协议字段为OptVList
	Exchgid EExchgID          `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspOptVarietyList) Reset() {
	*x = RspOptVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOptVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOptVarietyList) ProtoMessage() {}

func (x *RspOptVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOptVarietyList.ProtoReflect.Descriptor instead.
func (*RspOptVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{17}
}

func (x *RspOptVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOptVarietyList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOptVarietyList) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RspOptVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspOptVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspOptVarietyList) GetList() []*OptVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspOptVarietyList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 指数合约分类列表应答
// @author <zhaoyuange>
// @date 2018-01-31
// @note 协议号 contract_manage: <指数合约分类9019>
type RspIdxCatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32        `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`                         ///< 请求ID
	ErrorID uint32        `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`                     ///< 错误码
	Index   uint32        `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`                         ///< 分包ID
	Finish  bool          `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       ///< true:结束；false:分包
	List    []*IdxCatElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`                            ///< 指数合约列表
	Exchgid EExchgID      `protobuf:"varint,6,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspIdxCatList) Reset() {
	*x = RspIdxCatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspIdxCatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspIdxCatList) ProtoMessage() {}

func (x *RspIdxCatList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspIdxCatList.ProtoReflect.Descriptor instead.
func (*RspIdxCatList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{18}
}

func (x *RspIdxCatList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspIdxCatList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspIdxCatList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspIdxCatList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspIdxCatList) GetList() []*IdxCatElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspIdxCatList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 期货合约列表
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<期货合约3025\主力合约3028\某品种的期货合约3029\期权标的物列表3030>
// @note proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<期货合约9004\主力合约9006>
// @modify
type RspFtrContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32             `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id     //旧协议为RequestId
	ErrorId uint32             `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误
	Index   uint32             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool               `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List    []*FtrContractElem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`                            //旧协议字段为FtrCList
	Date    uint32             `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`                           // 合约日期
	Exchgid EExchgID           `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspFtrContractList) Reset() {
	*x = RspFtrContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFtrContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFtrContractList) ProtoMessage() {}

func (x *RspFtrContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFtrContractList.ProtoReflect.Descriptor instead.
func (*RspFtrContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{19}
}

func (x *RspFtrContractList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspFtrContractList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspFtrContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFtrContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFtrContractList) GetList() []*FtrContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFtrContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RspFtrContractList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 现货品种列表
// @author <daihouda>
// @date 2019-12-04
// @note 协议号 client-proxy:<3066>
// @note 协议号 proxy-contract:<9023>
// @modify
type RspSpotVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32             `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ErrorId uint32             `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误
	Index   uint32             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool               `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List    []*SpotVarietyElem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`                            // 现货品种列表
	Date    uint32             `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`                           // 合约日期
	Exchgid EExchgID           `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspSpotVarietyList) Reset() {
	*x = RspSpotVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSpotVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSpotVarietyList) ProtoMessage() {}

func (x *RspSpotVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSpotVarietyList.ProtoReflect.Descriptor instead.
func (*RspSpotVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{20}
}

func (x *RspSpotVarietyList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspSpotVarietyList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspSpotVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspSpotVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspSpotVarietyList) GetList() []*SpotVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspSpotVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RspSpotVarietyList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 期权标的列表
// @author <daihouda>
// @date 2019-12-04
// @note 协议号 client-proxy:<3030>
// @modify
type RspOptUnderlyingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32               `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ErrorId uint32               `protobuf:"varint,2,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误
	Index   uint32               `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish  bool                 `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List    []*OptUnderlyingElem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`                            // 期权标的列表
	Date    uint32               `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`                           // 合约日期
	Exchgid EExchgID             `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspOptUnderlyingList) Reset() {
	*x = RspOptUnderlyingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOptUnderlyingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOptUnderlyingList) ProtoMessage() {}

func (x *RspOptUnderlyingList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOptUnderlyingList.ProtoReflect.Descriptor instead.
func (*RspOptUnderlyingList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{21}
}

func (x *RspOptUnderlyingList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspOptUnderlyingList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOptUnderlyingList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspOptUnderlyingList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspOptUnderlyingList) GetList() []*OptUnderlyingElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspOptUnderlyingList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RspOptUnderlyingList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 指数合约列表应答
// @author <zhaoyuange>
// @date 2018-01-31
// @note contract_manage:<指数合约9018>
// @modify
type RspIdxContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32             `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`                         ///< 请求ID
	ErrorID uint32             `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`                     ///< 错误ID
	Index   uint32             `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`                         ///< 分包ID
	Finish  bool               `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       ///< true:结束；false:分包
	List    []*IdxContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`                            ///< 指数合约列表
	Date    uint32             `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`                           ///< 合约日期
	Exchgid EExchgID           `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspIdxContractList) Reset() {
	*x = RspIdxContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspIdxContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspIdxContractList) ProtoMessage() {}

func (x *RspIdxContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspIdxContractList.ProtoReflect.Descriptor instead.
func (*RspIdxContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{22}
}

func (x *RspIdxContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspIdxContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspIdxContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspIdxContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspIdxContractList) GetList() []*IdxContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspIdxContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RspIdxContractList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 套利合约列表
// @autohor <zhaoyuange>
// @date 2018-05-17
// @note 协议号 contract_manage:<套利合约9022>
// @modify
type RspArbiContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32              `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`                         ///< 请求ID
	ErrorID uint32              `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`                     ///< 错误ID
	Index   uint32              `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`                         ///< 分包ID
	Finish  bool                `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`                       ///< true:结束；false:分包
	List    []*ArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`                            ///< 套利合约列表
	Date    uint32              `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`                           ///< 合约日期
	ExchgId EExchgID            `protobuf:"varint,7,opt,name=ExchgId,proto3,enum=fippb.EExchgID" json:"ExchgId,omitempty"` ///< 交易所ID
}

func (x *RspArbiContractList) Reset() {
	*x = RspArbiContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspArbiContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspArbiContractList) ProtoMessage() {}

func (x *RspArbiContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspArbiContractList.ProtoReflect.Descriptor instead.
func (*RspArbiContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{23}
}

func (x *RspArbiContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspArbiContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspArbiContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspArbiContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspArbiContractList) GetList() []*ArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspArbiContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RspArbiContractList) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

// *
// @brief 财讯通套利全部合约列表  用于回复ReqLstRequest中Type为财讯通套利全部合约列表的请求
// @autohor <liyu>
// @date 2019-12-02
// @note 协议号 client-proxy:<3066> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9023>
// @modify
type RspFipArbiAllContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                 `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                   `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                 `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiAllContractList) Reset() {
	*x = RspFipArbiAllContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiAllContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiAllContractList) ProtoMessage() {}

func (x *RspFipArbiAllContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiAllContractList.ProtoReflect.Descriptor instead.
func (*RspFipArbiAllContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{24}
}

func (x *RspFipArbiAllContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiAllContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiAllContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiAllContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiAllContractList) GetList() []*FipArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiAllContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨期合约列表  用于回复ReqLstRequest中Type为财讯通套利跨期合约列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3067> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9024>
// @modify
type RspFipArbiCalSpreadContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                 `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                   `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                 `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiCalSpreadContractList) Reset() {
	*x = RspFipArbiCalSpreadContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiCalSpreadContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiCalSpreadContractList) ProtoMessage() {}

func (x *RspFipArbiCalSpreadContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiCalSpreadContractList.ProtoReflect.Descriptor instead.
func (*RspFipArbiCalSpreadContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{25}
}

func (x *RspFipArbiCalSpreadContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiCalSpreadContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiCalSpreadContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiCalSpreadContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiCalSpreadContractList) GetList() []*FipArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiCalSpreadContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨品种合约列表  用于回复ReqLstRequest中Type为财讯通套利跨品种合约列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3068> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9025>
// @modify
type RspFipArbiVtySpreadContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                 `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                   `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                 `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiVtySpreadContractList) Reset() {
	*x = RspFipArbiVtySpreadContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiVtySpreadContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiVtySpreadContractList) ProtoMessage() {}

func (x *RspFipArbiVtySpreadContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiVtySpreadContractList.ProtoReflect.Descriptor instead.
func (*RspFipArbiVtySpreadContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{26}
}

func (x *RspFipArbiVtySpreadContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiVtySpreadContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiVtySpreadContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiVtySpreadContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiVtySpreadContractList) GetList() []*FipArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiVtySpreadContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨市场合约列表   用于回复ReqLstRequest中Type为财讯通套利跨市场合约列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3069> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9026>
// @modify
type RspFipArbiMKTSpreadContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                 `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                   `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                 `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiMKTSpreadContractList) Reset() {
	*x = RspFipArbiMKTSpreadContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiMKTSpreadContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiMKTSpreadContractList) ProtoMessage() {}

func (x *RspFipArbiMKTSpreadContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiMKTSpreadContractList.ProtoReflect.Descriptor instead.
func (*RspFipArbiMKTSpreadContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{27}
}

func (x *RspFipArbiMKTSpreadContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiMKTSpreadContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiMKTSpreadContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiMKTSpreadContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiMKTSpreadContractList) GetList() []*FipArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiMKTSpreadContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利期现合约列表   用于回复ReqLstRequest中Type为财讯通套利期现合约列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3070> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9027>
// @modify
type RspFipArbiFtrSpotContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                 `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                   `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiContractElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                 `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiFtrSpotContractList) Reset() {
	*x = RspFipArbiFtrSpotContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiFtrSpotContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiFtrSpotContractList) ProtoMessage() {}

func (x *RspFipArbiFtrSpotContractList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiFtrSpotContractList.ProtoReflect.Descriptor instead.
func (*RspFipArbiFtrSpotContractList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{28}
}

func (x *RspFipArbiFtrSpotContractList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiFtrSpotContractList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiFtrSpotContractList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiFtrSpotContractList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiFtrSpotContractList) GetList() []*FipArbiContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiFtrSpotContractList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利全部品种列表   用于回复ReqLstRequest中Type为财讯通套利全部品种列表的请求
// @autohor <fengwei>
// @date 2019-12-04
// @note 协议号 client-proxy:<3071> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9028>
// @modify
type RspFipArbiALLVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                  `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiVarietyElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiALLVarietyList) Reset() {
	*x = RspFipArbiALLVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiALLVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiALLVarietyList) ProtoMessage() {}

func (x *RspFipArbiALLVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiALLVarietyList.ProtoReflect.Descriptor instead.
func (*RspFipArbiALLVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{29}
}

func (x *RspFipArbiALLVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiALLVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiALLVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiALLVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiALLVarietyList) GetList() []*FipArbiVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiALLVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨期品种列表  用于回复ReqLstRequest中Type为财讯通套利跨期品种列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3072> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9029>
// @modify
type RspFipArbiCalSpreadVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                  `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiVarietyElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiCalSpreadVarietyList) Reset() {
	*x = RspFipArbiCalSpreadVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiCalSpreadVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiCalSpreadVarietyList) ProtoMessage() {}

func (x *RspFipArbiCalSpreadVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiCalSpreadVarietyList.ProtoReflect.Descriptor instead.
func (*RspFipArbiCalSpreadVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{30}
}

func (x *RspFipArbiCalSpreadVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiCalSpreadVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiCalSpreadVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiCalSpreadVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiCalSpreadVarietyList) GetList() []*FipArbiVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiCalSpreadVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨品种品种列表  用于回复ReqLstRequest中Type为财讯通套利跨品种品种列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3073> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9030>
// @modify
type RspFipArbiVtySpreadVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                  `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiVarietyElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiVtySpreadVarietyList) Reset() {
	*x = RspFipArbiVtySpreadVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiVtySpreadVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiVtySpreadVarietyList) ProtoMessage() {}

func (x *RspFipArbiVtySpreadVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiVtySpreadVarietyList.ProtoReflect.Descriptor instead.
func (*RspFipArbiVtySpreadVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{31}
}

func (x *RspFipArbiVtySpreadVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiVtySpreadVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiVtySpreadVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiVtySpreadVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiVtySpreadVarietyList) GetList() []*FipArbiVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiVtySpreadVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利跨市场品种列表   用于回复ReqLstRequest中Type为财讯通套利跨市场品种列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3074> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9031>
// @modify
type RspFipArbiMktSpreadVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                  `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiVarietyElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiMktSpreadVarietyList) Reset() {
	*x = RspFipArbiMktSpreadVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiMktSpreadVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiMktSpreadVarietyList) ProtoMessage() {}

func (x *RspFipArbiMktSpreadVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiMktSpreadVarietyList.ProtoReflect.Descriptor instead.
func (*RspFipArbiMktSpreadVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{32}
}

func (x *RspFipArbiMktSpreadVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiMktSpreadVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiMktSpreadVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiMktSpreadVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiMktSpreadVarietyList) GetList() []*FipArbiVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiMktSpreadVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 财讯通套利期现品种列表   用于回复ReqLstRequest中Type为财讯通套利期现品种列表的请求
// @autohor <fengwei>
// @date 2019-12-05
// @note 协议号 client-proxy:<3075> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9032>
// @modify
type RspFipArbiFtrSpotVarietyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32                `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`     ///< 请求ID
	ErrorID uint32                `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"` ///< 错误ID
	Index   uint32                `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`     ///< 分包ID
	Finish  bool                  `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`   ///< true:结束；false:分包
	List    []*FipArbiVarietyElem `protobuf:"bytes,5,rep,name=List,proto3" json:"List,omitempty"`        ///< 财讯通套利期货合约列表
	Date    uint32                `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`       ///< 合约日期
}

func (x *RspFipArbiFtrSpotVarietyList) Reset() {
	*x = RspFipArbiFtrSpotVarietyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFipArbiFtrSpotVarietyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFipArbiFtrSpotVarietyList) ProtoMessage() {}

func (x *RspFipArbiFtrSpotVarietyList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFipArbiFtrSpotVarietyList.ProtoReflect.Descriptor instead.
func (*RspFipArbiFtrSpotVarietyList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{33}
}

func (x *RspFipArbiFtrSpotVarietyList) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspFipArbiFtrSpotVarietyList) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspFipArbiFtrSpotVarietyList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFipArbiFtrSpotVarietyList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFipArbiFtrSpotVarietyList) GetList() []*FipArbiVarietyElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFipArbiFtrSpotVarietyList) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// *
// @brief 某标的物的期权列表应答
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<3027> proxy-real:<> proxy-his:<> real-mgr:<> mgr-*:<9005>
// @modify
type RspFtrOptList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32             `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id     //旧协议为RequestId
	ErrorId    uint32             `protobuf:"varint,3,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	ContractID string             `protobuf:"bytes,2,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约编码
	Index      uint32             `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`                         // 分包id
	Finish     bool               `protobuf:"varint,5,opt,name=Finish,proto3" json:"Finish,omitempty"`                       // true:结束；false:分包
	List       []*OptContractElem `protobuf:"bytes,6,rep,name=List,proto3" json:"List,omitempty"`                            // 期权列表  //旧协议字段为OptCList
	Exchgid    EExchgID           `protobuf:"varint,7,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
}

func (x *RspFtrOptList) Reset() {
	*x = RspFtrOptList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspFtrOptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspFtrOptList) ProtoMessage() {}

func (x *RspFtrOptList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspFtrOptList.ProtoReflect.Descriptor instead.
func (*RspFtrOptList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{34}
}

func (x *RspFtrOptList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspFtrOptList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspFtrOptList) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspFtrOptList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspFtrOptList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspFtrOptList) GetList() []*OptContractElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspFtrOptList) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 订阅交易所列表应答
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3023> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type RspExchangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*ExchangeElem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`            // 交易所信息
	RequestId uint32          `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId,omitempty"` // 请求id
	ErrorId   uint32          `protobuf:"varint,3,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`     // 错误码
	Finish    bool            `protobuf:"varint,4,opt,name=Finish,proto3" json:"Finish,omitempty"`       // true:结束；false:分包
	Index     uint32          `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`         // 分包id
	StaList   []*ExchangeElem `protobuf:"bytes,6,rep,name=StaList,proto3" json:"StaList,omitempty"`      // 品种统计的交易所列表
}

func (x *RspExchangeList) Reset() {
	*x = RspExchangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspExchangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspExchangeList) ProtoMessage() {}

func (x *RspExchangeList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspExchangeList.ProtoReflect.Descriptor instead.
func (*RspExchangeList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{35}
}

func (x *RspExchangeList) GetList() []*ExchangeElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspExchangeList) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspExchangeList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspExchangeList) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *RspExchangeList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspExchangeList) GetStaList() []*ExchangeElem {
	if x != nil {
		return x.StaList
	}
	return nil
}

// *
// @brief 品种统计详情
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3034> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyMktQuotSta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid   EExchgID          `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id       //旧协议为IDType      ExchangeId
	MsgId     uint32            `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	List      []*VtyQuotStaElem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`                            // 所有品种的统计信息    //旧协议为repeated QuotStatisticVarietyElem List
	Timestamp uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间（基于1970时间，精确到ms）
	Isclear   bool              `protobuf:"varint,5,opt,name=isclear,proto3" json:"isclear,omitempty"`                     // 是否是清盘帧
	PkgType   EPkgType          `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *NotifyMktQuotSta) Reset() {
	*x = NotifyMktQuotSta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyMktQuotSta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMktQuotSta) ProtoMessage() {}

func (x *NotifyMktQuotSta) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMktQuotSta.ProtoReflect.Descriptor instead.
func (*NotifyMktQuotSta) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{36}
}

func (x *NotifyMktQuotSta) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyMktQuotSta) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyMktQuotSta) GetList() []*VtyQuotStaElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NotifyMktQuotSta) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotifyMktQuotSta) GetIsclear() bool {
	if x != nil {
		return x.Isclear
	}
	return false
}

func (x *NotifyMktQuotSta) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 期权统计详情
// @author <zhaow>
// @date 2018-5-11
// @note 协议号 client-proxy:<> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyOptQuotSta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid   EExchgID          `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	MsgId     uint32            `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 流水号
	List      []*OptQuotStaElem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`                            // 所有期权的统计信息
	Timestamp uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间（基于1970时间，精确到ms）
	Isclear   bool              `protobuf:"varint,5,opt,name=isclear,proto3" json:"isclear,omitempty"`                     // 是否是清盘帧
	PkgType   EPkgType          `protobuf:"varint,6,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *NotifyOptQuotSta) Reset() {
	*x = NotifyOptQuotSta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyOptQuotSta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOptQuotSta) ProtoMessage() {}

func (x *NotifyOptQuotSta) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOptQuotSta.ProtoReflect.Descriptor instead.
func (*NotifyOptQuotSta) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{37}
}

func (x *NotifyOptQuotSta) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyOptQuotSta) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyOptQuotSta) GetList() []*OptQuotStaElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NotifyOptQuotSta) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NotifyOptQuotSta) GetIsclear() bool {
	if x != nil {
		return x.Isclear
	}
	return false
}

func (x *NotifyOptQuotSta) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 服务状态查询请求
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3038> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type ReqServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32   `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	Exchgid EExchgID `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` /// 交易所ID(弃用)   //旧协议为IDType   ExchangeId
}

func (x *ReqServiceStatus) Reset() {
	*x = ReqServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqServiceStatus) ProtoMessage() {}

func (x *ReqServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqServiceStatus.ProtoReflect.Descriptor instead.
func (*ReqServiceStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{38}
}

func (x *ReqServiceStatus) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqServiceStatus) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

// *
// @brief 服务状态响应
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3035> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type NotifyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ESvrStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=fippb.ESvrStatus" json:"Status,omitempty"` // 服务状态
	MsgId   uint32     `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	Exchgid EExchgID   `protobuf:"varint,3,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所ID(弃用)  //旧协议为IDType    ExchangeId
	Version uint32     `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`                     // 静态数据版本号(品种与合约等)
}

func (x *NotifyStatus) Reset() {
	*x = NotifyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyStatus) ProtoMessage() {}

func (x *NotifyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyStatus.ProtoReflect.Descriptor instead.
func (*NotifyStatus) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{39}
}

func (x *NotifyStatus) GetStatus() ESvrStatus {
	if x != nil {
		return x.Status
	}
	return ESvrStatus_SBegin
}

func (x *NotifyStatus) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyStatus) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyStatus) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// *
// @brief 历史成交明细请求
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3036> proxy-real:<> proxy-his:<> real-mgr:<>
// start不设置的情况，则从当前交易日返回最新的Cnt（正值）条记录，如果当前交易日数据不足Cnt条，则按照实际条数返回。
// start设置的情况，Cnt如果为正，则表示向后查询（比start更旧的数据）。如果为负值，表示向前查询（比start更新的数据）。
// 明细查询不会返回跨交易日的数据。
// @modify
type ReqHisMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id   //旧协议为IDType   ExchangeId
	MsgId      uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string   `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	Date       string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                            // 当前交易日，格式年月日，例如"20170802"。成交明细只支持查询当前交易日。
	Start      uint64   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                         //（可选) 如果不指定，则从当前交易日最多返回Cnt条数最新的数据。
	Cnt        int32    `protobuf:"varint,6,opt,name=Cnt,proto3" json:"Cnt,omitempty"`                             // 按条数查。 如果start不为0，则以start为起点，向前/向后最多查Cnt条（不存在跨交易日查询）  //旧协议为Count。
	DeviceNo   string   `protobuf:"bytes,7,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                    // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqHisMatchDetail) Reset() {
	*x = ReqHisMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHisMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHisMatchDetail) ProtoMessage() {}

func (x *ReqHisMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHisMatchDetail.ProtoReflect.Descriptor instead.
func (*ReqHisMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{40}
}

func (x *ReqHisMatchDetail) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ReqHisMatchDetail) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqHisMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqHisMatchDetail) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqHisMatchDetail) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqHisMatchDetail) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ReqHisMatchDetail) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 历史成交明细响应
// @author <suzhongpo，mengwen>
// @date 2017-7-10
// @note 协议号 client-proxy:<协议号：3037> proxy-real:<> proxy-his:<> real-mgr:<>
// @modify
type RspHisMatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID        `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id     //旧协议为IDType  ExchangeId
	MsgId      uint32          `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string          `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	ErrorId    uint32          `protobuf:"varint,4,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	PkgType    EPkgType        `protobuf:"varint,5,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
	List       []*HisMatchElem `protobuf:"bytes,6,rep,name=List,proto3" json:"List,omitempty"`                            // 列表详情    //旧协议为 repeated HistoryMatchDetailElem List
	RealQuot   bool            `protobuf:"varint,7,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                   // true 实时行情；false延时行情(for cme添加)
}

func (x *RspHisMatchDetail) Reset() {
	*x = RspHisMatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspHisMatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHisMatchDetail) ProtoMessage() {}

func (x *RspHisMatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHisMatchDetail.ProtoReflect.Descriptor instead.
func (*RspHisMatchDetail) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{41}
}

func (x *RspHisMatchDetail) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *RspHisMatchDetail) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspHisMatchDetail) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspHisMatchDetail) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspHisMatchDetail) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

func (x *RspHisMatchDetail) GetList() []*HisMatchElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspHisMatchDetail) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 分时数据请求
// @author <yinxiaobiao>
// @date 2017-7-19
// @note 协议号 proxy-his:<协议号：3041> proxy-real:<7001> proxy-his:<> real-mgr:<>
// @modify
// @note 使用场景1：请求某个交易日的一段分时数据，使用start、end和date，
//
//	         date必须填写某个交易日，如果start不填充，则表示从date所在交易日的开始时间到end结束。
//	         如果end和start都没有数值，则表示获取date所表示交易日的数据。
//	使用场景2：请求最近N个交易日数据，date、count字段表示，
//	         例如date为20170802,count为1，获取20170802和20170802上一个交易日的数据。
//	请求参数优先级，date > start,end > count
type ReqTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID  `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`    // 交易所id
	MsgId      uint32    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                            // 请求id
	ContractID string    `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                   // 合约号
	Date       string    `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                               //（必填) 请求某个交易日分时数据，格式年月日，例如"20170802"
	Start      uint64    `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                            // (可选) date中表示的交易日的开始时间，时间戳，可以为0，表示从开盘时间开始。
	End        uint64    `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                // (可选) date中表示的交易日的结束时间，时间戳
	Count      int32     `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                            // (可选) 请求最近N个交易日，如果count为0，则按照date、start和end计算。
	QuotType   EQuotType `protobuf:"varint,8,opt,name=QuotType,proto3,enum=fippb.EQuotType" json:"QuotType,omitempty"` // (必填) 合约类型
	DeviceNo   string    `protobuf:"bytes,9,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                       // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqTSChart) Reset() {
	*x = ReqTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTSChart) ProtoMessage() {}

func (x *ReqTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTSChart.ProtoReflect.Descriptor instead.
func (*ReqTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{42}
}

func (x *ReqTSChart) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqTSChart) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqTSChart) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqTSChart) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqTSChart) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqTSChart) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqTSChart) GetQuotType() EQuotType {
	if x != nil {
		return x.QuotType
	}
	return EQuotType_QTNull
}

func (x *ReqTSChart) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 分时数据响应
// @author <yinxiaobiao>
// @date 2017-7-19
// @note 协议号 his-proxy:<协议号：3042> proxy-real:<7002> proxy-his:<> real-mgr:<>
// @modify
type RspTSChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID  `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string    `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	ErrorId    uint32    `protobuf:"varint,4,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	PkgType    EPkgType  `protobuf:"varint,5,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
	Tsc        []*TSElem `protobuf:"bytes,6,rep,name=tsc,proto3" json:"tsc,omitempty"`                              // 分时图元数据
	RealQuot   bool      `protobuf:"varint,7,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                   // true 实时行情；false延时行情(for cme添加)
}

func (x *RspTSChart) Reset() {
	*x = RspTSChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTSChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTSChart) ProtoMessage() {}

func (x *RspTSChart) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTSChart.ProtoReflect.Descriptor instead.
func (*RspTSChart) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{43}
}

func (x *RspTSChart) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspTSChart) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspTSChart) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspTSChart) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspTSChart) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

func (x *RspTSChart) GetTsc() []*TSElem {
	if x != nil {
		return x.Tsc
	}
	return nil
}

func (x *RspTSChart) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 分价数据请求
// @author <zhaow>
// @date 2018-04-17
// @note 协议号 proxy-real:<协议号：3043>
// 分价查询不会返回跨交易日的数据。
// @modify
type ReqTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	MsgId      uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string   `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	Date       string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                            // 当前交易日，格式年月日，例如"20170802"。分价查询只支持查询当前交易日。
	DeviceNo   string   `protobuf:"bytes,5,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                    // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqTimePrice) Reset() {
	*x = ReqTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTimePrice) ProtoMessage() {}

func (x *ReqTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTimePrice.ProtoReflect.Descriptor instead.
func (*ReqTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{44}
}

func (x *ReqTimePrice) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ReqTimePrice) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqTimePrice) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqTimePrice) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 分价数据响应
// @author <zhaow>
// @date 2018-04-17
// @note 协议号 real-proxy:<协议号：3044>
// @modify
type RspTimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID  `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string    `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	TradeDate  string    `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 交易日期 例如20170808
	Timestamp  uint64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间（基于1970时间，精确到ms），例如1501808867001
	GenTime    string    `protobuf:"bytes,6,opt,name=genTime,proto3" json:"genTime,omitempty"`                      // tick生成时间,例如08:55:06.818
	ErrorId    uint32    `protobuf:"varint,7,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	PkgType    EPkgType  `protobuf:"varint,8,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
	Tp         []*TPElem `protobuf:"bytes,9,rep,name=tp,proto3" json:"tp,omitempty"`                                // 分价图元数据
	RealQuot   bool      `protobuf:"varint,10,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                  // true 实时行情；false延时行情(for cme添加)
}

func (x *RspTimePrice) Reset() {
	*x = RspTimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTimePrice) ProtoMessage() {}

func (x *RspTimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTimePrice.ProtoReflect.Descriptor instead.
func (*RspTimePrice) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{45}
}

func (x *RspTimePrice) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspTimePrice) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspTimePrice) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspTimePrice) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspTimePrice) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspTimePrice) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspTimePrice) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspTimePrice) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

func (x *RspTimePrice) GetTp() []*TPElem {
	if x != nil {
		return x.Tp
	}
	return nil
}

func (x *RspTimePrice) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 分笔数据请求
// @author <zhaow>
// @date 2018-04-17
// @note 协议号 proxy-real:<协议号：3045>
// 分价查询不会返回跨交易日的数据。
// @modify
type ReqTimeVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	MsgId      uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string   `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	Date       string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                            // 当前交易日，格式年月日，例如"20170802"。分价查询只支持查询当前交易日。
	DeviceNo   string   `protobuf:"bytes,5,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                    // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqTimeVolumn) Reset() {
	*x = ReqTimeVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTimeVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTimeVolumn) ProtoMessage() {}

func (x *ReqTimeVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTimeVolumn.ProtoReflect.Descriptor instead.
func (*ReqTimeVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{46}
}

func (x *ReqTimeVolumn) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ReqTimeVolumn) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqTimeVolumn) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqTimeVolumn) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReqTimeVolumn) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 分笔数据响应
// @author <zhaow>
// @date 2018-04-17
// @note 协议号 real-proxy:<协议号：3046>
// @modify
type RspTimeVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId         EExchgID          `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`                          // 交易所id
	MsgId           uint32            `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                                  // 请求id
	ContractID      string            `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                                         // 合约号
	TradeDate       string            `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                           // 交易日期 例如20170808
	Timestamp       uint64            `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // 时间（基于1970时间，精确到ms），例如1501808867001
	GenTime         string            `protobuf:"bytes,6,opt,name=genTime,proto3" json:"genTime,omitempty"`                                               // tick生成时间,例如08:55:06.818
	ErrorId         uint32            `protobuf:"varint,7,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                                              // 错误码
	VolAcc          *VolumnAccumulate `protobuf:"bytes,8,opt,name=VolAcc,proto3" json:"VolAcc,omitempty"`                                                 // 大单散单统计量
	VolOE           *VolumnOE         `protobuf:"bytes,9,opt,name=VolOE,proto3" json:"VolOE,omitempty"`                                                   // 开平类别统计量
	VolBigOE        *VolumnOE         `protobuf:"bytes,10,opt,name=VolBigOE,proto3" json:"VolBigOE,omitempty"`                                            // 开平类别大单统计量
	VolAvgVol       *VolumnAvgVol     `protobuf:"bytes,11,opt,name=VolAvgVol,proto3" json:"VolAvgVol,omitempty"`                                          // 当前均量及类型
	LateralQuotType EQuotLateralType  `protobuf:"varint,12,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
	RealQuot        bool              `protobuf:"varint,13,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                                           // true 实时行情；false延时行情(for cme添加)
}

func (x *RspTimeVolumn) Reset() {
	*x = RspTimeVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTimeVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTimeVolumn) ProtoMessage() {}

func (x *RspTimeVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTimeVolumn.ProtoReflect.Descriptor instead.
func (*RspTimeVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{47}
}

func (x *RspTimeVolumn) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspTimeVolumn) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspTimeVolumn) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspTimeVolumn) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *RspTimeVolumn) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspTimeVolumn) GetGenTime() string {
	if x != nil {
		return x.GenTime
	}
	return ""
}

func (x *RspTimeVolumn) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspTimeVolumn) GetVolAcc() *VolumnAccumulate {
	if x != nil {
		return x.VolAcc
	}
	return nil
}

func (x *RspTimeVolumn) GetVolOE() *VolumnOE {
	if x != nil {
		return x.VolOE
	}
	return nil
}

func (x *RspTimeVolumn) GetVolBigOE() *VolumnOE {
	if x != nil {
		return x.VolBigOE
	}
	return nil
}

func (x *RspTimeVolumn) GetVolAvgVol() *VolumnAvgVol {
	if x != nil {
		return x.VolAvgVol
	}
	return nil
}

func (x *RspTimeVolumn) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

func (x *RspTimeVolumn) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 成交均量请求
// @author <zhaow>
// @date 2018-05-17
// @note 协议号 proxy-real:<>
// @modify
type ReqAvgVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid    EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	MsgId      uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string   `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	DeviceNo   string   `protobuf:"bytes,4,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                    // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqAvgVolumn) Reset() {
	*x = ReqAvgVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAvgVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAvgVolumn) ProtoMessage() {}

func (x *ReqAvgVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAvgVolumn.ProtoReflect.Descriptor instead.
func (*ReqAvgVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{48}
}

func (x *ReqAvgVolumn) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *ReqAvgVolumn) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqAvgVolumn) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqAvgVolumn) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief 成交均量响应
// @author <zhaow>
// @date 2018-05-17
// @note 协议号 real-proxy:<>
// @modify
type RspAvgVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId         EExchgID         `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`                         // 交易所id
	MsgId           uint32           `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                                 // 请求id
	ContractID      string           `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                                        // 合约号
	Timestamp       uint64           `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         // 时间（基于1970时间，精确到ms），例如1501808867001
	VolAvgVol       *VolumnAvgVol    `protobuf:"bytes,5,opt,name=VolAvgVol,proto3" json:"VolAvgVol,omitempty"`                                          // 当前均量及类型
	LateralQuotType EQuotLateralType `protobuf:"varint,6,opt,name=lateralQuotType,proto3,enum=fippb.EQuotLateralType" json:"lateralQuotType,omitempty"` // 单双边行情类型
	RealQuot        bool             `protobuf:"varint,7,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                                           // true 实时行情；false延时行情(for cme添加)
}

func (x *RspAvgVolumn) Reset() {
	*x = RspAvgVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAvgVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAvgVolumn) ProtoMessage() {}

func (x *RspAvgVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAvgVolumn.ProtoReflect.Descriptor instead.
func (*RspAvgVolumn) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{49}
}

func (x *RspAvgVolumn) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspAvgVolumn) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspAvgVolumn) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspAvgVolumn) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RspAvgVolumn) GetVolAvgVol() *VolumnAvgVol {
	if x != nil {
		return x.VolAvgVol
	}
	return nil
}

func (x *RspAvgVolumn) GetLateralQuotType() EQuotLateralType {
	if x != nil {
		return x.LateralQuotType
	}
	return EQuotLateralType_INDISCRIMINATE
}

func (x *RspAvgVolumn) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 索引配置列表请求
// @author <zyg>
// @date 2017-7-10
// @note 协议号 mgr-*:<9007>
// @modify
type ReqIndexConfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId uint32       `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"` // 请求id
	List  []*IndexConf `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`    // 索引信息
}

func (x *ReqIndexConfList) Reset() {
	*x = ReqIndexConfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIndexConfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIndexConfList) ProtoMessage() {}

func (x *ReqIndexConfList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIndexConfList.ProtoReflect.Descriptor instead.
func (*ReqIndexConfList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{50}
}

func (x *ReqIndexConfList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqIndexConfList) GetList() []*IndexConf {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 索引配置列表响应
// @author <zyg>
// @date 2017-7-18
// @note 协议号 mgr-*:<9008>
// @modify
type RspIndexConfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32       `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`     // 请求id
	ErrorId uint32       `protobuf:"varint,4,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"` // 错误码
	List    []*IndexConf `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`        // 索引信息
}

func (x *RspIndexConfList) Reset() {
	*x = RspIndexConfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspIndexConfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspIndexConfList) ProtoMessage() {}

func (x *RspIndexConfList) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspIndexConfList.ProtoReflect.Descriptor instead.
func (*RspIndexConfList) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{51}
}

func (x *RspIndexConfList) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspIndexConfList) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspIndexConfList) GetList() []*IndexConf {
	if x != nil {
		return x.List
	}
	return nil
}

// *
// @brief 列表文件导入请求
// @author <zyg>
// @date 2017-7-18
// @note 协议号 mgr-*:<9009>
// @modify
type ReqCmdImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId uint32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"` // 请求id
	Rmp   string `protobuf:"bytes,2,opt,name=Rmp,proto3" json:"Rmp,omitempty"`      // 文件导入指令
}

func (x *ReqCmdImport) Reset() {
	*x = ReqCmdImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCmdImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCmdImport) ProtoMessage() {}

func (x *ReqCmdImport) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCmdImport.ProtoReflect.Descriptor instead.
func (*ReqCmdImport) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{52}
}

func (x *ReqCmdImport) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqCmdImport) GetRmp() string {
	if x != nil {
		return x.Rmp
	}
	return ""
}

// *
// @brief 列表文件导入响应
// @author <zyg>
// @date 2017-7-18
// @note 协议号 mgr-*:<9010>
// @modify
type RspCmdImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId uint32 `protobuf:"varint,1,opt,name=errorId,proto3" json:"errorId,omitempty"` // 0:success, 非0:error
	Rmp     string `protobuf:"bytes,2,opt,name=Rmp,proto3" json:"Rmp,omitempty"`          // 导入指令
}

func (x *RspCmdImport) Reset() {
	*x = RspCmdImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCmdImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCmdImport) ProtoMessage() {}

func (x *RspCmdImport) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCmdImport.ProtoReflect.Descriptor instead.
func (*RspCmdImport) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{53}
}

func (x *RspCmdImport) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspCmdImport) GetRmp() string {
	if x != nil {
		return x.Rmp
	}
	return ""
}

// *
// @brief 日期时间信息请求
// @author <wanghaoran>
// @date 2017-8-15
// @note 协议号 client-proxy:<3013>
// @modify
type ReqDateTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeType EDataTimeType `protobuf:"varint,1,opt,name=TimeType,proto3,enum=fippb.EDataTimeType" json:"TimeType,omitempty"` // 请求的日期时间类型
	MsgId    uint32        `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                // 请求id
}

func (x *ReqDateTimeInfo) Reset() {
	*x = ReqDateTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDateTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDateTimeInfo) ProtoMessage() {}

func (x *ReqDateTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDateTimeInfo.ProtoReflect.Descriptor instead.
func (*ReqDateTimeInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{54}
}

func (x *ReqDateTimeInfo) GetTimeType() EDataTimeType {
	if x != nil {
		return x.TimeType
	}
	return EDataTimeType_Null
}

func (x *ReqDateTimeInfo) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// *
// @brief 日期时间信息请求
// @author <wanghaoran>
// @date 2017-8-15
// @note 协议号 client-proxy:<3014>
// @modify
type RspDateTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeType EDataTimeType `protobuf:"varint,1,opt,name=TimeType,proto3,enum=fippb.EDataTimeType" json:"TimeType,omitempty"` // 请求的日期时间类型
	DateTime int64         `protobuf:"varint,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`                          // 日期时间（基于1970时间，精确到ms），例如1501808867001
	MsgId    uint32        `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                // 请求id
}

func (x *RspDateTimeInfo) Reset() {
	*x = RspDateTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDateTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDateTimeInfo) ProtoMessage() {}

func (x *RspDateTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDateTimeInfo.ProtoReflect.Descriptor instead.
func (*RspDateTimeInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{55}
}

func (x *RspDateTimeInfo) GetTimeType() EDataTimeType {
	if x != nil {
		return x.TimeType
	}
	return EDataTimeType_Null
}

func (x *RspDateTimeInfo) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *RspDateTimeInfo) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// *
// @brief K线数据请求
// @author <yinxb>
// @date 2017-09-11
// @note 协议号 his-proxy:<协议号：7008> proxy-real:<> proxy-his:<7008> real-mgr:<> client-proxy:<3052>
// @modify
type ReqKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID   `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`    // 交易所id
	MsgId      uint32     `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                            // 请求id
	ContractID string     `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                   // 合约号
	Type       EKLineType `protobuf:"varint,4,opt,name=type,proto3,enum=fippb.EKLineType" json:"type,omitempty"`        //（必填) 指定查询K线类型，例如1分钟K线，日线等。
	Start      uint64     `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`                            // (必填) 查询开始时间
	End        uint64     `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`                                // (可选) 结束时间戳，可以为0.
	Count      int32      `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                            // (可选) 按调试查询时使用，当end不为0时，该字段无效。即start-end查询优先级高于start-cnt查询。
	QuotType   EQuotType  `protobuf:"varint,8,opt,name=QuotType,proto3,enum=fippb.EQuotType" json:"QuotType,omitempty"` // (必填) 合约类型
	DeviceNo   string     `protobuf:"bytes,9,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`                       // 设备号,针对CME订阅，如果设备号为空，则进行权限验证，直接订阅延迟行情
}

func (x *ReqKLine) Reset() {
	*x = ReqKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKLine) ProtoMessage() {}

func (x *ReqKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKLine.ProtoReflect.Descriptor instead.
func (*ReqKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{56}
}

func (x *ReqKLine) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqKLine) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *ReqKLine) GetType() EKLineType {
	if x != nil {
		return x.Type
	}
	return EKLineType_KLine_Minute_1
}

func (x *ReqKLine) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReqKLine) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ReqKLine) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqKLine) GetQuotType() EQuotType {
	if x != nil {
		return x.QuotType
	}
	return EQuotType_QTNull
}

func (x *ReqKLine) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

// *
// @brief K线数据响应
// @author <suzhongpo>
// @date 2017-09-11
// @note 协议号 his-proxy:<协议号：7009> proxy-real:<5027> proxy-his:<7009> real-mgr:<> real-his:<5027> client-proxy:<3053>
// @modify
type RspKLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId    EExchgID     `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId      uint32       `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	ContractID string       `protobuf:"bytes,3,opt,name=ContractID,proto3" json:"ContractID,omitempty"`                // 合约号
	ErrorId    uint32       `protobuf:"varint,4,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     // 错误码
	PkgType    EPkgType     `protobuf:"varint,5,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
	KType      EKLineType   `protobuf:"varint,6,opt,name=kType,proto3,enum=fippb.EKLineType" json:"kType,omitempty"`   // K线类型
	Kline      []*KLineElem `protobuf:"bytes,7,rep,name=kline,proto3" json:"kline,omitempty"`                          // Kline数据
	RealQuot   bool         `protobuf:"varint,13,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                  // true 实时行情；false延时行情(for cme添加)
}

func (x *RspKLine) Reset() {
	*x = RspKLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspKLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspKLine) ProtoMessage() {}

func (x *RspKLine) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspKLine.ProtoReflect.Descriptor instead.
func (*RspKLine) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{57}
}

func (x *RspKLine) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspKLine) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspKLine) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspKLine) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspKLine) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

func (x *RspKLine) GetKType() EKLineType {
	if x != nil {
		return x.KType
	}
	return EKLineType_KLine_Minute_1
}

func (x *RspKLine) GetKline() []*KLineElem {
	if x != nil {
		return x.Kline
	}
	return nil
}

func (x *RspKLine) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 当前交易日请求
// @author <suzp>
// @date 2017-10-09
// @note 协议号 his-proxy:<协议号：> proxy-real:<> proxy-his:<> real-mgr:<> client-proxy:<> mgr-collector:<10012>
// @modify
type ReqCurTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId   uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
}

func (x *ReqCurTradeDate) Reset() {
	*x = ReqCurTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCurTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCurTradeDate) ProtoMessage() {}

func (x *ReqCurTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCurTradeDate.ProtoReflect.Descriptor instead.
func (*ReqCurTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{58}
}

func (x *ReqCurTradeDate) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqCurTradeDate) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// *
// @brief 当前交易日响应(内盘精确到期货交易所即可，外盘则需要精确关注到交易所下面的具体每个品种)
// @author <suzp>
// @date 2017-10-09
// @note 协议号 his-proxy:<协议号：> proxy-real:<> proxy-his:<> real-mgr:<> client-proxy:<> mgr-collector:<10013>
// @modify
type RspCurTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId  EExchgID `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"` // 交易所id
	MsgId    uint32   `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         // 请求id
	Td       string   `protobuf:"bytes,3,opt,name=td,proto3" json:"td,omitempty"`                                // 当前交易日
	VtyId    string   `protobuf:"bytes,4,opt,name=vtyId,proto3" json:"vtyId,omitempty"`                          // 品种id
	RealQuot bool     `protobuf:"varint,5,opt,name=realQuot,proto3" json:"realQuot,omitempty"`                   // true 实时行情；false延时行情(for cme添加)
}

func (x *RspCurTradeDate) Reset() {
	*x = RspCurTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCurTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCurTradeDate) ProtoMessage() {}

func (x *RspCurTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCurTradeDate.ProtoReflect.Descriptor instead.
func (*RspCurTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{59}
}

func (x *RspCurTradeDate) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *RspCurTradeDate) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspCurTradeDate) GetTd() string {
	if x != nil {
		return x.Td
	}
	return ""
}

func (x *RspCurTradeDate) GetVtyId() string {
	if x != nil {
		return x.VtyId
	}
	return ""
}

func (x *RspCurTradeDate) GetRealQuot() bool {
	if x != nil {
		return x.RealQuot
	}
	return false
}

// *
// @brief 隐含波动率通知
// @author <xuliang>
// @date 2017-11-04
// @note 协议号
// @modify
type NotifyImpliedVol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgid      uint32   `protobuf:"varint,1,opt,name=msgid,proto3" json:"msgid,omitempty"`                         // 请求id
	Exchgid    EExchgID `protobuf:"varint,2,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所     //旧协议字段为exchangeId
	ContractId string   `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                // 合约号
	ImpliedVol float64  `protobuf:"fixed64,4,opt,name=impliedVol,proto3" json:"impliedVol,omitempty"`              // 隐含波动率
}

func (x *NotifyImpliedVol) Reset() {
	*x = NotifyImpliedVol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyImpliedVol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyImpliedVol) ProtoMessage() {}

func (x *NotifyImpliedVol) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyImpliedVol.ProtoReflect.Descriptor instead.
func (*NotifyImpliedVol) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{60}
}

func (x *NotifyImpliedVol) GetMsgid() uint32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

func (x *NotifyImpliedVol) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyImpliedVol) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *NotifyImpliedVol) GetImpliedVol() float64 {
	if x != nil {
		return x.ImpliedVol
	}
	return 0
}

// *
// @brief 交易ID通知
// @author <shenrui>
// @date 2018-04-03
// @note
// @add
type NotifyExchangeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchgId EExchgID     `protobuf:"varint,1,opt,name=exchgId,proto3,enum=fippb.EExchgID" json:"exchgId,omitempty"`
	Type    RealQuotType `protobuf:"varint,2,opt,name=type,proto3,enum=fippb.RealQuotType" json:"type,omitempty"`
}

func (x *NotifyExchangeID) Reset() {
	*x = NotifyExchangeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyExchangeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyExchangeID) ProtoMessage() {}

func (x *NotifyExchangeID) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyExchangeID.ProtoReflect.Descriptor instead.
func (*NotifyExchangeID) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{61}
}

func (x *NotifyExchangeID) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *NotifyExchangeID) GetType() RealQuotType {
	if x != nil {
		return x.Type
	}
	return RealQuotType_QutNull
}

// *
// @brief 心跳请求
// @author <zhangguohui>
// @date 2017-11-16
// @note 协议号
// @modify
type ReqClientPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间（基于1970时间，精确到ms）
}

func (x *ReqClientPing) Reset() {
	*x = ReqClientPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqClientPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqClientPing) ProtoMessage() {}

func (x *ReqClientPing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqClientPing.ProtoReflect.Descriptor instead.
func (*ReqClientPing) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{62}
}

func (x *ReqClientPing) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 心跳响应
// @author <zhangguohui>
// @date 2017-11-16
// @note 协议号
// @modify
type RspClientPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间（基于1970时间，精确到ms）
}

func (x *RspClientPing) Reset() {
	*x = RspClientPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspClientPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspClientPing) ProtoMessage() {}

func (x *RspClientPing) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspClientPing.ProtoReflect.Descriptor instead.
func (*RspClientPing) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{63}
}

func (x *RspClientPing) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// *
// @brief 历史数据写入完成通知
// @author <lichaochao>
// @date 2019-11-25
// @note 协议号
// @modify
type NotifyHisDataHandleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32                  `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                                              //消息ID
	ErrorID    uint32                  `protobuf:"varint,2,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`                                          //数据写入结果
	HandleType ArbiHisServerHandleType `protobuf:"varint,3,opt,name=HandleType,proto3,enum=fippb.ArbiHisServerHandleType" json:"HandleType,omitempty"` //服务处理事件类型
}

func (x *NotifyHisDataHandleResult) Reset() {
	*x = NotifyHisDataHandleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyHisDataHandleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyHisDataHandleResult) ProtoMessage() {}

func (x *NotifyHisDataHandleResult) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyHisDataHandleResult.ProtoReflect.Descriptor instead.
func (*NotifyHisDataHandleResult) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{64}
}

func (x *NotifyHisDataHandleResult) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NotifyHisDataHandleResult) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *NotifyHisDataHandleResult) GetHandleType() ArbiHisServerHandleType {
	if x != nil {
		return x.HandleType
	}
	return ArbiHisServerHandleType_KLINE_REQ_HANDLE_COMPLETED
}

// *
// @brief 财讯通套利实时行情内部vm向缓存请求新的套利行情数据
// @author <fengwei>
// @date 2020-09-15
// @note 协议号
// @modify
type AskFipArbiQuotInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleType FipArbiRealQuotModuleType `protobuf:"varint,1,opt,name=ModuleType,proto3,enum=fippb.FipArbiRealQuotModuleType" json:"ModuleType,omitempty"` //实时行情模块类型
}

func (x *AskFipArbiQuotInner) Reset() {
	*x = AskFipArbiQuotInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskFipArbiQuotInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskFipArbiQuotInner) ProtoMessage() {}

func (x *AskFipArbiQuotInner) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskFipArbiQuotInner.ProtoReflect.Descriptor instead.
func (*AskFipArbiQuotInner) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{65}
}

func (x *AskFipArbiQuotInner) GetModuleType() FipArbiRealQuotModuleType {
	if x != nil {
		return x.ModuleType
	}
	return FipArbiRealQuotModuleType_FARQMT_Null
}

// *
// @brief 模拟行情播放通知循环播放某个交易日的数据
// @author <fengwei>
// @date 2023-04-20
// @note <协议号：10024>
// 7*24模拟交易盘后模拟交易中，满足行情循环播放的需求，行情播放完毕后推送该消息，用于实时行情清理数据和缓存。
// @modify
type NotifyReplaySimQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchgid   EExchgID `protobuf:"varint,1,opt,name=exchgid,proto3,enum=fippb.EExchgID" json:"exchgid,omitempty"` // 交易所id
	TradeDate string   `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                  // 循环播放行情的交易日
}

func (x *NotifyReplaySimQuot) Reset() {
	*x = NotifyReplaySimQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyReplaySimQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyReplaySimQuot) ProtoMessage() {}

func (x *NotifyReplaySimQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyReplaySimQuot.ProtoReflect.Descriptor instead.
func (*NotifyReplaySimQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{66}
}

func (x *NotifyReplaySimQuot) GetExchgid() EExchgID {
	if x != nil {
		return x.Exchgid
	}
	return EExchgID_ExchNull
}

func (x *NotifyReplaySimQuot) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 财讯通查询品种年度涨跌幅请求（按主力计算）
// @author <mengxin>
// @date 2023-06-15
// @note 协议号 opcode=3093
// @modify
type ReqIncreaseAnnual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      uint32   `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         //消息ID
	ExchgId    EExchgID `protobuf:"varint,2,opt,name=ExchgId,proto3,enum=fippb.EExchgID" json:"ExchgId,omitempty"` //交易所ID
	VarietyId  string   `protobuf:"bytes,3,opt,name=VarietyId,proto3" json:"VarietyId,omitempty"`                  //品种代码，品种为空，则查询交易所所有的品种.
	ContractId string   `protobuf:"bytes,4,opt,name=ContractId,proto3" json:"ContractId,omitempty"`                //预留，如果改为查指定合约，就得用这个字段.
	TradeDate  string   `protobuf:"bytes,5,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`                  //交易日，如果没有指定，就查当前日期的.用最新价或结算价
}

func (x *ReqIncreaseAnnual) Reset() {
	*x = ReqIncreaseAnnual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseAnnual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseAnnual) ProtoMessage() {}

func (x *ReqIncreaseAnnual) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseAnnual.ProtoReflect.Descriptor instead.
func (*ReqIncreaseAnnual) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{67}
}

func (x *ReqIncreaseAnnual) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqIncreaseAnnual) GetExchgId() EExchgID {
	if x != nil {
		return x.ExchgId
	}
	return EExchgID_ExchNull
}

func (x *ReqIncreaseAnnual) GetVarietyId() string {
	if x != nil {
		return x.VarietyId
	}
	return ""
}

func (x *ReqIncreaseAnnual) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ReqIncreaseAnnual) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 财讯通查询品种年度涨跌幅响应（按主力计算）
// @author <mengxin>
// @date 2023-06-15
// @note 协议号 opcode=3094
// @modify
type RspIncreaseAnnual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   uint32                `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                         ///< 消息ID
	List    []*IncreaseAnnualElem `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`                            ///< 品种涨跌幅数据列表
	Total   uint32                `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`                         ///< 本次查询结果总数量，可能分若干包返回.期货一般一包就够了，证券啥的需要分包。
	ErrorId uint32                `protobuf:"varint,4,opt,name=ErrorId,proto3" json:"ErrorId,omitempty"`                     ///< 错误码
	Index   uint32                `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`                         ///< 分包ID
	PkgType EPkgType              `protobuf:"varint,6,opt,name=PkgType,proto3,enum=fippb.EPkgType" json:"PkgType,omitempty"` ///< 分包标志
}

func (x *RspIncreaseAnnual) Reset() {
	*x = RspIncreaseAnnual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspIncreaseAnnual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspIncreaseAnnual) ProtoMessage() {}

func (x *RspIncreaseAnnual) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspIncreaseAnnual.ProtoReflect.Descriptor instead.
func (*RspIncreaseAnnual) Descriptor() ([]byte, []int) {
	return file_fip_interface_proto_rawDescGZIP(), []int{68}
}

func (x *RspIncreaseAnnual) GetMsgId() uint32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *RspIncreaseAnnual) GetList() []*IncreaseAnnualElem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RspIncreaseAnnual) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RspIncreaseAnnual) GetErrorId() uint32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspIncreaseAnnual) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RspIncreaseAnnual) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

var File_fip_interface_proto protoreflect.FileDescriptor

var file_fip_interface_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x0d, 0x66, 0x69,
	0x70, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x66, 0x69, 0x70,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xf4,
	0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x03, 0x71, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x51, 0x72, 0x79, 0x52, 0x03, 0x71, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x4d, 0x73, 0x67, 0x22, 0x3c, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x51, 0x72, 0x79, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x22, 0xa4,
	0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x54, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xce, 0x02, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68,
	0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x75, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x41, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x57, 0x41, 0x42, 0x75, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x41, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x57, 0x41, 0x53, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x22, 0xfc, 0x01, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51,
	0x74, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79,
	0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x13,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x63,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b,
	0x49, 0x6e, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x51,
	0x75, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x42, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x52, 0x04, 0x42, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x4d, 0x42, 0x4c,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x4d, 0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x07, 0x4d, 0x42, 0x4c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x70, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x63, 0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x52, 0x02, 0x70, 0x71, 0x12, 0x2e, 0x0a, 0x07, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x72, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x54, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x63, 0x12, 0x31, 0x0a, 0x08, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x4f, 0x70,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x02, 0x71, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x71, 0x74, 0x22, 0xd8, 0x03, 0x0a, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x6b, 0x74, 0x4d, 0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x52, 0x06, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d, 0x42, 0x4c, 0x51, 0x75, 0x6f,
	0x74, 0x52, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x70, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x52, 0x02, 0x70, 0x71,
	0x12, 0x22, 0x0a, 0x03, 0x71, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x03, 0x71, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x71, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x02, 0x71, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x54, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x02, 0x63, 0x70, 0x12, 0x25, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x70, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x63, 0x51, 0x74, 0x79, 0x52, 0x03, 0x6d, 0x70, 0x71, 0x12,
	0x2a, 0x0a, 0x03, 0x6f, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x03, 0x6f, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x64, 0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x72,
	0x62, 0x69, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x52,
	0x04, 0x62, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d,
	0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x02, 0x70, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x63, 0x4f, 0x72, 0x64, 0x51, 0x74,
	0x79, 0x52, 0x02, 0x70, 0x71, 0x12, 0x22, 0x0a, 0x03, 0x71, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x03, 0x71, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x71, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51,
	0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x71, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x42, 0x4c,
	0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4d,
	0x42, 0x4c, 0x51, 0x75, 0x6f, 0x74, 0x52, 0x07, 0x6d, 0x62, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01,
	0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x63, 0x4f,
	0x72, 0x64, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x02, 0x70, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x63, 0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x52, 0x02, 0x70, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x4c, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x52, 0x65, 0x71, 0x4c, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x74, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x74, 0x79, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x46, 0x74,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x48, 0x61, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x48,
	0x61, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x74, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x52,
	0x73, 0x70, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x70,
	0x49, 0x64, 0x78, 0x43, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x78, 0x43, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x52,
	0x73, 0x70, 0x46, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x52,
	0x73, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x52,
	0x73, 0x70, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xdd,
	0x01, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x49, 0x64, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x78, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xdf,
	0x01, 0x0a, 0x13, 0x52, 0x73, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64,
	0x22, 0xbd, 0x01, 0x0a, 0x19, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43,
	0x61, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x52, 0x73, 0x70, 0x46, 0x69,
	0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x74, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x01, 0x0a,
	0x1f, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x4d, 0x4b, 0x54, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2e,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62,
	0x69, 0x46, 0x74, 0x72, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x52, 0x73, 0x70, 0x46, 0x69,
	0x70, 0x41, 0x72, 0x62, 0x69, 0x41, 0x4c, 0x4c, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1e, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41,
	0x72, 0x62, 0x69, 0x43, 0x61, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41,
	0x72, 0x62, 0x69, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1e, 0x52, 0x73, 0x70,
	0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x74, 0x79, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a,
	0x1e, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x4d, 0x6b, 0x74, 0x53, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x52, 0x73, 0x70, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x46,
	0x74, 0x72, 0x53, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62, 0x69, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x46, 0x74, 0x72, 0x4f, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x52, 0x73,
	0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x07,
	0x53, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x6b, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe1, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xcc, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x48, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xfe,
	0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x48, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x48, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x22,
	0x89, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0a,
	0x52, 0x73, 0x70, 0x54, 0x53, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x74, 0x73, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x53, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x03, 0x74, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x22, 0x9f, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22,
	0xc5, 0x02, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x02,
	0x74, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x54, 0x50, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x02, 0x74, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xf7, 0x03, 0x0a, 0x0d, 0x52,
	0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x12, 0x25,
	0x0a, 0x05, 0x56, 0x6f, 0x6c, 0x4f, 0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x45, 0x52, 0x05,
	0x56, 0x6f, 0x6c, 0x4f, 0x45, 0x12, 0x2b, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x42, 0x69, 0x67, 0x4f,
	0x45, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x45, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x42, 0x69, 0x67,
	0x4f, 0x45, 0x12, 0x31, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x52, 0x09, 0x56, 0x6f, 0x6c, 0x41,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x41, 0x76, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x31, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x76, 0x67, 0x56, 0x6f, 0x6c, 0x52, 0x09, 0x56, 0x6f, 0x6c, 0x41,
	0x76, 0x67, 0x56, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x51, 0x75, 0x6f, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x43, 0x6d, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x52, 0x6d, 0x70, 0x22, 0x3a, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x43, 0x6d, 0x64,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x52, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52,
	0x6d, 0x70, 0x22, 0x59, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x0f, 0x52, 0x73, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x4b, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x51, 0x75, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x08, 0x52, 0x73, 0x70, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4b, 0x4c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x4b, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x05,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x22, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x43, 0x75, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x43, 0x75, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x22, 0x66, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x0d, 0x52, 0x73, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x48, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x46, 0x69, 0x70,
	0x41, 0x72, 0x62, 0x69, 0x51, 0x75, 0x6f, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x70, 0x41, 0x72, 0x62,
	0x69, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5e, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x69, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x65, 0x78, 0x63, 0x68, 0x67, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x07, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x07, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1b,
	0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_proto_rawDescOnce sync.Once
	file_fip_interface_proto_rawDescData = file_fip_interface_proto_rawDesc
)

func file_fip_interface_proto_rawDescGZIP() []byte {
	file_fip_interface_proto_rawDescOnce.Do(func() {
		file_fip_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_proto_rawDescData)
	})
	return file_fip_interface_proto_rawDescData
}

var file_fip_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_fip_interface_proto_goTypes = []interface{}{
	(*ReqSubscribeQuot)(nil),                // 0: fippb.ReqSubscribeQuot
	(*RspSubscribeQuot)(nil),                // 1: fippb.RspSubscribeQuot
	(*RspSubscribeQuery)(nil),               // 2: fippb.RspSubscribeQuery
	(*RspSnapShot)(nil),                     // 3: fippb.RspSnapShot
	(*NotifyRTPrice)(nil),                   // 4: fippb.NotifyRTPrice
	(*NotifyOrderSta)(nil),                  // 5: fippb.NotifyOrderSta
	(*NotifyOptProperty)(nil),               // 6: fippb.NotifyOptProperty
	(*NotifyMatchPrcQty)(nil),               // 7: fippb.NotifyMatchPrcQty
	(*NotifyClientIncQuot)(nil),             // 8: fippb.NotifyClientIncQuot
	(*NotifyMktMBLQuot)(nil),                // 9: fippb.NotifyMktMBLQuot
	(*NotifyArbiBestQuot)(nil),              // 10: fippb.NotifyArbiBestQuot
	(*NotifyOptPara)(nil),                   // 11: fippb.NotifyOptPara
	(*NotifyMBLQuot)(nil),                   // 12: fippb.NotifyMBLQuot
	(*NotifyBestPrcOrdQty)(nil),             // 13: fippb.NotifyBestPrcOrdQty
	(*ReqLstRequest)(nil),                   // 14: fippb.ReqLstRequest
	(*RspTypeList)(nil),                     // 15: fippb.RspTypeList
	(*RspFtrVarietyList)(nil),               // 16: fippb.RspFtrVarietyList
	(*RspOptVarietyList)(nil),               // 17: fippb.RspOptVarietyList
	(*RspIdxCatList)(nil),                   // 18: fippb.RspIdxCatList
	(*RspFtrContractList)(nil),              // 19: fippb.RspFtrContractList
	(*RspSpotVarietyList)(nil),              // 20: fippb.RspSpotVarietyList
	(*RspOptUnderlyingList)(nil),            // 21: fippb.RspOptUnderlyingList
	(*RspIdxContractList)(nil),              // 22: fippb.RspIdxContractList
	(*RspArbiContractList)(nil),             // 23: fippb.RspArbiContractList
	(*RspFipArbiAllContractList)(nil),       // 24: fippb.RspFipArbiAllContractList
	(*RspFipArbiCalSpreadContractList)(nil), // 25: fippb.RspFipArbiCalSpreadContractList
	(*RspFipArbiVtySpreadContractList)(nil), // 26: fippb.RspFipArbiVtySpreadContractList
	(*RspFipArbiMKTSpreadContractList)(nil), // 27: fippb.RspFipArbiMKTSpreadContractList
	(*RspFipArbiFtrSpotContractList)(nil),   // 28: fippb.RspFipArbiFtrSpotContractList
	(*RspFipArbiALLVarietyList)(nil),        // 29: fippb.RspFipArbiALLVarietyList
	(*RspFipArbiCalSpreadVarietyList)(nil),  // 30: fippb.RspFipArbiCalSpreadVarietyList
	(*RspFipArbiVtySpreadVarietyList)(nil),  // 31: fippb.RspFipArbiVtySpreadVarietyList
	(*RspFipArbiMktSpreadVarietyList)(nil),  // 32: fippb.RspFipArbiMktSpreadVarietyList
	(*RspFipArbiFtrSpotVarietyList)(nil),    // 33: fippb.RspFipArbiFtrSpotVarietyList
	(*RspFtrOptList)(nil),                   // 34: fippb.RspFtrOptList
	(*RspExchangeList)(nil),                 // 35: fippb.RspExchangeList
	(*NotifyMktQuotSta)(nil),                // 36: fippb.NotifyMktQuotSta
	(*NotifyOptQuotSta)(nil),                // 37: fippb.NotifyOptQuotSta
	(*ReqServiceStatus)(nil),                // 38: fippb.ReqServiceStatus
	(*NotifyStatus)(nil),                    // 39: fippb.NotifyStatus
	(*ReqHisMatchDetail)(nil),               // 40: fippb.ReqHisMatchDetail
	(*RspHisMatchDetail)(nil),               // 41: fippb.RspHisMatchDetail
	(*ReqTSChart)(nil),                      // 42: fippb.ReqTSChart
	(*RspTSChart)(nil),                      // 43: fippb.RspTSChart
	(*ReqTimePrice)(nil),                    // 44: fippb.ReqTimePrice
	(*RspTimePrice)(nil),                    // 45: fippb.RspTimePrice
	(*ReqTimeVolumn)(nil),                   // 46: fippb.ReqTimeVolumn
	(*RspTimeVolumn)(nil),                   // 47: fippb.RspTimeVolumn
	(*ReqAvgVolumn)(nil),                    // 48: fippb.ReqAvgVolumn
	(*RspAvgVolumn)(nil),                    // 49: fippb.RspAvgVolumn
	(*ReqIndexConfList)(nil),                // 50: fippb.ReqIndexConfList
	(*RspIndexConfList)(nil),                // 51: fippb.RspIndexConfList
	(*ReqCmdImport)(nil),                    // 52: fippb.ReqCmdImport
	(*RspCmdImport)(nil),                    // 53: fippb.RspCmdImport
	(*ReqDateTimeInfo)(nil),                 // 54: fippb.ReqDateTimeInfo
	(*RspDateTimeInfo)(nil),                 // 55: fippb.RspDateTimeInfo
	(*ReqKLine)(nil),                        // 56: fippb.ReqKLine
	(*RspKLine)(nil),                        // 57: fippb.RspKLine
	(*ReqCurTradeDate)(nil),                 // 58: fippb.ReqCurTradeDate
	(*RspCurTradeDate)(nil),                 // 59: fippb.RspCurTradeDate
	(*NotifyImpliedVol)(nil),                // 60: fippb.NotifyImpliedVol
	(*NotifyExchangeID)(nil),                // 61: fippb.NotifyExchangeID
	(*ReqClientPing)(nil),                   // 62: fippb.ReqClientPing
	(*RspClientPing)(nil),                   // 63: fippb.RspClientPing
	(*NotifyHisDataHandleResult)(nil),       // 64: fippb.NotifyHisDataHandleResult
	(*AskFipArbiQuotInner)(nil),             // 65: fippb.AskFipArbiQuotInner
	(*NotifyReplaySimQuot)(nil),             // 66: fippb.NotifyReplaySimQuot
	(*ReqIncreaseAnnual)(nil),               // 67: fippb.ReqIncreaseAnnual
	(*RspIncreaseAnnual)(nil),               // 68: fippb.RspIncreaseAnnual
	(ReqType)(0),                            // 69: fippb.ReqType
	(*SubscribeElem)(nil),                   // 70: fippb.SubscribeElem
	(*SubscribeQry)(nil),                    // 71: fippb.SubscribeQry
	(AuthResultCode)(0),                     // 72: fippb.AuthResultCode
	(EExchgID)(0),                           // 73: fippb.EExchgID
	(EQuotLateralType)(0),                   // 74: fippb.EQuotLateralType
	(*PrcQtyElem)(nil),                      // 75: fippb.PrcQtyElem
	(EQuotAttr)(0),                          // 76: fippb.EQuotAttr
	(*BestQuot)(nil),                        // 77: fippb.BestQuot
	(*MBLQuot)(nil),                         // 78: fippb.MBLQuot
	(*OptPara)(nil),                         // 79: fippb.OptPara
	(*BestPrcOrdQty)(nil),                   // 80: fippb.BestPrcOrdQty
	(EQuotType)(0),                          // 81: fippb.EQuotType
	(EReqLstType)(0),                        // 82: fippb.EReqLstType
	(*FtrVarietyElem)(nil),                  // 83: fippb.FtrVarietyElem
	(*OptVarietyElem)(nil),                  // 84: fippb.OptVarietyElem
	(*IdxCatElem)(nil),                      // 85: fippb.IdxCatElem
	(*FtrContractElem)(nil),                 // 86: fippb.FtrContractElem
	(*SpotVarietyElem)(nil),                 // 87: fippb.SpotVarietyElem
	(*OptUnderlyingElem)(nil),               // 88: fippb.OptUnderlyingElem
	(*IdxContractElem)(nil),                 // 89: fippb.IdxContractElem
	(*ArbiContractElem)(nil),                // 90: fippb.ArbiContractElem
	(*FipArbiContractElem)(nil),             // 91: fippb.FipArbiContractElem
	(*FipArbiVarietyElem)(nil),              // 92: fippb.FipArbiVarietyElem
	(*OptContractElem)(nil),                 // 93: fippb.OptContractElem
	(*ExchangeElem)(nil),                    // 94: fippb.ExchangeElem
	(*VtyQuotStaElem)(nil),                  // 95: fippb.VtyQuotStaElem
	(EPkgType)(0),                           // 96: fippb.EPkgType
	(*OptQuotStaElem)(nil),                  // 97: fippb.OptQuotStaElem
	(ESvrStatus)(0),                         // 98: fippb.ESvrStatus
	(*HisMatchElem)(nil),                    // 99: fippb.HisMatchElem
	(*TSElem)(nil),                          // 100: fippb.TSElem
	(*TPElem)(nil),                          // 101: fippb.TPElem
	(*VolumnAccumulate)(nil),                // 102: fippb.VolumnAccumulate
	(*VolumnOE)(nil),                        // 103: fippb.VolumnOE
	(*VolumnAvgVol)(nil),                    // 104: fippb.VolumnAvgVol
	(*IndexConf)(nil),                       // 105: fippb.IndexConf
	(EDataTimeType)(0),                      // 106: fippb.EDataTimeType
	(EKLineType)(0),                         // 107: fippb.EKLineType
	(*KLineElem)(nil),                       // 108: fippb.KLineElem
	(RealQuotType)(0),                       // 109: fippb.RealQuotType
	(ArbiHisServerHandleType)(0),            // 110: fippb.ArbiHisServerHandleType
	(FipArbiRealQuotModuleType)(0),          // 111: fippb.FipArbiRealQuotModuleType
	(*IncreaseAnnualElem)(nil),              // 112: fippb.IncreaseAnnualElem
}
var file_fip_interface_proto_depIdxs = []int32{
	69,  // 0: fippb.ReqSubscribeQuot.req:type_name -> fippb.ReqType
	70,  // 1: fippb.ReqSubscribeQuot.List:type_name -> fippb.SubscribeElem
	71,  // 2: fippb.RspSubscribeQuot.qry:type_name -> fippb.SubscribeQry
	72,  // 3: fippb.RspSubscribeQuot.resultCode:type_name -> fippb.AuthResultCode
	71,  // 4: fippb.RspSubscribeQuery.Info:type_name -> fippb.SubscribeQry
	73,  // 5: fippb.NotifyRTPrice.exchgid:type_name -> fippb.EExchgID
	73,  // 6: fippb.NotifyOrderSta.exchgid:type_name -> fippb.EExchgID
	74,  // 7: fippb.NotifyOrderSta.lateralQuotType:type_name -> fippb.EQuotLateralType
	73,  // 8: fippb.NotifyMatchPrcQty.exchgid:type_name -> fippb.EExchgID
	75,  // 9: fippb.NotifyMatchPrcQty.List:type_name -> fippb.PrcQtyElem
	74,  // 10: fippb.NotifyMatchPrcQty.lateralQuotType:type_name -> fippb.EQuotLateralType
	76,  // 11: fippb.NotifyClientIncQuot.QuotAttr:type_name -> fippb.EQuotAttr
	73,  // 12: fippb.NotifyClientIncQuot.ExchgId:type_name -> fippb.EExchgID
	77,  // 13: fippb.NotifyClientIncQuot.Best:type_name -> fippb.BestQuot
	78,  // 14: fippb.NotifyClientIncQuot.MBLList:type_name -> fippb.MBLQuot
	79,  // 15: fippb.NotifyClientIncQuot.OptParaList:type_name -> fippb.OptPara
	80,  // 16: fippb.NotifyClientIncQuot.pq:type_name -> fippb.BestPrcOrdQty
	4,   // 17: fippb.NotifyClientIncQuot.RealPrc:type_name -> fippb.NotifyRTPrice
	5,   // 18: fippb.NotifyClientIncQuot.OrderSta:type_name -> fippb.NotifyOrderSta
	7,   // 19: fippb.NotifyClientIncQuot.MatchPrcQty:type_name -> fippb.NotifyMatchPrcQty
	6,   // 20: fippb.NotifyClientIncQuot.OptProperty:type_name -> fippb.NotifyOptProperty
	81,  // 21: fippb.NotifyClientIncQuot.qt:type_name -> fippb.EQuotType
	77,  // 22: fippb.NotifyMktMBLQuot.best:type_name -> fippb.BestQuot
	79,  // 23: fippb.NotifyMktMBLQuot.opList:type_name -> fippb.OptPara
	78,  // 24: fippb.NotifyMktMBLQuot.mblList:type_name -> fippb.MBLQuot
	80,  // 25: fippb.NotifyMktMBLQuot.pq:type_name -> fippb.BestPrcOrdQty
	76,  // 26: fippb.NotifyMktMBLQuot.qat:type_name -> fippb.EQuotAttr
	81,  // 27: fippb.NotifyMktMBLQuot.qt:type_name -> fippb.EQuotType
	4,   // 28: fippb.NotifyMktMBLQuot.cp:type_name -> fippb.NotifyRTPrice
	5,   // 29: fippb.NotifyMktMBLQuot.os:type_name -> fippb.NotifyOrderSta
	7,   // 30: fippb.NotifyMktMBLQuot.mpq:type_name -> fippb.NotifyMatchPrcQty
	6,   // 31: fippb.NotifyMktMBLQuot.opr:type_name -> fippb.NotifyOptProperty
	77,  // 32: fippb.NotifyArbiBestQuot.best:type_name -> fippb.BestQuot
	78,  // 33: fippb.NotifyArbiBestQuot.mblList:type_name -> fippb.MBLQuot
	80,  // 34: fippb.NotifyArbiBestQuot.pq:type_name -> fippb.BestPrcOrdQty
	76,  // 35: fippb.NotifyArbiBestQuot.qat:type_name -> fippb.EQuotAttr
	81,  // 36: fippb.NotifyArbiBestQuot.qt:type_name -> fippb.EQuotType
	73,  // 37: fippb.NotifyOptPara.exchgid:type_name -> fippb.EExchgID
	79,  // 38: fippb.NotifyOptPara.optPara:type_name -> fippb.OptPara
	73,  // 39: fippb.NotifyMBLQuot.exchgid:type_name -> fippb.EExchgID
	78,  // 40: fippb.NotifyMBLQuot.mblList:type_name -> fippb.MBLQuot
	73,  // 41: fippb.NotifyBestPrcOrdQty.exchgid:type_name -> fippb.EExchgID
	80,  // 42: fippb.NotifyBestPrcOrdQty.pq:type_name -> fippb.BestPrcOrdQty
	82,  // 43: fippb.ReqLstRequest.Type:type_name -> fippb.EReqLstType
	73,  // 44: fippb.ReqLstRequest.exchgid:type_name -> fippb.EExchgID
	14,  // 45: fippb.RspTypeList.Req:type_name -> fippb.ReqLstRequest
	83,  // 46: fippb.RspFtrVarietyList.list:type_name -> fippb.FtrVarietyElem
	73,  // 47: fippb.RspFtrVarietyList.exchgid:type_name -> fippb.EExchgID
	84,  // 48: fippb.RspOptVarietyList.list:type_name -> fippb.OptVarietyElem
	73,  // 49: fippb.RspOptVarietyList.exchgid:type_name -> fippb.EExchgID
	85,  // 50: fippb.RspIdxCatList.List:type_name -> fippb.IdxCatElem
	73,  // 51: fippb.RspIdxCatList.exchgid:type_name -> fippb.EExchgID
	86,  // 52: fippb.RspFtrContractList.list:type_name -> fippb.FtrContractElem
	73,  // 53: fippb.RspFtrContractList.exchgid:type_name -> fippb.EExchgID
	87,  // 54: fippb.RspSpotVarietyList.list:type_name -> fippb.SpotVarietyElem
	73,  // 55: fippb.RspSpotVarietyList.exchgid:type_name -> fippb.EExchgID
	88,  // 56: fippb.RspOptUnderlyingList.list:type_name -> fippb.OptUnderlyingElem
	73,  // 57: fippb.RspOptUnderlyingList.exchgid:type_name -> fippb.EExchgID
	89,  // 58: fippb.RspIdxContractList.List:type_name -> fippb.IdxContractElem
	73,  // 59: fippb.RspIdxContractList.exchgid:type_name -> fippb.EExchgID
	90,  // 60: fippb.RspArbiContractList.List:type_name -> fippb.ArbiContractElem
	73,  // 61: fippb.RspArbiContractList.ExchgId:type_name -> fippb.EExchgID
	91,  // 62: fippb.RspFipArbiAllContractList.List:type_name -> fippb.FipArbiContractElem
	91,  // 63: fippb.RspFipArbiCalSpreadContractList.List:type_name -> fippb.FipArbiContractElem
	91,  // 64: fippb.RspFipArbiVtySpreadContractList.List:type_name -> fippb.FipArbiContractElem
	91,  // 65: fippb.RspFipArbiMKTSpreadContractList.List:type_name -> fippb.FipArbiContractElem
	91,  // 66: fippb.RspFipArbiFtrSpotContractList.List:type_name -> fippb.FipArbiContractElem
	92,  // 67: fippb.RspFipArbiALLVarietyList.List:type_name -> fippb.FipArbiVarietyElem
	92,  // 68: fippb.RspFipArbiCalSpreadVarietyList.List:type_name -> fippb.FipArbiVarietyElem
	92,  // 69: fippb.RspFipArbiVtySpreadVarietyList.List:type_name -> fippb.FipArbiVarietyElem
	92,  // 70: fippb.RspFipArbiMktSpreadVarietyList.List:type_name -> fippb.FipArbiVarietyElem
	92,  // 71: fippb.RspFipArbiFtrSpotVarietyList.List:type_name -> fippb.FipArbiVarietyElem
	93,  // 72: fippb.RspFtrOptList.List:type_name -> fippb.OptContractElem
	73,  // 73: fippb.RspFtrOptList.exchgid:type_name -> fippb.EExchgID
	94,  // 74: fippb.RspExchangeList.list:type_name -> fippb.ExchangeElem
	94,  // 75: fippb.RspExchangeList.StaList:type_name -> fippb.ExchangeElem
	73,  // 76: fippb.NotifyMktQuotSta.exchgid:type_name -> fippb.EExchgID
	95,  // 77: fippb.NotifyMktQuotSta.list:type_name -> fippb.VtyQuotStaElem
	96,  // 78: fippb.NotifyMktQuotSta.pkgType:type_name -> fippb.EPkgType
	73,  // 79: fippb.NotifyOptQuotSta.exchgid:type_name -> fippb.EExchgID
	97,  // 80: fippb.NotifyOptQuotSta.list:type_name -> fippb.OptQuotStaElem
	96,  // 81: fippb.NotifyOptQuotSta.pkgType:type_name -> fippb.EPkgType
	73,  // 82: fippb.ReqServiceStatus.exchgid:type_name -> fippb.EExchgID
	98,  // 83: fippb.NotifyStatus.Status:type_name -> fippb.ESvrStatus
	73,  // 84: fippb.NotifyStatus.exchgid:type_name -> fippb.EExchgID
	73,  // 85: fippb.ReqHisMatchDetail.exchgid:type_name -> fippb.EExchgID
	73,  // 86: fippb.RspHisMatchDetail.exchgid:type_name -> fippb.EExchgID
	96,  // 87: fippb.RspHisMatchDetail.pkgType:type_name -> fippb.EPkgType
	99,  // 88: fippb.RspHisMatchDetail.List:type_name -> fippb.HisMatchElem
	73,  // 89: fippb.ReqTSChart.exchgId:type_name -> fippb.EExchgID
	81,  // 90: fippb.ReqTSChart.QuotType:type_name -> fippb.EQuotType
	73,  // 91: fippb.RspTSChart.exchgId:type_name -> fippb.EExchgID
	96,  // 92: fippb.RspTSChart.pkgType:type_name -> fippb.EPkgType
	100, // 93: fippb.RspTSChart.tsc:type_name -> fippb.TSElem
	73,  // 94: fippb.ReqTimePrice.exchgid:type_name -> fippb.EExchgID
	73,  // 95: fippb.RspTimePrice.exchgId:type_name -> fippb.EExchgID
	96,  // 96: fippb.RspTimePrice.pkgType:type_name -> fippb.EPkgType
	101, // 97: fippb.RspTimePrice.tp:type_name -> fippb.TPElem
	73,  // 98: fippb.ReqTimeVolumn.exchgid:type_name -> fippb.EExchgID
	73,  // 99: fippb.RspTimeVolumn.exchgId:type_name -> fippb.EExchgID
	102, // 100: fippb.RspTimeVolumn.VolAcc:type_name -> fippb.VolumnAccumulate
	103, // 101: fippb.RspTimeVolumn.VolOE:type_name -> fippb.VolumnOE
	103, // 102: fippb.RspTimeVolumn.VolBigOE:type_name -> fippb.VolumnOE
	104, // 103: fippb.RspTimeVolumn.VolAvgVol:type_name -> fippb.VolumnAvgVol
	74,  // 104: fippb.RspTimeVolumn.lateralQuotType:type_name -> fippb.EQuotLateralType
	73,  // 105: fippb.ReqAvgVolumn.exchgid:type_name -> fippb.EExchgID
	73,  // 106: fippb.RspAvgVolumn.exchgId:type_name -> fippb.EExchgID
	104, // 107: fippb.RspAvgVolumn.VolAvgVol:type_name -> fippb.VolumnAvgVol
	74,  // 108: fippb.RspAvgVolumn.lateralQuotType:type_name -> fippb.EQuotLateralType
	105, // 109: fippb.ReqIndexConfList.List:type_name -> fippb.IndexConf
	105, // 110: fippb.RspIndexConfList.List:type_name -> fippb.IndexConf
	106, // 111: fippb.ReqDateTimeInfo.TimeType:type_name -> fippb.EDataTimeType
	106, // 112: fippb.RspDateTimeInfo.TimeType:type_name -> fippb.EDataTimeType
	73,  // 113: fippb.ReqKLine.exchgId:type_name -> fippb.EExchgID
	107, // 114: fippb.ReqKLine.type:type_name -> fippb.EKLineType
	81,  // 115: fippb.ReqKLine.QuotType:type_name -> fippb.EQuotType
	73,  // 116: fippb.RspKLine.exchgId:type_name -> fippb.EExchgID
	96,  // 117: fippb.RspKLine.pkgType:type_name -> fippb.EPkgType
	107, // 118: fippb.RspKLine.kType:type_name -> fippb.EKLineType
	108, // 119: fippb.RspKLine.kline:type_name -> fippb.KLineElem
	73,  // 120: fippb.ReqCurTradeDate.exchgId:type_name -> fippb.EExchgID
	73,  // 121: fippb.RspCurTradeDate.exchgId:type_name -> fippb.EExchgID
	73,  // 122: fippb.NotifyImpliedVol.exchgid:type_name -> fippb.EExchgID
	73,  // 123: fippb.NotifyExchangeID.exchgId:type_name -> fippb.EExchgID
	109, // 124: fippb.NotifyExchangeID.type:type_name -> fippb.RealQuotType
	110, // 125: fippb.NotifyHisDataHandleResult.HandleType:type_name -> fippb.ArbiHisServerHandleType
	111, // 126: fippb.AskFipArbiQuotInner.ModuleType:type_name -> fippb.FipArbiRealQuotModuleType
	73,  // 127: fippb.NotifyReplaySimQuot.exchgid:type_name -> fippb.EExchgID
	73,  // 128: fippb.ReqIncreaseAnnual.ExchgId:type_name -> fippb.EExchgID
	112, // 129: fippb.RspIncreaseAnnual.List:type_name -> fippb.IncreaseAnnualElem
	96,  // 130: fippb.RspIncreaseAnnual.PkgType:type_name -> fippb.EPkgType
	131, // [131:131] is the sub-list for method output_type
	131, // [131:131] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_fip_interface_proto_init() }
func file_fip_interface_proto_init() {
	if File_fip_interface_proto != nil {
		return
	}
	file_fip_def_proto_init()
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSnapShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyRTPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOrderSta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOptProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMatchPrcQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyClientIncQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMktMBLQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyArbiBestQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOptPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMBLQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyBestPrcOrdQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLstRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFtrVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOptVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspIdxCatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFtrContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSpotVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOptUnderlyingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspIdxContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspArbiContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiAllContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiCalSpreadContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiVtySpreadContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiMKTSpreadContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiFtrSpotContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiALLVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiCalSpreadVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiVtySpreadVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiMktSpreadVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFipArbiFtrSpotVarietyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspFtrOptList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspExchangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyMktQuotSta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyOptQuotSta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHisMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspHisMatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTSChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTimeVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTimeVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAvgVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAvgVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIndexConfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspIndexConfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCmdImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCmdImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDateTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDateTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspKLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCurTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCurTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyImpliedVol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyExchangeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqClientPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspClientPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyHisDataHandleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskFipArbiQuotInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyReplaySimQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseAnnual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspIncreaseAnnual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_proto_goTypes,
		DependencyIndexes: file_fip_interface_proto_depIdxs,
		MessageInfos:      file_fip_interface_proto_msgTypes,
	}.Build()
	File_fip_interface_proto = out.File
	file_fip_interface_proto_rawDesc = nil
	file_fip_interface_proto_goTypes = nil
	file_fip_interface_proto_depIdxs = nil
}
