//*
// Copyright (C) 2018-2019，大连商品交易所 大连飞创信息技术有限公司
//
// @file
// @brief 实时行情接口proto定义
//
// @author <zhaow>
//
// @date 2017-7-10
// @note 组内评审专家：todo
// @note 组外评审专家：todo
// @note
// @modify

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_def_trade.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / api释放请求选项
type EApiReleaseType int32

const (
	EApiReleaseType_EAR_Null    EApiReleaseType = 0
	EApiReleaseType_EAR_TProxy  EApiReleaseType = 1 // TProxy释放请求
	EApiReleaseType_EAR_ApiDisc EApiReleaseType = 2 // Api disconnect 释放请求
	EApiReleaseType_EAR_Logout  EApiReleaseType = 3 // log out 释放请求
	EApiReleaseType_EAR_Timeout EApiReleaseType = 4 // time out 释放请求
	EApiReleaseType_EAR_End     EApiReleaseType = 5 //结束值,方便校验有效性
)

// Enum value maps for EApiReleaseType.
var (
	EApiReleaseType_name = map[int32]string{
		0: "EAR_Null",
		1: "EAR_TProxy",
		2: "EAR_ApiDisc",
		3: "EAR_Logout",
		4: "EAR_Timeout",
		5: "EAR_End",
	}
	EApiReleaseType_value = map[string]int32{
		"EAR_Null":    0,
		"EAR_TProxy":  1,
		"EAR_ApiDisc": 2,
		"EAR_Logout":  3,
		"EAR_Timeout": 4,
		"EAR_End":     5,
	}
)

func (x EApiReleaseType) Enum() *EApiReleaseType {
	p := new(EApiReleaseType)
	*p = x
	return p
}

func (x EApiReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EApiReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[0].Descriptor()
}

func (EApiReleaseType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[0]
}

func (x EApiReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EApiReleaseType.Descriptor instead.
func (EApiReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{0}
}

type EOpenOrDestroyType int32

const (
	EOpenOrDestroyType_EOOD_Null    EOpenOrDestroyType = 0
	EOpenOrDestroyType_EOOD_Open    EOpenOrDestroyType = 1 // 开户
	EOpenOrDestroyType_EOOD_Destroy EOpenOrDestroyType = 2 // 销户
	EOpenOrDestroyType_EOOD_End     EOpenOrDestroyType = 3 //结束值,方便校验有效性
)

// Enum value maps for EOpenOrDestroyType.
var (
	EOpenOrDestroyType_name = map[int32]string{
		0: "EOOD_Null",
		1: "EOOD_Open",
		2: "EOOD_Destroy",
		3: "EOOD_End",
	}
	EOpenOrDestroyType_value = map[string]int32{
		"EOOD_Null":    0,
		"EOOD_Open":    1,
		"EOOD_Destroy": 2,
		"EOOD_End":     3,
	}
)

func (x EOpenOrDestroyType) Enum() *EOpenOrDestroyType {
	p := new(EOpenOrDestroyType)
	*p = x
	return p
}

func (x EOpenOrDestroyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOpenOrDestroyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[1].Descriptor()
}

func (EOpenOrDestroyType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[1]
}

func (x EOpenOrDestroyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOpenOrDestroyType.Descriptor instead.
func (EOpenOrDestroyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{1}
}

// / API通道类型
type EApiChannelType int32

const (
	EApiChannelType_EAC_Null     EApiChannelType = 0
	EApiChannelType_EAC_Ctp      EApiChannelType = 1 // ctp交易通道
	EApiChannelType_EAC_X1       EApiChannelType = 2 // xone交易通道
	EApiChannelType_EAC_Hs       EApiChannelType = 3 // hs交易通道
	EApiChannelType_EAC_Jsd      EApiChannelType = 4 // jsd交易通道
	EApiChannelType_EAC_Ctp_Fens EApiChannelType = 5 // ctp_fens交易通道
	EApiChannelType_EAC_Hs_Fens  EApiChannelType = 6 // hs_fens交易通道
	EApiChannelType_EAC_X1tp     EApiChannelType = 7 // X1tp交易通道
	EApiChannelType_EAC_End      EApiChannelType = 8 // 结束值,方便校验有效性
)

// Enum value maps for EApiChannelType.
var (
	EApiChannelType_name = map[int32]string{
		0: "EAC_Null",
		1: "EAC_Ctp",
		2: "EAC_X1",
		3: "EAC_Hs",
		4: "EAC_Jsd",
		5: "EAC_Ctp_Fens",
		6: "EAC_Hs_Fens",
		7: "EAC_X1tp",
		8: "EAC_End",
	}
	EApiChannelType_value = map[string]int32{
		"EAC_Null":     0,
		"EAC_Ctp":      1,
		"EAC_X1":       2,
		"EAC_Hs":       3,
		"EAC_Jsd":      4,
		"EAC_Ctp_Fens": 5,
		"EAC_Hs_Fens":  6,
		"EAC_X1tp":     7,
		"EAC_End":      8,
	}
)

func (x EApiChannelType) Enum() *EApiChannelType {
	p := new(EApiChannelType)
	*p = x
	return p
}

func (x EApiChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EApiChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[2].Descriptor()
}

func (EApiChannelType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[2]
}

func (x EApiChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EApiChannelType.Descriptor instead.
func (EApiChannelType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{2}
}

// 交易角色
type ETradingRoleType int32

const (
	ETradingRoleType_ETR_Null   ETradingRoleType = 0
	ETradingRoleType_ETR_Broker ETradingRoleType = 1 // 代理
	ETradingRoleType_ETR_Host   ETradingRoleType = 2 // 自营
	ETradingRoleType_ETR_Maker  ETradingRoleType = 3 // 做市商
	ETradingRoleType_ETR_End    ETradingRoleType = 4 // 结束值,方便校验有效性
)

// Enum value maps for ETradingRoleType.
var (
	ETradingRoleType_name = map[int32]string{
		0: "ETR_Null",
		1: "ETR_Broker",
		2: "ETR_Host",
		3: "ETR_Maker",
		4: "ETR_End",
	}
	ETradingRoleType_value = map[string]int32{
		"ETR_Null":   0,
		"ETR_Broker": 1,
		"ETR_Host":   2,
		"ETR_Maker":  3,
		"ETR_End":    4,
	}
)

func (x ETradingRoleType) Enum() *ETradingRoleType {
	p := new(ETradingRoleType)
	*p = x
	return p
}

func (x ETradingRoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradingRoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[3].Descriptor()
}

func (ETradingRoleType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[3]
}

func (x ETradingRoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETradingRoleType.Descriptor instead.
func (ETradingRoleType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{3}
}

type EActionFlagType int32

const (
	EActionFlagType_AF_Null   EActionFlagType = 0
	EActionFlagType_AF_Delete EActionFlagType = 1 // 删除
	EActionFlagType_AF_Modify EActionFlagType = 2 // 修改
	EActionFlagType_AF_End    EActionFlagType = 3 // 结束值,方便校验有效性
)

// Enum value maps for EActionFlagType.
var (
	EActionFlagType_name = map[int32]string{
		0: "AF_Null",
		1: "AF_Delete",
		2: "AF_Modify",
		3: "AF_End",
	}
	EActionFlagType_value = map[string]int32{
		"AF_Null":   0,
		"AF_Delete": 1,
		"AF_Modify": 2,
		"AF_End":    3,
	}
)

func (x EActionFlagType) Enum() *EActionFlagType {
	p := new(EActionFlagType)
	*p = x
	return p
}

func (x EActionFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActionFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[4].Descriptor()
}

func (EActionFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[4]
}

func (x EActionFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EActionFlagType.Descriptor instead.
func (EActionFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{4}
}

// 业务类型
type EBizTypeType int32

const (
	EBizTypeType_BZTP_Future EBizTypeType = 0 // 期货
	EBizTypeType_BZTP_Stock  EBizTypeType = 1 // 证券
	EBizTypeType_BZTP_End    EBizTypeType = 2 // 结束值,方便校验有效性
)

// Enum value maps for EBizTypeType.
var (
	EBizTypeType_name = map[int32]string{
		0: "BZTP_Future",
		1: "BZTP_Stock",
		2: "BZTP_End",
	}
	EBizTypeType_value = map[string]int32{
		"BZTP_Future": 0,
		"BZTP_Stock":  1,
		"BZTP_End":    2,
	}
)

func (x EBizTypeType) Enum() *EBizTypeType {
	p := new(EBizTypeType)
	*p = x
	return p
}

func (x EBizTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBizTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[5].Descriptor()
}

func (EBizTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[5]
}

func (x EBizTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBizTypeType.Descriptor instead.
func (EBizTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{5}
}

// 持仓方向
type EPosiDirectionType int32

const (
	EPosiDirectionType_PD_Net   EPosiDirectionType = 0 // 净
	EPosiDirectionType_PD_Long  EPosiDirectionType = 1 // 多头
	EPosiDirectionType_PD_Short EPosiDirectionType = 2 // 空头
	EPosiDirectionType_PD_End   EPosiDirectionType = 3 // 结束值,方便校验有效性
)

// Enum value maps for EPosiDirectionType.
var (
	EPosiDirectionType_name = map[int32]string{
		0: "PD_Net",
		1: "PD_Long",
		2: "PD_Short",
		3: "PD_End",
	}
	EPosiDirectionType_value = map[string]int32{
		"PD_Net":   0,
		"PD_Long":  1,
		"PD_Short": 2,
		"PD_End":   3,
	}
)

func (x EPosiDirectionType) Enum() *EPosiDirectionType {
	p := new(EPosiDirectionType)
	*p = x
	return p
}

func (x EPosiDirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPosiDirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[6].Descriptor()
}

func (EPosiDirectionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[6]
}

func (x EPosiDirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPosiDirectionType.Descriptor instead.
func (EPosiDirectionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{6}
}

// 投机套保类型
type EHedgeFlagType int32

const (
	EHedgeFlagType_HF_Null        EHedgeFlagType = 0
	EHedgeFlagType_HF_Speculation EHedgeFlagType = 1 // 投机
	EHedgeFlagType_HF_Arbitrage   EHedgeFlagType = 2 // 套利
	EHedgeFlagType_HF_Hedge       EHedgeFlagType = 3 // 套保
	EHedgeFlagType_HF_MarketMaker EHedgeFlagType = 4 // 做市商
	EHedgeFlagType_HF_End         EHedgeFlagType = 5 // 结束值,方便校验有效性
)

// Enum value maps for EHedgeFlagType.
var (
	EHedgeFlagType_name = map[int32]string{
		0: "HF_Null",
		1: "HF_Speculation",
		2: "HF_Arbitrage",
		3: "HF_Hedge",
		4: "HF_MarketMaker",
		5: "HF_End",
	}
	EHedgeFlagType_value = map[string]int32{
		"HF_Null":        0,
		"HF_Speculation": 1,
		"HF_Arbitrage":   2,
		"HF_Hedge":       3,
		"HF_MarketMaker": 4,
		"HF_End":         5,
	}
)

func (x EHedgeFlagType) Enum() *EHedgeFlagType {
	p := new(EHedgeFlagType)
	*p = x
	return p
}

func (x EHedgeFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHedgeFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[7].Descriptor()
}

func (EHedgeFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[7]
}

func (x EHedgeFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EHedgeFlagType.Descriptor instead.
func (EHedgeFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{7}
}

// 持仓日期类型
type EPositionDataType int32

const (
	EPositionDataType_PSD_Today   EPositionDataType = 0 // 今日持仓
	EPositionDataType_PSD_History EPositionDataType = 1 // 历史持仓
	EPositionDataType_PSD_End     EPositionDataType = 2 // 结束值,方便校验有效性
)

// Enum value maps for EPositionDataType.
var (
	EPositionDataType_name = map[int32]string{
		0: "PSD_Today",
		1: "PSD_History",
		2: "PSD_End",
	}
	EPositionDataType_value = map[string]int32{
		"PSD_Today":   0,
		"PSD_History": 1,
		"PSD_End":     2,
	}
)

func (x EPositionDataType) Enum() *EPositionDataType {
	p := new(EPositionDataType)
	*p = x
	return p
}

func (x EPositionDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPositionDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[8].Descriptor()
}

func (EPositionDataType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[8]
}

func (x EPositionDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPositionDataType.Descriptor instead.
func (EPositionDataType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{8}
}

// 买卖方向
type EDirectionType int32

const (
	EDirectionType_D_Null EDirectionType = 0
	EDirectionType_D_Buy  EDirectionType = 1
	EDirectionType_D_Sell EDirectionType = 2
	EDirectionType_D_End  EDirectionType = 3 //结束值,方便校验有效性
)

// Enum value maps for EDirectionType.
var (
	EDirectionType_name = map[int32]string{
		0: "D_Null",
		1: "D_Buy",
		2: "D_Sell",
		3: "D_End",
	}
	EDirectionType_value = map[string]int32{
		"D_Null": 0,
		"D_Buy":  1,
		"D_Sell": 2,
		"D_End":  3,
	}
)

func (x EDirectionType) Enum() *EDirectionType {
	p := new(EDirectionType)
	*p = x
	return p
}

func (x EDirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[9].Descriptor()
}

func (EDirectionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[9]
}

func (x EDirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDirectionType.Descriptor instead.
func (EDirectionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{9}
}

// 成交类型
type ETradeTypeType int32

const (
	ETradeTypeType_TRDT_SplitCombination   ETradeTypeType = 0 // 组合持仓拆分为单一持仓,初始化不应包含该类型的持仓
	ETradeTypeType_TRDT_Common             ETradeTypeType = 1 // 普通成交
	ETradeTypeType_TRDT_OptionsExecution   ETradeTypeType = 2 // 期权执行
	ETradeTypeType_TRDT_OTC                ETradeTypeType = 3 // OTC成交
	ETradeTypeType_TRDT_EFPDerived         ETradeTypeType = 4 // 期转现衍生成交
	ETradeTypeType_TRDT_CombinationDerived ETradeTypeType = 5 // 组合衍生成交
	ETradeTypeType_TRDT_End                ETradeTypeType = 6 //结束值,方便校验有效性
)

// Enum value maps for ETradeTypeType.
var (
	ETradeTypeType_name = map[int32]string{
		0: "TRDT_SplitCombination",
		1: "TRDT_Common",
		2: "TRDT_OptionsExecution",
		3: "TRDT_OTC",
		4: "TRDT_EFPDerived",
		5: "TRDT_CombinationDerived",
		6: "TRDT_End",
	}
	ETradeTypeType_value = map[string]int32{
		"TRDT_SplitCombination":   0,
		"TRDT_Common":             1,
		"TRDT_OptionsExecution":   2,
		"TRDT_OTC":                3,
		"TRDT_EFPDerived":         4,
		"TRDT_CombinationDerived": 5,
		"TRDT_End":                6,
	}
)

func (x ETradeTypeType) Enum() *ETradeTypeType {
	p := new(ETradeTypeType)
	*p = x
	return p
}

func (x ETradeTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[10].Descriptor()
}

func (ETradeTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[10]
}

func (x ETradeTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETradeTypeType.Descriptor instead.
func (ETradeTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{10}
}

// 报单价格条件
type EOrderPriceTypeType int32

const (
	EOrderPriceTypeType_OPT_Null                    EOrderPriceTypeType = 0
	EOrderPriceTypeType_OPT_AnyPrice                EOrderPriceTypeType = 1  // 任意价(市价)
	EOrderPriceTypeType_OPT_LimitPrice              EOrderPriceTypeType = 2  // 限价
	EOrderPriceTypeType_OPT_BestPrice               EOrderPriceTypeType = 3  // 最优价
	EOrderPriceTypeType_OPT_LastPrice               EOrderPriceTypeType = 4  // 最新价
	EOrderPriceTypeType_OPT_LastPricePlusOneTicks   EOrderPriceTypeType = 5  // 最新价浮动上浮1个ticks
	EOrderPriceTypeType_OPT_LastPricePlusTwoTicks   EOrderPriceTypeType = 6  // 最新价浮动上浮2个ticks
	EOrderPriceTypeType_OPT_LastPricePlusThreeTicks EOrderPriceTypeType = 7  // 最新价浮动上浮3个ticks
	EOrderPriceTypeType_OPT_AskPrice1               EOrderPriceTypeType = 8  // 卖一价
	EOrderPriceTypeType_OPT_AskPrice1PlusOneTicks   EOrderPriceTypeType = 9  // 卖一价浮动上浮1个ticks
	EOrderPriceTypeType_OPT_AskPrice1PlusTwoTicks   EOrderPriceTypeType = 10 // 卖一价浮动上浮2个ticks
	EOrderPriceTypeType_OPT_AskPrice1PlusThreeTicks EOrderPriceTypeType = 11 // 卖一价浮动上浮3个ticks
	EOrderPriceTypeType_OPT_BidPrice1               EOrderPriceTypeType = 12 // 买一价
	EOrderPriceTypeType_OPT_BidPrice1PlusOneTicks   EOrderPriceTypeType = 13 // 买一价浮动上浮1个ticks
	EOrderPriceTypeType_OPT_BidPrice1PlusTwoTicks   EOrderPriceTypeType = 14 // 买一价浮动上浮2个ticks
	EOrderPriceTypeType_OPT_BidPrice1PlusThreeTicks EOrderPriceTypeType = 15 // 买一价浮动上浮3个ticks
	EOrderPriceTypeType_OPT_FiveLevelPrice          EOrderPriceTypeType = 16 // 五档价
	EOrderPriceTypeType_OPT_End                     EOrderPriceTypeType = 17 //结束值,方便校验有效性
)

// Enum value maps for EOrderPriceTypeType.
var (
	EOrderPriceTypeType_name = map[int32]string{
		0:  "OPT_Null",
		1:  "OPT_AnyPrice",
		2:  "OPT_LimitPrice",
		3:  "OPT_BestPrice",
		4:  "OPT_LastPrice",
		5:  "OPT_LastPricePlusOneTicks",
		6:  "OPT_LastPricePlusTwoTicks",
		7:  "OPT_LastPricePlusThreeTicks",
		8:  "OPT_AskPrice1",
		9:  "OPT_AskPrice1PlusOneTicks",
		10: "OPT_AskPrice1PlusTwoTicks",
		11: "OPT_AskPrice1PlusThreeTicks",
		12: "OPT_BidPrice1",
		13: "OPT_BidPrice1PlusOneTicks",
		14: "OPT_BidPrice1PlusTwoTicks",
		15: "OPT_BidPrice1PlusThreeTicks",
		16: "OPT_FiveLevelPrice",
		17: "OPT_End",
	}
	EOrderPriceTypeType_value = map[string]int32{
		"OPT_Null":                    0,
		"OPT_AnyPrice":                1,
		"OPT_LimitPrice":              2,
		"OPT_BestPrice":               3,
		"OPT_LastPrice":               4,
		"OPT_LastPricePlusOneTicks":   5,
		"OPT_LastPricePlusTwoTicks":   6,
		"OPT_LastPricePlusThreeTicks": 7,
		"OPT_AskPrice1":               8,
		"OPT_AskPrice1PlusOneTicks":   9,
		"OPT_AskPrice1PlusTwoTicks":   10,
		"OPT_AskPrice1PlusThreeTicks": 11,
		"OPT_BidPrice1":               12,
		"OPT_BidPrice1PlusOneTicks":   13,
		"OPT_BidPrice1PlusTwoTicks":   14,
		"OPT_BidPrice1PlusThreeTicks": 15,
		"OPT_FiveLevelPrice":          16,
		"OPT_End":                     17,
	}
)

func (x EOrderPriceTypeType) Enum() *EOrderPriceTypeType {
	p := new(EOrderPriceTypeType)
	*p = x
	return p
}

func (x EOrderPriceTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderPriceTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[11].Descriptor()
}

func (EOrderPriceTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[11]
}

func (x EOrderPriceTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderPriceTypeType.Descriptor instead.
func (EOrderPriceTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{11}
}

// 有效期类型
type ETimeConditionType int32

const (
	ETimeConditionType_TC_Null ETimeConditionType = 0
	ETimeConditionType_TC_IOC  ETimeConditionType = 1 //立即完成，否则撤销
	ETimeConditionType_TC_GFS  ETimeConditionType = 2 //本节有效
	ETimeConditionType_TC_GFD  ETimeConditionType = 3 //当日有效
	ETimeConditionType_TC_GTD  ETimeConditionType = 4 //指定日期前有效
	ETimeConditionType_TC_GTC  ETimeConditionType = 5 //撤销前有效
	ETimeConditionType_TC_GFA  ETimeConditionType = 6 //集合竞价有效
	ETimeConditionType_TC_End  ETimeConditionType = 7 //结束值,方便校验有效性
)

// Enum value maps for ETimeConditionType.
var (
	ETimeConditionType_name = map[int32]string{
		0: "TC_Null",
		1: "TC_IOC",
		2: "TC_GFS",
		3: "TC_GFD",
		4: "TC_GTD",
		5: "TC_GTC",
		6: "TC_GFA",
		7: "TC_End",
	}
	ETimeConditionType_value = map[string]int32{
		"TC_Null": 0,
		"TC_IOC":  1,
		"TC_GFS":  2,
		"TC_GFD":  3,
		"TC_GTD":  4,
		"TC_GTC":  5,
		"TC_GFA":  6,
		"TC_End":  7,
	}
)

func (x ETimeConditionType) Enum() *ETimeConditionType {
	p := new(ETimeConditionType)
	*p = x
	return p
}

func (x ETimeConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETimeConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[12].Descriptor()
}

func (ETimeConditionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[12]
}

func (x ETimeConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETimeConditionType.Descriptor instead.
func (ETimeConditionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{12}
}

// 成交量类型
type EVolumeConditionType int32

const (
	EVolumeConditionType_VC_Null EVolumeConditionType = 0
	EVolumeConditionType_VC_AV   EVolumeConditionType = 1 //任何数量
	EVolumeConditionType_VC_MV   EVolumeConditionType = 2 //最小数量
	EVolumeConditionType_VC_CV   EVolumeConditionType = 3 //全部数量
	EVolumeConditionType_VC_End  EVolumeConditionType = 4 //结束值,方便校验有效性
)

// Enum value maps for EVolumeConditionType.
var (
	EVolumeConditionType_name = map[int32]string{
		0: "VC_Null",
		1: "VC_AV",
		2: "VC_MV",
		3: "VC_CV",
		4: "VC_End",
	}
	EVolumeConditionType_value = map[string]int32{
		"VC_Null": 0,
		"VC_AV":   1,
		"VC_MV":   2,
		"VC_CV":   3,
		"VC_End":  4,
	}
)

func (x EVolumeConditionType) Enum() *EVolumeConditionType {
	p := new(EVolumeConditionType)
	*p = x
	return p
}

func (x EVolumeConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumeConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[13].Descriptor()
}

func (EVolumeConditionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[13]
}

func (x EVolumeConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVolumeConditionType.Descriptor instead.
func (EVolumeConditionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{13}
}

// 触发条件
type EContingentConditionType int32

const (
	EContingentConditionType_CC_Null                           EContingentConditionType = 0
	EContingentConditionType_CC_Immediately                    EContingentConditionType = 1  //立即
	EContingentConditionType_CC_Touch                          EContingentConditionType = 2  //止损
	EContingentConditionType_CC_TouchProfit                    EContingentConditionType = 3  //止赢
	EContingentConditionType_CC_ParkedOrder                    EContingentConditionType = 4  //预埋单
	EContingentConditionType_CC_LastPriceGreaterThanStopPrice  EContingentConditionType = 5  //最新价大于条件价
	EContingentConditionType_CC_LastPriceGreaterEqualStopPrice EContingentConditionType = 6  //最新价大于等于条件价
	EContingentConditionType_CC_LastPriceLesserThanStopPrice   EContingentConditionType = 7  //最新价小于条件价
	EContingentConditionType_CC_LastPriceLesserEqualStopPrice  EContingentConditionType = 8  //最新价小于等于条件价
	EContingentConditionType_CC_AskPriceGreaterThanStopPrice   EContingentConditionType = 9  //卖一价大于条件价
	EContingentConditionType_CC_AskPriceGreaterEqualStopPrice  EContingentConditionType = 10 //卖一价大于等于条件价
	EContingentConditionType_CC_AskPriceLesserThanStopPrice    EContingentConditionType = 11 //卖一价小于条件价
	EContingentConditionType_CC_AskPriceLesserEqualStopPrice   EContingentConditionType = 12 //卖一价小于等于条件价
	EContingentConditionType_CC_BidPriceGreaterThanStopPrice   EContingentConditionType = 13 //买一价大于条件价
	EContingentConditionType_CC_BidPriceGreaterEqualStopPrice  EContingentConditionType = 14 //买一价大于等于条件价
	EContingentConditionType_CC_BidPriceLesserThanStopPrice    EContingentConditionType = 15 //买一价小于条件价
	EContingentConditionType_CC_BidPriceLesserEqualStopPrice   EContingentConditionType = 16 //买一价小于等于条件价
	EContingentConditionType_CC_End                            EContingentConditionType = 17 //结束值,方便校验有效性
)

// Enum value maps for EContingentConditionType.
var (
	EContingentConditionType_name = map[int32]string{
		0:  "CC_Null",
		1:  "CC_Immediately",
		2:  "CC_Touch",
		3:  "CC_TouchProfit",
		4:  "CC_ParkedOrder",
		5:  "CC_LastPriceGreaterThanStopPrice",
		6:  "CC_LastPriceGreaterEqualStopPrice",
		7:  "CC_LastPriceLesserThanStopPrice",
		8:  "CC_LastPriceLesserEqualStopPrice",
		9:  "CC_AskPriceGreaterThanStopPrice",
		10: "CC_AskPriceGreaterEqualStopPrice",
		11: "CC_AskPriceLesserThanStopPrice",
		12: "CC_AskPriceLesserEqualStopPrice",
		13: "CC_BidPriceGreaterThanStopPrice",
		14: "CC_BidPriceGreaterEqualStopPrice",
		15: "CC_BidPriceLesserThanStopPrice",
		16: "CC_BidPriceLesserEqualStopPrice",
		17: "CC_End",
	}
	EContingentConditionType_value = map[string]int32{
		"CC_Null":                           0,
		"CC_Immediately":                    1,
		"CC_Touch":                          2,
		"CC_TouchProfit":                    3,
		"CC_ParkedOrder":                    4,
		"CC_LastPriceGreaterThanStopPrice":  5,
		"CC_LastPriceGreaterEqualStopPrice": 6,
		"CC_LastPriceLesserThanStopPrice":   7,
		"CC_LastPriceLesserEqualStopPrice":  8,
		"CC_AskPriceGreaterThanStopPrice":   9,
		"CC_AskPriceGreaterEqualStopPrice":  10,
		"CC_AskPriceLesserThanStopPrice":    11,
		"CC_AskPriceLesserEqualStopPrice":   12,
		"CC_BidPriceGreaterThanStopPrice":   13,
		"CC_BidPriceGreaterEqualStopPrice":  14,
		"CC_BidPriceLesserThanStopPrice":    15,
		"CC_BidPriceLesserEqualStopPrice":   16,
		"CC_End":                            17,
	}
)

func (x EContingentConditionType) Enum() *EContingentConditionType {
	p := new(EContingentConditionType)
	*p = x
	return p
}

func (x EContingentConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContingentConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[14].Descriptor()
}

func (EContingentConditionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[14]
}

func (x EContingentConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EContingentConditionType.Descriptor instead.
func (EContingentConditionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{14}
}

// 强平原因
type EForceCloseReasonType int32

const (
	EForceCloseReasonType_FCC_NotForceClose           EForceCloseReasonType = 0 //非强平
	EForceCloseReasonType_FCC_LackDeposit             EForceCloseReasonType = 1 //资金不足
	EForceCloseReasonType_FCC_ClientOverPositionLimit EForceCloseReasonType = 2 //客户超仓
	EForceCloseReasonType_FCC_MemberOverPositionLimit EForceCloseReasonType = 3 //会员超仓
	EForceCloseReasonType_FCC_NotMultiple             EForceCloseReasonType = 4 //持仓非整数倍
	EForceCloseReasonType_FCC_Violation               EForceCloseReasonType = 5 //违规
	EForceCloseReasonType_FCC_Other                   EForceCloseReasonType = 6 //其它
	EForceCloseReasonType_FCC_PersonDeliv             EForceCloseReasonType = 7 //自然人临近交割
	EForceCloseReasonType_FCC_End                     EForceCloseReasonType = 8 //结束值,方便校验有效性
)

// Enum value maps for EForceCloseReasonType.
var (
	EForceCloseReasonType_name = map[int32]string{
		0: "FCC_NotForceClose",
		1: "FCC_LackDeposit",
		2: "FCC_ClientOverPositionLimit",
		3: "FCC_MemberOverPositionLimit",
		4: "FCC_NotMultiple",
		5: "FCC_Violation",
		6: "FCC_Other",
		7: "FCC_PersonDeliv",
		8: "FCC_End",
	}
	EForceCloseReasonType_value = map[string]int32{
		"FCC_NotForceClose":           0,
		"FCC_LackDeposit":             1,
		"FCC_ClientOverPositionLimit": 2,
		"FCC_MemberOverPositionLimit": 3,
		"FCC_NotMultiple":             4,
		"FCC_Violation":               5,
		"FCC_Other":                   6,
		"FCC_PersonDeliv":             7,
		"FCC_End":                     8,
	}
)

func (x EForceCloseReasonType) Enum() *EForceCloseReasonType {
	p := new(EForceCloseReasonType)
	*p = x
	return p
}

func (x EForceCloseReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EForceCloseReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[15].Descriptor()
}

func (EForceCloseReasonType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[15]
}

func (x EForceCloseReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EForceCloseReasonType.Descriptor instead.
func (EForceCloseReasonType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{15}
}

// 报单提交状态
type EOrderSubmitStatusType int32

const (
	EOrderSubmitStatusType_OSS_InsertSubmitted EOrderSubmitStatusType = 0 //已经提交
	EOrderSubmitStatusType_OSS_CancelSubmitted EOrderSubmitStatusType = 1 //撤单已经提交
	EOrderSubmitStatusType_OSS_ModifySubmitted EOrderSubmitStatusType = 2 //修改已经提交
	EOrderSubmitStatusType_OSS_Accepted        EOrderSubmitStatusType = 3 //已经接受
	EOrderSubmitStatusType_OSS_InsertRejected  EOrderSubmitStatusType = 4 //报单已经被拒绝
	EOrderSubmitStatusType_OSS_CancelRejected  EOrderSubmitStatusType = 5 //撤单已经被拒绝
	EOrderSubmitStatusType_OSS_ModifyRejected  EOrderSubmitStatusType = 6 //改单已经被拒绝
	EOrderSubmitStatusType_OSS_End             EOrderSubmitStatusType = 7 //结束值,方便校验有效性
)

// Enum value maps for EOrderSubmitStatusType.
var (
	EOrderSubmitStatusType_name = map[int32]string{
		0: "OSS_InsertSubmitted",
		1: "OSS_CancelSubmitted",
		2: "OSS_ModifySubmitted",
		3: "OSS_Accepted",
		4: "OSS_InsertRejected",
		5: "OSS_CancelRejected",
		6: "OSS_ModifyRejected",
		7: "OSS_End",
	}
	EOrderSubmitStatusType_value = map[string]int32{
		"OSS_InsertSubmitted": 0,
		"OSS_CancelSubmitted": 1,
		"OSS_ModifySubmitted": 2,
		"OSS_Accepted":        3,
		"OSS_InsertRejected":  4,
		"OSS_CancelRejected":  5,
		"OSS_ModifyRejected":  6,
		"OSS_End":             7,
	}
)

func (x EOrderSubmitStatusType) Enum() *EOrderSubmitStatusType {
	p := new(EOrderSubmitStatusType)
	*p = x
	return p
}

func (x EOrderSubmitStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderSubmitStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[16].Descriptor()
}

func (EOrderSubmitStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[16]
}

func (x EOrderSubmitStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderSubmitStatusType.Descriptor instead.
func (EOrderSubmitStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{16}
}

// 报单状态
type EOrderStatusType int32

const (
	EOrderStatusType_OST_AllTraded             EOrderStatusType = 0 //全部成交
	EOrderStatusType_OST_PartTradedQueueing    EOrderStatusType = 1 //部分成交还在队列中
	EOrderStatusType_OST_PartTradedNotQueueing EOrderStatusType = 2 //部分成交不在队列中
	EOrderStatusType_OST_NoTradeQueueing       EOrderStatusType = 3 //未成交还在队列中
	EOrderStatusType_OST_NoTradeNotQueueing    EOrderStatusType = 4 //未成交不在队列中
	EOrderStatusType_OST_Canceled              EOrderStatusType = 5 //撤单
	EOrderStatusType_OST_Unknown               EOrderStatusType = 6 //未知
	EOrderStatusType_OST_NotTouched            EOrderStatusType = 7 //尚未触发
	EOrderStatusType_OST_Touched               EOrderStatusType = 8 //已触发
	EOrderStatusType_OST_End                   EOrderStatusType = 9 //结束值,方便校验有效性
)

// Enum value maps for EOrderStatusType.
var (
	EOrderStatusType_name = map[int32]string{
		0: "OST_AllTraded",
		1: "OST_PartTradedQueueing",
		2: "OST_PartTradedNotQueueing",
		3: "OST_NoTradeQueueing",
		4: "OST_NoTradeNotQueueing",
		5: "OST_Canceled",
		6: "OST_Unknown",
		7: "OST_NotTouched",
		8: "OST_Touched",
		9: "OST_End",
	}
	EOrderStatusType_value = map[string]int32{
		"OST_AllTraded":             0,
		"OST_PartTradedQueueing":    1,
		"OST_PartTradedNotQueueing": 2,
		"OST_NoTradeQueueing":       3,
		"OST_NoTradeNotQueueing":    4,
		"OST_Canceled":              5,
		"OST_Unknown":               6,
		"OST_NotTouched":            7,
		"OST_Touched":               8,
		"OST_End":                   9,
	}
)

func (x EOrderStatusType) Enum() *EOrderStatusType {
	p := new(EOrderStatusType)
	*p = x
	return p
}

func (x EOrderStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[17].Descriptor()
}

func (EOrderStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[17]
}

func (x EOrderStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderStatusType.Descriptor instead.
func (EOrderStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{17}
}

// 报单来源
type EOrderSourceType int32

const (
	EOrderSourceType_OSRC_Participant   EOrderSourceType = 0 //来自参与者
	EOrderSourceType_OSRC_Administrator EOrderSourceType = 1 //来自管理员
	EOrderSourceType_OSRC_End           EOrderSourceType = 2 //结束值,方便校验有效性
)

// Enum value maps for EOrderSourceType.
var (
	EOrderSourceType_name = map[int32]string{
		0: "OSRC_Participant",
		1: "OSRC_Administrator",
		2: "OSRC_End",
	}
	EOrderSourceType_value = map[string]int32{
		"OSRC_Participant":   0,
		"OSRC_Administrator": 1,
		"OSRC_End":           2,
	}
)

func (x EOrderSourceType) Enum() *EOrderSourceType {
	p := new(EOrderSourceType)
	*p = x
	return p
}

func (x EOrderSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[18].Descriptor()
}

func (EOrderSourceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[18]
}

func (x EOrderSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderSourceType.Descriptor instead.
func (EOrderSourceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{18}
}

// 报单类型
type EOrderTypeType int32

const (
	EOrderTypeType_ORDT_Normal                EOrderTypeType = 0 //正常
	EOrderTypeType_ORDT_DeriveFromQuote       EOrderTypeType = 1 //报价衍生
	EOrderTypeType_ORDT_DeriveFromCombination EOrderTypeType = 2 //组合衍生
	EOrderTypeType_ORDT_Combination           EOrderTypeType = 3 //组合报单
	EOrderTypeType_ORDT_ConditionalOrder      EOrderTypeType = 4 //条件单
	EOrderTypeType_ORDT_Swap                  EOrderTypeType = 5 //互换单
	EOrderTypeType_ORDT_End                   EOrderTypeType = 6 //结束值,方便校验有效性
)

// Enum value maps for EOrderTypeType.
var (
	EOrderTypeType_name = map[int32]string{
		0: "ORDT_Normal",
		1: "ORDT_DeriveFromQuote",
		2: "ORDT_DeriveFromCombination",
		3: "ORDT_Combination",
		4: "ORDT_ConditionalOrder",
		5: "ORDT_Swap",
		6: "ORDT_End",
	}
	EOrderTypeType_value = map[string]int32{
		"ORDT_Normal":                0,
		"ORDT_DeriveFromQuote":       1,
		"ORDT_DeriveFromCombination": 2,
		"ORDT_Combination":           3,
		"ORDT_ConditionalOrder":      4,
		"ORDT_Swap":                  5,
		"ORDT_End":                   6,
	}
)

func (x EOrderTypeType) Enum() *EOrderTypeType {
	p := new(EOrderTypeType)
	*p = x
	return p
}

func (x EOrderTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[19].Descriptor()
}

func (EOrderTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[19]
}

func (x EOrderTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderTypeType.Descriptor instead.
func (EOrderTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{19}
}

// 产品类型
type EProductClassType int32

const (
	EProductClassType_PC_NUll        EProductClassType = 0
	EProductClassType_PC_Futures     EProductClassType = 1 //期货
	EProductClassType_PC_Options     EProductClassType = 2 //期货期权
	EProductClassType_PC_Combination EProductClassType = 3 //组合
	EProductClassType_PC_Spot        EProductClassType = 4 //即期
	EProductClassType_PC_EFP         EProductClassType = 5 //期转现
	EProductClassType_PC_SpotOption  EProductClassType = 6 //现货期权
	EProductClassType_PC_TAS         EProductClassType = 7 //TAS合约
	EProductClassType_PC_MI          EProductClassType = 8 //金属指数
	EProductClassType_PC_End         EProductClassType = 9 //结束值,方便校验有效性
)

// Enum value maps for EProductClassType.
var (
	EProductClassType_name = map[int32]string{
		0: "PC_NUll",
		1: "PC_Futures",
		2: "PC_Options",
		3: "PC_Combination",
		4: "PC_Spot",
		5: "PC_EFP",
		6: "PC_SpotOption",
		7: "PC_TAS",
		8: "PC_MI",
		9: "PC_End",
	}
	EProductClassType_value = map[string]int32{
		"PC_NUll":        0,
		"PC_Futures":     1,
		"PC_Options":     2,
		"PC_Combination": 3,
		"PC_Spot":        4,
		"PC_EFP":         5,
		"PC_SpotOption":  6,
		"PC_TAS":         7,
		"PC_MI":          8,
		"PC_End":         9,
	}
)

func (x EProductClassType) Enum() *EProductClassType {
	p := new(EProductClassType)
	*p = x
	return p
}

func (x EProductClassType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProductClassType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[20].Descriptor()
}

func (EProductClassType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[20]
}

func (x EProductClassType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EProductClassType.Descriptor instead.
func (EProductClassType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{20}
}

// 合约生命周期状态
type EContractLifePhaseType int32

const (
	EContractLifePhaseType_IP_NotStart EContractLifePhaseType = 0 //未上市
	EContractLifePhaseType_IP_Started  EContractLifePhaseType = 1 //上市
	EContractLifePhaseType_IP_Pause    EContractLifePhaseType = 2 //停牌
	EContractLifePhaseType_IP_Expired  EContractLifePhaseType = 3 //到期
	EContractLifePhaseType_IP_End      EContractLifePhaseType = 4 //结束值,方便校验有效性
)

// Enum value maps for EContractLifePhaseType.
var (
	EContractLifePhaseType_name = map[int32]string{
		0: "IP_NotStart",
		1: "IP_Started",
		2: "IP_Pause",
		3: "IP_Expired",
		4: "IP_End",
	}
	EContractLifePhaseType_value = map[string]int32{
		"IP_NotStart": 0,
		"IP_Started":  1,
		"IP_Pause":    2,
		"IP_Expired":  3,
		"IP_End":      4,
	}
)

func (x EContractLifePhaseType) Enum() *EContractLifePhaseType {
	p := new(EContractLifePhaseType)
	*p = x
	return p
}

func (x EContractLifePhaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContractLifePhaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[21].Descriptor()
}

func (EContractLifePhaseType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[21]
}

func (x EContractLifePhaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EContractLifePhaseType.Descriptor instead.
func (EContractLifePhaseType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{21}
}

// 持仓类型
type EPositionTypeType int32

const (
	EPositionTypeType_PT_Net   EPositionTypeType = 0 // 净持仓
	EPositionTypeType_PT_Gross EPositionTypeType = 1 // 综合持仓
	EPositionTypeType_PT_End   EPositionTypeType = 2 // 结束值,方便校验有效性
)

// Enum value maps for EPositionTypeType.
var (
	EPositionTypeType_name = map[int32]string{
		0: "PT_Net",
		1: "PT_Gross",
		2: "PT_End",
	}
	EPositionTypeType_value = map[string]int32{
		"PT_Net":   0,
		"PT_Gross": 1,
		"PT_End":   2,
	}
)

func (x EPositionTypeType) Enum() *EPositionTypeType {
	p := new(EPositionTypeType)
	*p = x
	return p
}

func (x EPositionTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPositionTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[22].Descriptor()
}

func (EPositionTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[22]
}

func (x EPositionTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPositionTypeType.Descriptor instead.
func (EPositionTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{22}
}

// 持仓日期类型
type EPositionDataTypeType int32

const (
	EPositionDataTypeType_PDT_Null         EPositionDataTypeType = 0
	EPositionDataTypeType_PDT_UseHistory   EPositionDataTypeType = 1 //使用历史持仓
	EPositionDataTypeType_PDT_NoUseHistory EPositionDataTypeType = 2 //不使用历史持仓
	EPositionDataTypeType_PDT_End          EPositionDataTypeType = 3 //结束值,方便校验有效性
)

// Enum value maps for EPositionDataTypeType.
var (
	EPositionDataTypeType_name = map[int32]string{
		0: "PDT_Null",
		1: "PDT_UseHistory",
		2: "PDT_NoUseHistory",
		3: "PDT_End",
	}
	EPositionDataTypeType_value = map[string]int32{
		"PDT_Null":         0,
		"PDT_UseHistory":   1,
		"PDT_NoUseHistory": 2,
		"PDT_End":          3,
	}
)

func (x EPositionDataTypeType) Enum() *EPositionDataTypeType {
	p := new(EPositionDataTypeType)
	*p = x
	return p
}

func (x EPositionDataTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPositionDataTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[23].Descriptor()
}

func (EPositionDataTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[23]
}

func (x EPositionDataTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPositionDataTypeType.Descriptor instead.
func (EPositionDataTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{23}
}

// 大额单边保证金算法
type EMaxMarginSideAlgorithmType int32

const (
	EMaxMarginSideAlgorithmType_MMSA_NO  EMaxMarginSideAlgorithmType = 0 //不使用大额单边保证金算法
	EMaxMarginSideAlgorithmType_MMSA_YES EMaxMarginSideAlgorithmType = 1 //使用大额单边保证金算法
	EMaxMarginSideAlgorithmType_MMSA_End EMaxMarginSideAlgorithmType = 2 //结束值,方便校验有效性
)

// Enum value maps for EMaxMarginSideAlgorithmType.
var (
	EMaxMarginSideAlgorithmType_name = map[int32]string{
		0: "MMSA_NO",
		1: "MMSA_YES",
		2: "MMSA_End",
	}
	EMaxMarginSideAlgorithmType_value = map[string]int32{
		"MMSA_NO":  0,
		"MMSA_YES": 1,
		"MMSA_End": 2,
	}
)

func (x EMaxMarginSideAlgorithmType) Enum() *EMaxMarginSideAlgorithmType {
	p := new(EMaxMarginSideAlgorithmType)
	*p = x
	return p
}

func (x EMaxMarginSideAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMaxMarginSideAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[24].Descriptor()
}

func (EMaxMarginSideAlgorithmType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[24]
}

func (x EMaxMarginSideAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMaxMarginSideAlgorithmType.Descriptor instead.
func (EMaxMarginSideAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{24}
}

// 期权类型
type EOptionsTypeType int32

const (
	EOptionsTypeType_CP_CallOptions EOptionsTypeType = 0 // 看涨
	EOptionsTypeType_CP_PutOptions  EOptionsTypeType = 1 // 看跌
	EOptionsTypeType_CP_NullOptions EOptionsTypeType = 2 // 非期权
	EOptionsTypeType_CP_End         EOptionsTypeType = 3 //结束值,方便校验有效性
)

// Enum value maps for EOptionsTypeType.
var (
	EOptionsTypeType_name = map[int32]string{
		0: "CP_CallOptions",
		1: "CP_PutOptions",
		2: "CP_NullOptions",
		3: "CP_End",
	}
	EOptionsTypeType_value = map[string]int32{
		"CP_CallOptions": 0,
		"CP_PutOptions":  1,
		"CP_NullOptions": 2,
		"CP_End":         3,
	}
)

func (x EOptionsTypeType) Enum() *EOptionsTypeType {
	p := new(EOptionsTypeType)
	*p = x
	return p
}

func (x EOptionsTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptionsTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[25].Descriptor()
}

func (EOptionsTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[25]
}

func (x EOptionsTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOptionsTypeType.Descriptor instead.
func (EOptionsTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{25}
}

// 组合类型
type ECombinationTypeType int32

const (
	ECombinationTypeType_COMBT_Future ECombinationTypeType = 0 //期货组合
	ECombinationTypeType_COMBT_BUL    ECombinationTypeType = 1 //垂直价差BUL
	ECombinationTypeType_COMBT_BER    ECombinationTypeType = 2 //垂直价差BER
	ECombinationTypeType_COMBT_STD    ECombinationTypeType = 3 //跨式组合
	ECombinationTypeType_COMBT_STG    ECombinationTypeType = 4 //宽跨式组合
	ECombinationTypeType_COMBT_PRT    ECombinationTypeType = 5 //备兑组合
	ECombinationTypeType_COMBT_CLD    ECombinationTypeType = 6 //时间价差组合
	ECombinationTypeType_COMBT_End    ECombinationTypeType = 7 //结束值,方便校验有效性
)

// Enum value maps for ECombinationTypeType.
var (
	ECombinationTypeType_name = map[int32]string{
		0: "COMBT_Future",
		1: "COMBT_BUL",
		2: "COMBT_BER",
		3: "COMBT_STD",
		4: "COMBT_STG",
		5: "COMBT_PRT",
		6: "COMBT_CLD",
		7: "COMBT_End",
	}
	ECombinationTypeType_value = map[string]int32{
		"COMBT_Future": 0,
		"COMBT_BUL":    1,
		"COMBT_BER":    2,
		"COMBT_STD":    3,
		"COMBT_STG":    4,
		"COMBT_PRT":    5,
		"COMBT_CLD":    6,
		"COMBT_End":    7,
	}
)

func (x ECombinationTypeType) Enum() *ECombinationTypeType {
	p := new(ECombinationTypeType)
	*p = x
	return p
}

func (x ECombinationTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECombinationTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[26].Descriptor()
}

func (ECombinationTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[26]
}

func (x ECombinationTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECombinationTypeType.Descriptor instead.
func (ECombinationTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{26}
}

// 开平标志
type EOffsetFlagType int32

const (
	EOffsetFlagType_OF_Null            EOffsetFlagType = 0
	EOffsetFlagType_OF_Open            EOffsetFlagType = 1 //开仓
	EOffsetFlagType_OF_Close           EOffsetFlagType = 2 //平仓
	EOffsetFlagType_OF_ForceClose      EOffsetFlagType = 3 //强平
	EOffsetFlagType_OF_CloseToday      EOffsetFlagType = 4 //平今
	EOffsetFlagType_OF_CloseYesterday  EOffsetFlagType = 5 //平昨
	EOffsetFlagType_OF_ForceOff        EOffsetFlagType = 6 //强减
	EOffsetFlagType_OF_LocalForceClose EOffsetFlagType = 7 //本地强平
	EOffsetFlagType_OF_End             EOffsetFlagType = 8 //结束值,方便校验有效性
)

// Enum value maps for EOffsetFlagType.
var (
	EOffsetFlagType_name = map[int32]string{
		0: "OF_Null",
		1: "OF_Open",
		2: "OF_Close",
		3: "OF_ForceClose",
		4: "OF_CloseToday",
		5: "OF_CloseYesterday",
		6: "OF_ForceOff",
		7: "OF_LocalForceClose",
		8: "OF_End",
	}
	EOffsetFlagType_value = map[string]int32{
		"OF_Null":            0,
		"OF_Open":            1,
		"OF_Close":           2,
		"OF_ForceClose":      3,
		"OF_CloseToday":      4,
		"OF_CloseYesterday":  5,
		"OF_ForceOff":        6,
		"OF_LocalForceClose": 7,
		"OF_End":             8,
	}
)

func (x EOffsetFlagType) Enum() *EOffsetFlagType {
	p := new(EOffsetFlagType)
	*p = x
	return p
}

func (x EOffsetFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOffsetFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[27].Descriptor()
}

func (EOffsetFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[27]
}

func (x EOffsetFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOffsetFlagType.Descriptor instead.
func (EOffsetFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{27}
}

// 成交价来源
type EPriceSourceType int32

const (
	EPriceSourceType_PSRC_LastPrice EPriceSourceType = 0 //前成交价
	EPriceSourceType_PSRC_Buy       EPriceSourceType = 1 //买委托价
	EPriceSourceType_PSRC_Sell      EPriceSourceType = 2 //卖委托价
	EPriceSourceType_PSRC_End       EPriceSourceType = 3 //结束值,方便校验有效性
)

// Enum value maps for EPriceSourceType.
var (
	EPriceSourceType_name = map[int32]string{
		0: "PSRC_LastPrice",
		1: "PSRC_Buy",
		2: "PSRC_Sell",
		3: "PSRC_End",
	}
	EPriceSourceType_value = map[string]int32{
		"PSRC_LastPrice": 0,
		"PSRC_Buy":       1,
		"PSRC_Sell":      2,
		"PSRC_End":       3,
	}
)

func (x EPriceSourceType) Enum() *EPriceSourceType {
	p := new(EPriceSourceType)
	*p = x
	return p
}

func (x EPriceSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPriceSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[28].Descriptor()
}

func (EPriceSourceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[28]
}

func (x EPriceSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPriceSourceType.Descriptor instead.
func (EPriceSourceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{28}
}

// 成交来源
type ETradeSourceType int32

const (
	ETradeSourceType_TSRC_NORMAL ETradeSourceType = 0 //来自交易所普通回报
	ETradeSourceType_TSRC_QUERY  ETradeSourceType = 1 //来自查询
	ETradeSourceType_TSRC_End    ETradeSourceType = 2 //结束值,方便校验有效性
)

// Enum value maps for ETradeSourceType.
var (
	ETradeSourceType_name = map[int32]string{
		0: "TSRC_NORMAL",
		1: "TSRC_QUERY",
		2: "TSRC_End",
	}
	ETradeSourceType_value = map[string]int32{
		"TSRC_NORMAL": 0,
		"TSRC_QUERY":  1,
		"TSRC_End":    2,
	}
)

func (x ETradeSourceType) Enum() *ETradeSourceType {
	p := new(ETradeSourceType)
	*p = x
	return p
}

func (x ETradeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[29].Descriptor()
}

func (ETradeSourceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[29]
}

func (x ETradeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETradeSourceType.Descriptor instead.
func (ETradeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{29}
}

// 投资者范围
type EInvestorRangeType int32

const (
	EInvestorRangeType_IR_Null   EInvestorRangeType = 0
	EInvestorRangeType_IR_All    EInvestorRangeType = 1 // 所有
	EInvestorRangeType_IR_Group  EInvestorRangeType = 2 // 投资者组
	EInvestorRangeType_IR_Single EInvestorRangeType = 3 // 单一投资者
	EInvestorRangeType_IR_End    EInvestorRangeType = 4 // 结束值,方便校验有效性
)

// Enum value maps for EInvestorRangeType.
var (
	EInvestorRangeType_name = map[int32]string{
		0: "IR_Null",
		1: "IR_All",
		2: "IR_Group",
		3: "IR_Single",
		4: "IR_End",
	}
	EInvestorRangeType_value = map[string]int32{
		"IR_Null":   0,
		"IR_All":    1,
		"IR_Group":  2,
		"IR_Single": 3,
		"IR_End":    4,
	}
)

func (x EInvestorRangeType) Enum() *EInvestorRangeType {
	p := new(EInvestorRangeType)
	*p = x
	return p
}

func (x EInvestorRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInvestorRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[30].Descriptor()
}

func (EInvestorRangeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[30]
}

func (x EInvestorRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EInvestorRangeType.Descriptor instead.
func (EInvestorRangeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{30}
}

// 执行类型类型
type EActionTypeType int32

const (
	EActionTypeType_ACTP_Null    EActionTypeType = 0
	EActionTypeType_ACTP_Exec    EActionTypeType = 1 // 执行价
	EActionTypeType_ACTP_Abandon EActionTypeType = 2 // 放弃
	EActionTypeType_ACTP_End     EActionTypeType = 3 // 结束值,方便校验有效性
)

// Enum value maps for EActionTypeType.
var (
	EActionTypeType_name = map[int32]string{
		0: "ACTP_Null",
		1: "ACTP_Exec",
		2: "ACTP_Abandon",
		3: "ACTP_End",
	}
	EActionTypeType_value = map[string]int32{
		"ACTP_Null":    0,
		"ACTP_Exec":    1,
		"ACTP_Abandon": 2,
		"ACTP_End":     3,
	}
)

func (x EActionTypeType) Enum() *EActionTypeType {
	p := new(EActionTypeType)
	*p = x
	return p
}

func (x EActionTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActionTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[31].Descriptor()
}

func (EActionTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[31]
}

func (x EActionTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EActionTypeType.Descriptor instead.
func (EActionTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{31}
}

type EExexOrderCloseFlagType int32

const (
	EExexOrderCloseFlagType_EOCF_AutoClose  EExexOrderCloseFlagType = 0 // 自动平仓
	EExexOrderCloseFlagType_EOCF_NotToClose EExexOrderCloseFlagType = 1 // 免于自动平仓
	EExexOrderCloseFlagType_EOCF_End        EExexOrderCloseFlagType = 2 //结束值,方便校验有效性
)

// Enum value maps for EExexOrderCloseFlagType.
var (
	EExexOrderCloseFlagType_name = map[int32]string{
		0: "EOCF_AutoClose",
		1: "EOCF_NotToClose",
		2: "EOCF_End",
	}
	EExexOrderCloseFlagType_value = map[string]int32{
		"EOCF_AutoClose":  0,
		"EOCF_NotToClose": 1,
		"EOCF_End":        2,
	}
)

func (x EExexOrderCloseFlagType) Enum() *EExexOrderCloseFlagType {
	p := new(EExexOrderCloseFlagType)
	*p = x
	return p
}

func (x EExexOrderCloseFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExexOrderCloseFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[32].Descriptor()
}

func (EExexOrderCloseFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[32]
}

func (x EExexOrderCloseFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EExexOrderCloseFlagType.Descriptor instead.
func (EExexOrderCloseFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{32}
}

type EExecResultType int32

const (
	EExecResultType_OER_Unknown              EExecResultType = 0  // 未知
	EExecResultType_OER_OK                   EExecResultType = 1  // 执行成功
	EExecResultType_OER_NoPosition           EExecResultType = 2  // 期权持仓不够
	EExecResultType_OER_NoDeposit            EExecResultType = 3  // 资金不够
	EExecResultType_OER_NoParticipant        EExecResultType = 4  // 会员不存在
	EExecResultType_OER_NoClient             EExecResultType = 5  // 客户不存在
	EExecResultType_OER_NoInstrument         EExecResultType = 6  // 合约不存在
	EExecResultType_OER_NoRight              EExecResultType = 7  // 没有执行权限
	EExecResultType_OER_InvalidVolumn        EExecResultType = 8  // 不合理的数量
	EExecResultType_OER_NoEnoughHistoryTrade EExecResultType = 9  // 没有足够的历史成交
	EExecResultType_OER_NoExec               EExecResultType = 10 // 没有执行
	EExecResultType_OER_Canceled             EExecResultType = 11 // 已经取消
	EExecResultType_OER_End                  EExecResultType = 12 //结束值,方便校验有效性
)

// Enum value maps for EExecResultType.
var (
	EExecResultType_name = map[int32]string{
		0:  "OER_Unknown",
		1:  "OER_OK",
		2:  "OER_NoPosition",
		3:  "OER_NoDeposit",
		4:  "OER_NoParticipant",
		5:  "OER_NoClient",
		6:  "OER_NoInstrument",
		7:  "OER_NoRight",
		8:  "OER_InvalidVolumn",
		9:  "OER_NoEnoughHistoryTrade",
		10: "OER_NoExec",
		11: "OER_Canceled",
		12: "OER_End",
	}
	EExecResultType_value = map[string]int32{
		"OER_Unknown":              0,
		"OER_OK":                   1,
		"OER_NoPosition":           2,
		"OER_NoDeposit":            3,
		"OER_NoParticipant":        4,
		"OER_NoClient":             5,
		"OER_NoInstrument":         6,
		"OER_NoRight":              7,
		"OER_InvalidVolumn":        8,
		"OER_NoEnoughHistoryTrade": 9,
		"OER_NoExec":               10,
		"OER_Canceled":             11,
		"OER_End":                  12,
	}
)

func (x EExecResultType) Enum() *EExecResultType {
	p := new(EExecResultType)
	*p = x
	return p
}

func (x EExecResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExecResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[33].Descriptor()
}

func (EExecResultType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[33]
}

func (x EExecResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EExecResultType.Descriptor instead.
func (EExecResultType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{33}
}

type EContractTypeType int32

const (
	EContractTypeType_ECT_AllContract EContractTypeType = 0 // 查询所有合约
	EContractTypeType_ECT_TypeComm    EContractTypeType = 1 // 查询期货
	EContractTypeType_ECT_TypeOpt     EContractTypeType = 2 // 查询期权
	EContractTypeType_ECT_End         EContractTypeType = 3 //结束值,方便校验有效性
)

// Enum value maps for EContractTypeType.
var (
	EContractTypeType_name = map[int32]string{
		0: "ECT_AllContract",
		1: "ECT_TypeComm",
		2: "ECT_TypeOpt",
		3: "ECT_End",
	}
	EContractTypeType_value = map[string]int32{
		"ECT_AllContract": 0,
		"ECT_TypeComm":    1,
		"ECT_TypeOpt":     2,
		"ECT_End":         3,
	}
)

func (x EContractTypeType) Enum() *EContractTypeType {
	p := new(EContractTypeType)
	*p = x
	return p
}

func (x EContractTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContractTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[34].Descriptor()
}

func (EContractTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[34]
}

func (x EContractTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EContractTypeType.Descriptor instead.
func (EContractTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{34}
}

type EOrderPropertyType int32

const (
	EOrderPropertyType_EOP_NON                     EOrderPropertyType = 0 //无订单属性
	EOrderPropertyType_EOP_FAK                     EOrderPropertyType = 1 //FAK设置
	EOrderPropertyType_EOP_FOK                     EOrderPropertyType = 2 //FOK设置
	EOrderPropertyType_EOP_ANYPRICE                EOrderPropertyType = 3 //市价任意价
	EOrderPropertyType_EOP_ANYPRICE_TO_MKORDER     EOrderPropertyType = 4 //市价任意价转限价
	EOrderPropertyType_EOP_FIVELEVELPRICE          EOrderPropertyType = 5 //五档市价
	EOrderPropertyType_EOP_FIVELEVELPRICE_TO_LIMIT EOrderPropertyType = 6 //五档市价转限价
	EOrderPropertyType_EOP_BESTPRICE               EOrderPropertyType = 7 //最优价
	EOrderPropertyType_EOP_BESTPRICE_TO_LIMIT      EOrderPropertyType = 8 //最优价转限价
	EOrderPropertyType_EOP_End                     EOrderPropertyType = 9 //结束值,方便校验有效性
)

// Enum value maps for EOrderPropertyType.
var (
	EOrderPropertyType_name = map[int32]string{
		0: "EOP_NON",
		1: "EOP_FAK",
		2: "EOP_FOK",
		3: "EOP_ANYPRICE",
		4: "EOP_ANYPRICE_TO_MKORDER",
		5: "EOP_FIVELEVELPRICE",
		6: "EOP_FIVELEVELPRICE_TO_LIMIT",
		7: "EOP_BESTPRICE",
		8: "EOP_BESTPRICE_TO_LIMIT",
		9: "EOP_End",
	}
	EOrderPropertyType_value = map[string]int32{
		"EOP_NON":                     0,
		"EOP_FAK":                     1,
		"EOP_FOK":                     2,
		"EOP_ANYPRICE":                3,
		"EOP_ANYPRICE_TO_MKORDER":     4,
		"EOP_FIVELEVELPRICE":          5,
		"EOP_FIVELEVELPRICE_TO_LIMIT": 6,
		"EOP_BESTPRICE":               7,
		"EOP_BESTPRICE_TO_LIMIT":      8,
		"EOP_End":                     9,
	}
)

func (x EOrderPropertyType) Enum() *EOrderPropertyType {
	p := new(EOrderPropertyType)
	*p = x
	return p
}

func (x EOrderPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[35].Descriptor()
}

func (EOrderPropertyType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[35]
}

func (x EOrderPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderPropertyType.Descriptor instead.
func (EOrderPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{35}
}

type EExtOrderTypTye int32

const (
	EExtOrderTypTye_EOT_NON                  EExtOrderTypTye = 0  //无
	EExtOrderTypTye_EOT_PRICESTRIGGER        EExtOrderTypTye = 1  //行情触发单,预埋单
	EExtOrderTypTye_EOT_MATCHTRIGGER         EExtOrderTypTye = 2  //成交触发单,条件单
	EExtOrderTypTye_EOT_PROFITLOSS           EExtOrderTypTye = 3  //止损止盈单,跨期套利订单
	EExtOrderTypTye_EOT_ARBITRAGE            EExtOrderTypTye = 4  //套利触发,跨品种套利订单
	EExtOrderTypTye_EOT_DSTLDD               EExtOrderTypTye = 5  //蝶式套利订单
	EExtOrderTypTye_EOT_PRICESTRIGGER_MODIFY EExtOrderTypTye = 6  //行情触发修改,自定义套利订单
	EExtOrderTypTye_EOT_MATCHTRIGGER_MODIFY  EExtOrderTypTye = 7  //成交触发修改
	EExtOrderTypTye_EOT_PROFITLOSS_MODIFY    EExtOrderTypTye = 8  //止损止盈触发修改
	EExtOrderTypTye_EOT_ARBITRAGE_MODIFY     EExtOrderTypTye = 9  //组合触发修改
	EExtOrderTypTye_EOT_End                  EExtOrderTypTye = 10 //结束值,方便校验有效性
)

// Enum value maps for EExtOrderTypTye.
var (
	EExtOrderTypTye_name = map[int32]string{
		0:  "EOT_NON",
		1:  "EOT_PRICESTRIGGER",
		2:  "EOT_MATCHTRIGGER",
		3:  "EOT_PROFITLOSS",
		4:  "EOT_ARBITRAGE",
		5:  "EOT_DSTLDD",
		6:  "EOT_PRICESTRIGGER_MODIFY",
		7:  "EOT_MATCHTRIGGER_MODIFY",
		8:  "EOT_PROFITLOSS_MODIFY",
		9:  "EOT_ARBITRAGE_MODIFY",
		10: "EOT_End",
	}
	EExtOrderTypTye_value = map[string]int32{
		"EOT_NON":                  0,
		"EOT_PRICESTRIGGER":        1,
		"EOT_MATCHTRIGGER":         2,
		"EOT_PROFITLOSS":           3,
		"EOT_ARBITRAGE":            4,
		"EOT_DSTLDD":               5,
		"EOT_PRICESTRIGGER_MODIFY": 6,
		"EOT_MATCHTRIGGER_MODIFY":  7,
		"EOT_PROFITLOSS_MODIFY":    8,
		"EOT_ARBITRAGE_MODIFY":     9,
		"EOT_End":                  10,
	}
)

func (x EExtOrderTypTye) Enum() *EExtOrderTypTye {
	p := new(EExtOrderTypTye)
	*p = x
	return p
}

func (x EExtOrderTypTye) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExtOrderTypTye) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[36].Descriptor()
}

func (EExtOrderTypTye) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[36]
}

func (x EExtOrderTypTye) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EExtOrderTypTye.Descriptor instead.
func (EExtOrderTypTye) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{36}
}

type EClientIdTypeType int32

const (
	EClientIdTypeType_ECIDT_Null        EClientIdTypeType = 0
	EClientIdTypeType_ECIDT_Speculation EClientIdTypeType = 1 // 投机
	EClientIdTypeType_ECIDT_Arbitrage   EClientIdTypeType = 2 // 套利
	EClientIdTypeType_ECIDT_Hedge       EClientIdTypeType = 3 // 套保
	EClientIdTypeType_ECIDT_MarketMaker EClientIdTypeType = 5 // 做市商
	EClientIdTypeType_ECIDT_End         EClientIdTypeType = 6 //结束值,方便校验有效性
)

// Enum value maps for EClientIdTypeType.
var (
	EClientIdTypeType_name = map[int32]string{
		0: "ECIDT_Null",
		1: "ECIDT_Speculation",
		2: "ECIDT_Arbitrage",
		3: "ECIDT_Hedge",
		5: "ECIDT_MarketMaker",
		6: "ECIDT_End",
	}
	EClientIdTypeType_value = map[string]int32{
		"ECIDT_Null":        0,
		"ECIDT_Speculation": 1,
		"ECIDT_Arbitrage":   2,
		"ECIDT_Hedge":       3,
		"ECIDT_MarketMaker": 5,
		"ECIDT_End":         6,
	}
)

func (x EClientIdTypeType) Enum() *EClientIdTypeType {
	p := new(EClientIdTypeType)
	*p = x
	return p
}

func (x EClientIdTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientIdTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[37].Descriptor()
}

func (EClientIdTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[37]
}

func (x EClientIdTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EClientIdTypeType.Descriptor instead.
func (EClientIdTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{37}
}

type ELastFragmentType int32

const (
	ELastFragmentType_ELF_Null ELastFragmentType = 0
	ELastFragmentType_ELF_Yes  ELastFragmentType = 1 // 是最后分片
	ELastFragmentType_ELF_No   ELastFragmentType = 2 // 不是最后分片
	ELastFragmentType_ELF_End  ELastFragmentType = 3 //结束值,方便校验有效性
)

// Enum value maps for ELastFragmentType.
var (
	ELastFragmentType_name = map[int32]string{
		0: "ELF_Null",
		1: "ELF_Yes",
		2: "ELF_No",
		3: "ELF_End",
	}
	ELastFragmentType_value = map[string]int32{
		"ELF_Null": 0,
		"ELF_Yes":  1,
		"ELF_No":   2,
		"ELF_End":  3,
	}
)

func (x ELastFragmentType) Enum() *ELastFragmentType {
	p := new(ELastFragmentType)
	*p = x
	return p
}

func (x ELastFragmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELastFragmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[38].Descriptor()
}

func (ELastFragmentType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[38]
}

func (x ELastFragmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELastFragmentType.Descriptor instead.
func (ELastFragmentType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{38}
}

type EIdCardTypeType int32

const (
	EIdCardTypeType_EICT_Null                   EIdCardTypeType = 0
	EIdCardTypeType_EICT_EID                    EIdCardTypeType = 1  // 组织机构代码
	EIdCardTypeType_EICT_IDCard                 EIdCardTypeType = 2  // 中国公民身份证
	EIdCardTypeType_EICT_OfficerIDCard          EIdCardTypeType = 3  // 军官证
	EIdCardTypeType_EICT_PoliceIDCard           EIdCardTypeType = 4  // 警官证
	EIdCardTypeType_EICT_SoldierIDCard          EIdCardTypeType = 5  // 士兵证
	EIdCardTypeType_EICT_HouseholdRegister      EIdCardTypeType = 6  // 户口簿
	EIdCardTypeType_EICT_Passport               EIdCardTypeType = 7  // 护照
	EIdCardTypeType_EICT_TaiwanCompatriotIDCard EIdCardTypeType = 8  // 台胞证
	EIdCardTypeType_EICT_HomeComingCard         EIdCardTypeType = 9  // 回乡证
	EIdCardTypeType_EICT_LicenseNo              EIdCardTypeType = 10 // 营业执照号
	EIdCardTypeType_EICT_TaxNo                  EIdCardTypeType = 11 // 税务登记号/当地纳税ID
	EIdCardTypeType_EICT_HMMainlandTravelPermit EIdCardTypeType = 12 // 港澳居民来往内地通行证
	EIdCardTypeType_EICT_TwMainlandTravelPermit EIdCardTypeType = 13 // 台湾居民来往大陆通行证
	EIdCardTypeType_EICT_DrivingLicense         EIdCardTypeType = 14 // 驾照
	EIdCardTypeType_EICT_SocialID               EIdCardTypeType = 15 // 当地社保ID
	EIdCardTypeType_EICT_LocalID                EIdCardTypeType = 16 // 当地身份证
	EIdCardTypeType_EICT_BusinessRegistration   EIdCardTypeType = 17 // 商业登记证
	EIdCardTypeType_EICT_HKMCIDCard             EIdCardTypeType = 18 // 港澳永久性居民身份证
	EIdCardTypeType_EICT_AccountsPermits        EIdCardTypeType = 19 // 人行开户许可证
	EIdCardTypeType_EICT_OtherCard              EIdCardTypeType = 20 // 其他证件
	EIdCardTypeType_EICT_End                    EIdCardTypeType = 21 //结束值,方便校验有效性
)

// Enum value maps for EIdCardTypeType.
var (
	EIdCardTypeType_name = map[int32]string{
		0:  "EICT_Null",
		1:  "EICT_EID",
		2:  "EICT_IDCard",
		3:  "EICT_OfficerIDCard",
		4:  "EICT_PoliceIDCard",
		5:  "EICT_SoldierIDCard",
		6:  "EICT_HouseholdRegister",
		7:  "EICT_Passport",
		8:  "EICT_TaiwanCompatriotIDCard",
		9:  "EICT_HomeComingCard",
		10: "EICT_LicenseNo",
		11: "EICT_TaxNo",
		12: "EICT_HMMainlandTravelPermit",
		13: "EICT_TwMainlandTravelPermit",
		14: "EICT_DrivingLicense",
		15: "EICT_SocialID",
		16: "EICT_LocalID",
		17: "EICT_BusinessRegistration",
		18: "EICT_HKMCIDCard",
		19: "EICT_AccountsPermits",
		20: "EICT_OtherCard",
		21: "EICT_End",
	}
	EIdCardTypeType_value = map[string]int32{
		"EICT_Null":                   0,
		"EICT_EID":                    1,
		"EICT_IDCard":                 2,
		"EICT_OfficerIDCard":          3,
		"EICT_PoliceIDCard":           4,
		"EICT_SoldierIDCard":          5,
		"EICT_HouseholdRegister":      6,
		"EICT_Passport":               7,
		"EICT_TaiwanCompatriotIDCard": 8,
		"EICT_HomeComingCard":         9,
		"EICT_LicenseNo":              10,
		"EICT_TaxNo":                  11,
		"EICT_HMMainlandTravelPermit": 12,
		"EICT_TwMainlandTravelPermit": 13,
		"EICT_DrivingLicense":         14,
		"EICT_SocialID":               15,
		"EICT_LocalID":                16,
		"EICT_BusinessRegistration":   17,
		"EICT_HKMCIDCard":             18,
		"EICT_AccountsPermits":        19,
		"EICT_OtherCard":              20,
		"EICT_End":                    21,
	}
)

func (x EIdCardTypeType) Enum() *EIdCardTypeType {
	p := new(EIdCardTypeType)
	*p = x
	return p
}

func (x EIdCardTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIdCardTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[39].Descriptor()
}

func (EIdCardTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[39]
}

func (x EIdCardTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EIdCardTypeType.Descriptor instead.
func (EIdCardTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{39}
}

type ECustTypeType int32

const (
	ECustTypeType_ECUSTT_Null        ECustTypeType = 0
	ECustTypeType_ECUSTT_Person      ECustTypeType = 1 // 自然人
	ECustTypeType_ECUSTT_Institution ECustTypeType = 2 // 机构户
	ECustTypeType_ECUSTT_End         ECustTypeType = 3 //结束值,方便校验有效性
)

// Enum value maps for ECustTypeType.
var (
	ECustTypeType_name = map[int32]string{
		0: "ECUSTT_Null",
		1: "ECUSTT_Person",
		2: "ECUSTT_Institution",
		3: "ECUSTT_End",
	}
	ECustTypeType_value = map[string]int32{
		"ECUSTT_Null":        0,
		"ECUSTT_Person":      1,
		"ECUSTT_Institution": 2,
		"ECUSTT_End":         3,
	}
)

func (x ECustTypeType) Enum() *ECustTypeType {
	p := new(ECustTypeType)
	*p = x
	return p
}

func (x ECustTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECustTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[40].Descriptor()
}

func (ECustTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[40]
}

func (x ECustTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECustTypeType.Descriptor instead.
func (ECustTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{40}
}

type EYesNoIndicatorType int32

const (
	EYesNoIndicatorType_EYNI_Null EYesNoIndicatorType = 0
	EYesNoIndicatorType_EYNI_Yes  EYesNoIndicatorType = 1 // 是
	EYesNoIndicatorType_EYNI_No   EYesNoIndicatorType = 2 // 否
	EYesNoIndicatorType_EYNI_End  EYesNoIndicatorType = 3 //结束值,方便校验有效性
)

// Enum value maps for EYesNoIndicatorType.
var (
	EYesNoIndicatorType_name = map[int32]string{
		0: "EYNI_Null",
		1: "EYNI_Yes",
		2: "EYNI_No",
		3: "EYNI_End",
	}
	EYesNoIndicatorType_value = map[string]int32{
		"EYNI_Null": 0,
		"EYNI_Yes":  1,
		"EYNI_No":   2,
		"EYNI_End":  3,
	}
)

func (x EYesNoIndicatorType) Enum() *EYesNoIndicatorType {
	p := new(EYesNoIndicatorType)
	*p = x
	return p
}

func (x EYesNoIndicatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EYesNoIndicatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[41].Descriptor()
}

func (EYesNoIndicatorType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[41]
}

func (x EYesNoIndicatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EYesNoIndicatorType.Descriptor instead.
func (EYesNoIndicatorType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{41}
}

type EFeePayFlagType int32

const (
	EFeePayFlagType_EFPF_Null EFeePayFlagType = 0
	EFeePayFlagType_EFPF_BEN  EFeePayFlagType = 1 // 由受益方支付费用
	EFeePayFlagType_EFPF_OUR  EFeePayFlagType = 2 // 由发送方支付费用
	EFeePayFlagType_EFPF_SHA  EFeePayFlagType = 3 // 由发送方支付发起费用，受益方支付接受的费用
	EFeePayFlagType_EFPF_End  EFeePayFlagType = 4 //结束值,方便校验有效性
)

// Enum value maps for EFeePayFlagType.
var (
	EFeePayFlagType_name = map[int32]string{
		0: "EFPF_Null",
		1: "EFPF_BEN",
		2: "EFPF_OUR",
		3: "EFPF_SHA",
		4: "EFPF_End",
	}
	EFeePayFlagType_value = map[string]int32{
		"EFPF_Null": 0,
		"EFPF_BEN":  1,
		"EFPF_OUR":  2,
		"EFPF_SHA":  3,
		"EFPF_End":  4,
	}
)

func (x EFeePayFlagType) Enum() *EFeePayFlagType {
	p := new(EFeePayFlagType)
	*p = x
	return p
}

func (x EFeePayFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFeePayFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[42].Descriptor()
}

func (EFeePayFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[42]
}

func (x EFeePayFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFeePayFlagType.Descriptor instead.
func (EFeePayFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{42}
}

type EBankAccTypeType int32

const (
	EBankAccTypeType_EBAT_Null       EBankAccTypeType = 0
	EBankAccTypeType_EBAT_BankBook   EBankAccTypeType = 1 // 银行存折
	EBankAccTypeType_EBAT_CreditCard EBankAccTypeType = 2 // 信用卡
	EBankAccTypeType_EBAT_End        EBankAccTypeType = 3 //结束值,方便校验有效性
)

// Enum value maps for EBankAccTypeType.
var (
	EBankAccTypeType_name = map[int32]string{
		0: "EBAT_Null",
		1: "EBAT_BankBook",
		2: "EBAT_CreditCard",
		3: "EBAT_End",
	}
	EBankAccTypeType_value = map[string]int32{
		"EBAT_Null":       0,
		"EBAT_BankBook":   1,
		"EBAT_CreditCard": 2,
		"EBAT_End":        3,
	}
)

func (x EBankAccTypeType) Enum() *EBankAccTypeType {
	p := new(EBankAccTypeType)
	*p = x
	return p
}

func (x EBankAccTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBankAccTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[43].Descriptor()
}

func (EBankAccTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[43]
}

func (x EBankAccTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBankAccTypeType.Descriptor instead.
func (EBankAccTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{43}
}

type EFutureAccTypeType int32

const (
	EFutureAccTypeType_EFAT_Null       EFutureAccTypeType = 0
	EFutureAccTypeType_EFAT_BankBook   EFutureAccTypeType = 1 // 银行存折
	EFutureAccTypeType_EFAT_SavingCard EFutureAccTypeType = 2 // 储蓄卡
	EFutureAccTypeType_EFAT_CreditCard EFutureAccTypeType = 3 // 信用卡
	EFutureAccTypeType_EFAT_End        EFutureAccTypeType = 4 //结束值,方便校验有效性
)

// Enum value maps for EFutureAccTypeType.
var (
	EFutureAccTypeType_name = map[int32]string{
		0: "EFAT_Null",
		1: "EFAT_BankBook",
		2: "EFAT_SavingCard",
		3: "EFAT_CreditCard",
		4: "EFAT_End",
	}
	EFutureAccTypeType_value = map[string]int32{
		"EFAT_Null":       0,
		"EFAT_BankBook":   1,
		"EFAT_SavingCard": 2,
		"EFAT_CreditCard": 3,
		"EFAT_End":        4,
	}
)

func (x EFutureAccTypeType) Enum() *EFutureAccTypeType {
	p := new(EFutureAccTypeType)
	*p = x
	return p
}

func (x EFutureAccTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFutureAccTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[44].Descriptor()
}

func (EFutureAccTypeType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[44]
}

func (x EFutureAccTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFutureAccTypeType.Descriptor instead.
func (EFutureAccTypeType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{44}
}

type EAvailabilityFlagType int32

const (
	EAvailabilityFlagType_EAVAF_Null          EAvailabilityFlagType = 0
	EAvailabilityFlagType_EAVAF_Invalid       EAvailabilityFlagType = 1  // 未确认
	EAvailabilityFlagType_EAVAF_Valid         EAvailabilityFlagType = 2  // 有效
	EAvailabilityFlagType_EAVAF_Repeal        EAvailabilityFlagType = 3  // 冲正
	EAvailabilityFlagType_EAVAF_Unreported    EAvailabilityFlagType = 4  // 未报
	EAvailabilityFlagType_EAVAF_Reported      EAvailabilityFlagType = 5  // 已报
	EAvailabilityFlagType_EAVAF_Successed     EAvailabilityFlagType = 6  // 成功
	EAvailabilityFlagType_EAVAF_WaitingCancle EAvailabilityFlagType = 7  // 待撤
	EAvailabilityFlagType_EAVAF_Cancle        EAvailabilityFlagType = 8  // 撤销
	EAvailabilityFlagType_EAVAF_WaitingRepeal EAvailabilityFlagType = 9  // 待冲正
	EAvailabilityFlagType_EAVAF_Reporting     EAvailabilityFlagType = 10 // 正报
	EAvailabilityFlagType_EAVAF_End           EAvailabilityFlagType = 11 //结束值,方便校验有效性
)

// Enum value maps for EAvailabilityFlagType.
var (
	EAvailabilityFlagType_name = map[int32]string{
		0:  "EAVAF_Null",
		1:  "EAVAF_Invalid",
		2:  "EAVAF_Valid",
		3:  "EAVAF_Repeal",
		4:  "EAVAF_Unreported",
		5:  "EAVAF_Reported",
		6:  "EAVAF_Successed",
		7:  "EAVAF_WaitingCancle",
		8:  "EAVAF_Cancle",
		9:  "EAVAF_WaitingRepeal",
		10: "EAVAF_Reporting",
		11: "EAVAF_End",
	}
	EAvailabilityFlagType_value = map[string]int32{
		"EAVAF_Null":          0,
		"EAVAF_Invalid":       1,
		"EAVAF_Valid":         2,
		"EAVAF_Repeal":        3,
		"EAVAF_Unreported":    4,
		"EAVAF_Reported":      5,
		"EAVAF_Successed":     6,
		"EAVAF_WaitingCancle": 7,
		"EAVAF_Cancle":        8,
		"EAVAF_WaitingRepeal": 9,
		"EAVAF_Reporting":     10,
		"EAVAF_End":           11,
	}
)

func (x EAvailabilityFlagType) Enum() *EAvailabilityFlagType {
	p := new(EAvailabilityFlagType)
	*p = x
	return p
}

func (x EAvailabilityFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAvailabilityFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[45].Descriptor()
}

func (EAvailabilityFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[45]
}

func (x EAvailabilityFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAvailabilityFlagType.Descriptor instead.
func (EAvailabilityFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{45}
}

type EPwdFlagType int32

const (
	EPwdFlagType_EBPWDF_Null         EPwdFlagType = 0
	EPwdFlagType_EBPWDF_NoCheck      EPwdFlagType = 1 // 不核对
	EPwdFlagType_EBPWDF_BlankCheck   EPwdFlagType = 2 // 明文核对
	EPwdFlagType_EBPWDF_EncryptCheck EPwdFlagType = 3 // 密文核对
	EPwdFlagType_EBPWDF_End          EPwdFlagType = 4 //结束值,方便校验有效性
)

// Enum value maps for EPwdFlagType.
var (
	EPwdFlagType_name = map[int32]string{
		0: "EBPWDF_Null",
		1: "EBPWDF_NoCheck",
		2: "EBPWDF_BlankCheck",
		3: "EBPWDF_EncryptCheck",
		4: "EBPWDF_End",
	}
	EPwdFlagType_value = map[string]int32{
		"EBPWDF_Null":         0,
		"EBPWDF_NoCheck":      1,
		"EBPWDF_BlankCheck":   2,
		"EBPWDF_EncryptCheck": 3,
		"EBPWDF_End":          4,
	}
)

func (x EPwdFlagType) Enum() *EPwdFlagType {
	p := new(EPwdFlagType)
	*p = x
	return p
}

func (x EPwdFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPwdFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[46].Descriptor()
}

func (EPwdFlagType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[46]
}

func (x EPwdFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPwdFlagType.Descriptor instead.
func (EPwdFlagType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{46}
}

type ETransferStatusType int32

const (
	ETransferStatusType_ETRFS_Null     ETransferStatusType = 0
	ETransferStatusType_ETRFS_Normal   ETransferStatusType = 1 // 正常
	ETransferStatusType_ETRFS_Repealed ETransferStatusType = 2 // 被冲正
	ETransferStatusType_ETRFS_Nullify  ETransferStatusType = 3 // 作废
	ETransferStatusType_ETRFS_Cancel   ETransferStatusType = 4 // 撤销
	ETransferStatusType_ETRFS_End      ETransferStatusType = 5 //结束值,方便校验有效性
)

// Enum value maps for ETransferStatusType.
var (
	ETransferStatusType_name = map[int32]string{
		0: "ETRFS_Null",
		1: "ETRFS_Normal",
		2: "ETRFS_Repealed",
		3: "ETRFS_Nullify",
		4: "ETRFS_Cancel",
		5: "ETRFS_End",
	}
	ETransferStatusType_value = map[string]int32{
		"ETRFS_Null":     0,
		"ETRFS_Normal":   1,
		"ETRFS_Repealed": 2,
		"ETRFS_Nullify":  3,
		"ETRFS_Cancel":   4,
		"ETRFS_End":      5,
	}
)

func (x ETransferStatusType) Enum() *ETransferStatusType {
	p := new(ETransferStatusType)
	*p = x
	return p
}

func (x ETransferStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETransferStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[47].Descriptor()
}

func (ETransferStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[47]
}

func (x ETransferStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETransferStatusType.Descriptor instead.
func (ETransferStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{47}
}

type AlgorithmType int32

const (
	AlgorithmType_AG_Null     AlgorithmType = 0 // 未知
	AlgorithmType_AG_All      AlgorithmType = 1 // 浮赢浮亏都计算
	AlgorithmType_AG_OnlyLost AlgorithmType = 2 // 浮赢不计，浮亏计
	AlgorithmType_AG_OnlyGain AlgorithmType = 3 // 浮赢计，浮亏不计
	AlgorithmType_aG_None     AlgorithmType = 4 // 浮赢浮亏都不计算
	AlgorithmType_AG_End      AlgorithmType = 5 //结束值,方便校验有效性
)

// Enum value maps for AlgorithmType.
var (
	AlgorithmType_name = map[int32]string{
		0: "AG_Null",
		1: "AG_All",
		2: "AG_OnlyLost",
		3: "AG_OnlyGain",
		4: "aG_None",
		5: "AG_End",
	}
	AlgorithmType_value = map[string]int32{
		"AG_Null":     0,
		"AG_All":      1,
		"AG_OnlyLost": 2,
		"AG_OnlyGain": 3,
		"aG_None":     4,
		"AG_End":      5,
	}
)

func (x AlgorithmType) Enum() *AlgorithmType {
	p := new(AlgorithmType)
	*p = x
	return p
}

func (x AlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[48].Descriptor()
}

func (AlgorithmType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[48]
}

func (x AlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlgorithmType.Descriptor instead.
func (AlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{48}
}

type EBooLean int32

const (
	EBooLean_EBL_Null  EBooLean = 0 // 未知
	EBooLean_EBL_True  EBooLean = 1 // 成功
	EBooLean_EBL_False EBooLean = 2 // 失败
	EBooLean_EBL_End   EBooLean = 3 //结束值,方便校验有效性
)

// Enum value maps for EBooLean.
var (
	EBooLean_name = map[int32]string{
		0: "EBL_Null",
		1: "EBL_True",
		2: "EBL_False",
		3: "EBL_End",
	}
	EBooLean_value = map[string]int32{
		"EBL_Null":  0,
		"EBL_True":  1,
		"EBL_False": 2,
		"EBL_End":   3,
	}
)

func (x EBooLean) Enum() *EBooLean {
	p := new(EBooLean)
	*p = x
	return p
}

func (x EBooLean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBooLean) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[49].Descriptor()
}

func (EBooLean) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[49]
}

func (x EBooLean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBooLean.Descriptor instead.
func (EBooLean) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{49}
}

type EOrderActionStatusType int32

const (
	EOrderActionStatusType_EOAS_Null      EOrderActionStatusType = 0
	EOrderActionStatusType_EOAS_Submitted EOrderActionStatusType = 1 // 已经提交
	EOrderActionStatusType_EOAS_Accepted  EOrderActionStatusType = 2 // 已经接收
	EOrderActionStatusType_EOAS_Rejected  EOrderActionStatusType = 3 // 已经被拒绝
	EOrderActionStatusType_EOAS_End       EOrderActionStatusType = 4 //结束值,方便校验有效性
)

// Enum value maps for EOrderActionStatusType.
var (
	EOrderActionStatusType_name = map[int32]string{
		0: "EOAS_Null",
		1: "EOAS_Submitted",
		2: "EOAS_Accepted",
		3: "EOAS_Rejected",
		4: "EOAS_End",
	}
	EOrderActionStatusType_value = map[string]int32{
		"EOAS_Null":      0,
		"EOAS_Submitted": 1,
		"EOAS_Accepted":  2,
		"EOAS_Rejected":  3,
		"EOAS_End":       4,
	}
)

func (x EOrderActionStatusType) Enum() *EOrderActionStatusType {
	p := new(EOrderActionStatusType)
	*p = x
	return p
}

func (x EOrderActionStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderActionStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[50].Descriptor()
}

func (EOrderActionStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[50]
}

func (x EOrderActionStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderActionStatusType.Descriptor instead.
func (EOrderActionStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{50}
}

type EForQuoteStausType int32

const (
	EForQuoteStausType_EFQST_Null      EForQuoteStausType = 0
	EForQuoteStausType_EFQST_Submitted EForQuoteStausType = 1 // 已经提交
	EForQuoteStausType_EFQST_Accepted  EForQuoteStausType = 2 // 已经接收
	EForQuoteStausType_EFQST_Rejected  EForQuoteStausType = 3 // 已经被拒绝
	EForQuoteStausType_EFQST_End       EForQuoteStausType = 4 //结束值,方便校验有效性
)

// Enum value maps for EForQuoteStausType.
var (
	EForQuoteStausType_name = map[int32]string{
		0: "EFQST_Null",
		1: "EFQST_Submitted",
		2: "EFQST_Accepted",
		3: "EFQST_Rejected",
		4: "EFQST_End",
	}
	EForQuoteStausType_value = map[string]int32{
		"EFQST_Null":      0,
		"EFQST_Submitted": 1,
		"EFQST_Accepted":  2,
		"EFQST_Rejected":  3,
		"EFQST_End":       4,
	}
)

func (x EForQuoteStausType) Enum() *EForQuoteStausType {
	p := new(EForQuoteStausType)
	*p = x
	return p
}

func (x EForQuoteStausType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EForQuoteStausType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[51].Descriptor()
}

func (EForQuoteStausType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[51]
}

func (x EForQuoteStausType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EForQuoteStausType.Descriptor instead.
func (EForQuoteStausType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{51}
}

type EInstrumentStatusType int32

const (
	EInstrumentStatusType_EIS_BeforeTrading   EInstrumentStatusType = 0 /// 开盘前
	EInstrumentStatusType_EIS_NoTrading       EInstrumentStatusType = 1 /// 非交易
	EInstrumentStatusType_EIS_Continous       EInstrumentStatusType = 2 /// 连续交易
	EInstrumentStatusType_EIS_AuctionOrdering EInstrumentStatusType = 3 /// 集合竞价报单
	EInstrumentStatusType_EIS_AuctionBalance  EInstrumentStatusType = 4 /// 集合竞价价格平衡
	EInstrumentStatusType_EIS_AuctionMatch    EInstrumentStatusType = 5 /// 集合竞价撮合
	EInstrumentStatusType_EIS_Closed          EInstrumentStatusType = 6 /// 收盘
	EInstrumentStatusType_EIS_End             EInstrumentStatusType = 7 //结束值,方便校验有效性
)

// Enum value maps for EInstrumentStatusType.
var (
	EInstrumentStatusType_name = map[int32]string{
		0: "EIS_BeforeTrading",
		1: "EIS_NoTrading",
		2: "EIS_Continous",
		3: "EIS_AuctionOrdering",
		4: "EIS_AuctionBalance",
		5: "EIS_AuctionMatch",
		6: "EIS_Closed",
		7: "EIS_End",
	}
	EInstrumentStatusType_value = map[string]int32{
		"EIS_BeforeTrading":   0,
		"EIS_NoTrading":       1,
		"EIS_Continous":       2,
		"EIS_AuctionOrdering": 3,
		"EIS_AuctionBalance":  4,
		"EIS_AuctionMatch":    5,
		"EIS_Closed":          6,
		"EIS_End":             7,
	}
)

func (x EInstrumentStatusType) Enum() *EInstrumentStatusType {
	p := new(EInstrumentStatusType)
	*p = x
	return p
}

func (x EInstrumentStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInstrumentStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[52].Descriptor()
}

func (EInstrumentStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[52]
}

func (x EInstrumentStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EInstrumentStatusType.Descriptor instead.
func (EInstrumentStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{52}
}

// 条件单类型
type EConOrderType int32

const (
	EConOrderType_ECOT_Null        EConOrderType = 0
	EConOrderType_ECOT_Touch       EConOrderType = 1 // 止损单
	EConOrderType_ECOT_TouchProfit EConOrderType = 2 // 止赢单
	EConOrderType_ECOT_End         EConOrderType = 3 //结束值,方便校验有效性
)

// Enum value maps for EConOrderType.
var (
	EConOrderType_name = map[int32]string{
		0: "ECOT_Null",
		1: "ECOT_Touch",
		2: "ECOT_TouchProfit",
		3: "ECOT_End",
	}
	EConOrderType_value = map[string]int32{
		"ECOT_Null":        0,
		"ECOT_Touch":       1,
		"ECOT_TouchProfit": 2,
		"ECOT_End":         3,
	}
)

func (x EConOrderType) Enum() *EConOrderType {
	p := new(EConOrderType)
	*p = x
	return p
}

func (x EConOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[53].Descriptor()
}

func (EConOrderType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[53]
}

func (x EConOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConOrderType.Descriptor instead.
func (EConOrderType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{53}
}

// 触发价格类型
type EConPriceType int32

const (
	EConPriceType_ECPT_Null      EConPriceType = 0
	EConPriceType_ECPT_LastPrice EConPriceType = 1 // 最新价
	EConPriceType_ECPT_AskPrice  EConPriceType = 2 // 卖一价
	EConPriceType_ECPT_BidPrice  EConPriceType = 3 // 买一价
	EConPriceType_ECPT_End       EConPriceType = 4 //结束值,方便校验有效性
)

// Enum value maps for EConPriceType.
var (
	EConPriceType_name = map[int32]string{
		0: "ECPT_Null",
		1: "ECPT_LastPrice",
		2: "ECPT_AskPrice",
		3: "ECPT_BidPrice",
		4: "ECPT_End",
	}
	EConPriceType_value = map[string]int32{
		"ECPT_Null":      0,
		"ECPT_LastPrice": 1,
		"ECPT_AskPrice":  2,
		"ECPT_BidPrice":  3,
		"ECPT_End":       4,
	}
)

func (x EConPriceType) Enum() *EConPriceType {
	p := new(EConPriceType)
	*p = x
	return p
}

func (x EConPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[54].Descriptor()
}

func (EConPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[54]
}

func (x EConPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConPriceType.Descriptor instead.
func (EConPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{54}
}

// 触发比较类型
type EConCompareType int32

const (
	EConCompareType_ECCT_Null         EConCompareType = 0
	EConCompareType_ECCT_GreaterThan  EConCompareType = 1 // 大于
	EConCompareType_ECCT_GreaterEqual EConCompareType = 2 // 大于等于
	EConCompareType_ECCT_LesserThan   EConCompareType = 3 // 小于
	EConCompareType_ECCT_LesserEqual  EConCompareType = 4 // 小于等于
	EConCompareType_ECCT_End          EConCompareType = 5 //结束值,方便校验有效性
)

// Enum value maps for EConCompareType.
var (
	EConCompareType_name = map[int32]string{
		0: "ECCT_Null",
		1: "ECCT_GreaterThan",
		2: "ECCT_GreaterEqual",
		3: "ECCT_LesserThan",
		4: "ECCT_LesserEqual",
		5: "ECCT_End",
	}
	EConCompareType_value = map[string]int32{
		"ECCT_Null":         0,
		"ECCT_GreaterThan":  1,
		"ECCT_GreaterEqual": 2,
		"ECCT_LesserThan":   3,
		"ECCT_LesserEqual":  4,
		"ECCT_End":          5,
	}
)

func (x EConCompareType) Enum() *EConCompareType {
	p := new(EConCompareType)
	*p = x
	return p
}

func (x EConCompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConCompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[55].Descriptor()
}

func (EConCompareType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[55]
}

func (x EConCompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConCompareType.Descriptor instead.
func (EConCompareType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{55}
}

// 条件单止盈止损单报单价格类型
type EOrderPriceType int32

const (
	EOrderPriceType_EOPT_Null       EOrderPriceType = 0
	EOrderPriceType_EOPT_LastPrice  EOrderPriceType = 1 // 最新价
	EOrderPriceType_EOPT_AskPrice   EOrderPriceType = 2 // 卖一价
	EOrderPriceType_EOPT_BidPrice   EOrderPriceType = 3 // 买一价
	EOrderPriceType_EOPT_AnyPrice   EOrderPriceType = 4 // 市价
	EOrderPriceType_EOPT_LimitPrice EOrderPriceType = 5 // 限价
	EOrderPriceType_EOPT_End        EOrderPriceType = 6 //结束值,方便校验有效性
)

// Enum value maps for EOrderPriceType.
var (
	EOrderPriceType_name = map[int32]string{
		0: "EOPT_Null",
		1: "EOPT_LastPrice",
		2: "EOPT_AskPrice",
		3: "EOPT_BidPrice",
		4: "EOPT_AnyPrice",
		5: "EOPT_LimitPrice",
		6: "EOPT_End",
	}
	EOrderPriceType_value = map[string]int32{
		"EOPT_Null":       0,
		"EOPT_LastPrice":  1,
		"EOPT_AskPrice":   2,
		"EOPT_BidPrice":   3,
		"EOPT_AnyPrice":   4,
		"EOPT_LimitPrice": 5,
		"EOPT_End":        6,
	}
)

func (x EOrderPriceType) Enum() *EOrderPriceType {
	p := new(EOrderPriceType)
	*p = x
	return p
}

func (x EOrderPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[56].Descriptor()
}

func (EOrderPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[56]
}

func (x EOrderPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderPriceType.Descriptor instead.
func (EOrderPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{56}
}

// 开平标志
type EParkedStatusType int32

const (
	EParkedStatusType_PAOS_Null    EParkedStatusType = 0
	EParkedStatusType_PAOS_NotSend EParkedStatusType = 1 //未发送
	EParkedStatusType_PAOS_Send    EParkedStatusType = 2 //已发送
	EParkedStatusType_PAOS_Deleted EParkedStatusType = 3 //已删除
	EParkedStatusType_PAOS_End     EParkedStatusType = 4 //结束值,方便校验有效性
)

// Enum value maps for EParkedStatusType.
var (
	EParkedStatusType_name = map[int32]string{
		0: "PAOS_Null",
		1: "PAOS_NotSend",
		2: "PAOS_Send",
		3: "PAOS_Deleted",
		4: "PAOS_End",
	}
	EParkedStatusType_value = map[string]int32{
		"PAOS_Null":    0,
		"PAOS_NotSend": 1,
		"PAOS_Send":    2,
		"PAOS_Deleted": 3,
		"PAOS_End":     4,
	}
)

func (x EParkedStatusType) Enum() *EParkedStatusType {
	p := new(EParkedStatusType)
	*p = x
	return p
}

func (x EParkedStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EParkedStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[57].Descriptor()
}

func (EParkedStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[57]
}

func (x EParkedStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EParkedStatusType.Descriptor instead.
func (EParkedStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{57}
}

// 触发单类型       1价格条件单 2时间条件单 3状态条件单  4止盈 5止损 6画线条件单  7画线止盈单 8画线止损 9保本 10止损动态追踪 11止盈动态追踪
type ETriggerOrderType int32

const (
	ETriggerOrderType_TR_Null              ETriggerOrderType = 0
	ETriggerOrderType_TR_PriceCondition    ETriggerOrderType = 1  //价格条件单
	ETriggerOrderType_TR_TimeCondition     ETriggerOrderType = 2  //时间条件单
	ETriggerOrderType_TR_StatusCondition   ETriggerOrderType = 3  //状态条件单
	ETriggerOrderType_TR_StopProfit        ETriggerOrderType = 4  //止盈单
	ETriggerOrderType_TR_StopLoss          ETriggerOrderType = 5  //止损
	ETriggerOrderType_TR_LineCondition     ETriggerOrderType = 6  //画线条件
	ETriggerOrderType_TR_LineStopProfit    ETriggerOrderType = 7  //画线止盈
	ETriggerOrderType_TR_LineStopLoss      ETriggerOrderType = 8  //画线止损
	ETriggerOrderType_TR_BreakEven         ETriggerOrderType = 9  //保本
	ETriggerOrderType_TR_StopLossDynamic   ETriggerOrderType = 10 //止损动态追踪
	ETriggerOrderType_TR_StopProfitDynamic ETriggerOrderType = 11 //止盈动态追踪
	ETriggerOrderType_TR_End               ETriggerOrderType = 12 //结束值,方便校验有效性
)

// Enum value maps for ETriggerOrderType.
var (
	ETriggerOrderType_name = map[int32]string{
		0:  "TR_Null",
		1:  "TR_PriceCondition",
		2:  "TR_TimeCondition",
		3:  "TR_StatusCondition",
		4:  "TR_StopProfit",
		5:  "TR_StopLoss",
		6:  "TR_LineCondition",
		7:  "TR_LineStopProfit",
		8:  "TR_LineStopLoss",
		9:  "TR_BreakEven",
		10: "TR_StopLossDynamic",
		11: "TR_StopProfitDynamic",
		12: "TR_End",
	}
	ETriggerOrderType_value = map[string]int32{
		"TR_Null":              0,
		"TR_PriceCondition":    1,
		"TR_TimeCondition":     2,
		"TR_StatusCondition":   3,
		"TR_StopProfit":        4,
		"TR_StopLoss":          5,
		"TR_LineCondition":     6,
		"TR_LineStopProfit":    7,
		"TR_LineStopLoss":      8,
		"TR_BreakEven":         9,
		"TR_StopLossDynamic":   10,
		"TR_StopProfitDynamic": 11,
		"TR_End":               12,
	}
)

func (x ETriggerOrderType) Enum() *ETriggerOrderType {
	p := new(ETriggerOrderType)
	*p = x
	return p
}

func (x ETriggerOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETriggerOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[58].Descriptor()
}

func (ETriggerOrderType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[58]
}

func (x ETriggerOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETriggerOrderType.Descriptor instead.
func (ETriggerOrderType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{58}
}

// 价格类型                     最新价 排队价 对手价 超价 市价 触发价
type EPriceType int32

const (
	EPriceType_PRI_Null    EPriceType = 0 //手动输入时可以填这个
	EPriceType_PRI_Last    EPriceType = 1 //最新价
	EPriceType_PRI_Queue   EPriceType = 2 //排队价
	EPriceType_PRI_Rial    EPriceType = 3 //对手价
	EPriceType_PRI_Over    EPriceType = 4 //超价
	EPriceType_PRI_Market  EPriceType = 5 //市价
	EPriceType_PRI_Trigger EPriceType = 6 //触发价
	EPriceType_PRI_End     EPriceType = 7 //结束值,方便校验有效性
)

// Enum value maps for EPriceType.
var (
	EPriceType_name = map[int32]string{
		0: "PRI_Null",
		1: "PRI_Last",
		2: "PRI_Queue",
		3: "PRI_Rial",
		4: "PRI_Over",
		5: "PRI_Market",
		6: "PRI_Trigger",
		7: "PRI_End",
	}
	EPriceType_value = map[string]int32{
		"PRI_Null":    0,
		"PRI_Last":    1,
		"PRI_Queue":   2,
		"PRI_Rial":    3,
		"PRI_Over":    4,
		"PRI_Market":  5,
		"PRI_Trigger": 6,
		"PRI_End":     7,
	}
)

func (x EPriceType) Enum() *EPriceType {
	p := new(EPriceType)
	*p = x
	return p
}

func (x EPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[59].Descriptor()
}

func (EPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[59]
}

func (x EPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPriceType.Descriptor instead.
func (EPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{59}
}

// 触发价格类型    ，有用的只有最新价和收盘价，其他的是多余的
type ETriggerPriceType int32

const (
	ETriggerPriceType_TRIP_Null     ETriggerPriceType = 0
	ETriggerPriceType_TRIP_Last     ETriggerPriceType = 1 // 最新价
	ETriggerPriceType_TRIP_Loss     ETriggerPriceType = 2 // 止损
	ETriggerPriceType_TRIP_Profit   ETriggerPriceType = 3 // 止盈
	ETriggerPriceType_TRIP_Close    ETriggerPriceType = 4 // 收盘
	ETriggerPriceType_TRIP_Drawdown ETriggerPriceType = 5 // 回撤
	ETriggerPriceType_TRIP_End      ETriggerPriceType = 6 //结束值,方便校验有效性
)

// Enum value maps for ETriggerPriceType.
var (
	ETriggerPriceType_name = map[int32]string{
		0: "TRIP_Null",
		1: "TRIP_Last",
		2: "TRIP_Loss",
		3: "TRIP_Profit",
		4: "TRIP_Close",
		5: "TRIP_Drawdown",
		6: "TRIP_End",
	}
	ETriggerPriceType_value = map[string]int32{
		"TRIP_Null":     0,
		"TRIP_Last":     1,
		"TRIP_Loss":     2,
		"TRIP_Profit":   3,
		"TRIP_Close":    4,
		"TRIP_Drawdown": 5,
		"TRIP_End":      6,
	}
)

func (x ETriggerPriceType) Enum() *ETriggerPriceType {
	p := new(ETriggerPriceType)
	*p = x
	return p
}

func (x ETriggerPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETriggerPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[60].Descriptor()
}

func (ETriggerPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[60]
}

func (x ETriggerPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETriggerPriceType.Descriptor instead.
func (ETriggerPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{60}
}

// 触发比较类型
type ETriggerCompareType int32

const (
	ETriggerCompareType_TRIC_Null         ETriggerCompareType = 0
	ETriggerCompareType_TRIC_Greater      ETriggerCompareType = 1 //大于
	ETriggerCompareType_TRIC_GreaterEqual ETriggerCompareType = 2 //大于等于
	ETriggerCompareType_TRIC_Less         ETriggerCompareType = 3 //小于
	ETriggerCompareType_TRIC_LessEqual    ETriggerCompareType = 4 //小于等于
	ETriggerCompareType_TRIC_End          ETriggerCompareType = 5 //结束值,方便校验有效性
)

// Enum value maps for ETriggerCompareType.
var (
	ETriggerCompareType_name = map[int32]string{
		0: "TRIC_Null",
		1: "TRIC_Greater",
		2: "TRIC_GreaterEqual",
		3: "TRIC_Less",
		4: "TRIC_LessEqual",
		5: "TRIC_End",
	}
	ETriggerCompareType_value = map[string]int32{
		"TRIC_Null":         0,
		"TRIC_Greater":      1,
		"TRIC_GreaterEqual": 2,
		"TRIC_Less":         3,
		"TRIC_LessEqual":    4,
		"TRIC_End":          5,
	}
)

func (x ETriggerCompareType) Enum() *ETriggerCompareType {
	p := new(ETriggerCompareType)
	*p = x
	return p
}

func (x ETriggerCompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETriggerCompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[61].Descriptor()
}

func (ETriggerCompareType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[61]
}

func (x ETriggerCompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETriggerCompareType.Descriptor instead.
func (ETriggerCompareType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{61}
}

// 触发状态条件  类型，目前只有开盘触发
type ETriggerStatusType int32

const (
	ETriggerStatusType_TST_Null ETriggerStatusType = 0
	ETriggerStatusType_TST_Open ETriggerStatusType = 1
	ETriggerStatusType_TST_End  ETriggerStatusType = 2 //结束值,方便校验有效性
)

// Enum value maps for ETriggerStatusType.
var (
	ETriggerStatusType_name = map[int32]string{
		0: "TST_Null",
		1: "TST_Open",
		2: "TST_End",
	}
	ETriggerStatusType_value = map[string]int32{
		"TST_Null": 0,
		"TST_Open": 1,
		"TST_End":  2,
	}
)

func (x ETriggerStatusType) Enum() *ETriggerStatusType {
	p := new(ETriggerStatusType)
	*p = x
	return p
}

func (x ETriggerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETriggerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[62].Descriptor()
}

func (ETriggerStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[62]
}

func (x ETriggerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETriggerStatusType.Descriptor instead.
func (ETriggerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{62}
}

// 开关状态
type ESwitchStatus int32

const (
	ESwitchStatus_SW_NULL  ESwitchStatus = 0 //
	ESwitchStatus_SW_OPEN  ESwitchStatus = 1 //开
	ESwitchStatus_SW_Close ESwitchStatus = 2 //关
	ESwitchStatus_SW_End   ESwitchStatus = 3 //结束值,方便校验有效性
)

// Enum value maps for ESwitchStatus.
var (
	ESwitchStatus_name = map[int32]string{
		0: "SW_NULL",
		1: "SW_OPEN",
		2: "SW_Close",
		3: "SW_End",
	}
	ESwitchStatus_value = map[string]int32{
		"SW_NULL":  0,
		"SW_OPEN":  1,
		"SW_Close": 2,
		"SW_End":   3,
	}
)

func (x ESwitchStatus) Enum() *ESwitchStatus {
	p := new(ESwitchStatus)
	*p = x
	return p
}

func (x ESwitchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESwitchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[63].Descriptor()
}

func (ESwitchStatus) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[63]
}

func (x ESwitchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESwitchStatus.Descriptor instead.
func (ESwitchStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{63}
}

// 类型：限价止损+现价止盈、限价止损、限价止盈、动态追踪4种
type EAutoStopType int32

const (
	EAutoStopType_ATS_Null            EAutoStopType = 0
	EAutoStopType_ATS_LimitLossProfit EAutoStopType = 1 //限价止损+现价止盈
	EAutoStopType_ATS_LimitLoss       EAutoStopType = 2 //限价止损
	EAutoStopType_ATS_LimitProfit     EAutoStopType = 3 //限价止盈
	EAutoStopType_ATS_DynamicTrace    EAutoStopType = 4 //动态追踪
	EAutoStopType_ATS_End             EAutoStopType = 5 //结束值,方便校验有效性
)

// Enum value maps for EAutoStopType.
var (
	EAutoStopType_name = map[int32]string{
		0: "ATS_Null",
		1: "ATS_LimitLossProfit",
		2: "ATS_LimitLoss",
		3: "ATS_LimitProfit",
		4: "ATS_DynamicTrace",
		5: "ATS_End",
	}
	EAutoStopType_value = map[string]int32{
		"ATS_Null":            0,
		"ATS_LimitLossProfit": 1,
		"ATS_LimitLoss":       2,
		"ATS_LimitProfit":     3,
		"ATS_DynamicTrace":    4,
		"ATS_End":             5,
	}
)

func (x EAutoStopType) Enum() *EAutoStopType {
	p := new(EAutoStopType)
	*p = x
	return p
}

func (x EAutoStopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAutoStopType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[64].Descriptor()
}

func (EAutoStopType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[64]
}

func (x EAutoStopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAutoStopType.Descriptor instead.
func (EAutoStopType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{64}
}

// 止损委托价（类型：对手价、超价、市价）
type EAutoStopLossPriceType int32

const (
	EAutoStopLossPriceType_ATSLP_Null   EAutoStopLossPriceType = 0
	EAutoStopLossPriceType_ATSLP_Rival  EAutoStopLossPriceType = 1 //对手价
	EAutoStopLossPriceType_ATSLP_Over   EAutoStopLossPriceType = 2 //超价
	EAutoStopLossPriceType_ATSLP_Market EAutoStopLossPriceType = 3 //市价
	EAutoStopLossPriceType_ATSLP_End    EAutoStopLossPriceType = 4 //结束值,方便校验有效性
)

// Enum value maps for EAutoStopLossPriceType.
var (
	EAutoStopLossPriceType_name = map[int32]string{
		0: "ATSLP_Null",
		1: "ATSLP_Rival",
		2: "ATSLP_Over",
		3: "ATSLP_Market",
		4: "ATSLP_End",
	}
	EAutoStopLossPriceType_value = map[string]int32{
		"ATSLP_Null":   0,
		"ATSLP_Rival":  1,
		"ATSLP_Over":   2,
		"ATSLP_Market": 3,
		"ATSLP_End":    4,
	}
)

func (x EAutoStopLossPriceType) Enum() *EAutoStopLossPriceType {
	p := new(EAutoStopLossPriceType)
	*p = x
	return p
}

func (x EAutoStopLossPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAutoStopLossPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[65].Descriptor()
}

func (EAutoStopLossPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[65]
}

func (x EAutoStopLossPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAutoStopLossPriceType.Descriptor instead.
func (EAutoStopLossPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{65}
}

// 止盈委托价（类型：对手价、超价、市价）
type EAutoStopProfitPriceType int32

const (
	EAutoStopProfitPriceType_ATSPP_Null   EAutoStopProfitPriceType = 0 //
	EAutoStopProfitPriceType_ATSPP_Rival  EAutoStopProfitPriceType = 1 //对手价
	EAutoStopProfitPriceType_ATSPP_Over   EAutoStopProfitPriceType = 2 //超价
	EAutoStopProfitPriceType_ATSPP_Market EAutoStopProfitPriceType = 3 //市价
	EAutoStopProfitPriceType_ATSPP_End    EAutoStopProfitPriceType = 4 //结束值,方便校验有效性
)

// Enum value maps for EAutoStopProfitPriceType.
var (
	EAutoStopProfitPriceType_name = map[int32]string{
		0: "ATSPP_Null",
		1: "ATSPP_Rival",
		2: "ATSPP_Over",
		3: "ATSPP_Market",
		4: "ATSPP_End",
	}
	EAutoStopProfitPriceType_value = map[string]int32{
		"ATSPP_Null":   0,
		"ATSPP_Rival":  1,
		"ATSPP_Over":   2,
		"ATSPP_Market": 3,
		"ATSPP_End":    4,
	}
)

func (x EAutoStopProfitPriceType) Enum() *EAutoStopProfitPriceType {
	p := new(EAutoStopProfitPriceType)
	*p = x
	return p
}

func (x EAutoStopProfitPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAutoStopProfitPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[66].Descriptor()
}

func (EAutoStopProfitPriceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[66]
}

func (x EAutoStopProfitPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAutoStopProfitPriceType.Descriptor instead.
func (EAutoStopProfitPriceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{66}
}

// 查询条件 类型   ： 1条件单 2止盈止损单
type EQryConOrderType int32

const (
	EQryConOrderType_QCOT_Null      EQryConOrderType = 0 //
	EQryConOrderType_QCOT_Condition EQryConOrderType = 1 //条件单
	EQryConOrderType_QCOT_Stop      EQryConOrderType = 2 //止盈止损单
	EQryConOrderType_QCOT_End       EQryConOrderType = 3 //结束值,方便校验有效性
)

// Enum value maps for EQryConOrderType.
var (
	EQryConOrderType_name = map[int32]string{
		0: "QCOT_Null",
		1: "QCOT_Condition",
		2: "QCOT_Stop",
		3: "QCOT_End",
	}
	EQryConOrderType_value = map[string]int32{
		"QCOT_Null":      0,
		"QCOT_Condition": 1,
		"QCOT_Stop":      2,
		"QCOT_End":       3,
	}
)

func (x EQryConOrderType) Enum() *EQryConOrderType {
	p := new(EQryConOrderType)
	*p = x
	return p
}

func (x EQryConOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQryConOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[67].Descriptor()
}

func (EQryConOrderType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[67]
}

func (x EQryConOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQryConOrderType.Descriptor instead.
func (EQryConOrderType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{67}
}

// 查询条件     触发状态：      1已触发 2未触发
type EQryConOrderStatusType int32

const (
	EQryConOrderStatusType_QCOST_Null        EQryConOrderStatusType = 0 //
	EQryConOrderStatusType_QCOST_Triggered   EQryConOrderStatusType = 1 //已触发
	EQryConOrderStatusType_QCOST_Untriggered EQryConOrderStatusType = 2 //未触发
	EQryConOrderStatusType_QCOST_End         EQryConOrderStatusType = 3 //结束值,方便校验有效性
)

// Enum value maps for EQryConOrderStatusType.
var (
	EQryConOrderStatusType_name = map[int32]string{
		0: "QCOST_Null",
		1: "QCOST_Triggered",
		2: "QCOST_Untriggered",
		3: "QCOST_End",
	}
	EQryConOrderStatusType_value = map[string]int32{
		"QCOST_Null":        0,
		"QCOST_Triggered":   1,
		"QCOST_Untriggered": 2,
		"QCOST_End":         3,
	}
)

func (x EQryConOrderStatusType) Enum() *EQryConOrderStatusType {
	p := new(EQryConOrderStatusType)
	*p = x
	return p
}

func (x EQryConOrderStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQryConOrderStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[68].Descriptor()
}

func (EQryConOrderStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[68]
}

func (x EQryConOrderStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQryConOrderStatusType.Descriptor instead.
func (EQryConOrderStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{68}
}

// 超价基准，是个价格类型    对手价、排队价、最新价
type EPlusPriceStandardType int32

const (
	EPlusPriceStandardType_PPST_Null  EPlusPriceStandardType = 0
	EPlusPriceStandardType_PPST_Last  EPlusPriceStandardType = 1 //最新价
	EPlusPriceStandardType_PPST_Queue EPlusPriceStandardType = 2 //排队价
	EPlusPriceStandardType_PPST_Rial  EPlusPriceStandardType = 3 //对手价
	EPlusPriceStandardType_PPST_End   EPlusPriceStandardType = 4 //结束值,方便校验有效性
)

// Enum value maps for EPlusPriceStandardType.
var (
	EPlusPriceStandardType_name = map[int32]string{
		0: "PPST_Null",
		1: "PPST_Last",
		2: "PPST_Queue",
		3: "PPST_Rial",
		4: "PPST_End",
	}
	EPlusPriceStandardType_value = map[string]int32{
		"PPST_Null":  0,
		"PPST_Last":  1,
		"PPST_Queue": 2,
		"PPST_Rial":  3,
		"PPST_End":   4,
	}
)

func (x EPlusPriceStandardType) Enum() *EPlusPriceStandardType {
	p := new(EPlusPriceStandardType)
	*p = x
	return p
}

func (x EPlusPriceStandardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlusPriceStandardType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[69].Descriptor()
}

func (EPlusPriceStandardType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[69]
}

func (x EPlusPriceStandardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPlusPriceStandardType.Descriptor instead.
func (EPlusPriceStandardType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{69}
}

// 触发状态 1.已触发   2.未触发
type EConditionOrderTriggerStatusType int32

const (
	EConditionOrderTriggerStatusType_COTST_Null        EConditionOrderTriggerStatusType = 0
	EConditionOrderTriggerStatusType_COTST_Triggered   EConditionOrderTriggerStatusType = 1 //已触发
	EConditionOrderTriggerStatusType_COTST_UnTriggered EConditionOrderTriggerStatusType = 2 //未触发
	EConditionOrderTriggerStatusType_COTST_End         EConditionOrderTriggerStatusType = 3 //结束值,方便校验有效性
)

// Enum value maps for EConditionOrderTriggerStatusType.
var (
	EConditionOrderTriggerStatusType_name = map[int32]string{
		0: "COTST_Null",
		1: "COTST_Triggered",
		2: "COTST_UnTriggered",
		3: "COTST_End",
	}
	EConditionOrderTriggerStatusType_value = map[string]int32{
		"COTST_Null":        0,
		"COTST_Triggered":   1,
		"COTST_UnTriggered": 2,
		"COTST_End":         3,
	}
)

func (x EConditionOrderTriggerStatusType) Enum() *EConditionOrderTriggerStatusType {
	p := new(EConditionOrderTriggerStatusType)
	*p = x
	return p
}

func (x EConditionOrderTriggerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConditionOrderTriggerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[70].Descriptor()
}

func (EConditionOrderTriggerStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[70]
}

func (x EConditionOrderTriggerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConditionOrderTriggerStatusType.Descriptor instead.
func (EConditionOrderTriggerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{70}
}

// 未触发列表里要显示的状态 1.运行  2.暂停 3.已删除
type EConditionOrderRunningStatusType int32

const (
	EConditionOrderRunningStatusType_CORST_Null    EConditionOrderRunningStatusType = 0
	EConditionOrderRunningStatusType_CORST_Running EConditionOrderRunningStatusType = 1 //运行
	EConditionOrderRunningStatusType_CORST_Paused  EConditionOrderRunningStatusType = 2 //暂停
	EConditionOrderRunningStatusType_CORST_Deleted EConditionOrderRunningStatusType = 3 //已删除
	EConditionOrderRunningStatusType_CORST_End     EConditionOrderRunningStatusType = 4 //结束值,方便校验有效性
)

// Enum value maps for EConditionOrderRunningStatusType.
var (
	EConditionOrderRunningStatusType_name = map[int32]string{
		0: "CORST_Null",
		1: "CORST_Running",
		2: "CORST_Paused",
		3: "CORST_Deleted",
		4: "CORST_End",
	}
	EConditionOrderRunningStatusType_value = map[string]int32{
		"CORST_Null":    0,
		"CORST_Running": 1,
		"CORST_Paused":  2,
		"CORST_Deleted": 3,
		"CORST_End":     4,
	}
)

func (x EConditionOrderRunningStatusType) Enum() *EConditionOrderRunningStatusType {
	p := new(EConditionOrderRunningStatusType)
	*p = x
	return p
}

func (x EConditionOrderRunningStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConditionOrderRunningStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[71].Descriptor()
}

func (EConditionOrderRunningStatusType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[71]
}

func (x EConditionOrderRunningStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConditionOrderRunningStatusType.Descriptor instead.
func (EConditionOrderRunningStatusType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{71}
}

// 已触发的委托结果 1.成功  2.失败3.部分成功
type EOrderResultType int32

const (
	EOrderResultType_ORT_NULL           EOrderResultType = 0
	EOrderResultType_ORT_Success        EOrderResultType = 1 //成功
	EOrderResultType_ORT_Fail           EOrderResultType = 2 //失败
	EOrderResultType_ORT_PartialSuccess EOrderResultType = 3 //部分成功
	EOrderResultType_ORT_End            EOrderResultType = 4 //结束值,方便校验有效性
)

// Enum value maps for EOrderResultType.
var (
	EOrderResultType_name = map[int32]string{
		0: "ORT_NULL",
		1: "ORT_Success",
		2: "ORT_Fail",
		3: "ORT_PartialSuccess",
		4: "ORT_End",
	}
	EOrderResultType_value = map[string]int32{
		"ORT_NULL":           0,
		"ORT_Success":        1,
		"ORT_Fail":           2,
		"ORT_PartialSuccess": 3,
		"ORT_End":            4,
	}
)

func (x EOrderResultType) Enum() *EOrderResultType {
	p := new(EOrderResultType)
	*p = x
	return p
}

func (x EOrderResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOrderResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[72].Descriptor()
}

func (EOrderResultType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[72]
}

func (x EOrderResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EOrderResultType.Descriptor instead.
func (EOrderResultType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{72}
}

// 云条件单有效期类型  1.当日有效 2.永久有效
type EConOrderValidityType int32

const (
	EConOrderValidityType_COVT_NULL    EConOrderValidityType = 0 //
	EConOrderValidityType_COVT_Today   EConOrderValidityType = 1 //1.当日有效
	EConOrderValidityType_COVT_Forever EConOrderValidityType = 2 //2.永久有效
	EConOrderValidityType_COVT_End     EConOrderValidityType = 3 //结束值,方便校验有效性
)

// Enum value maps for EConOrderValidityType.
var (
	EConOrderValidityType_name = map[int32]string{
		0: "COVT_NULL",
		1: "COVT_Today",
		2: "COVT_Forever",
		3: "COVT_End",
	}
	EConOrderValidityType_value = map[string]int32{
		"COVT_NULL":    0,
		"COVT_Today":   1,
		"COVT_Forever": 2,
		"COVT_End":     3,
	}
)

func (x EConOrderValidityType) Enum() *EConOrderValidityType {
	p := new(EConOrderValidityType)
	*p = x
	return p
}

func (x EConOrderValidityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConOrderValidityType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[73].Descriptor()
}

func (EConOrderValidityType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[73]
}

func (x EConOrderValidityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConOrderValidityType.Descriptor instead.
func (EConOrderValidityType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{73}
}

// 云条件单返回rtn的原因 1.新增操作 2.修改操作 3.暂停操作 4.启动操作 5.删除操作 6.触发通知 7.持仓为零删除止盈止损单
type EConRtnType int32

const (
	EConRtnType_CRT_NULL            EConRtnType = 0
	EConRtnType_CRT_Add             EConRtnType = 1 //新增
	EConRtnType_CRT_Update          EConRtnType = 2 //修改
	EConRtnType_CRT_Pause           EConRtnType = 3 //暂停
	EConRtnType_CRT_Start           EConRtnType = 4 //启动
	EConRtnType_CRT_Delete          EConRtnType = 5 //删除
	EConRtnType_CRT_Trigger         EConRtnType = 6 //触发
	EConRtnType_CRT_EmptyPosDelStop EConRtnType = 7 //持仓为零删除止盈止损单
	EConRtnType_CRT_End             EConRtnType = 8 //结束值
)

// Enum value maps for EConRtnType.
var (
	EConRtnType_name = map[int32]string{
		0: "CRT_NULL",
		1: "CRT_Add",
		2: "CRT_Update",
		3: "CRT_Pause",
		4: "CRT_Start",
		5: "CRT_Delete",
		6: "CRT_Trigger",
		7: "CRT_EmptyPosDelStop",
		8: "CRT_End",
	}
	EConRtnType_value = map[string]int32{
		"CRT_NULL":            0,
		"CRT_Add":             1,
		"CRT_Update":          2,
		"CRT_Pause":           3,
		"CRT_Start":           4,
		"CRT_Delete":          5,
		"CRT_Trigger":         6,
		"CRT_EmptyPosDelStop": 7,
		"CRT_End":             8,
	}
)

func (x EConRtnType) Enum() *EConRtnType {
	p := new(EConRtnType)
	*p = x
	return p
}

func (x EConRtnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConRtnType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[74].Descriptor()
}

func (EConRtnType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[74]
}

func (x EConRtnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConRtnType.Descriptor instead.
func (EConRtnType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{74}
}

// 云条件单已触发列表全部删除类型   1.已触发条件单 2.已触发止盈止损单
type EDeleteConOrderType int32

const (
	EDeleteConOrderType_DCOT_NULL               EDeleteConOrderType = 0
	EDeleteConOrderType_DCOT_TriggeredCondition EDeleteConOrderType = 1 //已触发条件单
	EDeleteConOrderType_DCOT_TriggeredStop      EDeleteConOrderType = 2 //已触发止盈止损单
	EDeleteConOrderType_DCOT_End                EDeleteConOrderType = 3 //结束值
)

// Enum value maps for EDeleteConOrderType.
var (
	EDeleteConOrderType_name = map[int32]string{
		0: "DCOT_NULL",
		1: "DCOT_TriggeredCondition",
		2: "DCOT_TriggeredStop",
		3: "DCOT_End",
	}
	EDeleteConOrderType_value = map[string]int32{
		"DCOT_NULL":               0,
		"DCOT_TriggeredCondition": 1,
		"DCOT_TriggeredStop":      2,
		"DCOT_End":                3,
	}
)

func (x EDeleteConOrderType) Enum() *EDeleteConOrderType {
	p := new(EDeleteConOrderType)
	*p = x
	return p
}

func (x EDeleteConOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDeleteConOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[75].Descriptor()
}

func (EDeleteConOrderType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[75]
}

func (x EDeleteConOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDeleteConOrderType.Descriptor instead.
func (EDeleteConOrderType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{75}
}

// 条件单记录类型
type EConOrderCacheType int32

const (
	EConOrderCacheType_COCT_NULL    EConOrderCacheType = 0
	EConOrderCacheType_COCT_COUNTER EConOrderCacheType = 1 //柜台条件单
	EConOrderCacheType_COCT_CLOUD   EConOrderCacheType = 2 //云条件单
	EConOrderCacheType_COCT_End     EConOrderCacheType = 3 //结束值
)

// Enum value maps for EConOrderCacheType.
var (
	EConOrderCacheType_name = map[int32]string{
		0: "COCT_NULL",
		1: "COCT_COUNTER",
		2: "COCT_CLOUD",
		3: "COCT_End",
	}
	EConOrderCacheType_value = map[string]int32{
		"COCT_NULL":    0,
		"COCT_COUNTER": 1,
		"COCT_CLOUD":   2,
		"COCT_End":     3,
	}
)

func (x EConOrderCacheType) Enum() *EConOrderCacheType {
	p := new(EConOrderCacheType)
	*p = x
	return p
}

func (x EConOrderCacheType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConOrderCacheType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[76].Descriptor()
}

func (EConOrderCacheType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[76]
}

func (x EConOrderCacheType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConOrderCacheType.Descriptor instead.
func (EConOrderCacheType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{76}
}

// /< 交易中继服务种类
type ETradeServiceType int32

const (
	ETradeServiceType_ETST_NULL                   ETradeServiceType = 0 ///< 开始标志
	ETradeServiceType_ETST_TPROXY                 ETradeServiceType = 1 ///< 交易代理
	ETradeServiceType_ETST_TRADE_SERVICE          ETradeServiceType = 2 ///< 交易中继
	ETradeServiceType_ETST_COND_ORDER_MGR         ETradeServiceType = 3 ///< 条件单管理
	ETradeServiceType_ETST_COND_ORDER_ARBITRATION ETradeServiceType = 4 ///< 条件单仲裁
	ETradeServiceType_ETST_COND_ORDER_QUEUE       ETradeServiceType = 5 ///< 条件单排队
	ETradeServiceType_ETST_COUNTER_AGENT          ETradeServiceType = 6 ///< 柜台接入
	ETradeServiceType_ETST_TRADE_OMP              ETradeServiceType = 7 ///< 交易运营管理平台
	ETradeServiceType_ETST_END                    ETradeServiceType = 8 ///< 结束标志
)

// Enum value maps for ETradeServiceType.
var (
	ETradeServiceType_name = map[int32]string{
		0: "ETST_NULL",
		1: "ETST_TPROXY",
		2: "ETST_TRADE_SERVICE",
		3: "ETST_COND_ORDER_MGR",
		4: "ETST_COND_ORDER_ARBITRATION",
		5: "ETST_COND_ORDER_QUEUE",
		6: "ETST_COUNTER_AGENT",
		7: "ETST_TRADE_OMP",
		8: "ETST_END",
	}
	ETradeServiceType_value = map[string]int32{
		"ETST_NULL":                   0,
		"ETST_TPROXY":                 1,
		"ETST_TRADE_SERVICE":          2,
		"ETST_COND_ORDER_MGR":         3,
		"ETST_COND_ORDER_ARBITRATION": 4,
		"ETST_COND_ORDER_QUEUE":       5,
		"ETST_COUNTER_AGENT":          6,
		"ETST_TRADE_OMP":              7,
		"ETST_END":                    8,
	}
)

func (x ETradeServiceType) Enum() *ETradeServiceType {
	p := new(ETradeServiceType)
	*p = x
	return p
}

func (x ETradeServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[77].Descriptor()
}

func (ETradeServiceType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[77]
}

func (x ETradeServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETradeServiceType.Descriptor instead.
func (ETradeServiceType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{77}
}

// /< 交易服务状态
type ETradeServiceStatus int32

const (
	ETradeServiceStatus_ETSS_NULL  ETradeServiceStatus = 0 ///< 开始标志
	ETradeServiceStatus_ETSS_Ready ETradeServiceStatus = 1 ///< 就绪
	ETradeServiceStatus_ETSS_PAUSE ETradeServiceStatus = 2 ///< 暂停
	ETradeServiceStatus_ETSS_STOP  ETradeServiceStatus = 3 ///< 结束
	ETradeServiceStatus_ETSS_END   ETradeServiceStatus = 4 ///< 结束标志
)

// Enum value maps for ETradeServiceStatus.
var (
	ETradeServiceStatus_name = map[int32]string{
		0: "ETSS_NULL",
		1: "ETSS_Ready",
		2: "ETSS_PAUSE",
		3: "ETSS_STOP",
		4: "ETSS_END",
	}
	ETradeServiceStatus_value = map[string]int32{
		"ETSS_NULL":  0,
		"ETSS_Ready": 1,
		"ETSS_PAUSE": 2,
		"ETSS_STOP":  3,
		"ETSS_END":   4,
	}
)

func (x ETradeServiceStatus) Enum() *ETradeServiceStatus {
	p := new(ETradeServiceStatus)
	*p = x
	return p
}

func (x ETradeServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[78].Descriptor()
}

func (ETradeServiceStatus) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[78]
}

func (x ETradeServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETradeServiceStatus.Descriptor instead.
func (ETradeServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{78}
}

// /< 连接状态(交易和行情)
type EConnectStatus int32

const (
	EConnectStatus_ECS_NULL       EConnectStatus = 0 ///< 未知
	EConnectStatus_ECS_Connecting EConnectStatus = 1 ///< 连接中
	EConnectStatus_ECS_Connected  EConnectStatus = 2 ///< 已连接
	EConnectStatus_ECS_Releasing  EConnectStatus = 3 ///< 连接释放中
	EConnectStatus_ECS_Released   EConnectStatus = 4 ///< 连接已释放
)

// Enum value maps for EConnectStatus.
var (
	EConnectStatus_name = map[int32]string{
		0: "ECS_NULL",
		1: "ECS_Connecting",
		2: "ECS_Connected",
		3: "ECS_Releasing",
		4: "ECS_Released",
	}
	EConnectStatus_value = map[string]int32{
		"ECS_NULL":       0,
		"ECS_Connecting": 1,
		"ECS_Connected":  2,
		"ECS_Releasing":  3,
		"ECS_Released":   4,
	}
)

func (x EConnectStatus) Enum() *EConnectStatus {
	p := new(EConnectStatus)
	*p = x
	return p
}

func (x EConnectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConnectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[79].Descriptor()
}

func (EConnectStatus) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[79]
}

func (x EConnectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EConnectStatus.Descriptor instead.
func (EConnectStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{79}
}

// /< 激活状态(行情)
type EActiveStatus int32

const (
	EActiveStatus_EAS_NULL         EActiveStatus = 0 ///< 未知
	EActiveStatus_EAS_Activating   EActiveStatus = 1 ///< 激活中
	EActiveStatus_EAS_Activated    EActiveStatus = 2 ///< 已激活
	EActiveStatus_EAS_Deactivating EActiveStatus = 3 ///< 取消激活中
	EActiveStatus_EAS_Deactivated  EActiveStatus = 4 ///< 未激活
)

// Enum value maps for EActiveStatus.
var (
	EActiveStatus_name = map[int32]string{
		0: "EAS_NULL",
		1: "EAS_Activating",
		2: "EAS_Activated",
		3: "EAS_Deactivating",
		4: "EAS_Deactivated",
	}
	EActiveStatus_value = map[string]int32{
		"EAS_NULL":         0,
		"EAS_Activating":   1,
		"EAS_Activated":    2,
		"EAS_Deactivating": 3,
		"EAS_Deactivated":  4,
	}
)

func (x EActiveStatus) Enum() *EActiveStatus {
	p := new(EActiveStatus)
	*p = x
	return p
}

func (x EActiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[80].Descriptor()
}

func (EActiveStatus) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[80]
}

func (x EActiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EActiveStatus.Descriptor instead.
func (EActiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{80}
}

// /< 组合指令方向类型
type ECombDirectionType int32

const (
	ECombDirectionType_ECDT_NULL   ECombDirectionType = 0 ///< 未知
	ECombDirectionType_ECDT_COMB   ECombDirectionType = 1 ///< 申请组合
	ECombDirectionType_ECDT_UNCOMB ECombDirectionType = 2 ///< 申请拆分
	ECombDirectionType_ECDT_END    ECombDirectionType = 3 ///< 结束标志
)

// Enum value maps for ECombDirectionType.
var (
	ECombDirectionType_name = map[int32]string{
		0: "ECDT_NULL",
		1: "ECDT_COMB",
		2: "ECDT_UNCOMB",
		3: "ECDT_END",
	}
	ECombDirectionType_value = map[string]int32{
		"ECDT_NULL":   0,
		"ECDT_COMB":   1,
		"ECDT_UNCOMB": 2,
		"ECDT_END":    3,
	}
)

func (x ECombDirectionType) Enum() *ECombDirectionType {
	p := new(ECombDirectionType)
	*p = x
	return p
}

func (x ECombDirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECombDirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[81].Descriptor()
}

func (ECombDirectionType) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[81]
}

func (x ECombDirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECombDirectionType.Descriptor instead.
func (ECombDirectionType) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{81}
}

// /< 风险产品结算状态
type ERiskSettleProductStatus int32

const (
	ERiskSettleProductStatus_ERSPS_NULL        ERiskSettleProductStatus = 0 ///< 未知
	ERiskSettleProductStatus_ERSPS_Tradeable   ERiskSettleProductStatus = 1 ///< 可交易
	ERiskSettleProductStatus_ERSPS_UNTradeable ERiskSettleProductStatus = 2 ///< 不可交易
	ERiskSettleProductStatus_ERSPS_END         ERiskSettleProductStatus = 3 ///< 结束标志
)

// Enum value maps for ERiskSettleProductStatus.
var (
	ERiskSettleProductStatus_name = map[int32]string{
		0: "ERSPS_NULL",
		1: "ERSPS_Tradeable",
		2: "ERSPS_UNTradeable",
		3: "ERSPS_END",
	}
	ERiskSettleProductStatus_value = map[string]int32{
		"ERSPS_NULL":        0,
		"ERSPS_Tradeable":   1,
		"ERSPS_UNTradeable": 2,
		"ERSPS_END":         3,
	}
)

func (x ERiskSettleProductStatus) Enum() *ERiskSettleProductStatus {
	p := new(ERiskSettleProductStatus)
	*p = x
	return p
}

func (x ERiskSettleProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERiskSettleProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fip_def_trade_proto_enumTypes[82].Descriptor()
}

func (ERiskSettleProductStatus) Type() protoreflect.EnumType {
	return &file_fip_def_trade_proto_enumTypes[82]
}

func (x ERiskSettleProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERiskSettleProductStatus.Descriptor instead.
func (ERiskSettleProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{82}
}

// / 同名用户唯一标示，同名用户登录时用frontId + sessionId做唯一标示
type SameUserKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontId   int32 `protobuf:"varint,1,opt,name=frontId,proto3" json:"frontId,omitempty"`     //  前置编号，目前xone都是0
	SessionId int64 `protobuf:"varint,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"` //  会话ID
}

func (x *SameUserKey) Reset() {
	*x = SameUserKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SameUserKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SameUserKey) ProtoMessage() {}

func (x *SameUserKey) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SameUserKey.ProtoReflect.Descriptor instead.
func (*SameUserKey) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{0}
}

func (x *SameUserKey) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *SameUserKey) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

// 各交易所时间结构
type ExchgTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DceTime  string `protobuf:"bytes,1,opt,name=dceTime,proto3" json:"dceTime,omitempty"`   // 大商所时间
	ShfeTime string `protobuf:"bytes,2,opt,name=shfeTime,proto3" json:"shfeTime,omitempty"` // 上期所时间
	CffeTime string `protobuf:"bytes,3,opt,name=cffeTime,proto3" json:"cffeTime,omitempty"` // 中金所时间
	CzceTime string `protobuf:"bytes,4,opt,name=czceTime,proto3" json:"czceTime,omitempty"` // 郑商所时间
	IneTime  string `protobuf:"bytes,5,opt,name=ineTime,proto3" json:"ineTime,omitempty"`   // 上能所时间
}

func (x *ExchgTime) Reset() {
	*x = ExchgTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchgTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchgTime) ProtoMessage() {}

func (x *ExchgTime) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchgTime.ProtoReflect.Descriptor instead.
func (*ExchgTime) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{1}
}

func (x *ExchgTime) GetDceTime() string {
	if x != nil {
		return x.DceTime
	}
	return ""
}

func (x *ExchgTime) GetShfeTime() string {
	if x != nil {
		return x.ShfeTime
	}
	return ""
}

func (x *ExchgTime) GetCffeTime() string {
	if x != nil {
		return x.CffeTime
	}
	return ""
}

func (x *ExchgTime) GetCzceTime() string {
	if x != nil {
		return x.CzceTime
	}
	return ""
}

func (x *ExchgTime) GetIneTime() string {
	if x != nil {
		return x.IneTime
	}
	return ""
}

type RspTradeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    int32  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`      // 请求id    返回请求的原值
	ErrorId      int32  `protobuf:"varint,2,opt,name=errorId,proto3" json:"errorId,omitempty"`          // errid    0成功 非0失败
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // 失败原因
	LocalPos     uint64 `protobuf:"varint,4,opt,name=localPos,proto3" json:"localPos,omitempty"`        // tproxy专用    N
}

func (x *RspTradeHead) Reset() {
	*x = RspTradeHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTradeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTradeHead) ProtoMessage() {}

func (x *RspTradeHead) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTradeHead.ProtoReflect.Descriptor instead.
func (*RspTradeHead) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{2}
}

func (x *RspTradeHead) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspTradeHead) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspTradeHead) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RspTradeHead) GetLocalPos() uint64 {
	if x != nil {
		return x.LocalPos
	}
	return 0
}

// 穿透式监管需要的信息
type RegisterAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CilentAppId            string `protobuf:"bytes,1,opt,name=cilentAppId,proto3" json:"cilentAppId,omitempty"`                        // 终端AppId
	CilentAuthCode         string `protobuf:"bytes,2,opt,name=cilentAuthCode,proto3" json:"cilentAuthCode,omitempty"`                  // 终端AuthCode
	SystemInfoLen          int32  `protobuf:"varint,3,opt,name=systemInfoLen,proto3" json:"systemInfoLen,omitempty"`                   // systemInfo的长度
	SystemInfo             string `protobuf:"bytes,4,opt,name=systemInfo,proto3" json:"systemInfo,omitempty"`                          // 穿透式监管需要的系统信息
	SystemInfoIntegrityLen int32  `protobuf:"varint,5,opt,name=systemInfoIntegrityLen,proto3" json:"systemInfoIntegrityLen,omitempty"` // systemInfoIntegrityLen的长度
	SystemInfoIntegrity    string `protobuf:"bytes,6,opt,name=systemInfoIntegrity,proto3" json:"systemInfoIntegrity,omitempty"`        // 信息采集完整度          hs
	AbnormalTypeLen        int32  `protobuf:"varint,7,opt,name=abnormalTypeLen,proto3" json:"abnormalTypeLen,omitempty"`               // abnormalType的长度
	AbnormalType           string `protobuf:"bytes,8,opt,name=abnormalType,proto3" json:"abnormalType,omitempty"`                      // 信息采集异常标示        hs
}

func (x *RegisterAuthInfo) Reset() {
	*x = RegisterAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthInfo) ProtoMessage() {}

func (x *RegisterAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthInfo.ProtoReflect.Descriptor instead.
func (*RegisterAuthInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterAuthInfo) GetCilentAppId() string {
	if x != nil {
		return x.CilentAppId
	}
	return ""
}

func (x *RegisterAuthInfo) GetCilentAuthCode() string {
	if x != nil {
		return x.CilentAuthCode
	}
	return ""
}

func (x *RegisterAuthInfo) GetSystemInfoLen() int32 {
	if x != nil {
		return x.SystemInfoLen
	}
	return 0
}

func (x *RegisterAuthInfo) GetSystemInfo() string {
	if x != nil {
		return x.SystemInfo
	}
	return ""
}

func (x *RegisterAuthInfo) GetSystemInfoIntegrityLen() int32 {
	if x != nil {
		return x.SystemInfoIntegrityLen
	}
	return 0
}

func (x *RegisterAuthInfo) GetSystemInfoIntegrity() string {
	if x != nil {
		return x.SystemInfoIntegrity
	}
	return ""
}

func (x *RegisterAuthInfo) GetAbnormalTypeLen() int32 {
	if x != nil {
		return x.AbnormalTypeLen
	}
	return 0
}

func (x *RegisterAuthInfo) GetAbnormalType() string {
	if x != nil {
		return x.AbnormalType
	}
	return ""
}

// 报单信息
// del brokerId经纪公司代码 timeCondition有效期类型 gtdDateGTD日期 volumnCondition成交量类型 minVolumn最小成交量 contingentCondition触发条件 stopPrice止损价
//
//	forceCloseReason强平原因 businessUnit业务单元（报单的席位） userForceClose用户强平标志 isSwapOrder互换单标志 investUnitId投资单元代码 isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效)
//	ipAddressIP地址 macAddressMac地址 accountId资金账户 orderPriceType报单类型(上期没有市价) currencyId币种代码(默认人民币) userId用户代码
type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId  string          `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                             // 合约代码         M
	InsertPrice float64         `protobuf:"fixed64,2,opt,name=insertPrice,proto3" json:"insertPrice,omitempty"`                         // 报单价格         M
	OrderVolumn uint64          `protobuf:"varint,3,opt,name=orderVolumn,proto3" json:"orderVolumn,omitempty"`                          // 报单数量         M
	Direction   EDirectionType  `protobuf:"varint,4,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`    // 买卖标志         M
	OffsetFlag  EOffsetFlagType `protobuf:"varint,5,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"` // 开平标志         M
	HedgeFlag   EHedgeFlagType  `protobuf:"varint,6,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`    // 投机套保标志     M
	OrderRef    int64           `protobuf:"varint,7,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                // 报单引用         NM 由客户端维护，递增
	ExchangeId  EExchgID        `protobuf:"varint,8,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`        // 交易所编码       NM def=自动匹配
	ClientId    string          `protobuf:"bytes,9,opt,name=clientId,proto3" json:"clientId,omitempty"`                                 // 交易编码         NM def=自动匹配
	InvestorId  string          `protobuf:"bytes,10,opt,name=investorId,proto3" json:"investorId,omitempty"`                            // 投资者代码       NM max(12) def=登录userid
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{4}
}

func (x *OrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OrderInfo) GetInsertPrice() float64 {
	if x != nil {
		return x.InsertPrice
	}
	return 0
}

func (x *OrderInfo) GetOrderVolumn() uint64 {
	if x != nil {
		return x.OrderVolumn
	}
	return 0
}

func (x *OrderInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *OrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *OrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *OrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *OrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *OrderInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// 报单操作信息
// del brokerId经纪公司代码 userId用户代码 volumnChange数量变化 investUnitId投资单元代码 ipAddress macAddress actionFlag操作标志(现在没有改单) limitPrice价格 userId用户代码
type OrderActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderActionRef int32        `protobuf:"varint,1,opt,name=orderActionRef,proto3" json:"orderActionRef,omitempty"`             // 报单操作引用     NM
	SameUserKey    *SameUserKey `protobuf:"bytes,2,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                    // 同名用户唯一标示 NM
	OrderRef       int64        `protobuf:"varint,3,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                         // 报单引用         NM
	OrderSysId     string       `protobuf:"bytes,4,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                      // 报单编号         NM
	ContractId     string       `protobuf:"bytes,5,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ExchangeId     EExchgID     `protobuf:"varint,6,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码       NM def=自动匹配
	InvestorId     string       `protobuf:"bytes,7,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码       NM max(12) def=登录userid
}

func (x *OrderActionInfo) Reset() {
	*x = OrderActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderActionInfo) ProtoMessage() {}

func (x *OrderActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderActionInfo.ProtoReflect.Descriptor instead.
func (*OrderActionInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{5}
}

func (x *OrderActionInfo) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *OrderActionInfo) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *OrderActionInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *OrderActionInfo) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *OrderActionInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OrderActionInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *OrderActionInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// 执行宣告信息
// del brokerId经纪公司代码 businessUnit业务单元(报单的席位) ReservePositionFlag(已经废弃) investUnitId投资单元代码 accountId资金账户 userId用户代码
//
//	currencyId币种代码 ipAddressIP地址 macAddressMac地址
type ExecOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId    string                  `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      // 合约代码
	OrderRef      int64                   `protobuf:"varint,2,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`                                         // 报单引用         由客户端维护，递增
	InvestorId    string                  `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      // 投资者代码
	Volumn        int32                   `protobuf:"varint,4,opt,name=volumn,proto3" json:"volumn,omitempty"`                                             // 数量
	OffsetFlag    EOffsetFlagType         `protobuf:"varint,5,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`          // 开平标志         M
	HedgeFlag     EHedgeFlagType          `protobuf:"varint,6,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投机套保标志     M
	ActionType    EActionTypeType         `protobuf:"varint,7,opt,name=actionType,proto3,enum=fippb.EActionTypeType" json:"actionType,omitempty"`          // 执行类型
	PosiDirection EPosiDirectionType      `protobuf:"varint,8,opt,name=posiDirection,proto3,enum=fippb.EPosiDirectionType" json:"posiDirection,omitempty"` // 持仓方向
	CloseFlag     EExexOrderCloseFlagType `protobuf:"varint,9,opt,name=closeFlag,proto3,enum=fippb.EExexOrderCloseFlagType" json:"closeFlag,omitempty"`    // 期权行权后生成的头寸是否自动平仓
	ExchangeId    EExchgID                `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                // 交易所代码       NM
	ClientId      string                  `protobuf:"bytes,11,opt,name=clientId,proto3" json:"clientId,omitempty"`                                         // 交易编码         NM def=自动匹配
}

func (x *ExecOrderInfo) Reset() {
	*x = ExecOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOrderInfo) ProtoMessage() {}

func (x *ExecOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOrderInfo.ProtoReflect.Descriptor instead.
func (*ExecOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{6}
}

func (x *ExecOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ExecOrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ExecOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ExecOrderInfo) GetVolumn() int32 {
	if x != nil {
		return x.Volumn
	}
	return 0
}

func (x *ExecOrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *ExecOrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ExecOrderInfo) GetActionType() EActionTypeType {
	if x != nil {
		return x.ActionType
	}
	return EActionTypeType_ACTP_Null
}

func (x *ExecOrderInfo) GetPosiDirection() EPosiDirectionType {
	if x != nil {
		return x.PosiDirection
	}
	return EPosiDirectionType_PD_Net
}

func (x *ExecOrderInfo) GetCloseFlag() EExexOrderCloseFlagType {
	if x != nil {
		return x.CloseFlag
	}
	return EExexOrderCloseFlagType_EOCF_AutoClose
}

func (x *ExecOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ExecOrderInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// 投资者结算结果确认信息
// del brokerId经纪公司代码 settlementId结算编号 accountId资金账户 currencyId币种代码
type SettlementInfoConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId  string `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`   // 投资者代码        NM max(12) def=登录userid
	ConfirmDate string `protobuf:"bytes,2,opt,name=confirmDate,proto3" json:"confirmDate,omitempty"` // 确认日期          NM def=自动匹配
	ConfirmTime string `protobuf:"bytes,3,opt,name=confirmTime,proto3" json:"confirmTime,omitempty"` // 确认时间          NM def=自动匹配
}

func (x *SettlementInfoConfirm) Reset() {
	*x = SettlementInfoConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementInfoConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementInfoConfirm) ProtoMessage() {}

func (x *SettlementInfoConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementInfoConfirm.ProtoReflect.Descriptor instead.
func (*SettlementInfoConfirm) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{7}
}

func (x *SettlementInfoConfirm) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *SettlementInfoConfirm) GetConfirmDate() string {
	if x != nil {
		return x.ConfirmDate
	}
	return ""
}

func (x *SettlementInfoConfirm) GetConfirmTime() string {
	if x != nil {
		return x.ConfirmTime
	}
	return ""
}

// 执行宣告操作信息
// del brokerId经纪公司代码 requestId请求编号 actionFlag操作标志(没有修改) userId用户代码 investUnitId投资单元代码 ipAddressIP地址 macAddressMac地址
type ExecOrderActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRef           int64           `protobuf:"varint,1,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`                                // 报单引用
	ExecOrderActionRef int64           `protobuf:"varint,2,opt,name=execOrderActionRef,proto3" json:"execOrderActionRef,omitempty"`            // 执行宣告操作引用
	InvestorId         string          `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                             // 投资者代码
	SameUserKey        *SameUserKey    `protobuf:"bytes,4,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                           // 同名用户唯一标示
	ExchangeId         EExchgID        `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`        // 交易所代码       NM
	ExecOrderSysId     string          `protobuf:"bytes,6,opt,name=execOrderSysId,proto3" json:"execOrderSysId,omitempty"`                     // 执行宣告操作编号
	ContractId         string          `protobuf:"bytes,7,opt,name=contractId,proto3" json:"contractId,omitempty"`                             // 合约代码
	ActionType         EActionTypeType `protobuf:"varint,8,opt,name=actionType,proto3,enum=fippb.EActionTypeType" json:"actionType,omitempty"` // 执行类型
}

func (x *ExecOrderActionInfo) Reset() {
	*x = ExecOrderActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOrderActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOrderActionInfo) ProtoMessage() {}

func (x *ExecOrderActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOrderActionInfo.ProtoReflect.Descriptor instead.
func (*ExecOrderActionInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{8}
}

func (x *ExecOrderActionInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ExecOrderActionInfo) GetExecOrderActionRef() int64 {
	if x != nil {
		return x.ExecOrderActionRef
	}
	return 0
}

func (x *ExecOrderActionInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ExecOrderActionInfo) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ExecOrderActionInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ExecOrderActionInfo) GetExecOrderSysId() string {
	if x != nil {
		return x.ExecOrderSysId
	}
	return ""
}

func (x *ExecOrderActionInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ExecOrderActionInfo) GetActionType() EActionTypeType {
	if x != nil {
		return x.ActionType
	}
	return EActionTypeType_ACTP_Null
}

// 委托信息
// del traderId交易所交易员代码 orderLocalId本地报单编号 brokerId经纪公司代码 forceCloseReason强平原因 businessUnit业务单元(报单的席位) installId安装编号（使用报盘机id）orderSource报单来源
//
//	suspendTime挂起时间(报单被挂起时间) activeTime激活时间(报单激活时间) participantId会员代码(经纪公司在交易所的代码) settlementId结算编号(交易所结算部给出的编号) clearingPartId结算会员编号(交易所结算部给出的结算会员编号)
//	isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效) sequenceNo序号(报单返回编号，目前不使用) timeCondition有效期类型 GTDDateGTD日期 volumeCondition成交量类型 minVolume最小成交量
//	contingentCondition触发条件 stopPrice止损价 exchangeContId合约在交易所的代码 tradingDay交易日 activeTraderId最后修改交易所交易员代码 branchId营业部编号 IPAddressIP地址 macAddressMac地址
//	notifySequence报单提示序号(未使用) orderPriceType报单价格条件 userId用户代码
type OrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId          string                 `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                                   //!合约代码
	OrderRef            int64                  `protobuf:"varint,2,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                                      //!报单引用
	Direction           EDirectionType         `protobuf:"varint,3,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`                          //!买卖方向
	OffsetFlag          EOffsetFlagType        `protobuf:"varint,4,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`                       // 开平标志
	HedgeFlag           EHedgeFlagType         `protobuf:"varint,5,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`                          // 投机套保标志
	LimitPrice          float64                `protobuf:"fixed64,6,opt,name=limitPrice,proto3" json:"limitPrice,omitempty"`                                                 //!价格
	VolumeTotalOriginal uint64                 `protobuf:"varint,7,opt,name=volumeTotalOriginal,proto3" json:"volumeTotalOriginal,omitempty"`                                //!数量
	ExchangeId          EExchgID               `protobuf:"varint,8,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                              //!交易所代码
	ClientId            string                 `protobuf:"bytes,9,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                       // 客户代码
	OrderSubmitStatus   EOrderSubmitStatusType `protobuf:"varint,10,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态
	OrderSysId          string                 `protobuf:"bytes,11,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号
	OrderStatus         EOrderStatusType       `protobuf:"varint,12,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   //!报单状态
	OrderType           EOrderTypeType         `protobuf:"varint,13,opt,name=orderType,proto3,enum=fippb.EOrderTypeType" json:"orderType,omitempty"`                         // 报单类型
	VolumeTraded        uint64                 `protobuf:"varint,14,opt,name=volumeTraded,proto3" json:"volumeTraded,omitempty"`                                             //!今成交数量
	VolumeTotal         uint64                 `protobuf:"varint,15,opt,name=volumeTotal,proto3" json:"volumeTotal,omitempty"`                                               // 剩余数量
	InsertDate          string                 `protobuf:"bytes,16,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期
	InsertTime          string                 `protobuf:"bytes,17,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  //!委托时间
	UpdateTime          string                 `protobuf:"bytes,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                  // 最后修改时间
	CancelTime          string                 `protobuf:"bytes,19,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  //!撤销时间
	InvestorId          string                 `protobuf:"bytes,20,opt,name=investorId,proto3" json:"investorId,omitempty"`                                                  // 投资者代码
	SameUserKey         *SameUserKey           `protobuf:"bytes,21,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示
	ActionType          EActionTypeType        `protobuf:"varint,22,opt,name=actionType,proto3,enum=fippb.EActionTypeType" json:"actionType,omitempty"`                      // 执行类型，期权执行标志，只有xone可用
	StatusMsg           string                 `protobuf:"bytes,23,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息
	RelativeOrderSysId  string                 `protobuf:"bytes,24,opt,name=relativeOrderSysId,proto3" json:"relativeOrderSysId,omitempty"`                                  // 相关报单编号
	ActiveTime          string                 `protobuf:"bytes,25,opt,name=activeTime,proto3" json:"activeTime,omitempty"`                                                  //! 止盈止损单触发时间
	OrderPriceType      EOrderPriceType        `protobuf:"varint,26,opt,name=orderPriceType,proto3,enum=fippb.EOrderPriceType" json:"orderPriceType,omitempty"`              // 委托价格类型
}

func (x *OrderDetail) Reset() {
	*x = OrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetail) ProtoMessage() {}

func (x *OrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetail.ProtoReflect.Descriptor instead.
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{9}
}

func (x *OrderDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OrderDetail) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *OrderDetail) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *OrderDetail) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *OrderDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *OrderDetail) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *OrderDetail) GetVolumeTotalOriginal() uint64 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *OrderDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *OrderDetail) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OrderDetail) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *OrderDetail) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *OrderDetail) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *OrderDetail) GetOrderType() EOrderTypeType {
	if x != nil {
		return x.OrderType
	}
	return EOrderTypeType_ORDT_Normal
}

func (x *OrderDetail) GetVolumeTraded() uint64 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *OrderDetail) GetVolumeTotal() uint64 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *OrderDetail) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *OrderDetail) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *OrderDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OrderDetail) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *OrderDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *OrderDetail) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *OrderDetail) GetActionType() EActionTypeType {
	if x != nil {
		return x.ActionType
	}
	return EActionTypeType_ACTP_Null
}

func (x *OrderDetail) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OrderDetail) GetRelativeOrderSysId() string {
	if x != nil {
		return x.RelativeOrderSysId
	}
	return ""
}

func (x *OrderDetail) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *OrderDetail) GetOrderPriceType() EOrderPriceType {
	if x != nil {
		return x.OrderPriceType
	}
	return EOrderPriceType_EOPT_Null
}

// 持仓信息
// del brokerId经纪公司代码 settlementId结算编号(交易所结算部给出的编号)
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         string             `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      //!合约代码
	InvestorId         string             `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      // 投资者代码
	PosiDirection      EPosiDirectionType `protobuf:"varint,3,opt,name=posiDirection,proto3,enum=fippb.EPosiDirectionType" json:"posiDirection,omitempty"` //!持仓方向
	HedgeFlag          EHedgeFlagType     `protobuf:"varint,4,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投机套保类型
	PositionDate       EPositionDataType  `protobuf:"varint,5,opt,name=positionDate,proto3,enum=fippb.EPositionDataType" json:"positionDate,omitempty"`    // 持仓日期类型
	PositionVolumn     uint64             `protobuf:"varint,6,opt,name=positionVolumn,proto3" json:"positionVolumn,omitempty"`                             //!持仓量   ctp  position
	TotalAvaiVolumn    uint64             `protobuf:"varint,7,opt,name=totalAvaiVolumn,proto3" json:"totalAvaiVolumn,omitempty"`                           //!总可用   ctp  position - frozen
	TodayAvaiVolumn    uint64             `protobuf:"varint,8,opt,name=todayAvaiVolumn,proto3" json:"todayAvaiVolumn,omitempty"`                           //!今可用   ctp  0   position - frozen
	YestodayAvaiVolumn uint64             `protobuf:"varint,9,opt,name=yestodayAvaiVolumn,proto3" json:"yestodayAvaiVolumn,omitempty"`                     // 昨可用   ctp  0   position - frozen
	TodayVolumn        uint64             `protobuf:"varint,10,opt,name=todayVolumn,proto3" json:"todayVolumn,omitempty"`                                  // 今仓
	YestodayVolumn     uint64             `protobuf:"varint,11,opt,name=yestodayVolumn,proto3" json:"yestodayVolumn,omitempty"`                            // 昨仓
	OpenVolume         uint64             `protobuf:"varint,12,opt,name=openVolume,proto3" json:"openVolume,omitempty"`                                    //!开仓量
	CloseVolume        uint64             `protobuf:"varint,13,opt,name=closeVolume,proto3" json:"closeVolume,omitempty"`                                  // 平仓量
	OpenAmount         float64            `protobuf:"fixed64,14,opt,name=openAmount,proto3" json:"openAmount,omitempty"`                                   // 开仓金额
	CloseAmount        float64            `protobuf:"fixed64,15,opt,name=closeAmount,proto3" json:"closeAmount,omitempty"`                                 // 平仓金额
	PositionCost       float64            `protobuf:"fixed64,16,opt,name=positionCost,proto3" json:"positionCost,omitempty"`                               //!持仓成本      持仓均价=持仓成本/(持仓*合约乘数)   ctp提供，x1直接使用持仓均价
	PreMargin          float64            `protobuf:"fixed64,17,opt,name=preMargin,proto3" json:"preMargin,omitempty"`                                     // 上次占用的保证金
	UseMargin          float64            `protobuf:"fixed64,18,opt,name=useMargin,proto3" json:"useMargin,omitempty"`                                     // 占用的保证金
	FrozenMargin       float64            `protobuf:"fixed64,19,opt,name=frozenMargin,proto3" json:"frozenMargin,omitempty"`                               // 冻结的保证金
	FrozenCash         float64            `protobuf:"fixed64,20,opt,name=frozenCash,proto3" json:"frozenCash,omitempty"`                                   // 冻结的资金
	FrozenCommission   float64            `protobuf:"fixed64,21,opt,name=frozenCommission,proto3" json:"frozenCommission,omitempty"`                       // 冻结的手续费
	CashIn             float64            `protobuf:"fixed64,22,opt,name=cashIn,proto3" json:"cashIn,omitempty"`                                           // 资金差额
	Commission         float64            `protobuf:"fixed64,23,opt,name=commission,proto3" json:"commission,omitempty"`                                   // 手续费
	CloseProfit        float64            `protobuf:"fixed64,24,opt,name=closeProfit,proto3" json:"closeProfit,omitempty"`                                 // 平仓盈亏
	PositionProfit     float64            `protobuf:"fixed64,25,opt,name=positionProfit,proto3" json:"positionProfit,omitempty"`                           //!持仓盈亏(浮动盈亏)
	PreSettlementPrice float64            `protobuf:"fixed64,26,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`                   // 上次结算价
	SettlementPrice    float64            `protobuf:"fixed64,27,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`                         // 本次结算价
	TradingDay         string             `protobuf:"bytes,28,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                                     // 交易日
	OpenCost           float64            `protobuf:"fixed64,29,opt,name=openCost,proto3" json:"openCost,omitempty"`                                       //!开仓成本      开仓均价=开创成本/(开仓量*合约乘数) ctp提供，x1直接使用开仓均价
	ExchangeMargin     float64            `protobuf:"fixed64,30,opt,name=exchangeMargin,proto3" json:"exchangeMargin,omitempty"`                           // 交易所保证金
	CombPosition       uint64             `protobuf:"varint,31,opt,name=combPosition,proto3" json:"combPosition,omitempty"`                                // 组合成交形成的持仓
	CombLongFrozen     uint64             `protobuf:"varint,32,opt,name=combLongFrozen,proto3" json:"combLongFrozen,omitempty"`                            // 组合多头冻结
	CombShortFrozen    uint64             `protobuf:"varint,33,opt,name=combShortFrozen,proto3" json:"combShortFrozen,omitempty"`                          // 组合空头冻结
	CloseProfitByDate  float64            `protobuf:"fixed64,34,opt,name=closeProfitByDate,proto3" json:"closeProfitByDate,omitempty"`                     // 逐日盯市平仓盈亏
	CloseProfitByTrade float64            `protobuf:"fixed64,35,opt,name=closeProfitByTrade,proto3" json:"closeProfitByTrade,omitempty"`                   // 逐笔对冲平仓盈亏
	MarginRateByMoney  float64            `protobuf:"fixed64,36,opt,name=marginRateByMoney,proto3" json:"marginRateByMoney,omitempty"`                     // 保证金率
	MarginRateByVolume float64            `protobuf:"fixed64,37,opt,name=marginRateByVolume,proto3" json:"marginRateByVolume,omitempty"`                   // 保证金率(按手数)
	StrikeFrozen       uint64             `protobuf:"varint,38,opt,name=strikeFrozen,proto3" json:"strikeFrozen,omitempty"`                                // 执行冻结
	StrikeFrozenAmount float64            `protobuf:"fixed64,39,opt,name=strikeFrozenAmount,proto3" json:"strikeFrozenAmount,omitempty"`                   // 执行冻结金额
	AbandonFrozen      uint64             `protobuf:"varint,40,opt,name=abandonFrozen,proto3" json:"abandonFrozen,omitempty"`                              // 放弃执行冻结
	ExchangeId         EExchgID           `protobuf:"varint,41,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                //!交易所代码
	YdStrikeFrozen     uint64             `protobuf:"varint,42,opt,name=ydStrikeFrozen,proto3" json:"ydStrikeFrozen,omitempty"`                            // 执行冻结的昨仓
	InvestUnitId       string             `protobuf:"bytes,43,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                                 // 投资单元代码
	OpenAvgPrice       float64            `protobuf:"fixed64,44,opt,name=openAvgPrice,proto3" json:"openAvgPrice,omitempty"`                               //!开仓均价 x1提供 ctp需要计算，见上
	PositionAvgPrice   float64            `protobuf:"fixed64,45,opt,name=positionAvgPrice,proto3" json:"positionAvgPrice,omitempty"`                       //!持仓均价 x1提供 ctp需要计算，见上
	SeqNo              uint64             `protobuf:"varint,46,opt,name=seqNo,proto3" json:"seqNo,omitempty"`                                              // 持仓返回结果序列号
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{10}
}

func (x *Position) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *Position) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *Position) GetPosiDirection() EPosiDirectionType {
	if x != nil {
		return x.PosiDirection
	}
	return EPosiDirectionType_PD_Net
}

func (x *Position) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *Position) GetPositionDate() EPositionDataType {
	if x != nil {
		return x.PositionDate
	}
	return EPositionDataType_PSD_Today
}

func (x *Position) GetPositionVolumn() uint64 {
	if x != nil {
		return x.PositionVolumn
	}
	return 0
}

func (x *Position) GetTotalAvaiVolumn() uint64 {
	if x != nil {
		return x.TotalAvaiVolumn
	}
	return 0
}

func (x *Position) GetTodayAvaiVolumn() uint64 {
	if x != nil {
		return x.TodayAvaiVolumn
	}
	return 0
}

func (x *Position) GetYestodayAvaiVolumn() uint64 {
	if x != nil {
		return x.YestodayAvaiVolumn
	}
	return 0
}

func (x *Position) GetTodayVolumn() uint64 {
	if x != nil {
		return x.TodayVolumn
	}
	return 0
}

func (x *Position) GetYestodayVolumn() uint64 {
	if x != nil {
		return x.YestodayVolumn
	}
	return 0
}

func (x *Position) GetOpenVolume() uint64 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *Position) GetCloseVolume() uint64 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *Position) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *Position) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *Position) GetPositionCost() float64 {
	if x != nil {
		return x.PositionCost
	}
	return 0
}

func (x *Position) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *Position) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *Position) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *Position) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *Position) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *Position) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *Position) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Position) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *Position) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *Position) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Position) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *Position) GetOpenCost() float64 {
	if x != nil {
		return x.OpenCost
	}
	return 0
}

func (x *Position) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *Position) GetCombPosition() uint64 {
	if x != nil {
		return x.CombPosition
	}
	return 0
}

func (x *Position) GetCombLongFrozen() uint64 {
	if x != nil {
		return x.CombLongFrozen
	}
	return 0
}

func (x *Position) GetCombShortFrozen() uint64 {
	if x != nil {
		return x.CombShortFrozen
	}
	return 0
}

func (x *Position) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *Position) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *Position) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *Position) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *Position) GetStrikeFrozen() uint64 {
	if x != nil {
		return x.StrikeFrozen
	}
	return 0
}

func (x *Position) GetStrikeFrozenAmount() float64 {
	if x != nil {
		return x.StrikeFrozenAmount
	}
	return 0
}

func (x *Position) GetAbandonFrozen() uint64 {
	if x != nil {
		return x.AbandonFrozen
	}
	return 0
}

func (x *Position) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *Position) GetYdStrikeFrozen() uint64 {
	if x != nil {
		return x.YdStrikeFrozen
	}
	return 0
}

func (x *Position) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *Position) GetOpenAvgPrice() float64 {
	if x != nil {
		return x.OpenAvgPrice
	}
	return 0
}

func (x *Position) GetPositionAvgPrice() float64 {
	if x != nil {
		return x.PositionAvgPrice
	}
	return 0
}

func (x *Position) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

// 风险持仓信息
type RiskPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId          string             `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      // 投资者代码
	ExchangeId          EExchgID           `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                 // 交易所代码
	ContractId          string             `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      // 合约代码
	PosiDirection       EPosiDirectionType `protobuf:"varint,4,opt,name=posiDirection,proto3,enum=fippb.EPosiDirectionType" json:"posiDirection,omitempty"` // 持仓方向
	HedgeFlag           EHedgeFlagType     `protobuf:"varint,5,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投机套保类型
	PositionDate        EPositionDataType  `protobuf:"varint,6,opt,name=positionDate,proto3,enum=fippb.EPositionDataType" json:"positionDate,omitempty"`    // 持仓日期类型
	TotalPositionVolumn uint64             `protobuf:"varint,7,opt,name=totalPositionVolumn,proto3" json:"totalPositionVolumn,omitempty"`                   // 总持仓量
	PositionAvaiVolumn  uint64             `protobuf:"varint,8,opt,name=positionAvaiVolumn,proto3" json:"positionAvaiVolumn,omitempty"`                     // 持仓可用量
}

func (x *RiskPosition) Reset() {
	*x = RiskPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskPosition) ProtoMessage() {}

func (x *RiskPosition) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskPosition.ProtoReflect.Descriptor instead.
func (*RiskPosition) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{11}
}

func (x *RiskPosition) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *RiskPosition) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *RiskPosition) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *RiskPosition) GetPosiDirection() EPosiDirectionType {
	if x != nil {
		return x.PosiDirection
	}
	return EPosiDirectionType_PD_Net
}

func (x *RiskPosition) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *RiskPosition) GetPositionDate() EPositionDataType {
	if x != nil {
		return x.PositionDate
	}
	return EPositionDataType_PSD_Today
}

func (x *RiskPosition) GetTotalPositionVolumn() uint64 {
	if x != nil {
		return x.TotalPositionVolumn
	}
	return 0
}

func (x *RiskPosition) GetPositionAvaiVolumn() uint64 {
	if x != nil {
		return x.PositionAvaiVolumn
	}
	return 0
}

// 投资者信息 del brokerId经纪公司代码
type InvestorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId       string          `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                             // 投资者代码
	InvestorGroupId  string          `protobuf:"bytes,2,opt,name=investorGroupId,proto3" json:"investorGroupId,omitempty"`                   // 投资者分组代码
	InvestorName     string          `protobuf:"bytes,3,opt,name=investorName,proto3" json:"investorName,omitempty"`                         // 投资者名称
	IdCardType       EIdCardTypeType `protobuf:"varint,4,opt,name=idCardType,proto3,enum=fippb.EIdCardTypeType" json:"idCardType,omitempty"` // 证件类型
	IdentifiedCardNo string          `protobuf:"bytes,5,opt,name=identifiedCardNo,proto3" json:"identifiedCardNo,omitempty"`                 // 证件号码
	IsActive         int32           `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`                                // 是否活跃
	Telephone        string          `protobuf:"bytes,7,opt,name=telephone,proto3" json:"telephone,omitempty"`                               // 联系电话
	Address          string          `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`                                   // 联系地址
	OpenDate         string          `protobuf:"bytes,9,opt,name=openDate,proto3" json:"openDate,omitempty"`                                 // 开户日期
	Mobile           string          `protobuf:"bytes,10,opt,name=mobile,proto3" json:"mobile,omitempty"`                                    // 手机
	CommModelId      string          `protobuf:"bytes,11,opt,name=commModelId,proto3" json:"commModelId,omitempty"`                          // 续费率模板代码
	MarginModelId    string          `protobuf:"bytes,12,opt,name=marginModelId,proto3" json:"marginModelId,omitempty"`                      // 保证金率模板代码
}

func (x *InvestorInfo) Reset() {
	*x = InvestorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestorInfo) ProtoMessage() {}

func (x *InvestorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestorInfo.ProtoReflect.Descriptor instead.
func (*InvestorInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{12}
}

func (x *InvestorInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *InvestorInfo) GetInvestorGroupId() string {
	if x != nil {
		return x.InvestorGroupId
	}
	return ""
}

func (x *InvestorInfo) GetInvestorName() string {
	if x != nil {
		return x.InvestorName
	}
	return ""
}

func (x *InvestorInfo) GetIdCardType() EIdCardTypeType {
	if x != nil {
		return x.IdCardType
	}
	return EIdCardTypeType_EICT_Null
}

func (x *InvestorInfo) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *InvestorInfo) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *InvestorInfo) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *InvestorInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InvestorInfo) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *InvestorInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *InvestorInfo) GetCommModelId() string {
	if x != nil {
		return x.CommModelId
	}
	return ""
}

func (x *InvestorInfo) GetMarginModelId() string {
	if x != nil {
		return x.MarginModelId
	}
	return ""
}

// del settlementId结算编号(交易所结算部给出的编号) brokerId经纪公司代码 investUnitId投资单元代码
type PositionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId            string         `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                           // 合约代码
	InvestorId            string         `protobuf:"bytes,2,opt,name=investorId,proto3" json:"investorId,omitempty"`                           // 投资者代码
	HedgeFlag             EHedgeFlagType `protobuf:"varint,3,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`  // 投机套保类型
	Direction             EDirectionType `protobuf:"varint,4,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`  // 买卖
	OpenDate              string         `protobuf:"bytes,5,opt,name=openDate,proto3" json:"openDate,omitempty"`                               // 开仓日期
	Trade                 string         `protobuf:"bytes,6,opt,name=trade,proto3" json:"trade,omitempty"`                                     // 成交编号Id
	Volume                uint64         `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`                                  // 数量
	OpenPrice             float64        `protobuf:"fixed64,8,opt,name=openPrice,proto3" json:"openPrice,omitempty"`                           // 开仓价
	TradingDay            string         `protobuf:"bytes,9,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                           // 交易日
	TradeType             ETradeTypeType `protobuf:"varint,10,opt,name=tradeType,proto3,enum=fippb.ETradeTypeType" json:"tradeType,omitempty"` // 成交类型
	CombContractId        string         `protobuf:"bytes,11,opt,name=combContractId,proto3" json:"combContractId,omitempty"`                  // 组合合约代码
	ExchangeId            EExchgID       `protobuf:"varint,12,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`     // 交易所代码
	CloseProfitByDate     float64        `protobuf:"fixed64,13,opt,name=closeProfitByDate,proto3" json:"closeProfitByDate,omitempty"`          // 逐日盯市平仓盈亏
	CloseProfitByTrade    float64        `protobuf:"fixed64,14,opt,name=closeProfitByTrade,proto3" json:"closeProfitByTrade,omitempty"`        // 逐笔对冲平仓盈亏
	PositionProfitByDate  float64        `protobuf:"fixed64,15,opt,name=positionProfitByDate,proto3" json:"positionProfitByDate,omitempty"`    // 逐日盯市持仓盈亏
	PositionProfitByTrade float64        `protobuf:"fixed64,16,opt,name=positionProfitByTrade,proto3" json:"positionProfitByTrade,omitempty"`  // 逐笔对冲持仓盈亏
	Margin                float64        `protobuf:"fixed64,17,opt,name=margin,proto3" json:"margin,omitempty"`                                // 投资者保证金
	ExchMargin            float64        `protobuf:"fixed64,18,opt,name=exchMargin,proto3" json:"exchMargin,omitempty"`                        // 交易所保证金
	MarginRateByMoney     float64        `protobuf:"fixed64,19,opt,name=marginRateByMoney,proto3" json:"marginRateByMoney,omitempty"`          // 保证金率
	MarginRateByVolume    float64        `protobuf:"fixed64,20,opt,name=marginRateByVolume,proto3" json:"marginRateByVolume,omitempty"`        // 保证金率(按手数)
	LastSettlementPrice   float64        `protobuf:"fixed64,21,opt,name=lastSettlementPrice,proto3" json:"lastSettlementPrice,omitempty"`      // 昨结算价
	SettlementPrice       float64        `protobuf:"fixed64,22,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`              // 结算价
	CloseVolume           uint64         `protobuf:"varint,23,opt,name=closeVolume,proto3" json:"closeVolume,omitempty"`                       // 平仓量
	CloseAmount           float64        `protobuf:"fixed64,24,opt,name=closeAmount,proto3" json:"closeAmount,omitempty"`                      // 平仓金额
	InvestUnitId          string         `protobuf:"bytes,25,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                      // 投资单元代码
}

func (x *PositionDetail) Reset() {
	*x = PositionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionDetail) ProtoMessage() {}

func (x *PositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionDetail.ProtoReflect.Descriptor instead.
func (*PositionDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{13}
}

func (x *PositionDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *PositionDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *PositionDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *PositionDetail) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *PositionDetail) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *PositionDetail) GetTrade() string {
	if x != nil {
		return x.Trade
	}
	return ""
}

func (x *PositionDetail) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PositionDetail) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *PositionDetail) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *PositionDetail) GetTradeType() ETradeTypeType {
	if x != nil {
		return x.TradeType
	}
	return ETradeTypeType_TRDT_SplitCombination
}

func (x *PositionDetail) GetCombContractId() string {
	if x != nil {
		return x.CombContractId
	}
	return ""
}

func (x *PositionDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *PositionDetail) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *PositionDetail) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *PositionDetail) GetPositionProfitByDate() float64 {
	if x != nil {
		return x.PositionProfitByDate
	}
	return 0
}

func (x *PositionDetail) GetPositionProfitByTrade() float64 {
	if x != nil {
		return x.PositionProfitByTrade
	}
	return 0
}

func (x *PositionDetail) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *PositionDetail) GetExchMargin() float64 {
	if x != nil {
		return x.ExchMargin
	}
	return 0
}

func (x *PositionDetail) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *PositionDetail) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *PositionDetail) GetLastSettlementPrice() float64 {
	if x != nil {
		return x.LastSettlementPrice
	}
	return 0
}

func (x *PositionDetail) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *PositionDetail) GetCloseVolume() uint64 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *PositionDetail) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *PositionDetail) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

// 成交明细
// del traderId交易所交易员代码 orderLocalId本地报单编号 brokerId经纪公司代码 brokerOrderSeq经纪公司报单编号 tradingRole交易角色 businessUnit业务单元(报单的席位) participantId会员代码(经纪公司在交易所的代码)
//
//	settlementId结算编号(交易所结算部给出的编号) clearingPartId结算会员编号(交易所结算部给出的结算会员编号) sequenceNo序号(报单返回编号，目前不使用)(不能做唯一标示)
//	exchangeContId合约在交易所的代码 tradingDay交易日 tradeSource成交来源 investUnitId投资单元代码 userId用户代码
type MatchInfoDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId  string           `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                 // 投资者代码
	ContractId  string           `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                 //!合约代码
	ExchangeId  EExchgID         `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`            //!交易所编码
	TradeId     string           `protobuf:"bytes,4,opt,name=tradeId,proto3" json:"tradeId,omitempty"`                                       //!成交编号
	Direction   EDirectionType   `protobuf:"varint,5,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`        //!买卖方向
	OrderSysId  string           `protobuf:"bytes,6,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                 // 报单编号
	ClientId    string           `protobuf:"bytes,7,opt,name=clientId,proto3" json:"clientId,omitempty"`                                     // 客户代码
	OffsetFlag  EOffsetFlagType  `protobuf:"varint,8,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`     //!开平标志
	HedgeFlag   EHedgeFlagType   `protobuf:"varint,9,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`        // 投机套保标志
	Price       float64          `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`                                        //!价格
	Volume      uint64           `protobuf:"varint,11,opt,name=volume,proto3" json:"volume,omitempty"`                                       //!数量
	TradeDate   string           `protobuf:"bytes,12,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                  // 成交时期
	TradeTime   string           `protobuf:"bytes,13,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                                  //!成交时间
	TradeType   ETradeTypeType   `protobuf:"varint,14,opt,name=tradeType,proto3,enum=fippb.ETradeTypeType" json:"tradeType,omitempty"`       // 成交类型
	PriceSource EPriceSourceType `protobuf:"varint,15,opt,name=priceSource,proto3,enum=fippb.EPriceSourceType" json:"priceSource,omitempty"` // 成交价来源
	OrderRef    uint64           `protobuf:"varint,16,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                   //报单引用
}

func (x *MatchInfoDetail) Reset() {
	*x = MatchInfoDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfoDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoDetail) ProtoMessage() {}

func (x *MatchInfoDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoDetail.ProtoReflect.Descriptor instead.
func (*MatchInfoDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{14}
}

func (x *MatchInfoDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *MatchInfoDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *MatchInfoDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *MatchInfoDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *MatchInfoDetail) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *MatchInfoDetail) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *MatchInfoDetail) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MatchInfoDetail) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *MatchInfoDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *MatchInfoDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MatchInfoDetail) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MatchInfoDetail) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MatchInfoDetail) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *MatchInfoDetail) GetTradeType() ETradeTypeType {
	if x != nil {
		return x.TradeType
	}
	return ETradeTypeType_TRDT_SplitCombination
}

func (x *MatchInfoDetail) GetPriceSource() EPriceSourceType {
	if x != nil {
		return x.PriceSource
	}
	return EPriceSourceType_PSRC_LastPrice
}

func (x *MatchInfoDetail) GetOrderRef() uint64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

// 交易所合约信息
type ContractDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId             string                      `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                                                  //!合约代码
	ExchangeId             EExchgID                    `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                                             //!交易所代码
	ContractName           string                      `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`                                                              //!合约名称
	ExchangeContId         string                      `protobuf:"bytes,4,opt,name=exchangeContId,proto3" json:"exchangeContId,omitempty"`                                                          // 合约在交易所的代码
	ProductId              string                      `protobuf:"bytes,5,opt,name=productId,proto3" json:"productId,omitempty"`                                                                    // 产品代码
	ProductClass           EProductClassType           `protobuf:"varint,6,opt,name=productClass,proto3,enum=fippb.EProductClassType" json:"productClass,omitempty"`                                //!产品类型
	DeliveryYear           int32                       `protobuf:"varint,7,opt,name=deliveryYear,proto3" json:"deliveryYear,omitempty"`                                                             // 交割年份
	DeliveryMonth          int32                       `protobuf:"varint,8,opt,name=deliveryMonth,proto3" json:"deliveryMonth,omitempty"`                                                           // 交割月
	MaxMarketOrderVolume   uint64                      `protobuf:"varint,9,opt,name=maxMarketOrderVolume,proto3" json:"maxMarketOrderVolume,omitempty"`                                             // 市价单最大下单量
	MinMarketOrderVolume   uint64                      `protobuf:"varint,10,opt,name=minMarketOrderVolume,proto3" json:"minMarketOrderVolume,omitempty"`                                            // 市价单最小下单量
	MaxLimitOrderVolume    uint64                      `protobuf:"varint,11,opt,name=maxLimitOrderVolume,proto3" json:"maxLimitOrderVolume,omitempty"`                                              // 限价单最大下单量
	MinLimitOrderVolume    uint64                      `protobuf:"varint,12,opt,name=minLimitOrderVolume,proto3" json:"minLimitOrderVolume,omitempty"`                                              // 限价单最小下单量
	VolumeMultiple         int32                       `protobuf:"varint,13,opt,name=volumeMultiple,proto3" json:"volumeMultiple,omitempty"`                                                        //!合约数量乘数
	PriceTick              float64                     `protobuf:"fixed64,14,opt,name=priceTick,proto3" json:"priceTick,omitempty"`                                                                 //!最小变动价位
	CreateDate             string                      `protobuf:"bytes,15,opt,name=createDate,proto3" json:"createDate,omitempty"`                                                                 // 创建日
	OpenDate               string                      `protobuf:"bytes,16,opt,name=openDate,proto3" json:"openDate,omitempty"`                                                                     // 上市日
	ExpireDate             string                      `protobuf:"bytes,17,opt,name=expireDate,proto3" json:"expireDate,omitempty"`                                                                 //!到期日
	StartDelivDate         string                      `protobuf:"bytes,18,opt,name=startDelivDate,proto3" json:"startDelivDate,omitempty"`                                                         // 开始交割日
	EndDelivDate           string                      `protobuf:"bytes,19,opt,name=endDelivDate,proto3" json:"endDelivDate,omitempty"`                                                             // 结束交割日
	InstLifePhase          EContractLifePhaseType      `protobuf:"varint,20,opt,name=instLifePhase,proto3,enum=fippb.EContractLifePhaseType" json:"instLifePhase,omitempty"`                        // 合约生命周期状态
	IsTrading              bool                        `protobuf:"varint,21,opt,name=isTrading,proto3" json:"isTrading,omitempty"`                                                                  // 当前是否交易
	PositionType           EPositionTypeType           `protobuf:"varint,22,opt,name=positionType,proto3,enum=fippb.EPositionTypeType" json:"positionType,omitempty"`                               // 持仓类型
	PositionDateType       EPositionDataTypeType       `protobuf:"varint,23,opt,name=positionDateType,proto3,enum=fippb.EPositionDataTypeType" json:"positionDateType,omitempty"`                   // 持仓日期类型
	LongMarginRatio        float64                     `protobuf:"fixed64,24,opt,name=longMarginRatio,proto3" json:"longMarginRatio,omitempty"`                                                     // 多头保证金率
	ShortMarginRatio       float64                     `protobuf:"fixed64,25,opt,name=shortMarginRatio,proto3" json:"shortMarginRatio,omitempty"`                                                   // 空头保证金率
	MaxMarginSideAlgorithm EMaxMarginSideAlgorithmType `protobuf:"varint,26,opt,name=maxMarginSideAlgorithm,proto3,enum=fippb.EMaxMarginSideAlgorithmType" json:"maxMarginSideAlgorithm,omitempty"` // 是否使用大额单边保证金算法
	UnderlyingContId       string                      `protobuf:"bytes,27,opt,name=underlyingContId,proto3" json:"underlyingContId,omitempty"`                                                     //!基础商品代码
	StrikePrice            float64                     `protobuf:"fixed64,28,opt,name=strikePrice,proto3" json:"strikePrice,omitempty"`                                                             //!执行价
	OptionsType            EOptionsTypeType            `protobuf:"varint,29,opt,name=optionsType,proto3,enum=fippb.EOptionsTypeType" json:"optionsType,omitempty"`                                  //!期权类型
	UnderlyingMultiple     float64                     `protobuf:"fixed64,30,opt,name=underlyingMultiple,proto3" json:"underlyingMultiple,omitempty"`                                               // 合约基础商品乘数
	CombinationType        ECombinationTypeType        `protobuf:"varint,31,opt,name=combinationType,proto3,enum=fippb.ECombinationTypeType" json:"combinationType,omitempty"`                      // 组合类型
}

func (x *ContractDetail) Reset() {
	*x = ContractDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetail) ProtoMessage() {}

func (x *ContractDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetail.ProtoReflect.Descriptor instead.
func (*ContractDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{15}
}

func (x *ContractDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ContractDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ContractDetail) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractDetail) GetExchangeContId() string {
	if x != nil {
		return x.ExchangeContId
	}
	return ""
}

func (x *ContractDetail) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ContractDetail) GetProductClass() EProductClassType {
	if x != nil {
		return x.ProductClass
	}
	return EProductClassType_PC_NUll
}

func (x *ContractDetail) GetDeliveryYear() int32 {
	if x != nil {
		return x.DeliveryYear
	}
	return 0
}

func (x *ContractDetail) GetDeliveryMonth() int32 {
	if x != nil {
		return x.DeliveryMonth
	}
	return 0
}

func (x *ContractDetail) GetMaxMarketOrderVolume() uint64 {
	if x != nil {
		return x.MaxMarketOrderVolume
	}
	return 0
}

func (x *ContractDetail) GetMinMarketOrderVolume() uint64 {
	if x != nil {
		return x.MinMarketOrderVolume
	}
	return 0
}

func (x *ContractDetail) GetMaxLimitOrderVolume() uint64 {
	if x != nil {
		return x.MaxLimitOrderVolume
	}
	return 0
}

func (x *ContractDetail) GetMinLimitOrderVolume() uint64 {
	if x != nil {
		return x.MinLimitOrderVolume
	}
	return 0
}

func (x *ContractDetail) GetVolumeMultiple() int32 {
	if x != nil {
		return x.VolumeMultiple
	}
	return 0
}

func (x *ContractDetail) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *ContractDetail) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *ContractDetail) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *ContractDetail) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *ContractDetail) GetStartDelivDate() string {
	if x != nil {
		return x.StartDelivDate
	}
	return ""
}

func (x *ContractDetail) GetEndDelivDate() string {
	if x != nil {
		return x.EndDelivDate
	}
	return ""
}

func (x *ContractDetail) GetInstLifePhase() EContractLifePhaseType {
	if x != nil {
		return x.InstLifePhase
	}
	return EContractLifePhaseType_IP_NotStart
}

func (x *ContractDetail) GetIsTrading() bool {
	if x != nil {
		return x.IsTrading
	}
	return false
}

func (x *ContractDetail) GetPositionType() EPositionTypeType {
	if x != nil {
		return x.PositionType
	}
	return EPositionTypeType_PT_Net
}

func (x *ContractDetail) GetPositionDateType() EPositionDataTypeType {
	if x != nil {
		return x.PositionDateType
	}
	return EPositionDataTypeType_PDT_Null
}

func (x *ContractDetail) GetLongMarginRatio() float64 {
	if x != nil {
		return x.LongMarginRatio
	}
	return 0
}

func (x *ContractDetail) GetShortMarginRatio() float64 {
	if x != nil {
		return x.ShortMarginRatio
	}
	return 0
}

func (x *ContractDetail) GetMaxMarginSideAlgorithm() EMaxMarginSideAlgorithmType {
	if x != nil {
		return x.MaxMarginSideAlgorithm
	}
	return EMaxMarginSideAlgorithmType_MMSA_NO
}

func (x *ContractDetail) GetUnderlyingContId() string {
	if x != nil {
		return x.UnderlyingContId
	}
	return ""
}

func (x *ContractDetail) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *ContractDetail) GetOptionsType() EOptionsTypeType {
	if x != nil {
		return x.OptionsType
	}
	return EOptionsTypeType_CP_CallOptions
}

func (x *ContractDetail) GetUnderlyingMultiple() float64 {
	if x != nil {
		return x.UnderlyingMultiple
	}
	return 0
}

func (x *ContractDetail) GetCombinationType() ECombinationTypeType {
	if x != nil {
		return x.CombinationType
	}
	return ECombinationTypeType_COMBT_Future
}

// 客户资金明细
// del brokerId经纪公司代码 settlementId结算编号(交易所结算部给出的编号) bizType业务类型
type CustomerCapitalDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                      string  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`                                              // 投资者帐号
	PreMortgage                    float64 `protobuf:"fixed64,2,opt,name=preMortgage,proto3" json:"preMortgage,omitempty"`                                        // 上次质押金额
	PreCredit                      float64 `protobuf:"fixed64,3,opt,name=preCredit,proto3" json:"preCredit,omitempty"`                                            // 上次信用额度
	PreDeposit                     float64 `protobuf:"fixed64,4,opt,name=preDeposit,proto3" json:"preDeposit,omitempty"`                                          // 上次存款额
	PreBalance                     float64 `protobuf:"fixed64,5,opt,name=preBalance,proto3" json:"preBalance,omitempty"`                                          //!上次结算准备金(昨权益)
	PreMargin                      float64 `protobuf:"fixed64,6,opt,name=preMargin,proto3" json:"preMargin,omitempty"`                                            // 上次占用的保证金
	InterestBase                   float64 `protobuf:"fixed64,7,opt,name=interestBase,proto3" json:"interestBase,omitempty"`                                      // 利息基数
	Interest                       float64 `protobuf:"fixed64,8,opt,name=interest,proto3" json:"interest,omitempty"`                                              // 利息收入
	Deposit                        float64 `protobuf:"fixed64,9,opt,name=deposit,proto3" json:"deposit,omitempty"`                                                //!入金金额
	Withdraw                       float64 `protobuf:"fixed64,10,opt,name=withdraw,proto3" json:"withdraw,omitempty"`                                             //!出金金额
	FrozenMargin                   float64 `protobuf:"fixed64,11,opt,name=frozenMargin,proto3" json:"frozenMargin,omitempty"`                                     // 冻结的保证金
	FrozenCash                     float64 `protobuf:"fixed64,12,opt,name=frozenCash,proto3" json:"frozenCash,omitempty"`                                         //!冻结的资金
	FrozenCommission               float64 `protobuf:"fixed64,13,opt,name=frozenCommission,proto3" json:"frozenCommission,omitempty"`                             // 冻结的手续费
	CurrMargin                     float64 `protobuf:"fixed64,14,opt,name=currMargin,proto3" json:"currMargin,omitempty"`                                         //!当前保证金总额
	CashIn                         float64 `protobuf:"fixed64,15,opt,name=cashIn,proto3" json:"cashIn,omitempty"`                                                 // 资金差额
	Commission                     float64 `protobuf:"fixed64,16,opt,name=commission,proto3" json:"commission,omitempty"`                                         //!手续费
	CloseProfit                    float64 `protobuf:"fixed64,17,opt,name=closeProfit,proto3" json:"closeProfit,omitempty"`                                       //!平仓盈亏
	PositionProfit                 float64 `protobuf:"fixed64,18,opt,name=positionProfit,proto3" json:"positionProfit,omitempty"`                                 //!持仓盈亏
	Balance                        float64 `protobuf:"fixed64,19,opt,name=balance,proto3" json:"balance,omitempty"`                                               //!期货结算准备金(权益)
	Available                      float64 `protobuf:"fixed64,20,opt,name=available,proto3" json:"available,omitempty"`                                           //!可用资金
	WithdrawQuota                  float64 `protobuf:"fixed64,21,opt,name=withdrawQuota,proto3" json:"withdrawQuota,omitempty"`                                   //!可取资金
	Reserve                        float64 `protobuf:"fixed64,22,opt,name=reserve,proto3" json:"reserve,omitempty"`                                               // 基本准备金
	TradingDay                     string  `protobuf:"bytes,23,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                                           // 交易日
	Credit                         float64 `protobuf:"fixed64,24,opt,name=credit,proto3" json:"credit,omitempty"`                                                 // 信用额度
	Mortgage                       float64 `protobuf:"fixed64,25,opt,name=mortgage,proto3" json:"mortgage,omitempty"`                                             // 质押金额
	ExchangeMargin                 float64 `protobuf:"fixed64,26,opt,name=exchangeMargin,proto3" json:"exchangeMargin,omitempty"`                                 // 交易所保证金
	DeliveryMargin                 float64 `protobuf:"fixed64,27,opt,name=deliveryMargin,proto3" json:"deliveryMargin,omitempty"`                                 // 投资者交割保证金
	ExchangeDeliveryMargin         float64 `protobuf:"fixed64,28,opt,name=exchangeDeliveryMargin,proto3" json:"exchangeDeliveryMargin,omitempty"`                 // 交易所交割保证金
	ReserveBalance                 float64 `protobuf:"fixed64,29,opt,name=reserveBalance,proto3" json:"reserveBalance,omitempty"`                                 // 保底期货结算准备金
	CurrencyId                     string  `protobuf:"bytes,30,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                                           //!币种代码
	PreFundMortgageIn              float64 `protobuf:"fixed64,31,opt,name=preFundMortgageIn,proto3" json:"preFundMortgageIn,omitempty"`                           // 上次货币质入金额
	PreFundMortgageOut             float64 `protobuf:"fixed64,32,opt,name=preFundMortgageOut,proto3" json:"preFundMortgageOut,omitempty"`                         // 上次货币质出金额
	FundMortgageIn                 float64 `protobuf:"fixed64,33,opt,name=fundMortgageIn,proto3" json:"fundMortgageIn,omitempty"`                                 // 货币质入金额
	FundMortgageOut                float64 `protobuf:"fixed64,34,opt,name=fundMortgageOut,proto3" json:"fundMortgageOut,omitempty"`                               // 货币质出金额
	FundMortgageAvailable          float64 `protobuf:"fixed64,35,opt,name=fundMortgageAvailable,proto3" json:"fundMortgageAvailable,omitempty"`                   //!货币质押余额
	MortgageableFund               float64 `protobuf:"fixed64,36,opt,name=mortgageableFund,proto3" json:"mortgageableFund,omitempty"`                             // 可质押货币金额
	SpecProductMargin              float64 `protobuf:"fixed64,37,opt,name=specProductMargin,proto3" json:"specProductMargin,omitempty"`                           // 特殊产品占用保证金
	SpecProductFrozenMargin        float64 `protobuf:"fixed64,38,opt,name=specProductFrozenMargin,proto3" json:"specProductFrozenMargin,omitempty"`               // 特殊产品冻结保证金
	SpecProductCommission          float64 `protobuf:"fixed64,39,opt,name=specProductCommission,proto3" json:"specProductCommission,omitempty"`                   // 特殊产品手续费
	SpecProductFrozenCommission    float64 `protobuf:"fixed64,40,opt,name=specProductFrozenCommission,proto3" json:"specProductFrozenCommission,omitempty"`       // 特殊产品冻结手续费
	SpecProductPositionProfit      float64 `protobuf:"fixed64,41,opt,name=specProductPositionProfit,proto3" json:"specProductPositionProfit,omitempty"`           // 特殊产品持仓盈亏
	SpecProductCloseProfit         float64 `protobuf:"fixed64,42,opt,name=specProductCloseProfit,proto3" json:"specProductCloseProfit,omitempty"`                 // 特殊产品平仓盈亏
	SpecProductPositionProfitByAlg float64 `protobuf:"fixed64,43,opt,name=specProductPositionProfitByAlg,proto3" json:"specProductPositionProfitByAlg,omitempty"` // 根据持仓盈亏算法计算的特殊产品持仓盈亏
	SpecProductExchangeMargin      float64 `protobuf:"fixed64,44,opt,name=specProductExchangeMargin,proto3" json:"specProductExchangeMargin,omitempty"`           // 特殊产品交易所保证金
	FrozenSwap                     float64 `protobuf:"fixed64,45,opt,name=frozenSwap,proto3" json:"frozenSwap,omitempty"`                                         // 延时换汇冻结金额
	RemainSwap                     float64 `protobuf:"fixed64,46,opt,name=remainSwap,proto3" json:"remainSwap,omitempty"`                                         // 剩余换汇额度
	RiskDegree                     float64 `protobuf:"fixed64,47,opt,name=riskDegree,proto3" json:"riskDegree,omitempty"`                                         //!风险度
	TodayPremiumIncome             float64 `protobuf:"fixed64,48,opt,name=todayPremiumIncome,proto3" json:"todayPremiumIncome,omitempty"`                         //!本日权利金收入
	TodayPremiumPay                float64 `protobuf:"fixed64,49,opt,name=todayPremiumPay,proto3" json:"todayPremiumPay,omitempty"`                               //!本日权利金付出
	OptMarketValue                 float64 `protobuf:"fixed64,50,opt,name=optMarketValue,proto3" json:"optMarketValue,omitempty"`                                 //!期权市值
}

func (x *CustomerCapitalDetail) Reset() {
	*x = CustomerCapitalDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerCapitalDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerCapitalDetail) ProtoMessage() {}

func (x *CustomerCapitalDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerCapitalDetail.ProtoReflect.Descriptor instead.
func (*CustomerCapitalDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{16}
}

func (x *CustomerCapitalDetail) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CustomerCapitalDetail) GetPreMortgage() float64 {
	if x != nil {
		return x.PreMortgage
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPreDeposit() float64 {
	if x != nil {
		return x.PreDeposit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *CustomerCapitalDetail) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *CustomerCapitalDetail) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CustomerCapitalDetail) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CustomerCapitalDetail) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CustomerCapitalDetail) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CustomerCapitalDetail) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CustomerCapitalDetail) GetWithdrawQuota() float64 {
	if x != nil {
		return x.WithdrawQuota
	}
	return 0
}

func (x *CustomerCapitalDetail) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *CustomerCapitalDetail) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CustomerCapitalDetail) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetMortgage() float64 {
	if x != nil {
		return x.Mortgage
	}
	return 0
}

func (x *CustomerCapitalDetail) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *CustomerCapitalDetail) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *CustomerCapitalDetail) GetPreFundMortgageIn() float64 {
	if x != nil {
		return x.PreFundMortgageIn
	}
	return 0
}

func (x *CustomerCapitalDetail) GetPreFundMortgageOut() float64 {
	if x != nil {
		return x.PreFundMortgageOut
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFundMortgageIn() float64 {
	if x != nil {
		return x.FundMortgageIn
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFundMortgageOut() float64 {
	if x != nil {
		return x.FundMortgageOut
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFundMortgageAvailable() float64 {
	if x != nil {
		return x.FundMortgageAvailable
	}
	return 0
}

func (x *CustomerCapitalDetail) GetMortgageableFund() float64 {
	if x != nil {
		return x.MortgageableFund
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductMargin() float64 {
	if x != nil {
		return x.SpecProductMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductFrozenMargin() float64 {
	if x != nil {
		return x.SpecProductFrozenMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductCommission() float64 {
	if x != nil {
		return x.SpecProductCommission
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductFrozenCommission() float64 {
	if x != nil {
		return x.SpecProductFrozenCommission
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductPositionProfit() float64 {
	if x != nil {
		return x.SpecProductPositionProfit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductCloseProfit() float64 {
	if x != nil {
		return x.SpecProductCloseProfit
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductPositionProfitByAlg() float64 {
	if x != nil {
		return x.SpecProductPositionProfitByAlg
	}
	return 0
}

func (x *CustomerCapitalDetail) GetSpecProductExchangeMargin() float64 {
	if x != nil {
		return x.SpecProductExchangeMargin
	}
	return 0
}

func (x *CustomerCapitalDetail) GetFrozenSwap() float64 {
	if x != nil {
		return x.FrozenSwap
	}
	return 0
}

func (x *CustomerCapitalDetail) GetRemainSwap() float64 {
	if x != nil {
		return x.RemainSwap
	}
	return 0
}

func (x *CustomerCapitalDetail) GetRiskDegree() float64 {
	if x != nil {
		return x.RiskDegree
	}
	return 0
}

func (x *CustomerCapitalDetail) GetTodayPremiumIncome() float64 {
	if x != nil {
		return x.TodayPremiumIncome
	}
	return 0
}

func (x *CustomerCapitalDetail) GetTodayPremiumPay() float64 {
	if x != nil {
		return x.TodayPremiumPay
	}
	return 0
}

func (x *CustomerCapitalDetail) GetOptMarketValue() float64 {
	if x != nil {
		return x.OptMarketValue
	}
	return 0
}

// 指定合约信息
type SpecifyContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId               string  `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                               // 合约代码
	LongMarginRatio          float64 `protobuf:"fixed64,2,opt,name=longMarginRatio,proto3" json:"longMarginRatio,omitempty"`                   // 多头保证金率
	ShortMarginRatio         float64 `protobuf:"fixed64,3,opt,name=shortMarginRatio,proto3" json:"shortMarginRatio,omitempty"`                 // 空头保证金率
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,4,opt,name=longMarginRatioByVolume,proto3" json:"longMarginRatioByVolume,omitempty"`   // 多头保证金费(定额)
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,5,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"` // 空头保证金费(定额)
	OpenFeeVolRatio          float64 `protobuf:"fixed64,6,opt,name=openFeeVolRatio,proto3" json:"openFeeVolRatio,omitempty"`                   // 开仓手续费 按手数计算
	CloseFeeVolRatio         float64 `protobuf:"fixed64,7,opt,name=closeFeeVolRatio,proto3" json:"closeFeeVolRatio,omitempty"`                 // 平仓手续费 按手数计算
	CloseTodayFeeVolRatio    float64 `protobuf:"fixed64,8,opt,name=closeTodayFeeVolRatio,proto3" json:"closeTodayFeeVolRatio,omitempty"`       // 平今手续费 按手数计算
	OpenFeeAmtRatio          float64 `protobuf:"fixed64,9,opt,name=openFeeAmtRatio,proto3" json:"openFeeAmtRatio,omitempty"`                   // 开仓手续费率 按金额计算
	CloseFeeAmtRatio         float64 `protobuf:"fixed64,10,opt,name=closeFeeAmtRatio,proto3" json:"closeFeeAmtRatio,omitempty"`                // 平仓手续费率 按金额计算
	CloseTodayFeeAmtRatio    float64 `protobuf:"fixed64,11,opt,name=closeTodayFeeAmtRatio,proto3" json:"closeTodayFeeAmtRatio,omitempty"`      // 平今手续费率 按金额计算
	OrderTopLimit            uint64  `protobuf:"varint,12,opt,name=orderTopLimit,proto3" json:"orderTopLimit,omitempty"`                       // 限价委托上限
	ContractUnit             float64 `protobuf:"fixed64,13,opt,name=contractUnit,proto3" json:"contractUnit,omitempty"`                        // 合约乘数
	ContractTick             float64 `protobuf:"fixed64,14,opt,name=contractTick,proto3" json:"contractTick,omitempty"`                        // 最小变动价位
	ContractType             uint32  `protobuf:"varint,15,opt,name=contractType,proto3" json:"contractType,omitempty"`                         // 合约类型  0 期货 1 期权
	ContractEndTradeDate     string  `protobuf:"bytes,16,opt,name=contractEndTradeDate,proto3" json:"contractEndTradeDate,omitempty"`          // 合约最后交易日
	ComputeMode              uint32  `protobuf:"varint,17,opt,name=computeMode,proto3" json:"computeMode,omitempty"`                           // 计算方式
	AtMoneyNorm              float64 `protobuf:"fixed64,18,opt,name=atMoneyNorm,proto3" json:"atMoneyNorm,omitempty"`                          // 平值按定额
	UpperLimitPrice          float64 `protobuf:"fixed64,19,opt,name=upperLimitPrice,proto3" json:"upperLimitPrice,omitempty"`                  // 涨停板价
	LowerLimitPrice          float64 `protobuf:"fixed64,20,opt,name=lowerLimitPrice,proto3" json:"lowerLimitPrice,omitempty"`                  // 跌停板价
	PreClosePrice            float64 `protobuf:"fixed64,21,opt,name=preClosePrice,proto3" json:"preClosePrice,omitempty"`                      // 昨收盘
	PreSettlementPrice       float64 `protobuf:"fixed64,22,opt,name=preSettlementPrice,proto3" json:"preSettlementPrice,omitempty"`            // 昨结算价
	SettlementPrice          float64 `protobuf:"fixed64,23,opt,name=settlementPrice,proto3" json:"settlementPrice,omitempty"`                  // 结算价
	PreOpenInterest          uint64  `protobuf:"varint,24,opt,name=preOpenInterest,proto3" json:"preOpenInterest,omitempty"`                   // 昨持仓量
	OptExecRatio             float64 `protobuf:"fixed64,25,opt,name=optExecRatio,proto3" json:"optExecRatio,omitempty"`                        // 期权：行权按比例 期货：交割按比例
	OptExecRatioPerVol       float64 `protobuf:"fixed64,26,opt,name=optExecRatioPerVol,proto3" json:"optExecRatioPerVol,omitempty"`            // 期权：行权按定额 期货：交割按定额
	CalculateMode            uint32  `protobuf:"varint,27,opt,name=calculateMode,proto3" json:"calculateMode,omitempty"`                       // 冻结资金计算方式
	ReferencePrice           float64 `protobuf:"fixed64,28,opt,name=referencePrice,proto3" json:"referencePrice,omitempty"`                    // 参考价格
}

func (x *SpecifyContractInfo) Reset() {
	*x = SpecifyContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecifyContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecifyContractInfo) ProtoMessage() {}

func (x *SpecifyContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecifyContractInfo.ProtoReflect.Descriptor instead.
func (*SpecifyContractInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{17}
}

func (x *SpecifyContractInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *SpecifyContractInfo) GetLongMarginRatio() float64 {
	if x != nil {
		return x.LongMarginRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetShortMarginRatio() float64 {
	if x != nil {
		return x.ShortMarginRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *SpecifyContractInfo) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *SpecifyContractInfo) GetOpenFeeVolRatio() float64 {
	if x != nil {
		return x.OpenFeeVolRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetCloseFeeVolRatio() float64 {
	if x != nil {
		return x.CloseFeeVolRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetCloseTodayFeeVolRatio() float64 {
	if x != nil {
		return x.CloseTodayFeeVolRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetOpenFeeAmtRatio() float64 {
	if x != nil {
		return x.OpenFeeAmtRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetCloseFeeAmtRatio() float64 {
	if x != nil {
		return x.CloseFeeAmtRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetCloseTodayFeeAmtRatio() float64 {
	if x != nil {
		return x.CloseTodayFeeAmtRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetOrderTopLimit() uint64 {
	if x != nil {
		return x.OrderTopLimit
	}
	return 0
}

func (x *SpecifyContractInfo) GetContractUnit() float64 {
	if x != nil {
		return x.ContractUnit
	}
	return 0
}

func (x *SpecifyContractInfo) GetContractTick() float64 {
	if x != nil {
		return x.ContractTick
	}
	return 0
}

func (x *SpecifyContractInfo) GetContractType() uint32 {
	if x != nil {
		return x.ContractType
	}
	return 0
}

func (x *SpecifyContractInfo) GetContractEndTradeDate() string {
	if x != nil {
		return x.ContractEndTradeDate
	}
	return ""
}

func (x *SpecifyContractInfo) GetComputeMode() uint32 {
	if x != nil {
		return x.ComputeMode
	}
	return 0
}

func (x *SpecifyContractInfo) GetAtMoneyNorm() float64 {
	if x != nil {
		return x.AtMoneyNorm
	}
	return 0
}

func (x *SpecifyContractInfo) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *SpecifyContractInfo) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *SpecifyContractInfo) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *SpecifyContractInfo) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SpecifyContractInfo) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *SpecifyContractInfo) GetPreOpenInterest() uint64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *SpecifyContractInfo) GetOptExecRatio() float64 {
	if x != nil {
		return x.OptExecRatio
	}
	return 0
}

func (x *SpecifyContractInfo) GetOptExecRatioPerVol() float64 {
	if x != nil {
		return x.OptExecRatioPerVol
	}
	return 0
}

func (x *SpecifyContractInfo) GetCalculateMode() uint32 {
	if x != nil {
		return x.CalculateMode
	}
	return 0
}

func (x *SpecifyContractInfo) GetReferencePrice() float64 {
	if x != nil {
		return x.ReferencePrice
	}
	return 0
}

// 套利合约明细
type ArbiContractDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId      EExchgID `protobuf:"varint,1,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所
	ContractId      string   `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码
	ContractName    string   `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`                  // 合约名称
	UpperLimitPrice float64  `protobuf:"fixed64,4,opt,name=upperLimitPrice,proto3" json:"upperLimitPrice,omitempty"`          // 涨停板价
	LowerLimitPrice float64  `protobuf:"fixed64,5,opt,name=lowerLimitPrice,proto3" json:"lowerLimitPrice,omitempty"`          // 跌停板价
	ContractTick    float64  `protobuf:"fixed64,6,opt,name=contractTick,proto3" json:"contractTick,omitempty"`                // 最小变动价位
}

func (x *ArbiContractDetail) Reset() {
	*x = ArbiContractDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbiContractDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbiContractDetail) ProtoMessage() {}

func (x *ArbiContractDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbiContractDetail.ProtoReflect.Descriptor instead.
func (*ArbiContractDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{18}
}

func (x *ArbiContractDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ArbiContractDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ArbiContractDetail) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ArbiContractDetail) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *ArbiContractDetail) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *ArbiContractDetail) GetContractTick() float64 {
	if x != nil {
		return x.ContractTick
	}
	return 0
}

// 组合持仓明细
// del brokerId经纪公司代码 settlementId结算编号(交易所结算部给出的编号) investUnitId投资单元代码
type ArbiCombineDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string         `protobuf:"bytes,1,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                          // 交易日
	OpenDate           string         `protobuf:"bytes,2,opt,name=openDate,proto3" json:"openDate,omitempty"`                              // 开仓日期
	ExchangeId         EExchgID       `protobuf:"varint,3,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`     // 交易所编码
	InvestorId         string         `protobuf:"bytes,4,opt,name=investorId,proto3" json:"investorId,omitempty"`                          // 投资者代码
	ComTradeId         string         `protobuf:"bytes,5,opt,name=comTradeId,proto3" json:"comTradeId,omitempty"`                          // 组合编号
	TradeId            string         `protobuf:"bytes,6,opt,name=tradeId,proto3" json:"tradeId,omitempty"`                                // 撮合编号
	ContractId         string         `protobuf:"bytes,7,opt,name=contractId,proto3" json:"contractId,omitempty"`                          // 合约代码
	HedgeFlag          EHedgeFlagType `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"` // 投机套保标志
	Direction          EDirectionType `protobuf:"varint,9,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"` // 买卖
	TotalAmt           uint64         `protobuf:"varint,10,opt,name=totalAmt,proto3" json:"totalAmt,omitempty"`                            // 持仓量
	Margin             float64        `protobuf:"fixed64,11,opt,name=margin,proto3" json:"margin,omitempty"`                               // 投资者保证金
	ExchMargin         float64        `protobuf:"fixed64,12,opt,name=exchMargin,proto3" json:"exchMargin,omitempty"`                       // 交易所保证金
	MarginRateByMoney  float64        `protobuf:"fixed64,13,opt,name=marginRateByMoney,proto3" json:"marginRateByMoney,omitempty"`         // 保证金率
	MarginRateByVolume float64        `protobuf:"fixed64,14,opt,name=marginRateByVolume,proto3" json:"marginRateByVolume,omitempty"`       // 保证金率(按手数)
	LegId              int32          `protobuf:"varint,15,opt,name=legId,proto3" json:"legId,omitempty"`                                  // 单腿编号
	LegMultiple        int32          `protobuf:"varint,16,opt,name=legMultiple,proto3" json:"legMultiple,omitempty"`                      // 单腿乘数
	CombContractId     string         `protobuf:"bytes,17,opt,name=combContractId,proto3" json:"combContractId,omitempty"`                 // 组合持仓合约编码
	TradeGroupId       int32          `protobuf:"varint,18,opt,name=tradeGroupId,proto3" json:"tradeGroupId,omitempty"`                    // 成交组号
}

func (x *ArbiCombineDetail) Reset() {
	*x = ArbiCombineDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbiCombineDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbiCombineDetail) ProtoMessage() {}

func (x *ArbiCombineDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbiCombineDetail.ProtoReflect.Descriptor instead.
func (*ArbiCombineDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{19}
}

func (x *ArbiCombineDetail) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *ArbiCombineDetail) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *ArbiCombineDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ArbiCombineDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ArbiCombineDetail) GetComTradeId() string {
	if x != nil {
		return x.ComTradeId
	}
	return ""
}

func (x *ArbiCombineDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *ArbiCombineDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ArbiCombineDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ArbiCombineDetail) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *ArbiCombineDetail) GetTotalAmt() uint64 {
	if x != nil {
		return x.TotalAmt
	}
	return 0
}

func (x *ArbiCombineDetail) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *ArbiCombineDetail) GetExchMargin() float64 {
	if x != nil {
		return x.ExchMargin
	}
	return 0
}

func (x *ArbiCombineDetail) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *ArbiCombineDetail) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *ArbiCombineDetail) GetLegId() int32 {
	if x != nil {
		return x.LegId
	}
	return 0
}

func (x *ArbiCombineDetail) GetLegMultiple() int32 {
	if x != nil {
		return x.LegMultiple
	}
	return 0
}

func (x *ArbiCombineDetail) GetCombContractId() string {
	if x != nil {
		return x.CombContractId
	}
	return ""
}

func (x *ArbiCombineDetail) GetTradeGroupId() int32 {
	if x != nil {
		return x.TradeGroupId
	}
	return 0
}

// 保证金率
// del brokerId经纪公司代码
type MarginRateDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId               string             `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      //合约代码
	InvestorRange            EInvestorRangeType `protobuf:"varint,2,opt,name=investorRange,proto3,enum=fippb.EInvestorRangeType" json:"investorRange,omitempty"` //投资者范围
	InvestorId               string             `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      //投资者代码
	HedgeFlag                EHedgeFlagType     `protobuf:"varint,4,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             //投机套保标志
	LongMarginRatioByMoney   float64            `protobuf:"fixed64,5,opt,name=longMarginRatioByMoney,proto3" json:"longMarginRatioByMoney,omitempty"`            //多头保证金率
	LongMarginRatioByVolume  float64            `protobuf:"fixed64,6,opt,name=longMarginRatioByVolume,proto3" json:"longMarginRatioByVolume,omitempty"`          //多头保证金费
	ShortMarginRatioByMoney  float64            `protobuf:"fixed64,7,opt,name=shortMarginRatioByMoney,proto3" json:"shortMarginRatioByMoney,omitempty"`          //空头保证金率
	ShortMarginRatioByVolume float64            `protobuf:"fixed64,8,opt,name=shortMarginRatioByVolume,proto3" json:"shortMarginRatioByVolume,omitempty"`        //空头保证金费
	IsRelative               bool               `protobuf:"varint,9,opt,name=isRelative,proto3" json:"isRelative,omitempty"`                                     //是否相对交易所收取
	ExchangeId               EExchgID           `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                //交易所编码
	InvestUnitId             string             `protobuf:"bytes,11,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                                 //投资单元代码
}

func (x *MarginRateDetail) Reset() {
	*x = MarginRateDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginRateDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginRateDetail) ProtoMessage() {}

func (x *MarginRateDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginRateDetail.ProtoReflect.Descriptor instead.
func (*MarginRateDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{20}
}

func (x *MarginRateDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *MarginRateDetail) GetInvestorRange() EInvestorRangeType {
	if x != nil {
		return x.InvestorRange
	}
	return EInvestorRangeType_IR_Null
}

func (x *MarginRateDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *MarginRateDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *MarginRateDetail) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *MarginRateDetail) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *MarginRateDetail) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *MarginRateDetail) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *MarginRateDetail) GetIsRelative() bool {
	if x != nil {
		return x.IsRelative
	}
	return false
}

func (x *MarginRateDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *MarginRateDetail) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

// 手续费率
// del brokerId经纪公司代码 bizType业务类型
type CommissionRateDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId              string             `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      //合约代码
	InvestorRange           EInvestorRangeType `protobuf:"varint,2,opt,name=investorRange,proto3,enum=fippb.EInvestorRangeType" json:"investorRange,omitempty"` //投资者范围
	InvestorId              string             `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`                                      //投资者代码
	OpenRatioByMoney        float64            `protobuf:"fixed64,4,opt,name=openRatioByMoney,proto3" json:"openRatioByMoney,omitempty"`                        //开仓手续费率
	OpenRatioByVolume       float64            `protobuf:"fixed64,5,opt,name=openRatioByVolume,proto3" json:"openRatioByVolume,omitempty"`                      //开仓手续费
	CloseRatioByMoney       float64            `protobuf:"fixed64,6,opt,name=closeRatioByMoney,proto3" json:"closeRatioByMoney,omitempty"`                      //平仓手续费率
	CloseRatioByVolume      float64            `protobuf:"fixed64,7,opt,name=closeRatioByVolume,proto3" json:"closeRatioByVolume,omitempty"`                    //平仓手续费
	CloseTodayRatioByMoney  float64            `protobuf:"fixed64,8,opt,name=closeTodayRatioByMoney,proto3" json:"closeTodayRatioByMoney,omitempty"`            //平今手续费率
	CloseTodayRatioByVolume float64            `protobuf:"fixed64,9,opt,name=closeTodayRatioByVolume,proto3" json:"closeTodayRatioByVolume,omitempty"`          //平今手续费
	ExchangeId              EExchgID           `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                //交易所编码
	InvestUnitId            string             `protobuf:"bytes,11,opt,name=investUnitId,proto3" json:"investUnitId,omitempty"`                                 //投资单元代码
	HedgeFlag               EHedgeFlagType     `protobuf:"varint,12,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`            //投机套保标志
}

func (x *CommissionRateDetail) Reset() {
	*x = CommissionRateDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommissionRateDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionRateDetail) ProtoMessage() {}

func (x *CommissionRateDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionRateDetail.ProtoReflect.Descriptor instead.
func (*CommissionRateDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{21}
}

func (x *CommissionRateDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CommissionRateDetail) GetInvestorRange() EInvestorRangeType {
	if x != nil {
		return x.InvestorRange
	}
	return EInvestorRangeType_IR_Null
}

func (x *CommissionRateDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *CommissionRateDetail) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CommissionRateDetail) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CommissionRateDetail) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CommissionRateDetail) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CommissionRateDetail) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CommissionRateDetail) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

func (x *CommissionRateDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *CommissionRateDetail) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *CommissionRateDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

// 投资者结算结果
// del brokerId经纪公司代码 accountId资金账户 currencyId币种代码
type SettlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay   string `protobuf:"bytes,1,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`      // 交易日
	SettlementId int32  `protobuf:"varint,2,opt,name=settlementId,proto3" json:"settlementId,omitempty"` // 结算编号
	InvestorId   string `protobuf:"bytes,3,opt,name=investorId,proto3" json:"investorId,omitempty"`      // 投资者代码
	SequenceNo   int32  `protobuf:"varint,4,opt,name=sequenceNo,proto3" json:"sequenceNo,omitempty"`     // 序号
	Content      string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`            // 消息正文
}

func (x *SettlementInfo) Reset() {
	*x = SettlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementInfo) ProtoMessage() {}

func (x *SettlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementInfo.ProtoReflect.Descriptor instead.
func (*SettlementInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{22}
}

func (x *SettlementInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *SettlementInfo) GetSettlementId() int32 {
	if x != nil {
		return x.SettlementId
	}
	return 0
}

func (x *SettlementInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *SettlementInfo) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *SettlementInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 最大报单数量明细
// del brokerId投资者代码 investUnitId投资单元代码
type MaxOrderVolumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId string          `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                             // 投资者代码          NM
	ContractId string          `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                             // 合约代码            M
	Direction  EDirectionType  `protobuf:"varint,3,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`    // 买卖方向            NM
	OffsetFlag EOffsetFlagType `protobuf:"varint,4,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"` // 开平标示            NM
	HedgeFlag  EHedgeFlagType  `protobuf:"varint,5,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`    // 投机套保标志        NM
	MaxVolumn  int32           `protobuf:"varint,6,opt,name=maxVolumn,proto3" json:"maxVolumn,omitempty"`                              // 最大允许报单数量    NM
	ExchangeId EExchgID        `protobuf:"varint,7,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`        // 交易所编码          NM
}

func (x *MaxOrderVolumn) Reset() {
	*x = MaxOrderVolumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxOrderVolumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxOrderVolumn) ProtoMessage() {}

func (x *MaxOrderVolumn) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxOrderVolumn.ProtoReflect.Descriptor instead.
func (*MaxOrderVolumn) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{23}
}

func (x *MaxOrderVolumn) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *MaxOrderVolumn) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *MaxOrderVolumn) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *MaxOrderVolumn) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *MaxOrderVolumn) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *MaxOrderVolumn) GetMaxVolumn() int32 {
	if x != nil {
		return x.MaxVolumn
	}
	return 0
}

func (x *MaxOrderVolumn) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// 执行宣告明细
// del brokerId投资者代码 UserId用户代码 businessUnit业务单元（报单的席位）reservePositionFlag是否保留期货头寸标记，已废弃 execOrderLocalId本地执行宣告编号 participantId会员代码 exchangeContId合约在交易所的代码
// traderId交易所交易员代码 installId安装编号（使用报盘机id）notifySequence报单提示序号 tradingDay交易日 settlementId结算编号 clearingPartId结算会员编号 sequenceNo序号 userProductInfo用户端产品信息
// activeUserId操作用户代码 brokerExecOrderSeq经纪公司报单编号 branchId营业部编号 investUnitId投资单元代码 accountId资金账户 currencyId币种代码 ipAddressIP地址 macAddressMac地址
type ExeOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId        string                  `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                                   // 投资者代码
	ContractId        string                  `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                                   // 合约代码
	OrderRef          int64                   `protobuf:"varint,3,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                                      // 执行宣告引用
	Volume            int32                   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`                                                          // 数量
	OffsetFlag        EOffsetFlagType         `protobuf:"varint,5,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`                       // 开平标志
	HedgeFlag         EHedgeFlagType          `protobuf:"varint,6,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`                          // 投机套保标志
	ActionType        EActionTypeType         `protobuf:"varint,7,opt,name=actionType,proto3,enum=fippb.EActionTypeType" json:"actionType,omitempty"`                       // 执行类型
	PosiDirection     EPosiDirectionType      `protobuf:"varint,8,opt,name=posiDirection,proto3,enum=fippb.EPosiDirectionType" json:"posiDirection,omitempty"`              // 保留头寸申请的持仓方向
	CloseFlag         EExexOrderCloseFlagType `protobuf:"varint,9,opt,name=closeFlag,proto3,enum=fippb.EExexOrderCloseFlagType" json:"closeFlag,omitempty"`                 // 期权行权后生成的头寸是否自动平仓
	ExchangeId        EExchgID                `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                             // 交易所编码
	ClientId          string                  `protobuf:"bytes,11,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                      // 客户代码
	OrderSubmitStatus EOrderSubmitStatusType  `protobuf:"varint,12,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 执行宣告提交状态
	ExecOrderSysId    string                  `protobuf:"bytes,13,opt,name=execOrderSysId,proto3" json:"execOrderSysId,omitempty"`                                          // 执行宣告编号
	InsertDate        string                  `protobuf:"bytes,14,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期
	InsertTime        string                  `protobuf:"bytes,15,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  // 插入时间
	CancelTime        string                  `protobuf:"bytes,16,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  // 撤销时间
	ExecResult        EExecResultType         `protobuf:"varint,17,opt,name=execResult,proto3,enum=fippb.EExecResultType" json:"execResult,omitempty"`                      // 执行结果
	SameUserKey       *SameUserKey            `protobuf:"bytes,18,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示
	StatusMsg         string                  `protobuf:"bytes,19,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                    // 状态信息
}

func (x *ExeOrderDetail) Reset() {
	*x = ExeOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExeOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExeOrderDetail) ProtoMessage() {}

func (x *ExeOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExeOrderDetail.ProtoReflect.Descriptor instead.
func (*ExeOrderDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{24}
}

func (x *ExeOrderDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ExeOrderDetail) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ExeOrderDetail) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ExeOrderDetail) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ExeOrderDetail) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *ExeOrderDetail) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ExeOrderDetail) GetActionType() EActionTypeType {
	if x != nil {
		return x.ActionType
	}
	return EActionTypeType_ACTP_Null
}

func (x *ExeOrderDetail) GetPosiDirection() EPosiDirectionType {
	if x != nil {
		return x.PosiDirection
	}
	return EPosiDirectionType_PD_Net
}

func (x *ExeOrderDetail) GetCloseFlag() EExexOrderCloseFlagType {
	if x != nil {
		return x.CloseFlag
	}
	return EExexOrderCloseFlagType_EOCF_AutoClose
}

func (x *ExeOrderDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ExeOrderDetail) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExeOrderDetail) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *ExeOrderDetail) GetExecOrderSysId() string {
	if x != nil {
		return x.ExecOrderSysId
	}
	return ""
}

func (x *ExeOrderDetail) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *ExeOrderDetail) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *ExeOrderDetail) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *ExeOrderDetail) GetExecResult() EExecResultType {
	if x != nil {
		return x.ExecResult
	}
	return EExecResultType_OER_Unknown
}

func (x *ExeOrderDetail) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ExeOrderDetail) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// 交易编码明细
// del brokerId投资者代码 branchId营业部编号 bizType业务类型 investUnitId投资单元代码
type TradingCodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId   string            `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                   // 投资者代码
	ExchangeId   EExchgID          `protobuf:"varint,2,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`              // 交易所编码
	ClientId     string            `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`                                       // 客户代码
	IsActive     int32             `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`                                      // 是否活跃
	ClientIdType EClientIdTypeType `protobuf:"varint,5,opt,name=clientIdType,proto3,enum=fippb.EClientIdTypeType" json:"clientIdType,omitempty"` // 交易编码类型
}

func (x *TradingCodeDetail) Reset() {
	*x = TradingCodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingCodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingCodeDetail) ProtoMessage() {}

func (x *TradingCodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingCodeDetail.ProtoReflect.Descriptor instead.
func (*TradingCodeDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{25}
}

func (x *TradingCodeDetail) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *TradingCodeDetail) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *TradingCodeDetail) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TradingCodeDetail) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *TradingCodeDetail) GetClientIdType() EClientIdTypeType {
	if x != nil {
		return x.ClientIdType
	}
	return EClientIdTypeType_ECIDT_Null
}

// 银行期货转账
// del installId安装编号（使用报盘机id）
type TransferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAccountField *QueryAccountField  `protobuf:"bytes,1,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"`                           // 查询账户信息
	TradeAmount       float64             `protobuf:"fixed64,2,opt,name=tradeAmount,proto3" json:"tradeAmount,omitempty"`                                     // 转账金额
	FutureFetchAmount float64             `protobuf:"fixed64,3,opt,name=futureFetchAmount,proto3" json:"futureFetchAmount,omitempty"`                         // 期货可取金额
	FeePayFlag        EFeePayFlagType     `protobuf:"varint,4,opt,name=feePayFlag,proto3,enum=fippb.EFeePayFlagType" json:"feePayFlag,omitempty"`             // 费用支付标志
	CustFee           float64             `protobuf:"fixed64,5,opt,name=custFee,proto3" json:"custFee,omitempty"`                                             // 应收客户费用
	BrokerFee         float64             `protobuf:"fixed64,6,opt,name=brokerFee,proto3" json:"brokerFee,omitempty"`                                         // 应收期货公司费用
	Message           string              `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                               // 发送方给接收方的消息
	TransferStatus    ETransferStatusType `protobuf:"varint,8,opt,name=transferStatus,proto3,enum=fippb.ETransferStatusType" json:"transferStatus,omitempty"` // 转账交易状态
}

func (x *TransferField) Reset() {
	*x = TransferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferField) ProtoMessage() {}

func (x *TransferField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferField.ProtoReflect.Descriptor instead.
func (*TransferField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{26}
}

func (x *TransferField) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

func (x *TransferField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *TransferField) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *TransferField) GetFeePayFlag() EFeePayFlagType {
	if x != nil {
		return x.FeePayFlag
	}
	return EFeePayFlagType_EFPF_Null
}

func (x *TransferField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *TransferField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *TransferField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferField) GetTransferStatus() ETransferStatusType {
	if x != nil {
		return x.TransferStatus
	}
	return ETransferStatusType_ETRFS_Null
}

// 客户开销户信息表
type AccountregField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDay         string             `protobuf:"bytes,1,opt,name=tradeDay,proto3" json:"tradeDay,omitempty"`                                           // 交易日期
	BankId           string             `protobuf:"bytes,2,opt,name=bankId,proto3" json:"bankId,omitempty"`                                               // 银行编码
	BankBranchId     string             `protobuf:"bytes,3,opt,name=bankBranchId,proto3" json:"bankBranchId,omitempty"`                                   // 银行分支机构代码
	BankAccount      string             `protobuf:"bytes,4,opt,name=bankAccount,proto3" json:"bankAccount,omitempty"`                                     // 银行账号
	BrokerId         string             `protobuf:"bytes,5,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                           // 期商代码
	BrokerBranchId   string             `protobuf:"bytes,6,opt,name=brokerBranchId,proto3" json:"brokerBranchId,omitempty"`                               // 期商分支机构代码
	AccountId        string             `protobuf:"bytes,7,opt,name=accountId,proto3" json:"accountId,omitempty"`                                         // 投资者账号
	IdCardType       EIdCardTypeType    `protobuf:"varint,8,opt,name=idCardType,proto3,enum=fippb.EIdCardTypeType" json:"idCardType,omitempty"`           // 证件类型
	IdentifiedCardNo string             `protobuf:"bytes,9,opt,name=identifiedCardNo,proto3" json:"identifiedCardNo,omitempty"`                           // 证件号码
	CustomerName     string             `protobuf:"bytes,10,opt,name=customerName,proto3" json:"customerName,omitempty"`                                  // 客户姓名
	CurrencyId       string             `protobuf:"bytes,11,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                                      // 币种代码
	OpenOrDestroy    EOpenOrDestroyType `protobuf:"varint,12,opt,name=openOrDestroy,proto3,enum=fippb.EOpenOrDestroyType" json:"openOrDestroy,omitempty"` // 开销户类别
	RegDate          string             `protobuf:"bytes,13,opt,name=regDate,proto3" json:"regDate,omitempty"`                                            // 签约日期
	OutDate          string             `protobuf:"bytes,14,opt,name=outDate,proto3" json:"outDate,omitempty"`                                            // 解约日期
	Tid              int32              `protobuf:"varint,15,opt,name=tid,proto3" json:"tid,omitempty"`                                                   // 交易ID
	CustType         ECustTypeType      `protobuf:"varint,16,opt,name=custType,proto3,enum=fippb.ECustTypeType" json:"custType,omitempty"`                // 客户类型
	BankAccType      EBankAccTypeType   `protobuf:"varint,17,opt,name=bankAccType,proto3,enum=fippb.EBankAccTypeType" json:"bankAccType,omitempty"`       // 银行账号类型
	LongCustomerName string             `protobuf:"bytes,18,opt,name=longCustomerName,proto3" json:"longCustomerName,omitempty"`                          // 长客户姓名
	BankName         string             `protobuf:"bytes,19,opt,name=bankName,proto3" json:"bankName,omitempty"`                                          // 银行名称
}

func (x *AccountregField) Reset() {
	*x = AccountregField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountregField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountregField) ProtoMessage() {}

func (x *AccountregField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountregField.ProtoReflect.Descriptor instead.
func (*AccountregField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{27}
}

func (x *AccountregField) GetTradeDay() string {
	if x != nil {
		return x.TradeDay
	}
	return ""
}

func (x *AccountregField) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *AccountregField) GetBankBranchId() string {
	if x != nil {
		return x.BankBranchId
	}
	return ""
}

func (x *AccountregField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *AccountregField) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *AccountregField) GetBrokerBranchId() string {
	if x != nil {
		return x.BrokerBranchId
	}
	return ""
}

func (x *AccountregField) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountregField) GetIdCardType() EIdCardTypeType {
	if x != nil {
		return x.IdCardType
	}
	return EIdCardTypeType_EICT_Null
}

func (x *AccountregField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *AccountregField) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *AccountregField) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *AccountregField) GetOpenOrDestroy() EOpenOrDestroyType {
	if x != nil {
		return x.OpenOrDestroy
	}
	return EOpenOrDestroyType_EOOD_Null
}

func (x *AccountregField) GetRegDate() string {
	if x != nil {
		return x.RegDate
	}
	return ""
}

func (x *AccountregField) GetOutDate() string {
	if x != nil {
		return x.OutDate
	}
	return ""
}

func (x *AccountregField) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *AccountregField) GetCustType() ECustTypeType {
	if x != nil {
		return x.CustType
	}
	return ECustTypeType_ECUSTT_Null
}

func (x *AccountregField) GetBankAccType() EBankAccTypeType {
	if x != nil {
		return x.BankAccType
	}
	return EBankAccTypeType_EBAT_Null
}

func (x *AccountregField) GetLongCustomerName() string {
	if x != nil {
		return x.LongCustomerName
	}
	return ""
}

func (x *AccountregField) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

// 期权交易成本明细
// del brokerId经纪公司代码 investUnitId投资单元代码
type OptTradeCostField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId      string         `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                          // 投资者代码
	ContractId      string         `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                          // 合约代码
	HedgeFlag       EHedgeFlagType `protobuf:"varint,3,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"` // 投机套保标志
	FixMargin       float64        `protobuf:"fixed64,4,opt,name=fixMargin,proto3" json:"fixMargin,omitempty"`                          // 期权合约保证金不变部分
	MiniMargin      float64        `protobuf:"fixed64,5,opt,name=miniMargin,proto3" json:"miniMargin,omitempty"`                        // 期权合约最小保证金
	Royalty         float64        `protobuf:"fixed64,6,opt,name=royalty,proto3" json:"royalty,omitempty"`                              // 期权合约权利金
	ExchFixedMargin float64        `protobuf:"fixed64,7,opt,name=exchFixedMargin,proto3" json:"exchFixedMargin,omitempty"`              // 交易所期权合约保证金不变部分
	ExchMiniMargin  float64        `protobuf:"fixed64,8,opt,name=exchMiniMargin,proto3" json:"exchMiniMargin,omitempty"`                // 交易所期权合约最小保证金
	ExchangeId      EExchgID       `protobuf:"varint,9,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`     // 交易所编码
}

func (x *OptTradeCostField) Reset() {
	*x = OptTradeCostField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptTradeCostField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptTradeCostField) ProtoMessage() {}

func (x *OptTradeCostField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptTradeCostField.ProtoReflect.Descriptor instead.
func (*OptTradeCostField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{28}
}

func (x *OptTradeCostField) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *OptTradeCostField) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OptTradeCostField) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *OptTradeCostField) GetFixMargin() float64 {
	if x != nil {
		return x.FixMargin
	}
	return 0
}

func (x *OptTradeCostField) GetMiniMargin() float64 {
	if x != nil {
		return x.MiniMargin
	}
	return 0
}

func (x *OptTradeCostField) GetRoyalty() float64 {
	if x != nil {
		return x.Royalty
	}
	return 0
}

func (x *OptTradeCostField) GetExchFixedMargin() float64 {
	if x != nil {
		return x.ExchFixedMargin
	}
	return 0
}

func (x *OptTradeCostField) GetExchMiniMargin() float64 {
	if x != nil {
		return x.ExchMiniMargin
	}
	return 0
}

func (x *OptTradeCostField) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// 期权手续费率明细
// del brokerId经纪公司代码 investUnitId投资单元代码
type OptCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId              string             `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                               // 投资者代码
	ContractId              string             `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                               // 合约代码
	OpenRatioByMoney        float64            `protobuf:"fixed64,3,opt,name=openRatioByMoney,proto3" json:"openRatioByMoney,omitempty"`                                 // 开仓手续费率
	OpenRatioByVolume       float64            `protobuf:"fixed64,4,opt,name=openRatioByVolume,proto3" json:"openRatioByVolume,omitempty"`                               // 开仓手续费
	CloseRatioByMoney       float64            `protobuf:"fixed64,5,opt,name=closeRatioByMoney,proto3" json:"closeRatioByMoney,omitempty"`                               // 平仓手续费率
	CloseRatioByVolume      float64            `protobuf:"fixed64,6,opt,name=closeRatioByVolume,proto3" json:"closeRatioByVolume,omitempty"`                             // 平仓手续费
	CloseTodayRatioByMoney  float64            `protobuf:"fixed64,7,opt,name=closeTodayRatioByMoney,proto3" json:"closeTodayRatioByMoney,omitempty"`                     // 平今手续费率
	CloseTodayRatioByVolume float64            `protobuf:"fixed64,8,opt,name=closeTodayRatioByVolume,proto3" json:"closeTodayRatioByVolume,omitempty"`                   // 平今手续费
	StrikeRatioByMoney      float64            `protobuf:"fixed64,9,opt,name=strikeRatioByMoney,proto3" json:"strikeRatioByMoney,omitempty"`                             // 执行手续费率
	StrikeRatioByVolume     float64            `protobuf:"fixed64,10,opt,name=strikeRatioByVolume,proto3" json:"strikeRatioByVolume,omitempty"`                          // 执行手续费
	InvestorRangeType       EInvestorRangeType `protobuf:"varint,11,opt,name=investorRangeType,proto3,enum=fippb.EInvestorRangeType" json:"investorRangeType,omitempty"` // 投资者范围
	ExchangeId              EExchgID           `protobuf:"varint,12,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                         // 交易所编码
	HedgeFlag               EHedgeFlagType     `protobuf:"varint,13,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`                     // 投机套保标志
}

func (x *OptCommRateField) Reset() {
	*x = OptCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptCommRateField) ProtoMessage() {}

func (x *OptCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptCommRateField.ProtoReflect.Descriptor instead.
func (*OptCommRateField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{29}
}

func (x *OptCommRateField) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *OptCommRateField) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *OptCommRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *OptCommRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *OptCommRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *OptCommRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *OptCommRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *OptCommRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

func (x *OptCommRateField) GetStrikeRatioByMoney() float64 {
	if x != nil {
		return x.StrikeRatioByMoney
	}
	return 0
}

func (x *OptCommRateField) GetStrikeRatioByVolume() float64 {
	if x != nil {
		return x.StrikeRatioByVolume
	}
	return 0
}

func (x *OptCommRateField) GetInvestorRangeType() EInvestorRangeType {
	if x != nil {
		return x.InvestorRangeType
	}
	return EInvestorRangeType_IR_Null
}

func (x *OptCommRateField) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *OptCommRateField) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

type ProfitAlgorithmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId string        `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                         // 投资者代码
	Algorithm  AlgorithmType `protobuf:"varint,2,opt,name=algorithm,proto3,enum=fippb.AlgorithmType" json:"algorithm,omitempty"` // 盈亏算法
}

func (x *ProfitAlgorithmField) Reset() {
	*x = ProfitAlgorithmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitAlgorithmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitAlgorithmField) ProtoMessage() {}

func (x *ProfitAlgorithmField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitAlgorithmField.ProtoReflect.Descriptor instead.
func (*ProfitAlgorithmField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{30}
}

func (x *ProfitAlgorithmField) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ProfitAlgorithmField) GetAlgorithm() AlgorithmType {
	if x != nil {
		return x.Algorithm
	}
	return AlgorithmType_AG_Null
}

// 银期转账交易流水表
type TransferSerialField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlateSerial      int32                 `protobuf:"varint,1,opt,name=plateSerial,proto3" json:"plateSerial,omitempty"`                                             // 平台流水号
	TradeDate        string                `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                                  // 交易发起方日期
	TradingDay       string                `protobuf:"bytes,3,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                                                // 交易日期
	TradeTime        string                `protobuf:"bytes,4,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                                                  // 交易时间
	TradeCode        string                `protobuf:"bytes,5,opt,name=tradeCode,proto3" json:"tradeCode,omitempty"`                                                  // 交易代码
	SessionId        int64                 `protobuf:"varint,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                                                 // 会话编号
	BankId           string                `protobuf:"bytes,7,opt,name=bankId,proto3" json:"bankId,omitempty"`                                                        // 银行编码
	BankBranchId     string                `protobuf:"bytes,8,opt,name=bankBranchId,proto3" json:"bankBranchId,omitempty"`                                            // 银行分支机构编码
	BankAccType      EBankAccTypeType      `protobuf:"varint,9,opt,name=bankAccType,proto3,enum=fippb.EBankAccTypeType" json:"bankAccType,omitempty"`                 // 银行账号类型
	BankAccount      string                `protobuf:"bytes,10,opt,name=bankAccount,proto3" json:"bankAccount,omitempty"`                                             // 银行账号
	BankSerial       string                `protobuf:"bytes,11,opt,name=bankSerial,proto3" json:"bankSerial,omitempty"`                                               // 银行流水号
	BrokerId         string                `protobuf:"bytes,12,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                                   // 期货公司编码
	BrokerBranchId   string                `protobuf:"bytes,13,opt,name=brokerBranchId,proto3" json:"brokerBranchId,omitempty"`                                       // 期商分支机构代码
	FutureAccType    EFutureAccTypeType    `protobuf:"varint,14,opt,name=futureAccType,proto3,enum=fippb.EFutureAccTypeType" json:"futureAccType,omitempty"`          // 期货公司账号类型
	AccountId        string                `protobuf:"bytes,15,opt,name=accountId,proto3" json:"accountId,omitempty"`                                                 // 投资者账号
	InvestorId       string                `protobuf:"bytes,16,opt,name=investorId,proto3" json:"investorId,omitempty"`                                               // 投资者代码
	FutureSerial     int32                 `protobuf:"varint,17,opt,name=futureSerial,proto3" json:"futureSerial,omitempty"`                                          // 期货公司流水号
	IdCardType       EIdCardTypeType       `protobuf:"varint,18,opt,name=idCardType,proto3,enum=fippb.EIdCardTypeType" json:"idCardType,omitempty"`                   // 证件类型
	IdentifiedCardNo string                `protobuf:"bytes,19,opt,name=identifiedCardNo,proto3" json:"identifiedCardNo,omitempty"`                                   // 证件号码
	CurrencyId       string                `protobuf:"bytes,20,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                                               // 币种代码
	TradeAmount      float64               `protobuf:"fixed64,21,opt,name=tradeAmount,proto3" json:"tradeAmount,omitempty"`                                           // 交易金额
	CustFee          float64               `protobuf:"fixed64,22,opt,name=custFee,proto3" json:"custFee,omitempty"`                                                   // 应收客户费用
	BrokerFee        float64               `protobuf:"fixed64,23,opt,name=brokerFee,proto3" json:"brokerFee,omitempty"`                                               // 应收期货公司费用
	AvailabilityFlag EAvailabilityFlagType `protobuf:"varint,24,opt,name=availabilityFlag,proto3,enum=fippb.EAvailabilityFlagType" json:"availabilityFlag,omitempty"` // 有效标志
	OperatorCode     string                `protobuf:"bytes,25,opt,name=operatorCode,proto3" json:"operatorCode,omitempty"`                                           // 操作员
	BankNewAccount   string                `protobuf:"bytes,26,opt,name=bankNewAccount,proto3" json:"bankNewAccount,omitempty"`                                       // 新银行账号
	ErrorId          int32                 `protobuf:"varint,27,opt,name=errorId,proto3" json:"errorId,omitempty"`                                                    // 错误代码
	ErrorMsg         string                `protobuf:"bytes,28,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`                                                   // 错误信息
	BankName         string                `protobuf:"bytes,29,opt,name=bankName,proto3" json:"bankName,omitempty"`                                                   // 银行名称
}

func (x *TransferSerialField) Reset() {
	*x = TransferSerialField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSerialField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSerialField) ProtoMessage() {}

func (x *TransferSerialField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSerialField.ProtoReflect.Descriptor instead.
func (*TransferSerialField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{31}
}

func (x *TransferSerialField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *TransferSerialField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *TransferSerialField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *TransferSerialField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *TransferSerialField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *TransferSerialField) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *TransferSerialField) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *TransferSerialField) GetBankBranchId() string {
	if x != nil {
		return x.BankBranchId
	}
	return ""
}

func (x *TransferSerialField) GetBankAccType() EBankAccTypeType {
	if x != nil {
		return x.BankAccType
	}
	return EBankAccTypeType_EBAT_Null
}

func (x *TransferSerialField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *TransferSerialField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *TransferSerialField) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *TransferSerialField) GetBrokerBranchId() string {
	if x != nil {
		return x.BrokerBranchId
	}
	return ""
}

func (x *TransferSerialField) GetFutureAccType() EFutureAccTypeType {
	if x != nil {
		return x.FutureAccType
	}
	return EFutureAccTypeType_EFAT_Null
}

func (x *TransferSerialField) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TransferSerialField) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *TransferSerialField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *TransferSerialField) GetIdCardType() EIdCardTypeType {
	if x != nil {
		return x.IdCardType
	}
	return EIdCardTypeType_EICT_Null
}

func (x *TransferSerialField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *TransferSerialField) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *TransferSerialField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *TransferSerialField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *TransferSerialField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *TransferSerialField) GetAvailabilityFlag() EAvailabilityFlagType {
	if x != nil {
		return x.AvailabilityFlag
	}
	return EAvailabilityFlagType_EAVAF_Null
}

func (x *TransferSerialField) GetOperatorCode() string {
	if x != nil {
		return x.OperatorCode
	}
	return ""
}

func (x *TransferSerialField) GetBankNewAccount() string {
	if x != nil {
		return x.BankNewAccount
	}
	return ""
}

func (x *TransferSerialField) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *TransferSerialField) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *TransferSerialField) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

// 查询账户信息
// del installId安装编号（使用报盘机id）
type QueryAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string              `protobuf:"bytes,1,opt,name=tradeCode,proto3" json:"tradeCode,omitempty"`                                                // 业务功能码
	BankId             string              `protobuf:"bytes,2,opt,name=bankId,proto3" json:"bankId,omitempty"`                                                      // 银行代码
	BankBranchId       string              `protobuf:"bytes,3,opt,name=bankBranchId,proto3" json:"bankBranchId,omitempty"`                                          // 银行分支机构代码
	BrokerId           string              `protobuf:"bytes,4,opt,name=brokerId,proto3" json:"brokerId,omitempty"`                                                  // 期商代码
	BrokerBranchId     string              `protobuf:"bytes,5,opt,name=brokerBranchId,proto3" json:"brokerBranchId,omitempty"`                                      // 期商分支机构代码
	TradeDate          string              `protobuf:"bytes,6,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                                                // 交易日期
	TradeTime          string              `protobuf:"bytes,7,opt,name=tradeTime,proto3" json:"tradeTime,omitempty"`                                                // 交易时间
	BankSerial         string              `protobuf:"bytes,8,opt,name=bankSerial,proto3" json:"bankSerial,omitempty"`                                              // 银行流水号
	TradingDay         string              `protobuf:"bytes,9,opt,name=tradingDay,proto3" json:"tradingDay,omitempty"`                                              // 交易系统日期
	PlateSerial        int32               `protobuf:"varint,10,opt,name=plateSerial,proto3" json:"plateSerial,omitempty"`                                          // 银期平台消息流水号
	LastFragment       ELastFragmentType   `protobuf:"varint,11,opt,name=lastFragment,proto3,enum=fippb.ELastFragmentType" json:"lastFragment,omitempty"`           // 最后分片标志
	SessionId          int64               `protobuf:"varint,12,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                                              // 会话号
	CustomerName       string              `protobuf:"bytes,13,opt,name=customerName,proto3" json:"customerName,omitempty"`                                         // 客户姓名
	IdCardType         EIdCardTypeType     `protobuf:"varint,14,opt,name=idCardType,proto3,enum=fippb.EIdCardTypeType" json:"idCardType,omitempty"`                 // 证件类型
	IdentifiedCardNo   string              `protobuf:"bytes,15,opt,name=identifiedCardNo,proto3" json:"identifiedCardNo,omitempty"`                                 // 证件号码
	CustType           ECustTypeType       `protobuf:"varint,16,opt,name=custType,proto3,enum=fippb.ECustTypeType" json:"custType,omitempty"`                       // 客户类型
	BankAccount        string              `protobuf:"bytes,17,opt,name=bankAccount,proto3" json:"bankAccount,omitempty"`                                           // 银行账号
	BankPassWord       string              `protobuf:"bytes,18,opt,name=bankPassWord,proto3" json:"bankPassWord,omitempty"`                                         // 银行密码
	AccountId          string              `protobuf:"bytes,19,opt,name=accountId,proto3" json:"accountId,omitempty"`                                               // 投资者账号
	Password           string              `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`                                                 // 期货密码
	FutureSerial       int32               `protobuf:"varint,21,opt,name=futureSerial,proto3" json:"futureSerial,omitempty"`                                        // 期货公司流水号
	UserId             string              `protobuf:"bytes,22,opt,name=userId,proto3" json:"userId,omitempty"`                                                     // 用户标识
	VerifyCertNoFlag   EYesNoIndicatorType `protobuf:"varint,23,opt,name=verifyCertNoFlag,proto3,enum=fippb.EYesNoIndicatorType" json:"verifyCertNoFlag,omitempty"` // 验证客户证件号码标志
	CurrencyId         string              `protobuf:"bytes,24,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                                             // 币种代码
	Digest             string              `protobuf:"bytes,25,opt,name=digest,proto3" json:"digest,omitempty"`                                                     // 摘要
	BankAccType        EBankAccTypeType    `protobuf:"varint,26,opt,name=bankAccType,proto3,enum=fippb.EBankAccTypeType" json:"bankAccType,omitempty"`              // 银行账号类型
	DeviceId           string              `protobuf:"bytes,27,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                                                 // 渠道标志
	BankSecuAccType    EBankAccTypeType    `protobuf:"varint,28,opt,name=bankSecuAccType,proto3,enum=fippb.EBankAccTypeType" json:"bankSecuAccType,omitempty"`      // 期货单位账号类型
	BrokerIdByBank     string              `protobuf:"bytes,29,opt,name=brokerIdByBank,proto3" json:"brokerIdByBank,omitempty"`                                     // 期货公司银行编码
	BankSecuAcc        string              `protobuf:"bytes,30,opt,name=bankSecuAcc,proto3" json:"bankSecuAcc,omitempty"`                                           // 期货单位账号
	BankPwdFlag        EPwdFlagType        `protobuf:"varint,31,opt,name=bankPwdFlag,proto3,enum=fippb.EPwdFlagType" json:"bankPwdFlag,omitempty"`                  // 银行密码标志
	SecuPwdFlag        EPwdFlagType        `protobuf:"varint,32,opt,name=secuPwdFlag,proto3,enum=fippb.EPwdFlagType" json:"secuPwdFlag,omitempty"`                  // 期货资金密码核对标志
	OperNo             string              `protobuf:"bytes,33,opt,name=operNo,proto3" json:"operNo,omitempty"`                                                     // 交易柜员
	Tid                int32               `protobuf:"varint,34,opt,name=tid,proto3" json:"tid,omitempty"`                                                          // 交易ID
	LongCustomerName   string              `protobuf:"bytes,35,opt,name=longCustomerName,proto3" json:"longCustomerName,omitempty"`                                 // 长客户姓名
	PasswordSM2Encrypt bool                `protobuf:"varint,36,opt,name=passwordSM2Encrypt,proto3" json:"passwordSM2Encrypt,omitempty"`                            // 密码是否进行了SM2加密
}

func (x *QueryAccountField) Reset() {
	*x = QueryAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountField) ProtoMessage() {}

func (x *QueryAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountField.ProtoReflect.Descriptor instead.
func (*QueryAccountField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{32}
}

func (x *QueryAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *QueryAccountField) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *QueryAccountField) GetBankBranchId() string {
	if x != nil {
		return x.BankBranchId
	}
	return ""
}

func (x *QueryAccountField) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *QueryAccountField) GetBrokerBranchId() string {
	if x != nil {
		return x.BrokerBranchId
	}
	return ""
}

func (x *QueryAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *QueryAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *QueryAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *QueryAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *QueryAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *QueryAccountField) GetLastFragment() ELastFragmentType {
	if x != nil {
		return x.LastFragment
	}
	return ELastFragmentType_ELF_Null
}

func (x *QueryAccountField) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *QueryAccountField) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *QueryAccountField) GetIdCardType() EIdCardTypeType {
	if x != nil {
		return x.IdCardType
	}
	return EIdCardTypeType_EICT_Null
}

func (x *QueryAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *QueryAccountField) GetCustType() ECustTypeType {
	if x != nil {
		return x.CustType
	}
	return ECustTypeType_ECUSTT_Null
}

func (x *QueryAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *QueryAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *QueryAccountField) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *QueryAccountField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *QueryAccountField) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryAccountField) GetVerifyCertNoFlag() EYesNoIndicatorType {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return EYesNoIndicatorType_EYNI_Null
}

func (x *QueryAccountField) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *QueryAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *QueryAccountField) GetBankAccType() EBankAccTypeType {
	if x != nil {
		return x.BankAccType
	}
	return EBankAccTypeType_EBAT_Null
}

func (x *QueryAccountField) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *QueryAccountField) GetBankSecuAccType() EBankAccTypeType {
	if x != nil {
		return x.BankSecuAccType
	}
	return EBankAccTypeType_EBAT_Null
}

func (x *QueryAccountField) GetBrokerIdByBank() string {
	if x != nil {
		return x.BrokerIdByBank
	}
	return ""
}

func (x *QueryAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *QueryAccountField) GetBankPwdFlag() EPwdFlagType {
	if x != nil {
		return x.BankPwdFlag
	}
	return EPwdFlagType_EBPWDF_Null
}

func (x *QueryAccountField) GetSecuPwdFlag() EPwdFlagType {
	if x != nil {
		return x.SecuPwdFlag
	}
	return EPwdFlagType_EBPWDF_Null
}

func (x *QueryAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *QueryAccountField) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *QueryAccountField) GetLongCustomerName() string {
	if x != nil {
		return x.LongCustomerName
	}
	return ""
}

func (x *QueryAccountField) GetPasswordSM2Encrypt() bool {
	if x != nil {
		return x.PasswordSM2Encrypt
	}
	return false
}

// 查询银行余额通知
type NotifyQueryAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAccountField *QueryAccountField `protobuf:"bytes,1,opt,name=queryAccountField,proto3" json:"queryAccountField,omitempty"` // 查询账户信息
	RequestId         int32              `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`                // 请求编号
	BankUseAmount     float64            `protobuf:"fixed64,3,opt,name=bankUseAmount,proto3" json:"bankUseAmount,omitempty"`       // 银行可用金额
	BankFetchAmount   float64            `protobuf:"fixed64,4,opt,name=bankFetchAmount,proto3" json:"bankFetchAmount,omitempty"`   // 银行可取金额
	ErrorId           int32              `protobuf:"varint,5,opt,name=errorId,proto3" json:"errorId,omitempty"`                    // 错误代码
	ErrorMessage      string             `protobuf:"bytes,6,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`           // 错误信息
}

func (x *NotifyQueryAccountField) Reset() {
	*x = NotifyQueryAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyQueryAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyQueryAccountField) ProtoMessage() {}

func (x *NotifyQueryAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyQueryAccountField.ProtoReflect.Descriptor instead.
func (*NotifyQueryAccountField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{33}
}

func (x *NotifyQueryAccountField) GetQueryAccountField() *QueryAccountField {
	if x != nil {
		return x.QueryAccountField
	}
	return nil
}

func (x *NotifyQueryAccountField) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NotifyQueryAccountField) GetBankUseAmount() float64 {
	if x != nil {
		return x.BankUseAmount
	}
	return 0
}

func (x *NotifyQueryAccountField) GetBankFetchAmount() float64 {
	if x != nil {
		return x.BankFetchAmount
	}
	return 0
}

func (x *NotifyQueryAccountField) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *NotifyQueryAccountField) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 签约银行明细
// del brokerId经纪公司代码
type ContractBankField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankId      string `protobuf:"bytes,1,opt,name=bankId,proto3" json:"bankId,omitempty"`           // 银行代码          ctp hs
	BankBrchId  string `protobuf:"bytes,2,opt,name=bankBrchId,proto3" json:"bankBrchId,omitempty"`   // 银行分中心代码    ctp
	BankName    string `protobuf:"bytes,3,opt,name=bankName,proto3" json:"bankName,omitempty"`       // 银行名称          ctp hs
	BankAccount string `protobuf:"bytes,4,opt,name=bankAccount,proto3" json:"bankAccount,omitempty"` // 银行账号          hs
}

func (x *ContractBankField) Reset() {
	*x = ContractBankField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractBankField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractBankField) ProtoMessage() {}

func (x *ContractBankField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractBankField.ProtoReflect.Descriptor instead.
func (*ContractBankField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{34}
}

func (x *ContractBankField) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ContractBankField) GetBankBrchId() string {
	if x != nil {
		return x.BankBrchId
	}
	return ""
}

func (x *ContractBankField) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ContractBankField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

// 询价明细
// del brokerId经纪公司代码 participantId会员代码 forQuoteLocalId本地询价编号 exchangeContId合约在交易所的代码 traderId交易所交易员代码 installId安装编号（使用报盘机id）
type ForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId     string             `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                                        // 投资者代码
	ContractId     string             `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                                        // 合约代码
	ForQuoteRef    string             `protobuf:"bytes,3,opt,name=forQuoteRef,proto3" json:"forQuoteRef,omitempty"`                                      // 询价引用
	UserId         string             `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`                                                // 用户代码
	ExchangeId     EExchgID           `protobuf:"varint,5,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                   // 交易所编码
	ClientId       string             `protobuf:"bytes,6,opt,name=clientId,proto3" json:"clientId,omitempty"`                                            // 客户代码
	InsertDate     string             `protobuf:"bytes,7,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                        // 报单日期
	InsertTime     string             `protobuf:"bytes,8,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                        // 插入时间
	ForQuoteStatus EForQuoteStausType `protobuf:"varint,9,opt,name=forQuoteStatus,proto3,enum=fippb.EForQuoteStausType" json:"forQuoteStatus,omitempty"` // 询价状态
	SameUserKey    *SameUserKey       `protobuf:"bytes,10,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                     // 同名用户唯一标示
	StatusMsg      string             `protobuf:"bytes,11,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                         // 状态信息
}

func (x *ForQuoteField) Reset() {
	*x = ForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForQuoteField) ProtoMessage() {}

func (x *ForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForQuoteField.ProtoReflect.Descriptor instead.
func (*ForQuoteField) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{35}
}

func (x *ForQuoteField) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ForQuoteField) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ForQuoteField) GetForQuoteRef() string {
	if x != nil {
		return x.ForQuoteRef
	}
	return ""
}

func (x *ForQuoteField) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ForQuoteField) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ForQuoteField) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ForQuoteField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *ForQuoteField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *ForQuoteField) GetForQuoteStatus() EForQuoteStausType {
	if x != nil {
		return x.ForQuoteStatus
	}
	return EForQuoteStausType_EFQST_Null
}

func (x *ForQuoteField) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ForQuoteField) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// 询价录入明细
type ForQuoteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorId  string   `protobuf:"bytes,1,opt,name=investorId,proto3" json:"investorId,omitempty"`                      // 投资者代码          NM def=登录userid
	ContractId  string   `protobuf:"bytes,2,opt,name=contractId,proto3" json:"contractId,omitempty"`                      // 合约代码            NM def=所有
	ForQuoteRef int64    `protobuf:"varint,3,opt,name=forQuoteRef,proto3" json:"forQuoteRef,omitempty"`                   // 询价引用            NM
	ExchangeId  EExchgID `protobuf:"varint,4,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"` // 交易所代码          NM def=所有
}

func (x *ForQuoteInfo) Reset() {
	*x = ForQuoteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForQuoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForQuoteInfo) ProtoMessage() {}

func (x *ForQuoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForQuoteInfo.ProtoReflect.Descriptor instead.
func (*ForQuoteInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{36}
}

func (x *ForQuoteInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ForQuoteInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ForQuoteInfo) GetForQuoteRef() int64 {
	if x != nil {
		return x.ForQuoteRef
	}
	return 0
}

func (x *ForQuoteInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

// 条件单报单信息
// del brokerId经纪公司代码 timeCondition有效期类型 gtdDateGTD日期 volumnCondition成交量类型 minVolumn最小成交量 contingentCondition触发条件 stopPrice止损价
//
//	forceCloseReason强平原因 businessUnit业务单元（报单的席位） userForceClose用户强平标志 isSwapOrder互换单标志 investUnitId投资单元代码 isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效)
//	ipAddressIP地址 macAddressMac地址 accountId资金账户 orderPriceType报单类型(上期没有市价) currencyId币种代码(默认人民币) userId用户代码
type ConOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         string          `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                      // 合约代码
	OrderPriceType     EOrderPriceType `protobuf:"varint,2,opt,name=orderPriceType,proto3,enum=fippb.EOrderPriceType" json:"orderPriceType,omitempty"`  // 委托价格类型
	OrderPricePlusTick uint32          `protobuf:"varint,3,opt,name=orderPricePlusTick,proto3" json:"orderPricePlusTick,omitempty"`                     // 超价参数 ctp最多支持到3个tick
	OrderLimitPrice    float64         `protobuf:"fixed64,4,opt,name=orderLimitPrice,proto3" json:"orderLimitPrice,omitempty"`                          // 委托限价
	OrderVolumn        uint64          `protobuf:"varint,5,opt,name=orderVolumn,proto3" json:"orderVolumn,omitempty"`                                   // 报单数量
	Direction          EDirectionType  `protobuf:"varint,6,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`             // 买卖标志
	OffsetFlag         EOffsetFlagType `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`          // 开平标志
	HedgeFlag          EHedgeFlagType  `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`             // 投机套保标志
	OrderRef           int64           `protobuf:"varint,9,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                         // 报单引用        由客户端维护，递增
	ExchangeId         EExchgID        `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                // 交易所编码       def=自动匹配
	ConPriceType       EConPriceType   `protobuf:"varint,11,opt,name=conPriceType,proto3,enum=fippb.EConPriceType" json:"conPriceType,omitempty"`       // 触发价格类型
	ConCompareType     EConCompareType `protobuf:"varint,12,opt,name=conCompareType,proto3,enum=fippb.EConCompareType" json:"conCompareType,omitempty"` // 触发比较类型
	ConPrice           float64         `protobuf:"fixed64,13,opt,name=conPrice,proto3" json:"conPrice,omitempty"`                                       // 比较价格
	InvestorId         string          `protobuf:"bytes,14,opt,name=investorId,proto3" json:"investorId,omitempty"`                                     // 投资者代码id
}

func (x *ConOrderInfo) Reset() {
	*x = ConOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConOrderInfo) ProtoMessage() {}

func (x *ConOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConOrderInfo.ProtoReflect.Descriptor instead.
func (*ConOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{37}
}

func (x *ConOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ConOrderInfo) GetOrderPriceType() EOrderPriceType {
	if x != nil {
		return x.OrderPriceType
	}
	return EOrderPriceType_EOPT_Null
}

func (x *ConOrderInfo) GetOrderPricePlusTick() uint32 {
	if x != nil {
		return x.OrderPricePlusTick
	}
	return 0
}

func (x *ConOrderInfo) GetOrderLimitPrice() float64 {
	if x != nil {
		return x.OrderLimitPrice
	}
	return 0
}

func (x *ConOrderInfo) GetOrderVolumn() uint64 {
	if x != nil {
		return x.OrderVolumn
	}
	return 0
}

func (x *ConOrderInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *ConOrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *ConOrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ConOrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ConOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ConOrderInfo) GetConPriceType() EConPriceType {
	if x != nil {
		return x.ConPriceType
	}
	return EConPriceType_ECPT_Null
}

func (x *ConOrderInfo) GetConCompareType() EConCompareType {
	if x != nil {
		return x.ConCompareType
	}
	return EConCompareType_ECCT_Null
}

func (x *ConOrderInfo) GetConPrice() float64 {
	if x != nil {
		return x.ConPrice
	}
	return 0
}

func (x *ConOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// 条件单委托信息
// del traderId交易所交易员代码 orderLocalId本地报单编号 brokerId经纪公司代码 forceCloseReason强平原因 businessUnit业务单元(报单的席位) installId安装编号（使用报盘机id）orderSource报单来源
//
//	suspendTime挂起时间(报单被挂起时间) activeTime激活时间(报单激活时间) participantId会员代码(经纪公司在交易所的代码) settlementId结算编号(交易所结算部给出的编号) clearingPartId结算会员编号(交易所结算部给出的结算会员编号)
//	isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效) sequenceNo序号(报单返回编号，目前不使用) timeCondition有效期类型 GTDDateGTD日期 volumeCondition成交量类型 minVolume最小成交量
//	contingentCondition触发条件 stopPrice止损价 exchangeContId合约在交易所的代码 tradingDay交易日 activeTraderId最后修改交易所交易员代码 branchId营业部编号 IPAddressIP地址 macAddressMac地址
//	notifySequence报单提示序号(未使用) orderPriceType报单价格条件 userId用户代码
type ConOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConOrderInfo      *ConOrderInfo          `protobuf:"bytes,1,opt,name=conOrderInfo,proto3" json:"conOrderInfo,omitempty"`                                              // 条件单报单信息
	OrderSubmitStatus EOrderSubmitStatusType `protobuf:"varint,2,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态
	OrderSysId        string                 `protobuf:"bytes,3,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号
	OrderStatus       EOrderStatusType       `protobuf:"varint,4,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   //!报单状态
	InsertDate        string                 `protobuf:"bytes,5,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期
	InsertTime        string                 `protobuf:"bytes,6,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  //!委托时间
	UpdateTime        string                 `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                  // 最后修改时间
	CancelTime        string                 `protobuf:"bytes,8,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  //!撤销时间
	SameUserKey       *SameUserKey           `protobuf:"bytes,9,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示
	StatusMsg         string                 `protobuf:"bytes,10,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                   // 状态信息
}

func (x *ConOrderDetail) Reset() {
	*x = ConOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConOrderDetail) ProtoMessage() {}

func (x *ConOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConOrderDetail.ProtoReflect.Descriptor instead.
func (*ConOrderDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{38}
}

func (x *ConOrderDetail) GetConOrderInfo() *ConOrderInfo {
	if x != nil {
		return x.ConOrderInfo
	}
	return nil
}

func (x *ConOrderDetail) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *ConOrderDetail) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *ConOrderDetail) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *ConOrderDetail) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *ConOrderDetail) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *ConOrderDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ConOrderDetail) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *ConOrderDetail) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *ConOrderDetail) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// 损赢单报单信息
// del brokerId经纪公司代码 timeCondition有效期类型 gtdDateGTD日期 volumnCondition成交量类型 minVolumn最小成交量 contingentCondition触发条件 stopPrice止损价
//
//	forceCloseReason强平原因 businessUnit业务单元（报单的席位） userForceClose用户强平标志 isSwapOrder互换单标志 investUnitId投资单元代码 isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效)
//	ipAddressIP地址 macAddressMac地址 accountId资金账户 orderPriceType报单类型(上期没有市价) currencyId币种代码(默认人民币) userId用户代码
type TouchOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         string          `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                     // 合约代码
	OrderPriceType     EOrderPriceType `protobuf:"varint,2,opt,name=orderPriceType,proto3,enum=fippb.EOrderPriceType" json:"orderPriceType,omitempty"` // 委托价格类型
	OrderPricePlusTick uint32          `protobuf:"varint,3,opt,name=orderPricePlusTick,proto3" json:"orderPricePlusTick,omitempty"`                    // 超价参数 ctp最多支持到3个tick
	OrderLimitPrice    float64         `protobuf:"fixed64,4,opt,name=orderLimitPrice,proto3" json:"orderLimitPrice,omitempty"`                         // 委托限价
	OrderVolumn        uint64          `protobuf:"varint,5,opt,name=orderVolumn,proto3" json:"orderVolumn,omitempty"`                                  // 报单数量
	Direction          EDirectionType  `protobuf:"varint,6,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`            // 买卖标志
	OffsetFlag         EOffsetFlagType `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`         // 开平标志
	HedgeFlag          EHedgeFlagType  `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`            // 投机套保标志
	OrderRef           int64           `protobuf:"varint,9,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                        // 报单引用        NM 由客户端维护，递增
	ExchangeId         EExchgID        `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`               // 交易所编码       NM def=自动匹配
	StopPrice          float64         `protobuf:"fixed64,11,opt,name=stopPrice,proto3" json:"stopPrice,omitempty"`                                    // 比较价格
	TouchOrderType     EConOrderType   `protobuf:"varint,12,opt,name=touchOrderType,proto3,enum=fippb.EConOrderType" json:"touchOrderType,omitempty"`  // 止盈止损类型
	InvestorId         string          `protobuf:"bytes,13,opt,name=investorId,proto3" json:"investorId,omitempty"`                                    // 投资者代码id
}

func (x *TouchOrderInfo) Reset() {
	*x = TouchOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TouchOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchOrderInfo) ProtoMessage() {}

func (x *TouchOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchOrderInfo.ProtoReflect.Descriptor instead.
func (*TouchOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{39}
}

func (x *TouchOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TouchOrderInfo) GetOrderPriceType() EOrderPriceType {
	if x != nil {
		return x.OrderPriceType
	}
	return EOrderPriceType_EOPT_Null
}

func (x *TouchOrderInfo) GetOrderPricePlusTick() uint32 {
	if x != nil {
		return x.OrderPricePlusTick
	}
	return 0
}

func (x *TouchOrderInfo) GetOrderLimitPrice() float64 {
	if x != nil {
		return x.OrderLimitPrice
	}
	return 0
}

func (x *TouchOrderInfo) GetOrderVolumn() uint64 {
	if x != nil {
		return x.OrderVolumn
	}
	return 0
}

func (x *TouchOrderInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *TouchOrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *TouchOrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *TouchOrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *TouchOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *TouchOrderInfo) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *TouchOrderInfo) GetTouchOrderType() EConOrderType {
	if x != nil {
		return x.TouchOrderType
	}
	return EConOrderType_ECOT_Null
}

func (x *TouchOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

// 损赢单委托信息
// del traderId交易所交易员代码 orderLocalId本地报单编号 brokerId经纪公司代码 forceCloseReason强平原因 businessUnit业务单元(报单的席位) installId安装编号（使用报盘机id）orderSource报单来源
//
//	suspendTime挂起时间(报单被挂起时间) activeTime激活时间(报单激活时间) participantId会员代码(经纪公司在交易所的代码) settlementId结算编号(交易所结算部给出的编号) clearingPartId结算会员编号(交易所结算部给出的结算会员编号)
//	isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效) sequenceNo序号(报单返回编号，目前不使用) timeCondition有效期类型 GTDDateGTD日期 volumeCondition成交量类型 minVolume最小成交量
//	contingentCondition触发条件 stopPrice止损价 exchangeContId合约在交易所的代码 tradingDay交易日 activeTraderId最后修改交易所交易员代码 branchId营业部编号 IPAddressIP地址 macAddressMac地址
//	notifySequence报单提示序号(未使用) orderPriceType报单价格条件 userId用户代码
type TouchOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TouchOrderInfo    *TouchOrderInfo        `protobuf:"bytes,1,opt,name=touchOrderInfo,proto3" json:"touchOrderInfo,omitempty"`                                          // 损赢单报单信息
	OrderSubmitStatus EOrderSubmitStatusType `protobuf:"varint,2,opt,name=orderSubmitStatus,proto3,enum=fippb.EOrderSubmitStatusType" json:"orderSubmitStatus,omitempty"` // 报单提交状态
	OrderSysId        string                 `protobuf:"bytes,3,opt,name=orderSysId,proto3" json:"orderSysId,omitempty"`                                                  // 报单编号
	OrderStatus       EOrderStatusType       `protobuf:"varint,4,opt,name=orderStatus,proto3,enum=fippb.EOrderStatusType" json:"orderStatus,omitempty"`                   //!报单状态
	InsertDate        string                 `protobuf:"bytes,5,opt,name=insertDate,proto3" json:"insertDate,omitempty"`                                                  // 报单日期
	InsertTime        string                 `protobuf:"bytes,6,opt,name=insertTime,proto3" json:"insertTime,omitempty"`                                                  //!委托时间
	UpdateTime        string                 `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                                                  // 最后修改时间
	CancelTime        string                 `protobuf:"bytes,8,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                                                  //!撤销时间
	SameUserKey       *SameUserKey           `protobuf:"bytes,9,opt,name=sameUserKey,proto3" json:"sameUserKey,omitempty"`                                                // 同名用户唯一标示
	StatusMsg         string                 `protobuf:"bytes,10,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                                   // 状态信息
	ActiveTime        string                 `protobuf:"bytes,11,opt,name=activeTime,proto3" json:"activeTime,omitempty"`                                                 // 触发时间         ctp
}

func (x *TouchOrderDetail) Reset() {
	*x = TouchOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TouchOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchOrderDetail) ProtoMessage() {}

func (x *TouchOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchOrderDetail.ProtoReflect.Descriptor instead.
func (*TouchOrderDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{40}
}

func (x *TouchOrderDetail) GetTouchOrderInfo() *TouchOrderInfo {
	if x != nil {
		return x.TouchOrderInfo
	}
	return nil
}

func (x *TouchOrderDetail) GetOrderSubmitStatus() EOrderSubmitStatusType {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return EOrderSubmitStatusType_OSS_InsertSubmitted
}

func (x *TouchOrderDetail) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *TouchOrderDetail) GetOrderStatus() EOrderStatusType {
	if x != nil {
		return x.OrderStatus
	}
	return EOrderStatusType_OST_AllTraded
}

func (x *TouchOrderDetail) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *TouchOrderDetail) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *TouchOrderDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *TouchOrderDetail) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *TouchOrderDetail) GetSameUserKey() *SameUserKey {
	if x != nil {
		return x.SameUserKey
	}
	return nil
}

func (x *TouchOrderDetail) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *TouchOrderDetail) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

// 预埋单信息
// del brokerId经纪公司代码 timeCondition有效期类型 gtdDateGTD日期 volumnCondition成交量类型 minVolumn最小成交量 contingentCondition触发条件 stopPrice止损价
//
//	forceCloseReason强平原因 businessUnit业务单元（报单的席位） userForceClose用户强平标志 isSwapOrder互换单标志 investUnitId投资单元代码 isAutoSuspend自动挂起标志(0不挂，起当日有效 1挂起，指定日期前有效)
//	ipAddressIP地址 macAddressMac地址 accountId资金账户 orderPriceType报单类型(上期没有市价) currencyId币种代码(默认人民币) userId用户代码
type ParkedOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         string            `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                     // 合约代码
	OrderPriceType     EOrderPriceType   `protobuf:"varint,2,opt,name=orderPriceType,proto3,enum=fippb.EOrderPriceType" json:"orderPriceType,omitempty"` // 委托价格类型
	OrderPricePlusTick uint32            `protobuf:"varint,3,opt,name=orderPricePlusTick,proto3" json:"orderPricePlusTick,omitempty"`                    // 超价参数 ctp最多支持到3个tick
	OrderLimitPrice    float64           `protobuf:"fixed64,4,opt,name=orderLimitPrice,proto3" json:"orderLimitPrice,omitempty"`                         // 委托限价
	OrderVolumn        uint64            `protobuf:"varint,5,opt,name=orderVolumn,proto3" json:"orderVolumn,omitempty"`                                  // 报单数量
	Direction          EDirectionType    `protobuf:"varint,6,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`            // 买卖标志
	OffsetFlag         EOffsetFlagType   `protobuf:"varint,7,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`         // 开平标志
	HedgeFlag          EHedgeFlagType    `protobuf:"varint,8,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`            // 投机套保标志
	OrderRef           int64             `protobuf:"varint,9,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                        // 报单引用         NM 由客户端维护，递增
	ExchangeId         EExchgID          `protobuf:"varint,10,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`               // 交易所编码       NM def=自动匹配
	ParkedOrderId      string            `protobuf:"bytes,11,opt,name=parkedOrderId,proto3" json:"parkedOrderId,omitempty"`                              // 预埋报单编号
	Status             EParkedStatusType `protobuf:"varint,12,opt,name=status,proto3,enum=fippb.EParkedStatusType" json:"status,omitempty"`              // 预埋单状态
	StatusMsg          string            `protobuf:"bytes,13,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`                                      // 错误信息
	ErrorId            int64             `protobuf:"varint,14,opt,name=errorId,proto3" json:"errorId,omitempty"`                                         // 错误代码
}

func (x *ParkedOrderInfo) Reset() {
	*x = ParkedOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkedOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkedOrderInfo) ProtoMessage() {}

func (x *ParkedOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkedOrderInfo.ProtoReflect.Descriptor instead.
func (*ParkedOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{41}
}

func (x *ParkedOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ParkedOrderInfo) GetOrderPriceType() EOrderPriceType {
	if x != nil {
		return x.OrderPriceType
	}
	return EOrderPriceType_EOPT_Null
}

func (x *ParkedOrderInfo) GetOrderPricePlusTick() uint32 {
	if x != nil {
		return x.OrderPricePlusTick
	}
	return 0
}

func (x *ParkedOrderInfo) GetOrderLimitPrice() float64 {
	if x != nil {
		return x.OrderLimitPrice
	}
	return 0
}

func (x *ParkedOrderInfo) GetOrderVolumn() uint64 {
	if x != nil {
		return x.OrderVolumn
	}
	return 0
}

func (x *ParkedOrderInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *ParkedOrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *ParkedOrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ParkedOrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ParkedOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ParkedOrderInfo) GetParkedOrderId() string {
	if x != nil {
		return x.ParkedOrderId
	}
	return ""
}

func (x *ParkedOrderInfo) GetStatus() EParkedStatusType {
	if x != nil {
		return x.Status
	}
	return EParkedStatusType_PAOS_Null
}

func (x *ParkedOrderInfo) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ParkedOrderInfo) GetErrorId() int64 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

// 云条件单信息
// 云条件单信息          价格条件单       时间条件单         状态  条件单      止盈止损单 合并在一起
type ConditionOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ////////////////////////////////////orderinfo  参照普通报单的参数/////////////////////////////////////////////////////////////////
	ContractId        string                `protobuf:"bytes,1,opt,name=contractId,proto3" json:"contractId,omitempty"`                                                  // 合约代码         M
	InsertPrice       float64               `protobuf:"fixed64,2,opt,name=insertPrice,proto3" json:"insertPrice,omitempty"`                                              // 报单价格         M
	OrderVolumn       uint64                `protobuf:"varint,3,opt,name=orderVolumn,proto3" json:"orderVolumn,omitempty"`                                               // 报单数量         M
	Direction         EDirectionType        `protobuf:"varint,4,opt,name=direction,proto3,enum=fippb.EDirectionType" json:"direction,omitempty"`                         // 买卖标志         M
	OffsetFlag        EOffsetFlagType       `protobuf:"varint,5,opt,name=offsetFlag,proto3,enum=fippb.EOffsetFlagType" json:"offsetFlag,omitempty"`                      // 开平标志         M
	HedgeFlag         EHedgeFlagType        `protobuf:"varint,6,opt,name=hedgeFlag,proto3,enum=fippb.EHedgeFlagType" json:"hedgeFlag,omitempty"`                         // 投机套保标志     M
	OrderRef          int64                 `protobuf:"varint,7,opt,name=orderRef,proto3" json:"orderRef,omitempty"`                                                     // 报单引用         NM 由客户端维护，递增
	ExchangeId        EExchgID              `protobuf:"varint,8,opt,name=exchangeId,proto3,enum=fippb.EExchgID" json:"exchangeId,omitempty"`                             // 交易所编码       NM def=自动匹配
	ClientId          string                `protobuf:"bytes,9,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                      // 交易编码         NM def=自动匹配   ，一期没有，移动端会增加
	InvestorId        string                `protobuf:"bytes,10,opt,name=investorId,proto3" json:"investorId,omitempty"`                                                 // 投资者代码       NM max(12) def=登录userid   一期条件单没有
	ConditionValidity EConOrderValidityType `protobuf:"varint,11,opt,name=conditionValidity,proto3,enum=fippb.EConOrderValidityType" json:"conditionValidity,omitempty"` //有效期类型 应该有当日有效和永久有效两种类型
	PriceType         EPriceType            `protobuf:"varint,12,opt,name=priceType,proto3,enum=fippb.EPriceType" json:"priceType,omitempty"`                            //价格类型       最新价 排队价 对手价 超价 市价 触发价，移动端没有超价这个类型
	TriggerType       ETriggerOrderType     `protobuf:"varint,13,opt,name=triggerType,proto3,enum=fippb.ETriggerOrderType" json:"triggerType,omitempty"`                 //按照需求文档分类   1价格条件单 2时间条件单 3状态条件单 4止盈 5止损 6画线条件单 7画线止盈 8画线止损 9保本 10止损动态追踪                11止盈动态追踪
	// 价格条件单   和止盈止损
	TriggerPriceType   ETriggerPriceType   `protobuf:"varint,14,opt,name=triggerPriceType,proto3,enum=fippb.ETriggerPriceType" json:"triggerPriceType,omitempty"`       //触发价格类型
	TriggerCompareType ETriggerCompareType `protobuf:"varint,15,opt,name=triggerCompareType,proto3,enum=fippb.ETriggerCompareType" json:"triggerCompareType,omitempty"` //触发比较类型
	ComparePrice       float64             `protobuf:"fixed64,16,opt,name=comparePrice,proto3" json:"comparePrice,omitempty"`                                           //比较价格
	RetracementDiff    float64             `protobuf:"fixed64,17,opt,name=retracementDiff,proto3" json:"retracementDiff,omitempty"`                                     //回撤价差 动态追踪用到
	// 时间
	TimeCondition string `protobuf:"bytes,18,opt,name=timeCondition,proto3" json:"timeCondition,omitempty"` //时间条件
	// 状态
	StatusCondition ETriggerStatusType `protobuf:"varint,19,opt,name=statusCondition,proto3,enum=fippb.ETriggerStatusType" json:"statusCondition,omitempty"` //状态条件  ，开盘触发，只有在非交易时间和暂停时间可以新增状态条件单
	// 附加条件，二期新加,价格和时间才有附加条件，状态条件单和止盈止损单没有
	ExtralTriggerPriceType   ETriggerPriceType   `protobuf:"varint,20,opt,name=extralTriggerPriceType,proto3,enum=fippb.ETriggerPriceType" json:"extralTriggerPriceType,omitempty"`       //附加条件的价格类型
	ExtralTriggerCompareType ETriggerCompareType `protobuf:"varint,21,opt,name=extralTriggerCompareType,proto3,enum=fippb.ETriggerCompareType" json:"extralTriggerCompareType,omitempty"` //附加条件的比较类型
	ExtralComparePrice       float64             `protobuf:"fixed64,22,opt,name=extralComparePrice,proto3" json:"extralComparePrice,omitempty"`                                           //附加条件的比较价格
	// 最大下单手数和tick
	MaxHand   uint32  `protobuf:"varint,23,opt,name=maxHand,proto3" json:"maxHand,omitempty"`      //最大下单手数，用于大单拆分
	PriceTick float64 `protobuf:"fixed64,24,opt,name=priceTick,proto3" json:"priceTick,omitempty"` //tick，主要用于算超价
}

func (x *ConditionOrderInfo) Reset() {
	*x = ConditionOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderInfo) ProtoMessage() {}

func (x *ConditionOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderInfo.ProtoReflect.Descriptor instead.
func (*ConditionOrderInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{42}
}

func (x *ConditionOrderInfo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ConditionOrderInfo) GetInsertPrice() float64 {
	if x != nil {
		return x.InsertPrice
	}
	return 0
}

func (x *ConditionOrderInfo) GetOrderVolumn() uint64 {
	if x != nil {
		return x.OrderVolumn
	}
	return 0
}

func (x *ConditionOrderInfo) GetDirection() EDirectionType {
	if x != nil {
		return x.Direction
	}
	return EDirectionType_D_Null
}

func (x *ConditionOrderInfo) GetOffsetFlag() EOffsetFlagType {
	if x != nil {
		return x.OffsetFlag
	}
	return EOffsetFlagType_OF_Null
}

func (x *ConditionOrderInfo) GetHedgeFlag() EHedgeFlagType {
	if x != nil {
		return x.HedgeFlag
	}
	return EHedgeFlagType_HF_Null
}

func (x *ConditionOrderInfo) GetOrderRef() int64 {
	if x != nil {
		return x.OrderRef
	}
	return 0
}

func (x *ConditionOrderInfo) GetExchangeId() EExchgID {
	if x != nil {
		return x.ExchangeId
	}
	return EExchgID_ExchNull
}

func (x *ConditionOrderInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConditionOrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *ConditionOrderInfo) GetConditionValidity() EConOrderValidityType {
	if x != nil {
		return x.ConditionValidity
	}
	return EConOrderValidityType_COVT_NULL
}

func (x *ConditionOrderInfo) GetPriceType() EPriceType {
	if x != nil {
		return x.PriceType
	}
	return EPriceType_PRI_Null
}

func (x *ConditionOrderInfo) GetTriggerType() ETriggerOrderType {
	if x != nil {
		return x.TriggerType
	}
	return ETriggerOrderType_TR_Null
}

func (x *ConditionOrderInfo) GetTriggerPriceType() ETriggerPriceType {
	if x != nil {
		return x.TriggerPriceType
	}
	return ETriggerPriceType_TRIP_Null
}

func (x *ConditionOrderInfo) GetTriggerCompareType() ETriggerCompareType {
	if x != nil {
		return x.TriggerCompareType
	}
	return ETriggerCompareType_TRIC_Null
}

func (x *ConditionOrderInfo) GetComparePrice() float64 {
	if x != nil {
		return x.ComparePrice
	}
	return 0
}

func (x *ConditionOrderInfo) GetRetracementDiff() float64 {
	if x != nil {
		return x.RetracementDiff
	}
	return 0
}

func (x *ConditionOrderInfo) GetTimeCondition() string {
	if x != nil {
		return x.TimeCondition
	}
	return ""
}

func (x *ConditionOrderInfo) GetStatusCondition() ETriggerStatusType {
	if x != nil {
		return x.StatusCondition
	}
	return ETriggerStatusType_TST_Null
}

func (x *ConditionOrderInfo) GetExtralTriggerPriceType() ETriggerPriceType {
	if x != nil {
		return x.ExtralTriggerPriceType
	}
	return ETriggerPriceType_TRIP_Null
}

func (x *ConditionOrderInfo) GetExtralTriggerCompareType() ETriggerCompareType {
	if x != nil {
		return x.ExtralTriggerCompareType
	}
	return ETriggerCompareType_TRIC_Null
}

func (x *ConditionOrderInfo) GetExtralComparePrice() float64 {
	if x != nil {
		return x.ExtralComparePrice
	}
	return 0
}

func (x *ConditionOrderInfo) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *ConditionOrderInfo) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

// 云条件单交易参数
type ConditionOrderTradeparameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseFirst        ESwitchStatus          `protobuf:"varint,1,opt,name=closeFirst,proto3,enum=fippb.ESwitchStatus" json:"closeFirst,omitempty"`                        //优先平今状态
	SplitOrder        ESwitchStatus          `protobuf:"varint,2,opt,name=splitOrder,proto3,enum=fippb.ESwitchStatus" json:"splitOrder,omitempty"`                        //大单拆分状态
	PlusPoint         uint32                 `protobuf:"varint,3,opt,name=plusPoint,proto3" json:"plusPoint,omitempty"`                                                   //超价点位      最终只会用到一个点位，将买卖超价点位合并
	PricePlusStandard EPlusPriceStandardType `protobuf:"varint,4,opt,name=pricePlusStandard,proto3,enum=fippb.EPlusPriceStandardType" json:"pricePlusStandard,omitempty"` //超价基准，是个价格类型               对手价、排队价、最新价
	// 自动开仓止盈止损参数
	OpenAutoStop        ESwitchStatus          `protobuf:"varint,5,opt,name=openAutoStop,proto3,enum=fippb.ESwitchStatus" json:"openAutoStop,omitempty"`                        //自动开仓止盈止损
	AutoStopType        EAutoStopType          `protobuf:"varint,6,opt,name=autoStopType,proto3,enum=fippb.EAutoStopType" json:"autoStopType,omitempty"`                        //类型：限价止损+现价止盈、限价止损、限价止盈、动态追踪4种
	StopLossPriceType   EAutoStopLossPriceType `protobuf:"varint,7,opt,name=stopLossPriceType,proto3,enum=fippb.EAutoStopLossPriceType" json:"stopLossPriceType,omitempty"`     //止损委托价（类型：对手价、超价、市价）
	StopProfitPriceType EAutoStopLossPriceType `protobuf:"varint,8,opt,name=stopProfitPriceType,proto3,enum=fippb.EAutoStopLossPriceType" json:"stopProfitPriceType,omitempty"` //止盈委托价（类型：对手价、超价、市价）
	StopLossPoint       uint32                 `protobuf:"varint,9,opt,name=stopLossPoint,proto3" json:"stopLossPoint,omitempty"`                                               //止损点位
	StopProfitPoint     uint32                 `protobuf:"varint,10,opt,name=stopProfitPoint,proto3" json:"stopProfitPoint,omitempty"`                                          //止盈点位
}

func (x *ConditionOrderTradeparameter) Reset() {
	*x = ConditionOrderTradeparameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderTradeparameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderTradeparameter) ProtoMessage() {}

func (x *ConditionOrderTradeparameter) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderTradeparameter.ProtoReflect.Descriptor instead.
func (*ConditionOrderTradeparameter) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{43}
}

func (x *ConditionOrderTradeparameter) GetCloseFirst() ESwitchStatus {
	if x != nil {
		return x.CloseFirst
	}
	return ESwitchStatus_SW_NULL
}

func (x *ConditionOrderTradeparameter) GetSplitOrder() ESwitchStatus {
	if x != nil {
		return x.SplitOrder
	}
	return ESwitchStatus_SW_NULL
}

func (x *ConditionOrderTradeparameter) GetPlusPoint() uint32 {
	if x != nil {
		return x.PlusPoint
	}
	return 0
}

func (x *ConditionOrderTradeparameter) GetPricePlusStandard() EPlusPriceStandardType {
	if x != nil {
		return x.PricePlusStandard
	}
	return EPlusPriceStandardType_PPST_Null
}

func (x *ConditionOrderTradeparameter) GetOpenAutoStop() ESwitchStatus {
	if x != nil {
		return x.OpenAutoStop
	}
	return ESwitchStatus_SW_NULL
}

func (x *ConditionOrderTradeparameter) GetAutoStopType() EAutoStopType {
	if x != nil {
		return x.AutoStopType
	}
	return EAutoStopType_ATS_Null
}

func (x *ConditionOrderTradeparameter) GetStopLossPriceType() EAutoStopLossPriceType {
	if x != nil {
		return x.StopLossPriceType
	}
	return EAutoStopLossPriceType_ATSLP_Null
}

func (x *ConditionOrderTradeparameter) GetStopProfitPriceType() EAutoStopLossPriceType {
	if x != nil {
		return x.StopProfitPriceType
	}
	return EAutoStopLossPriceType_ATSLP_Null
}

func (x *ConditionOrderTradeparameter) GetStopLossPoint() uint32 {
	if x != nil {
		return x.StopLossPoint
	}
	return 0
}

func (x *ConditionOrderTradeparameter) GetStopProfitPoint() uint32 {
	if x != nil {
		return x.StopProfitPoint
	}
	return 0
}

// 云条件单明细            除了包含报单时的基本信息，还包含服务器处理后的一些附加信息
type ConditionOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderInfo        *ConditionOrderInfo           `protobuf:"bytes,1,opt,name=orderInfo,proto3" json:"orderInfo,omitempty"`               //条件单报单信息  （合约 类型 条件 下单 有效期类型包含在内）
	TradeParameter   *ConditionOrderTradeparameter `protobuf:"bytes,2,opt,name=tradeParameter,proto3" json:"tradeParameter,omitempty"`     //条件单交易参数  （止损方式  止损价 止盈价包含在内）
	ConditionOrderId string                        `protobuf:"bytes,3,opt,name=conditionOrderId,proto3" json:"conditionOrderId,omitempty"` //server端维护的condition_order_id  类似于普通报单的orderSysId
	// 以下字段按照列表的ui图进行新增
	CreateTime         string                           `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                    //创建时间
	RtnType            EConRtnType                      `protobuf:"varint,5,opt,name=RtnType,proto3,enum=fippb.EConRtnType" json:"RtnType,omitempty"`                                  //1.新增操作 2.修改操作 3.暂停操作 4.启动操作 5.删除操作 6.触发通知 7.持仓为零删除止盈止损单
	TriggerStatus      EConditionOrderTriggerStatusType `protobuf:"varint,6,opt,name=triggerStatus,proto3,enum=fippb.EConditionOrderTriggerStatusType" json:"triggerStatus,omitempty"` //触发状态 1.已触发          2.未触发
	RunningStatus      EConditionOrderRunningStatusType `protobuf:"varint,7,opt,name=runningStatus,proto3,enum=fippb.EConditionOrderRunningStatusType" json:"runningStatus,omitempty"` //未触发列表里要显示的状态 1.运行               2.暂停      删除操作成功后发送rtn告知已删除3.已删除
	StriggerTime       string                           `protobuf:"bytes,8,opt,name=striggerTime,proto3" json:"striggerTime,omitempty"`                                                //触发时间
	OrderResult        EOrderResultType                 `protobuf:"varint,9,opt,name=orderResult,proto3,enum=fippb.EOrderResultType" json:"orderResult,omitempty"`                     //已触发的委托结果 1.成功  2.失败
	OrderResultMsg     string                           `protobuf:"bytes,10,opt,name=orderResultMsg,proto3" json:"orderResultMsg,omitempty"`                                           //主要是记录已触发委托失败的原因
	TriggerOrderVolumn uint64                           `protobuf:"varint,11,opt,name=triggerOrderVolumn,proto3" json:"triggerOrderVolumn,omitempty"`                                  //触发报单数量
}

func (x *ConditionOrderDetail) Reset() {
	*x = ConditionOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOrderDetail) ProtoMessage() {}

func (x *ConditionOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOrderDetail.ProtoReflect.Descriptor instead.
func (*ConditionOrderDetail) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{44}
}

func (x *ConditionOrderDetail) GetOrderInfo() *ConditionOrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *ConditionOrderDetail) GetTradeParameter() *ConditionOrderTradeparameter {
	if x != nil {
		return x.TradeParameter
	}
	return nil
}

func (x *ConditionOrderDetail) GetConditionOrderId() string {
	if x != nil {
		return x.ConditionOrderId
	}
	return ""
}

func (x *ConditionOrderDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ConditionOrderDetail) GetRtnType() EConRtnType {
	if x != nil {
		return x.RtnType
	}
	return EConRtnType_CRT_NULL
}

func (x *ConditionOrderDetail) GetTriggerStatus() EConditionOrderTriggerStatusType {
	if x != nil {
		return x.TriggerStatus
	}
	return EConditionOrderTriggerStatusType_COTST_Null
}

func (x *ConditionOrderDetail) GetRunningStatus() EConditionOrderRunningStatusType {
	if x != nil {
		return x.RunningStatus
	}
	return EConditionOrderRunningStatusType_CORST_Null
}

func (x *ConditionOrderDetail) GetStriggerTime() string {
	if x != nil {
		return x.StriggerTime
	}
	return ""
}

func (x *ConditionOrderDetail) GetOrderResult() EOrderResultType {
	if x != nil {
		return x.OrderResult
	}
	return EOrderResultType_ORT_NULL
}

func (x *ConditionOrderDetail) GetOrderResultMsg() string {
	if x != nil {
		return x.OrderResultMsg
	}
	return ""
}

func (x *ConditionOrderDetail) GetTriggerOrderVolumn() uint64 {
	if x != nil {
		return x.TriggerOrderVolumn
	}
	return 0
}

// 普通下单的开仓自动止盈止损参数
type OrdinaryOrderAutoStopParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenAutoStop        ESwitchStatus          `protobuf:"varint,1,opt,name=openAutoStop,proto3,enum=fippb.ESwitchStatus" json:"openAutoStop,omitempty"`                        //自动开仓止盈止损
	AutoStopType        EAutoStopType          `protobuf:"varint,2,opt,name=autoStopType,proto3,enum=fippb.EAutoStopType" json:"autoStopType,omitempty"`                        //类型：限价止损+现价止盈、限价止损、限价止盈、动态追踪4种
	StopLossPriceType   EAutoStopLossPriceType `protobuf:"varint,3,opt,name=stopLossPriceType,proto3,enum=fippb.EAutoStopLossPriceType" json:"stopLossPriceType,omitempty"`     //止损委托价（类型：对手价、超价、市价）
	StopProfitPriceType EAutoStopLossPriceType `protobuf:"varint,4,opt,name=stopProfitPriceType,proto3,enum=fippb.EAutoStopLossPriceType" json:"stopProfitPriceType,omitempty"` //止盈委托价（类型：对手价、超价、市价）
	StopLossPoint       uint32                 `protobuf:"varint,5,opt,name=stopLossPoint,proto3" json:"stopLossPoint,omitempty"`                                               //止损点位
	StopProfitPoint     uint32                 `protobuf:"varint,6,opt,name=stopProfitPoint,proto3" json:"stopProfitPoint,omitempty"`                                           //止盈点位
	RetracementDiff     float64                `protobuf:"fixed64,7,opt,name=retracementDiff,proto3" json:"retracementDiff,omitempty"`                                          //回撤价差 动态追踪用到
	MaxHand             uint32                 `protobuf:"varint,8,opt,name=maxHand,proto3" json:"maxHand,omitempty"`                                                           //最大下单手数，用于大单拆分
	PriceTick           float64                `protobuf:"fixed64,9,opt,name=priceTick,proto3" json:"priceTick,omitempty"`                                                      //tick，主要用于和点位相乘
	FrontId             int32                  `protobuf:"varint,10,opt,name=frontId,proto3" json:"frontId,omitempty"`                                                          //  前置编号，目前xone都是0
	SessionId           int64                  `protobuf:"varint,11,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                                                      //  会话ID
	CloseFirst          ESwitchStatus          `protobuf:"varint,12,opt,name=closeFirst,proto3,enum=fippb.ESwitchStatus" json:"closeFirst,omitempty"`                           //优先平今状态
}

func (x *OrdinaryOrderAutoStopParameter) Reset() {
	*x = OrdinaryOrderAutoStopParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdinaryOrderAutoStopParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdinaryOrderAutoStopParameter) ProtoMessage() {}

func (x *OrdinaryOrderAutoStopParameter) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdinaryOrderAutoStopParameter.ProtoReflect.Descriptor instead.
func (*OrdinaryOrderAutoStopParameter) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{45}
}

func (x *OrdinaryOrderAutoStopParameter) GetOpenAutoStop() ESwitchStatus {
	if x != nil {
		return x.OpenAutoStop
	}
	return ESwitchStatus_SW_NULL
}

func (x *OrdinaryOrderAutoStopParameter) GetAutoStopType() EAutoStopType {
	if x != nil {
		return x.AutoStopType
	}
	return EAutoStopType_ATS_Null
}

func (x *OrdinaryOrderAutoStopParameter) GetStopLossPriceType() EAutoStopLossPriceType {
	if x != nil {
		return x.StopLossPriceType
	}
	return EAutoStopLossPriceType_ATSLP_Null
}

func (x *OrdinaryOrderAutoStopParameter) GetStopProfitPriceType() EAutoStopLossPriceType {
	if x != nil {
		return x.StopProfitPriceType
	}
	return EAutoStopLossPriceType_ATSLP_Null
}

func (x *OrdinaryOrderAutoStopParameter) GetStopLossPoint() uint32 {
	if x != nil {
		return x.StopLossPoint
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetStopProfitPoint() uint32 {
	if x != nil {
		return x.StopProfitPoint
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetRetracementDiff() float64 {
	if x != nil {
		return x.RetracementDiff
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetMaxHand() uint32 {
	if x != nil {
		return x.MaxHand
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *OrdinaryOrderAutoStopParameter) GetCloseFirst() ESwitchStatus {
	if x != nil {
		return x.CloseFirst
	}
	return ESwitchStatus_SW_NULL
}

// HS站点信息
type StationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafeLevel string `protobuf:"bytes,1,opt,name=safeLevel,proto3" json:"safeLevel,omitempty"` // 安全等级
	CommPwd   string `protobuf:"bytes,2,opt,name=commPwd,proto3" json:"commPwd,omitempty"`     // 通讯密码
	CertFile  string `protobuf:"bytes,3,opt,name=certFile,proto3" json:"certFile,omitempty"`   // 证书文件
	CertPwd   string `protobuf:"bytes,4,opt,name=certPwd,proto3" json:"certPwd,omitempty"`     // 证书密码
	ArServer  string `protobuf:"bytes,5,opt,name=arServer,proto3" json:"arServer,omitempty"`   // 服务器地址
	ArName    string `protobuf:"bytes,6,opt,name=arName,proto3" json:"arName,omitempty"`       // 服务器组名
}

func (x *StationInfo) Reset() {
	*x = StationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_def_trade_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationInfo) ProtoMessage() {}

func (x *StationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_def_trade_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationInfo.ProtoReflect.Descriptor instead.
func (*StationInfo) Descriptor() ([]byte, []int) {
	return file_fip_def_trade_proto_rawDescGZIP(), []int{46}
}

func (x *StationInfo) GetSafeLevel() string {
	if x != nil {
		return x.SafeLevel
	}
	return ""
}

func (x *StationInfo) GetCommPwd() string {
	if x != nil {
		return x.CommPwd
	}
	return ""
}

func (x *StationInfo) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *StationInfo) GetCertPwd() string {
	if x != nil {
		return x.CertPwd
	}
	return ""
}

func (x *StationInfo) GetArServer() string {
	if x != nil {
		return x.ArServer
	}
	return ""
}

func (x *StationInfo) GetArName() string {
	if x != nil {
		return x.ArName
	}
	return ""
}

var File_fip_def_trade_proto protoreflect.FileDescriptor

var file_fip_def_trade_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69,
	0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45,
	0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x68, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x66, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x66, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x7a, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x7a, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0c,
	0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9a, 0x03, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x9c,
	0x02, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xf4, 0x03,
	0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x08, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x0e, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x76, 0x61, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x41, 0x76, 0x61, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x76, 0x61, 0x69, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x65, 0x73, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x79, 0x65, 0x73, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x76, 0x61, 0x69, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x79, 0x65, 0x73, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x79, 0x65, 0x73, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x79, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x79, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71,
	0x4e, 0x6f, 0x22, 0x95, 0x03, 0x0a, 0x0c, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x76, 0x61, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xf2, 0x07,
	0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x22, 0xf0, 0x04, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0xaa, 0x0b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d,
	0x69, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x66,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x5a, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc7, 0x0f, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72,
	0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17,
	0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x73,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b,
	0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x73, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x12, 0x3c, 0x0a, 0x19,
	0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69,
	0x73, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x50, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x70,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x09, 0x0a,
	0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c,
	0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x6f,
	0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c, 0x6f, 0x6e,
	0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x46,
	0x65, 0x65, 0x56, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x65, 0x65, 0x56, 0x6f,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4e, 0x6f,
	0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x6f, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x50, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x41, 0x72, 0x62, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x22, 0x9a, 0x05, 0x0a, 0x11, 0x41, 0x72, 0x62, 0x69, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0xa5, 0x04, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36,
	0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x04, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x0e, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd6,
	0x06, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a,
	0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f,
	0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x46, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x46, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd1, 0x05, 0x0a,
	0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xe3, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x78, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x66, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x05, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x22, 0xb5, 0x08, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x0a, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x59, 0x65, 0x73, 0x4e, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41,
	0x63, 0x63, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f,
	0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x4d, 0x32, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x4d, 0x32, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x66,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8f, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50,
	0x6c, 0x75, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67,
	0x22, 0xd7, 0x04, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09,
	0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67,
	0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xed, 0x03, 0x0a, 0x10, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3d, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b,
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x73, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x04, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73,
	0x54, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x09, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x22, 0xd7, 0x04, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70,
	0x70, 0x62, 0x2e, 0x45, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0xeb, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x69, 0x70, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x74,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x52, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x52, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xd2, 0x04,
	0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x50, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x50, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x77,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x77, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x6e, 0x0a, 0x0f, 0x45, 0x41, 0x70, 0x69, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x5f, 0x4e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x70, 0x69,
	0x44, 0x69, 0x73, 0x63, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x41, 0x52, 0x5f, 0x45,
	0x6e, 0x64, 0x10, 0x05, 0x2a, 0x52, 0x0a, 0x12, 0x45, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f,
	0x4f, 0x44, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f, 0x4f,
	0x44, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4f, 0x4f, 0x44,
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4f,
	0x4f, 0x44, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x0f, 0x45, 0x41, 0x70,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x41, 0x43, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x41,
	0x43, 0x5f, 0x43, 0x74, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x43, 0x5f, 0x58,
	0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x43, 0x5f, 0x48, 0x73, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x41, 0x43, 0x5f, 0x4a, 0x73, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x41, 0x43, 0x5f, 0x43, 0x74, 0x70, 0x5f, 0x46, 0x65, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x41, 0x43, 0x5f, 0x48, 0x73, 0x5f, 0x46, 0x65, 0x6e, 0x73, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x41, 0x43, 0x5f, 0x58, 0x31, 0x74, 0x70, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x41, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0x5a, 0x0a, 0x10, 0x45, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x54, 0x52, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x54, 0x52, 0x5f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x54, 0x52, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54,
	0x52, 0x5f, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x54, 0x52,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x48, 0x0a, 0x0f, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x5f, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03,
	0x2a, 0x3d, 0x0a, 0x0c, 0x45, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x5a, 0x54, 0x50, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x5a, 0x54, 0x50, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x5a, 0x54, 0x50, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a,
	0x47, 0x0a, 0x12, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x44, 0x5f, 0x4e, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x44, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x44, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x44, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0e, 0x45, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x46,
	0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x46, 0x5f, 0x53, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48,
	0x46, 0x5f, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x46, 0x5f, 0x48, 0x65, 0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x46, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x11, 0x45,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x53, 0x44, 0x5f, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x53, 0x44, 0x5f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x53, 0x44, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x3e, 0x0a,
	0x0e, 0x45, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x5f, 0x42, 0x75, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x5f, 0x53, 0x65, 0x6c, 0x6c,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0xa5, 0x01,
	0x0a, 0x0e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x44, 0x54, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x52, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x52, 0x44, 0x54, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x44, 0x54, 0x5f,
	0x4f, 0x54, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x44, 0x54, 0x5f, 0x45, 0x46,
	0x50, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52,
	0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x44, 0x54, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x06, 0x2a, 0xd7, 0x03, 0x0a, 0x13, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x50, 0x54, 0x5f, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x54, 0x5f, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x54, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x77, 0x6f, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x68, 0x72, 0x65, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x54, 0x5f, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x54,
	0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x4f, 0x6e,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x54, 0x5f,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x77, 0x6f,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54, 0x5f, 0x41,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x54, 0x5f,
	0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x50, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73,
	0x4f, 0x6e, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50,
	0x54, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x54,
	0x77, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x54,
	0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50,
	0x54, 0x5f, 0x46, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x11, 0x2a,
	0x75, 0x0a, 0x12, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x43, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x43, 0x5f, 0x47, 0x46, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43,
	0x5f, 0x47, 0x46, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43, 0x5f, 0x47, 0x54, 0x44,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x43, 0x5f, 0x47, 0x46, 0x41, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0x50, 0x0a, 0x14, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x56, 0x43, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x43, 0x5f, 0x41, 0x56, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x43, 0x5f, 0x4d, 0x56, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x43, 0x5f, 0x43, 0x56, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0xbd, 0x04, 0x0a, 0x18, 0x45, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x43, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x43, 0x5f, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x43, 0x5f, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x43, 0x5f, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x43, 0x5f, 0x50,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x43, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x43, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f,
	0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x43, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x43, 0x5f,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0a, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x43, 0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x43, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x43, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x11, 0x2a, 0xde, 0x01, 0x0a, 0x15, 0x45, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x43, 0x43, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x43, 0x43,
	0x5f, 0x4c, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x43, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x43, 0x43, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x43, 0x43, 0x5f, 0x4e, 0x6f, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x43, 0x43, 0x5f, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x43, 0x43, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x43, 0x43, 0x5f, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x43, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0xca, 0x01, 0x0a, 0x16, 0x45, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x53, 0x5f, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x53, 0x53, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x53, 0x5f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x53,
	0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x53, 0x53,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0xea, 0x01, 0x0a, 0x10, 0x45, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x53, 0x54, 0x5f, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x53,
	0x54, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x54,
	0x5f, 0x4e, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x6f, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x09, 0x2a, 0x4e, 0x0a, 0x10, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x52, 0x43, 0x5f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x53, 0x52, 0x43, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x02, 0x2a, 0xa9, 0x01, 0x0a, 0x0e, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x44, 0x54, 0x5f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x54, 0x5f,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x54, 0x5f, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x54, 0x5f,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x52, 0x44, 0x54, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x44, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x2a,
	0xa3, 0x01, 0x0a, 0x11, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x43, 0x5f, 0x4e, 0x55, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x43, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x43, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x43, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x43, 0x5f, 0x53, 0x70, 0x6f,
	0x74, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x43, 0x5f, 0x45, 0x46, 0x50, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x43, 0x5f, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x43, 0x5f, 0x4d, 0x49, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x43, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x09, 0x2a, 0x63, 0x0a, 0x16, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x50, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x50, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x11, 0x45, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x4e, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x54, 0x5f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x5c, 0x0a, 0x15, 0x45, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x44, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x44, 0x54, 0x5f, 0x55, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x44, 0x54, 0x5f, 0x4e, 0x6f, 0x55, 0x73, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x44, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x1b, 0x45, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4d, 0x53, 0x41, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4d, 0x53, 0x41, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x4d, 0x53, 0x41, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x10, 0x45,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x50, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x50, 0x5f, 0x50, 0x75, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x50, 0x5f, 0x4e, 0x75, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x91, 0x01, 0x0a, 0x14, 0x45, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x42, 0x55, 0x4c, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x53, 0x54, 0x44, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x53, 0x54, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x50, 0x52, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x43, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x42, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0xab, 0x01, 0x0a, 0x0f, 0x45,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x46, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x5f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x46, 0x5f, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x46, 0x5f,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x46, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x46, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f,
	0x66, 0x66, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x46, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0x51, 0x0a, 0x10, 0x45, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x53, 0x52, 0x43, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x53, 0x52, 0x43, 0x5f, 0x42, 0x75, 0x79, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x53, 0x52, 0x43, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x53, 0x52, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x10, 0x45,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x52, 0x43, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x53, 0x52, 0x43, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x56,
	0x0a, 0x12, 0x45, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x52, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x52, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x52, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x52, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x52,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x0f, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54,
	0x50, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x50,
	0x5f, 0x45, 0x78, 0x65, 0x63, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x50, 0x5f,
	0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54,
	0x50, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x50, 0x0a, 0x17, 0x45, 0x45, 0x78, 0x65, 0x78,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x43, 0x46, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x43, 0x46, 0x5f, 0x4e,
	0x6f, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x4f, 0x43, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x89, 0x02, 0x0a, 0x0f, 0x45, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x45, 0x52, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x45, 0x52, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x45,
	0x52, 0x5f, 0x4e, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x45, 0x52, 0x5f, 0x4e, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x45, 0x52, 0x5f, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x45, 0x52, 0x5f,
	0x4e, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x45,
	0x52, 0x5f, 0x4e, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x45, 0x52, 0x5f, 0x4e, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x45, 0x52, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x45, 0x52, 0x5f,
	0x4e, 0x6f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x45, 0x52, 0x5f, 0x4e, 0x6f,
	0x45, 0x78, 0x65, 0x63, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x45, 0x52, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x45, 0x52, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x0c, 0x2a, 0x58, 0x0a, 0x11, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43,
	0x54, 0x5f, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a,
	0xdf, 0x01, 0x0a, 0x12, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x50, 0x5f, 0x4e, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x50, 0x5f, 0x46, 0x41, 0x4b, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x59, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x59, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x4d, 0x4b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4f, 0x50, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4f, 0x50, 0x5f, 0x46, 0x49, 0x56, 0x45,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x50, 0x5f, 0x42, 0x45, 0x53,
	0x54, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4f, 0x50, 0x5f,
	0x42, 0x45, 0x53, 0x54, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x50, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x09, 0x2a, 0xff, 0x01, 0x0a, 0x0f, 0x45, 0x45, 0x78, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x54, 0x79, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4f, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x4c, 0x4f, 0x53,
	0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x54, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4f, 0x54, 0x5f, 0x44, 0x53,
	0x54, 0x4c, 0x44, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4f, 0x54, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x53, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x4c,
	0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x4f, 0x54, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4f, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x0a, 0x2a, 0x86, 0x01, 0x0a, 0x11, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x43, 0x49,
	0x44, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x49,
	0x44, 0x54, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x49, 0x44, 0x54, 0x5f, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x49, 0x44, 0x54, 0x5f, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x49, 0x44, 0x54, 0x5f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x43, 0x49, 0x44, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x2a, 0x47, 0x0a, 0x11,
	0x45, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x46, 0x5f, 0x59, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4c, 0x46, 0x5f, 0x4e, 0x6f, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x46, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x83, 0x04, 0x0a, 0x0f, 0x45, 0x49, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x43,
	0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x49, 0x43, 0x54,
	0x5f, 0x45, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x49,
	0x44, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x43, 0x54, 0x5f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x43, 0x61, 0x72, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49,
	0x43, 0x54, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x07, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x54, 0x61, 0x69, 0x77, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x64, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x43, 0x54, 0x5f,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x49, 0x43, 0x54, 0x5f, 0x54, 0x61, 0x78, 0x4e, 0x6f, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x49, 0x43, 0x54, 0x5f, 0x48, 0x4d, 0x4d, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x49, 0x43, 0x54, 0x5f, 0x54, 0x77, 0x4d, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x10, 0x0d, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x49, 0x43,
	0x54, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x49, 0x43, 0x54, 0x5f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49,
	0x43, 0x54, 0x5f, 0x48, 0x4b, 0x4d, 0x43, 0x49, 0x44, 0x43, 0x61, 0x72, 0x64, 0x10, 0x12, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x43,
	0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0x14, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x49, 0x43, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x15, 0x2a, 0x5b, 0x0a, 0x0d, 0x45,
	0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x43, 0x55, 0x53, 0x54, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x43, 0x55, 0x53, 0x54, 0x54, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x55, 0x53, 0x54, 0x54, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x43, 0x55, 0x53,
	0x54, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x4d, 0x0a, 0x13, 0x45, 0x59, 0x65, 0x73,
	0x4e, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x59, 0x4e, 0x49, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x59, 0x4e, 0x49, 0x5f, 0x59, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x59, 0x4e, 0x49, 0x5f, 0x4e, 0x6f, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x59, 0x4e,
	0x49, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0f, 0x45, 0x46, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x46,
	0x50, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46, 0x50,
	0x46, 0x5f, 0x42, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46, 0x50, 0x46, 0x5f,
	0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46, 0x50, 0x46, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46, 0x50, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x04, 0x2a, 0x57, 0x0a, 0x10, 0x45, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x42, 0x41, 0x54, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x41, 0x54, 0x5f, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x6f, 0x6f, 0x6b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x42, 0x41, 0x54, 0x5f,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x42, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x12, 0x45, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x46, 0x41, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x46, 0x41, 0x54, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x6f, 0x6f, 0x6b,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x41, 0x54, 0x5f, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x41, 0x54, 0x5f,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x46, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x84, 0x02, 0x0a, 0x15, 0x45,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x56, 0x41, 0x46,
	0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x56, 0x41,
	0x46, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41,
	0x56, 0x41, 0x46, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x56,
	0x41, 0x46, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x6c, 0x65,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x6c, 0x65, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x56, 0x41, 0x46, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x0b, 0x2a, 0x73, 0x0a, 0x0c, 0x45, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42, 0x50, 0x57, 0x44, 0x46, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42, 0x50, 0x57, 0x44, 0x46, 0x5f, 0x4e, 0x6f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x50, 0x57, 0x44, 0x46,
	0x5f, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x42, 0x50, 0x57, 0x44, 0x46, 0x5f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x42, 0x50, 0x57, 0x44, 0x46,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x7f, 0x0a, 0x13, 0x45, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x54, 0x52, 0x46, 0x53, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x54, 0x52, 0x46, 0x53, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x54, 0x52, 0x46, 0x53, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x54, 0x52, 0x46, 0x53, 0x5f, 0x4e, 0x75, 0x6c,
	0x6c, 0x69, 0x66, 0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x52, 0x46, 0x53, 0x5f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54, 0x52, 0x46,
	0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x05, 0x2a, 0x63, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x47, 0x5f, 0x4e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x47, 0x5f, 0x41, 0x6c, 0x6c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47, 0x5f, 0x4f, 0x6e, 0x6c, 0x79, 0x4c, 0x6f, 0x73, 0x74,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47, 0x5f, 0x4f, 0x6e, 0x6c, 0x79, 0x47, 0x61, 0x69,
	0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x47, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x47, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x08,
	0x45, 0x42, 0x6f, 0x6f, 0x4c, 0x65, 0x61, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x42, 0x4c, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x42, 0x4c, 0x5f, 0x54, 0x72,
	0x75, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x42, 0x4c, 0x5f, 0x46, 0x61, 0x6c, 0x73,
	0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x42, 0x4c, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x16, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f,
	0x41, 0x53, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x41,
	0x53, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4f, 0x41, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x41, 0x53, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4f, 0x41, 0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x04, 0x2a, 0x70, 0x0a, 0x12, 0x45, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x46, 0x51, 0x53, 0x54,
	0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x51, 0x53, 0x54,
	0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x46, 0x51, 0x53, 0x54, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x51, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x46, 0x51, 0x53, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x04, 0x2a, 0xb8, 0x01, 0x0a, 0x15, 0x45, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x49, 0x53, 0x5f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x53, 0x5f, 0x4e, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x53, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49,
	0x53, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x53, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x49, 0x53, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x49, 0x53, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x49, 0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0x52,
	0x0a, 0x0d, 0x45, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x43, 0x4f, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x43, 0x4f, 0x54, 0x5f, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x43, 0x4f, 0x54, 0x5f, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43, 0x4f, 0x54, 0x5f, 0x45, 0x6e, 0x64,
	0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0d, 0x45, 0x43, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43, 0x50, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x50, 0x54, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x50, 0x54, 0x5f, 0x41,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x50,
	0x54, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x43, 0x50, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x86, 0x01, 0x0a, 0x0f, 0x45,
	0x43, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x43, 0x43, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x43, 0x43, 0x54, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x43, 0x54, 0x5f, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43,
	0x43, 0x54, 0x5f, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x43, 0x43, 0x54, 0x5f, 0x4c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43, 0x43, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x05, 0x2a, 0x90, 0x01, 0x0a, 0x0f, 0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f, 0x50, 0x54, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f,
	0x50, 0x54, 0x5f, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4f, 0x50, 0x54,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x11, 0x45, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x41, 0x4f, 0x53, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41,
	0x4f, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x41, 0x4f, 0x53, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x41, 0x4f, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x41, 0x4f, 0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x9b, 0x02, 0x0a, 0x11,
	0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x52, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x5f, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x52, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x5f, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x5f, 0x4c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x52, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x5f,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x52, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x52, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x0c, 0x2a, 0x81, 0x01, 0x0a, 0x0a, 0x45, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x5f, 0x4c, 0x61,
	0x73, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x5f, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x5f, 0x52, 0x69, 0x61, 0x6c, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x49, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0x82, 0x01,
	0x0a, 0x11, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f,
	0x77, 0x6e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x50, 0x5f, 0x45, 0x6e, 0x64,
	0x10, 0x06, 0x2a, 0x7e, 0x0a, 0x13, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x65, 0x73, 0x73, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x6e, 0x64,
	0x10, 0x05, 0x2a, 0x3d, 0x0a, 0x12, 0x45, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x53, 0x54, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x53, 0x54, 0x5f, 0x4f, 0x70,
	0x65, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x53, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x02, 0x2a, 0x43, 0x0a, 0x0d, 0x45, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x57, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x57, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x57, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x57,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x0d, 0x45, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x53, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x53, 0x5f, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x54, 0x53, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x53, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x53, 0x5f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x54, 0x53, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x05, 0x2a, 0x6a, 0x0a, 0x16, 0x45, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x53, 0x4c, 0x50, 0x5f, 0x4e, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x53, 0x4c, 0x50, 0x5f, 0x52, 0x69,
	0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x53, 0x4c, 0x50, 0x5f, 0x4f,
	0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x53, 0x4c, 0x50, 0x5f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x53, 0x4c, 0x50,
	0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x6c, 0x0a, 0x18, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x53, 0x50, 0x50, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x53, 0x50, 0x50, 0x5f, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x53, 0x50, 0x50, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x53, 0x50, 0x50, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x53, 0x50, 0x50, 0x5f, 0x45,
	0x6e, 0x64, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x10, 0x45, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x43, 0x4f, 0x54,
	0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x43, 0x4f, 0x54, 0x5f,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x51,
	0x43, 0x4f, 0x54, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x43,
	0x4f, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x16, 0x45, 0x51, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x43, 0x4f, 0x53, 0x54,
	0x5f, 0x55, 0x6e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x63, 0x0a,
	0x16, 0x45, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x50, 0x53, 0x54, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x50, 0x53, 0x54, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x50, 0x53, 0x54, 0x5f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x50, 0x53, 0x54, 0x5f, 0x52, 0x69,
	0x61, 0x6c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x50, 0x53, 0x54, 0x5f, 0x45, 0x6e, 0x64,
	0x10, 0x04, 0x2a, 0x6d, 0x0a, 0x20, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x54, 0x53, 0x54, 0x5f,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x54, 0x53, 0x54, 0x5f,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x54, 0x53, 0x54, 0x5f, 0x55, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x54, 0x53, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10,
	0x03, 0x2a, 0x79, 0x0a, 0x20, 0x45, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x52, 0x53, 0x54, 0x5f, 0x4e,
	0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x52, 0x53, 0x54, 0x5f, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x52, 0x53,
	0x54, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x52, 0x53, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x52, 0x53, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x64, 0x0a, 0x10,
	0x45, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x6e, 0x64,
	0x10, 0x04, 0x2a, 0x56, 0x0a, 0x15, 0x45, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x56, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x56, 0x54, 0x5f, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x56, 0x54, 0x5f, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x56, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x0b, 0x45,
	0x43, 0x6f, 0x6e, 0x52, 0x74, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x54, 0x5f,
	0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x54, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52, 0x54, 0x5f, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x54, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x54, 0x5f, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0x67, 0x0a, 0x13, 0x45, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x43, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x43, 0x4f, 0x54, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x43, 0x4f, 0x54, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x43, 0x4f, 0x54, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x12, 0x45, 0x43, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x43,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x43, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x43, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x43, 0x54, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x11, 0x45, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x47, 0x52, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x54, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x4f, 0x4d, 0x50, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x53, 0x54, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x08, 0x2a, 0x61, 0x0a, 0x13, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x54, 0x53, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x54, 0x53, 0x53, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x54, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x54, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54,
	0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0e, 0x45, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43,
	0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x53, 0x5f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x43, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x10, 0x04, 0x2a, 0x6f, 0x0a, 0x0d, 0x45, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x53, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x53, 0x5f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41,
	0x53, 0x5f, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x53, 0x5f, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x12, 0x45, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x43, 0x44, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43,
	0x44, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x44,
	0x54, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x42, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43,
	0x44, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x18, 0x45, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x53, 0x50, 0x53, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x53, 0x50, 0x53, 0x5f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x53,
	0x50, 0x53, 0x5f, 0x55, 0x4e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x53, 0x50, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x42,
	0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76, 0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_def_trade_proto_rawDescOnce sync.Once
	file_fip_def_trade_proto_rawDescData = file_fip_def_trade_proto_rawDesc
)

func file_fip_def_trade_proto_rawDescGZIP() []byte {
	file_fip_def_trade_proto_rawDescOnce.Do(func() {
		file_fip_def_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_def_trade_proto_rawDescData)
	})
	return file_fip_def_trade_proto_rawDescData
}

var file_fip_def_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 83)
var file_fip_def_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_fip_def_trade_proto_goTypes = []interface{}{
	(EApiReleaseType)(0),                   // 0: fippb.EApiReleaseType
	(EOpenOrDestroyType)(0),                // 1: fippb.EOpenOrDestroyType
	(EApiChannelType)(0),                   // 2: fippb.EApiChannelType
	(ETradingRoleType)(0),                  // 3: fippb.ETradingRoleType
	(EActionFlagType)(0),                   // 4: fippb.EActionFlagType
	(EBizTypeType)(0),                      // 5: fippb.EBizTypeType
	(EPosiDirectionType)(0),                // 6: fippb.EPosiDirectionType
	(EHedgeFlagType)(0),                    // 7: fippb.EHedgeFlagType
	(EPositionDataType)(0),                 // 8: fippb.EPositionDataType
	(EDirectionType)(0),                    // 9: fippb.EDirectionType
	(ETradeTypeType)(0),                    // 10: fippb.ETradeTypeType
	(EOrderPriceTypeType)(0),               // 11: fippb.EOrderPriceTypeType
	(ETimeConditionType)(0),                // 12: fippb.ETimeConditionType
	(EVolumeConditionType)(0),              // 13: fippb.EVolumeConditionType
	(EContingentConditionType)(0),          // 14: fippb.EContingentConditionType
	(EForceCloseReasonType)(0),             // 15: fippb.EForceCloseReasonType
	(EOrderSubmitStatusType)(0),            // 16: fippb.EOrderSubmitStatusType
	(EOrderStatusType)(0),                  // 17: fippb.EOrderStatusType
	(EOrderSourceType)(0),                  // 18: fippb.EOrderSourceType
	(EOrderTypeType)(0),                    // 19: fippb.EOrderTypeType
	(EProductClassType)(0),                 // 20: fippb.EProductClassType
	(EContractLifePhaseType)(0),            // 21: fippb.EContractLifePhaseType
	(EPositionTypeType)(0),                 // 22: fippb.EPositionTypeType
	(EPositionDataTypeType)(0),             // 23: fippb.EPositionDataTypeType
	(EMaxMarginSideAlgorithmType)(0),       // 24: fippb.EMaxMarginSideAlgorithmType
	(EOptionsTypeType)(0),                  // 25: fippb.EOptionsTypeType
	(ECombinationTypeType)(0),              // 26: fippb.ECombinationTypeType
	(EOffsetFlagType)(0),                   // 27: fippb.EOffsetFlagType
	(EPriceSourceType)(0),                  // 28: fippb.EPriceSourceType
	(ETradeSourceType)(0),                  // 29: fippb.ETradeSourceType
	(EInvestorRangeType)(0),                // 30: fippb.EInvestorRangeType
	(EActionTypeType)(0),                   // 31: fippb.EActionTypeType
	(EExexOrderCloseFlagType)(0),           // 32: fippb.EExexOrderCloseFlagType
	(EExecResultType)(0),                   // 33: fippb.EExecResultType
	(EContractTypeType)(0),                 // 34: fippb.EContractTypeType
	(EOrderPropertyType)(0),                // 35: fippb.EOrderPropertyType
	(EExtOrderTypTye)(0),                   // 36: fippb.EExtOrderTypTye
	(EClientIdTypeType)(0),                 // 37: fippb.EClientIdTypeType
	(ELastFragmentType)(0),                 // 38: fippb.ELastFragmentType
	(EIdCardTypeType)(0),                   // 39: fippb.EIdCardTypeType
	(ECustTypeType)(0),                     // 40: fippb.ECustTypeType
	(EYesNoIndicatorType)(0),               // 41: fippb.EYesNoIndicatorType
	(EFeePayFlagType)(0),                   // 42: fippb.EFeePayFlagType
	(EBankAccTypeType)(0),                  // 43: fippb.EBankAccTypeType
	(EFutureAccTypeType)(0),                // 44: fippb.EFutureAccTypeType
	(EAvailabilityFlagType)(0),             // 45: fippb.EAvailabilityFlagType
	(EPwdFlagType)(0),                      // 46: fippb.EPwdFlagType
	(ETransferStatusType)(0),               // 47: fippb.ETransferStatusType
	(AlgorithmType)(0),                     // 48: fippb.AlgorithmType
	(EBooLean)(0),                          // 49: fippb.EBooLean
	(EOrderActionStatusType)(0),            // 50: fippb.EOrderActionStatusType
	(EForQuoteStausType)(0),                // 51: fippb.EForQuoteStausType
	(EInstrumentStatusType)(0),             // 52: fippb.EInstrumentStatusType
	(EConOrderType)(0),                     // 53: fippb.EConOrderType
	(EConPriceType)(0),                     // 54: fippb.EConPriceType
	(EConCompareType)(0),                   // 55: fippb.EConCompareType
	(EOrderPriceType)(0),                   // 56: fippb.EOrderPriceType
	(EParkedStatusType)(0),                 // 57: fippb.EParkedStatusType
	(ETriggerOrderType)(0),                 // 58: fippb.ETriggerOrderType
	(EPriceType)(0),                        // 59: fippb.EPriceType
	(ETriggerPriceType)(0),                 // 60: fippb.ETriggerPriceType
	(ETriggerCompareType)(0),               // 61: fippb.ETriggerCompareType
	(ETriggerStatusType)(0),                // 62: fippb.ETriggerStatusType
	(ESwitchStatus)(0),                     // 63: fippb.ESwitchStatus
	(EAutoStopType)(0),                     // 64: fippb.EAutoStopType
	(EAutoStopLossPriceType)(0),            // 65: fippb.EAutoStopLossPriceType
	(EAutoStopProfitPriceType)(0),          // 66: fippb.EAutoStopProfitPriceType
	(EQryConOrderType)(0),                  // 67: fippb.EQryConOrderType
	(EQryConOrderStatusType)(0),            // 68: fippb.EQryConOrderStatusType
	(EPlusPriceStandardType)(0),            // 69: fippb.EPlusPriceStandardType
	(EConditionOrderTriggerStatusType)(0),  // 70: fippb.EConditionOrderTriggerStatusType
	(EConditionOrderRunningStatusType)(0),  // 71: fippb.EConditionOrderRunningStatusType
	(EOrderResultType)(0),                  // 72: fippb.EOrderResultType
	(EConOrderValidityType)(0),             // 73: fippb.EConOrderValidityType
	(EConRtnType)(0),                       // 74: fippb.EConRtnType
	(EDeleteConOrderType)(0),               // 75: fippb.EDeleteConOrderType
	(EConOrderCacheType)(0),                // 76: fippb.EConOrderCacheType
	(ETradeServiceType)(0),                 // 77: fippb.ETradeServiceType
	(ETradeServiceStatus)(0),               // 78: fippb.ETradeServiceStatus
	(EConnectStatus)(0),                    // 79: fippb.EConnectStatus
	(EActiveStatus)(0),                     // 80: fippb.EActiveStatus
	(ECombDirectionType)(0),                // 81: fippb.ECombDirectionType
	(ERiskSettleProductStatus)(0),          // 82: fippb.ERiskSettleProductStatus
	(*SameUserKey)(nil),                    // 83: fippb.SameUserKey
	(*ExchgTime)(nil),                      // 84: fippb.ExchgTime
	(*RspTradeHead)(nil),                   // 85: fippb.RspTradeHead
	(*RegisterAuthInfo)(nil),               // 86: fippb.RegisterAuthInfo
	(*OrderInfo)(nil),                      // 87: fippb.OrderInfo
	(*OrderActionInfo)(nil),                // 88: fippb.OrderActionInfo
	(*ExecOrderInfo)(nil),                  // 89: fippb.ExecOrderInfo
	(*SettlementInfoConfirm)(nil),          // 90: fippb.SettlementInfoConfirm
	(*ExecOrderActionInfo)(nil),            // 91: fippb.ExecOrderActionInfo
	(*OrderDetail)(nil),                    // 92: fippb.OrderDetail
	(*Position)(nil),                       // 93: fippb.Position
	(*RiskPosition)(nil),                   // 94: fippb.RiskPosition
	(*InvestorInfo)(nil),                   // 95: fippb.InvestorInfo
	(*PositionDetail)(nil),                 // 96: fippb.PositionDetail
	(*MatchInfoDetail)(nil),                // 97: fippb.MatchInfoDetail
	(*ContractDetail)(nil),                 // 98: fippb.ContractDetail
	(*CustomerCapitalDetail)(nil),          // 99: fippb.CustomerCapitalDetail
	(*SpecifyContractInfo)(nil),            // 100: fippb.SpecifyContractInfo
	(*ArbiContractDetail)(nil),             // 101: fippb.ArbiContractDetail
	(*ArbiCombineDetail)(nil),              // 102: fippb.ArbiCombineDetail
	(*MarginRateDetail)(nil),               // 103: fippb.MarginRateDetail
	(*CommissionRateDetail)(nil),           // 104: fippb.CommissionRateDetail
	(*SettlementInfo)(nil),                 // 105: fippb.SettlementInfo
	(*MaxOrderVolumn)(nil),                 // 106: fippb.MaxOrderVolumn
	(*ExeOrderDetail)(nil),                 // 107: fippb.ExeOrderDetail
	(*TradingCodeDetail)(nil),              // 108: fippb.TradingCodeDetail
	(*TransferField)(nil),                  // 109: fippb.TransferField
	(*AccountregField)(nil),                // 110: fippb.AccountregField
	(*OptTradeCostField)(nil),              // 111: fippb.OptTradeCostField
	(*OptCommRateField)(nil),               // 112: fippb.OptCommRateField
	(*ProfitAlgorithmField)(nil),           // 113: fippb.ProfitAlgorithmField
	(*TransferSerialField)(nil),            // 114: fippb.TransferSerialField
	(*QueryAccountField)(nil),              // 115: fippb.QueryAccountField
	(*NotifyQueryAccountField)(nil),        // 116: fippb.NotifyQueryAccountField
	(*ContractBankField)(nil),              // 117: fippb.ContractBankField
	(*ForQuoteField)(nil),                  // 118: fippb.ForQuoteField
	(*ForQuoteInfo)(nil),                   // 119: fippb.ForQuoteInfo
	(*ConOrderInfo)(nil),                   // 120: fippb.ConOrderInfo
	(*ConOrderDetail)(nil),                 // 121: fippb.ConOrderDetail
	(*TouchOrderInfo)(nil),                 // 122: fippb.TouchOrderInfo
	(*TouchOrderDetail)(nil),               // 123: fippb.TouchOrderDetail
	(*ParkedOrderInfo)(nil),                // 124: fippb.ParkedOrderInfo
	(*ConditionOrderInfo)(nil),             // 125: fippb.ConditionOrderInfo
	(*ConditionOrderTradeparameter)(nil),   // 126: fippb.ConditionOrderTradeparameter
	(*ConditionOrderDetail)(nil),           // 127: fippb.ConditionOrderDetail
	(*OrdinaryOrderAutoStopParameter)(nil), // 128: fippb.OrdinaryOrderAutoStopParameter
	(*StationInfo)(nil),                    // 129: fippb.StationInfo
	(EExchgID)(0),                          // 130: fippb.EExchgID
}
var file_fip_def_trade_proto_depIdxs = []int32{
	9,   // 0: fippb.OrderInfo.direction:type_name -> fippb.EDirectionType
	27,  // 1: fippb.OrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 2: fippb.OrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 3: fippb.OrderInfo.exchangeId:type_name -> fippb.EExchgID
	83,  // 4: fippb.OrderActionInfo.sameUserKey:type_name -> fippb.SameUserKey
	130, // 5: fippb.OrderActionInfo.exchangeId:type_name -> fippb.EExchgID
	27,  // 6: fippb.ExecOrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 7: fippb.ExecOrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	31,  // 8: fippb.ExecOrderInfo.actionType:type_name -> fippb.EActionTypeType
	6,   // 9: fippb.ExecOrderInfo.posiDirection:type_name -> fippb.EPosiDirectionType
	32,  // 10: fippb.ExecOrderInfo.closeFlag:type_name -> fippb.EExexOrderCloseFlagType
	130, // 11: fippb.ExecOrderInfo.exchangeId:type_name -> fippb.EExchgID
	83,  // 12: fippb.ExecOrderActionInfo.sameUserKey:type_name -> fippb.SameUserKey
	130, // 13: fippb.ExecOrderActionInfo.exchangeId:type_name -> fippb.EExchgID
	31,  // 14: fippb.ExecOrderActionInfo.actionType:type_name -> fippb.EActionTypeType
	9,   // 15: fippb.OrderDetail.direction:type_name -> fippb.EDirectionType
	27,  // 16: fippb.OrderDetail.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 17: fippb.OrderDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 18: fippb.OrderDetail.exchangeId:type_name -> fippb.EExchgID
	16,  // 19: fippb.OrderDetail.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	17,  // 20: fippb.OrderDetail.orderStatus:type_name -> fippb.EOrderStatusType
	19,  // 21: fippb.OrderDetail.orderType:type_name -> fippb.EOrderTypeType
	83,  // 22: fippb.OrderDetail.sameUserKey:type_name -> fippb.SameUserKey
	31,  // 23: fippb.OrderDetail.actionType:type_name -> fippb.EActionTypeType
	56,  // 24: fippb.OrderDetail.orderPriceType:type_name -> fippb.EOrderPriceType
	6,   // 25: fippb.Position.posiDirection:type_name -> fippb.EPosiDirectionType
	7,   // 26: fippb.Position.hedgeFlag:type_name -> fippb.EHedgeFlagType
	8,   // 27: fippb.Position.positionDate:type_name -> fippb.EPositionDataType
	130, // 28: fippb.Position.exchangeId:type_name -> fippb.EExchgID
	130, // 29: fippb.RiskPosition.exchangeId:type_name -> fippb.EExchgID
	6,   // 30: fippb.RiskPosition.posiDirection:type_name -> fippb.EPosiDirectionType
	7,   // 31: fippb.RiskPosition.hedgeFlag:type_name -> fippb.EHedgeFlagType
	8,   // 32: fippb.RiskPosition.positionDate:type_name -> fippb.EPositionDataType
	39,  // 33: fippb.InvestorInfo.idCardType:type_name -> fippb.EIdCardTypeType
	7,   // 34: fippb.PositionDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	9,   // 35: fippb.PositionDetail.direction:type_name -> fippb.EDirectionType
	10,  // 36: fippb.PositionDetail.tradeType:type_name -> fippb.ETradeTypeType
	130, // 37: fippb.PositionDetail.exchangeId:type_name -> fippb.EExchgID
	130, // 38: fippb.MatchInfoDetail.exchangeId:type_name -> fippb.EExchgID
	9,   // 39: fippb.MatchInfoDetail.direction:type_name -> fippb.EDirectionType
	27,  // 40: fippb.MatchInfoDetail.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 41: fippb.MatchInfoDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	10,  // 42: fippb.MatchInfoDetail.tradeType:type_name -> fippb.ETradeTypeType
	28,  // 43: fippb.MatchInfoDetail.priceSource:type_name -> fippb.EPriceSourceType
	130, // 44: fippb.ContractDetail.exchangeId:type_name -> fippb.EExchgID
	20,  // 45: fippb.ContractDetail.productClass:type_name -> fippb.EProductClassType
	21,  // 46: fippb.ContractDetail.instLifePhase:type_name -> fippb.EContractLifePhaseType
	22,  // 47: fippb.ContractDetail.positionType:type_name -> fippb.EPositionTypeType
	23,  // 48: fippb.ContractDetail.positionDateType:type_name -> fippb.EPositionDataTypeType
	24,  // 49: fippb.ContractDetail.maxMarginSideAlgorithm:type_name -> fippb.EMaxMarginSideAlgorithmType
	25,  // 50: fippb.ContractDetail.optionsType:type_name -> fippb.EOptionsTypeType
	26,  // 51: fippb.ContractDetail.combinationType:type_name -> fippb.ECombinationTypeType
	130, // 52: fippb.ArbiContractDetail.exchangeId:type_name -> fippb.EExchgID
	130, // 53: fippb.ArbiCombineDetail.exchangeId:type_name -> fippb.EExchgID
	7,   // 54: fippb.ArbiCombineDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	9,   // 55: fippb.ArbiCombineDetail.direction:type_name -> fippb.EDirectionType
	30,  // 56: fippb.MarginRateDetail.investorRange:type_name -> fippb.EInvestorRangeType
	7,   // 57: fippb.MarginRateDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 58: fippb.MarginRateDetail.exchangeId:type_name -> fippb.EExchgID
	30,  // 59: fippb.CommissionRateDetail.investorRange:type_name -> fippb.EInvestorRangeType
	130, // 60: fippb.CommissionRateDetail.exchangeId:type_name -> fippb.EExchgID
	7,   // 61: fippb.CommissionRateDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	9,   // 62: fippb.MaxOrderVolumn.direction:type_name -> fippb.EDirectionType
	27,  // 63: fippb.MaxOrderVolumn.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 64: fippb.MaxOrderVolumn.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 65: fippb.MaxOrderVolumn.exchangeId:type_name -> fippb.EExchgID
	27,  // 66: fippb.ExeOrderDetail.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 67: fippb.ExeOrderDetail.hedgeFlag:type_name -> fippb.EHedgeFlagType
	31,  // 68: fippb.ExeOrderDetail.actionType:type_name -> fippb.EActionTypeType
	6,   // 69: fippb.ExeOrderDetail.posiDirection:type_name -> fippb.EPosiDirectionType
	32,  // 70: fippb.ExeOrderDetail.closeFlag:type_name -> fippb.EExexOrderCloseFlagType
	130, // 71: fippb.ExeOrderDetail.exchangeId:type_name -> fippb.EExchgID
	16,  // 72: fippb.ExeOrderDetail.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	33,  // 73: fippb.ExeOrderDetail.execResult:type_name -> fippb.EExecResultType
	83,  // 74: fippb.ExeOrderDetail.sameUserKey:type_name -> fippb.SameUserKey
	130, // 75: fippb.TradingCodeDetail.exchangeId:type_name -> fippb.EExchgID
	37,  // 76: fippb.TradingCodeDetail.clientIdType:type_name -> fippb.EClientIdTypeType
	115, // 77: fippb.TransferField.queryAccountField:type_name -> fippb.QueryAccountField
	42,  // 78: fippb.TransferField.feePayFlag:type_name -> fippb.EFeePayFlagType
	47,  // 79: fippb.TransferField.transferStatus:type_name -> fippb.ETransferStatusType
	39,  // 80: fippb.AccountregField.idCardType:type_name -> fippb.EIdCardTypeType
	1,   // 81: fippb.AccountregField.openOrDestroy:type_name -> fippb.EOpenOrDestroyType
	40,  // 82: fippb.AccountregField.custType:type_name -> fippb.ECustTypeType
	43,  // 83: fippb.AccountregField.bankAccType:type_name -> fippb.EBankAccTypeType
	7,   // 84: fippb.OptTradeCostField.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 85: fippb.OptTradeCostField.exchangeId:type_name -> fippb.EExchgID
	30,  // 86: fippb.OptCommRateField.investorRangeType:type_name -> fippb.EInvestorRangeType
	130, // 87: fippb.OptCommRateField.exchangeId:type_name -> fippb.EExchgID
	7,   // 88: fippb.OptCommRateField.hedgeFlag:type_name -> fippb.EHedgeFlagType
	48,  // 89: fippb.ProfitAlgorithmField.algorithm:type_name -> fippb.AlgorithmType
	43,  // 90: fippb.TransferSerialField.bankAccType:type_name -> fippb.EBankAccTypeType
	44,  // 91: fippb.TransferSerialField.futureAccType:type_name -> fippb.EFutureAccTypeType
	39,  // 92: fippb.TransferSerialField.idCardType:type_name -> fippb.EIdCardTypeType
	45,  // 93: fippb.TransferSerialField.availabilityFlag:type_name -> fippb.EAvailabilityFlagType
	38,  // 94: fippb.QueryAccountField.lastFragment:type_name -> fippb.ELastFragmentType
	39,  // 95: fippb.QueryAccountField.idCardType:type_name -> fippb.EIdCardTypeType
	40,  // 96: fippb.QueryAccountField.custType:type_name -> fippb.ECustTypeType
	41,  // 97: fippb.QueryAccountField.verifyCertNoFlag:type_name -> fippb.EYesNoIndicatorType
	43,  // 98: fippb.QueryAccountField.bankAccType:type_name -> fippb.EBankAccTypeType
	43,  // 99: fippb.QueryAccountField.bankSecuAccType:type_name -> fippb.EBankAccTypeType
	46,  // 100: fippb.QueryAccountField.bankPwdFlag:type_name -> fippb.EPwdFlagType
	46,  // 101: fippb.QueryAccountField.secuPwdFlag:type_name -> fippb.EPwdFlagType
	115, // 102: fippb.NotifyQueryAccountField.queryAccountField:type_name -> fippb.QueryAccountField
	130, // 103: fippb.ForQuoteField.exchangeId:type_name -> fippb.EExchgID
	51,  // 104: fippb.ForQuoteField.forQuoteStatus:type_name -> fippb.EForQuoteStausType
	83,  // 105: fippb.ForQuoteField.sameUserKey:type_name -> fippb.SameUserKey
	130, // 106: fippb.ForQuoteInfo.exchangeId:type_name -> fippb.EExchgID
	56,  // 107: fippb.ConOrderInfo.orderPriceType:type_name -> fippb.EOrderPriceType
	9,   // 108: fippb.ConOrderInfo.direction:type_name -> fippb.EDirectionType
	27,  // 109: fippb.ConOrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 110: fippb.ConOrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 111: fippb.ConOrderInfo.exchangeId:type_name -> fippb.EExchgID
	54,  // 112: fippb.ConOrderInfo.conPriceType:type_name -> fippb.EConPriceType
	55,  // 113: fippb.ConOrderInfo.conCompareType:type_name -> fippb.EConCompareType
	120, // 114: fippb.ConOrderDetail.conOrderInfo:type_name -> fippb.ConOrderInfo
	16,  // 115: fippb.ConOrderDetail.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	17,  // 116: fippb.ConOrderDetail.orderStatus:type_name -> fippb.EOrderStatusType
	83,  // 117: fippb.ConOrderDetail.sameUserKey:type_name -> fippb.SameUserKey
	56,  // 118: fippb.TouchOrderInfo.orderPriceType:type_name -> fippb.EOrderPriceType
	9,   // 119: fippb.TouchOrderInfo.direction:type_name -> fippb.EDirectionType
	27,  // 120: fippb.TouchOrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 121: fippb.TouchOrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 122: fippb.TouchOrderInfo.exchangeId:type_name -> fippb.EExchgID
	53,  // 123: fippb.TouchOrderInfo.touchOrderType:type_name -> fippb.EConOrderType
	122, // 124: fippb.TouchOrderDetail.touchOrderInfo:type_name -> fippb.TouchOrderInfo
	16,  // 125: fippb.TouchOrderDetail.orderSubmitStatus:type_name -> fippb.EOrderSubmitStatusType
	17,  // 126: fippb.TouchOrderDetail.orderStatus:type_name -> fippb.EOrderStatusType
	83,  // 127: fippb.TouchOrderDetail.sameUserKey:type_name -> fippb.SameUserKey
	56,  // 128: fippb.ParkedOrderInfo.orderPriceType:type_name -> fippb.EOrderPriceType
	9,   // 129: fippb.ParkedOrderInfo.direction:type_name -> fippb.EDirectionType
	27,  // 130: fippb.ParkedOrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 131: fippb.ParkedOrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 132: fippb.ParkedOrderInfo.exchangeId:type_name -> fippb.EExchgID
	57,  // 133: fippb.ParkedOrderInfo.status:type_name -> fippb.EParkedStatusType
	9,   // 134: fippb.ConditionOrderInfo.direction:type_name -> fippb.EDirectionType
	27,  // 135: fippb.ConditionOrderInfo.offsetFlag:type_name -> fippb.EOffsetFlagType
	7,   // 136: fippb.ConditionOrderInfo.hedgeFlag:type_name -> fippb.EHedgeFlagType
	130, // 137: fippb.ConditionOrderInfo.exchangeId:type_name -> fippb.EExchgID
	73,  // 138: fippb.ConditionOrderInfo.conditionValidity:type_name -> fippb.EConOrderValidityType
	59,  // 139: fippb.ConditionOrderInfo.priceType:type_name -> fippb.EPriceType
	58,  // 140: fippb.ConditionOrderInfo.triggerType:type_name -> fippb.ETriggerOrderType
	60,  // 141: fippb.ConditionOrderInfo.triggerPriceType:type_name -> fippb.ETriggerPriceType
	61,  // 142: fippb.ConditionOrderInfo.triggerCompareType:type_name -> fippb.ETriggerCompareType
	62,  // 143: fippb.ConditionOrderInfo.statusCondition:type_name -> fippb.ETriggerStatusType
	60,  // 144: fippb.ConditionOrderInfo.extralTriggerPriceType:type_name -> fippb.ETriggerPriceType
	61,  // 145: fippb.ConditionOrderInfo.extralTriggerCompareType:type_name -> fippb.ETriggerCompareType
	63,  // 146: fippb.ConditionOrderTradeparameter.closeFirst:type_name -> fippb.ESwitchStatus
	63,  // 147: fippb.ConditionOrderTradeparameter.splitOrder:type_name -> fippb.ESwitchStatus
	69,  // 148: fippb.ConditionOrderTradeparameter.pricePlusStandard:type_name -> fippb.EPlusPriceStandardType
	63,  // 149: fippb.ConditionOrderTradeparameter.openAutoStop:type_name -> fippb.ESwitchStatus
	64,  // 150: fippb.ConditionOrderTradeparameter.autoStopType:type_name -> fippb.EAutoStopType
	65,  // 151: fippb.ConditionOrderTradeparameter.stopLossPriceType:type_name -> fippb.EAutoStopLossPriceType
	65,  // 152: fippb.ConditionOrderTradeparameter.stopProfitPriceType:type_name -> fippb.EAutoStopLossPriceType
	125, // 153: fippb.ConditionOrderDetail.orderInfo:type_name -> fippb.ConditionOrderInfo
	126, // 154: fippb.ConditionOrderDetail.tradeParameter:type_name -> fippb.ConditionOrderTradeparameter
	74,  // 155: fippb.ConditionOrderDetail.RtnType:type_name -> fippb.EConRtnType
	70,  // 156: fippb.ConditionOrderDetail.triggerStatus:type_name -> fippb.EConditionOrderTriggerStatusType
	71,  // 157: fippb.ConditionOrderDetail.runningStatus:type_name -> fippb.EConditionOrderRunningStatusType
	72,  // 158: fippb.ConditionOrderDetail.orderResult:type_name -> fippb.EOrderResultType
	63,  // 159: fippb.OrdinaryOrderAutoStopParameter.openAutoStop:type_name -> fippb.ESwitchStatus
	64,  // 160: fippb.OrdinaryOrderAutoStopParameter.autoStopType:type_name -> fippb.EAutoStopType
	65,  // 161: fippb.OrdinaryOrderAutoStopParameter.stopLossPriceType:type_name -> fippb.EAutoStopLossPriceType
	65,  // 162: fippb.OrdinaryOrderAutoStopParameter.stopProfitPriceType:type_name -> fippb.EAutoStopLossPriceType
	63,  // 163: fippb.OrdinaryOrderAutoStopParameter.closeFirst:type_name -> fippb.ESwitchStatus
	164, // [164:164] is the sub-list for method output_type
	164, // [164:164] is the sub-list for method input_type
	164, // [164:164] is the sub-list for extension type_name
	164, // [164:164] is the sub-list for extension extendee
	0,   // [0:164] is the sub-list for field type_name
}

func init() { file_fip_def_trade_proto_init() }
func file_fip_def_trade_proto_init() {
	if File_fip_def_trade_proto != nil {
		return
	}
	file_fip_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_def_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SameUserKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchgTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTradeHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementInfoConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOrderActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfoDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerCapitalDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecifyContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbiContractDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbiCombineDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginRateDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommissionRateDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxOrderVolumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExeOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingCodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountregField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptTradeCostField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfitAlgorithmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSerialField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyQueryAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractBankField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForQuoteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TouchOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TouchOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkedOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderTradeparameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdinaryOrderAutoStopParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_def_trade_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_def_trade_proto_rawDesc,
			NumEnums:      83,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_def_trade_proto_goTypes,
		DependencyIndexes: file_fip_def_trade_proto_depIdxs,
		EnumInfos:         file_fip_def_trade_proto_enumTypes,
		MessageInfos:      file_fip_def_trade_proto_msgTypes,
	}.Build()
	File_fip_def_trade_proto = out.File
	file_fip_def_trade_proto_rawDesc = nil
	file_fip_def_trade_proto_goTypes = nil
	file_fip_def_trade_proto_depIdxs = nil
}
