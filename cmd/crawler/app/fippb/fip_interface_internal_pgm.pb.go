//*
// Copyright (C) 2017-2022，大连商品交易所 大连飞创信息技术有限公司
//
// @brief 贵金属(PGM)行情中继端内部接口proto定义
//        针对上海黄金交易所行情接入需求（2022）
// @author mengxin@dce.com.cn
//
// @date 2022-5-16
// @note 组内评审专家：
// @note 组外评审专家：

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: fip_interface_internal_pgm.proto

package fippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief 请求查询PGM类业务交易日期
// @date 2022-5-16
// @由PGM实时服务提供
// @note 协议号 ： ->realtime : <5619>
type ReqPgmTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
}

func (x *ReqPgmTradeDate) Reset() {
	*x = ReqPgmTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmTradeDate) ProtoMessage() {}

func (x *ReqPgmTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmTradeDate.ProtoReflect.Descriptor instead.
func (*ReqPgmTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{0}
}

func (x *ReqPgmTradeDate) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmTradeDate) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 查询PGM类业务交易日期的响应
// @date 2022-5-16
// @由PGM实时服务提供
// @note 协议号：realtime-> : <5620>
type RspPgmTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ErrorID    uint32   `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	ExchangeID EExchgID `protobuf:"varint,3,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	TradeDate  string   `protobuf:"bytes,4,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 当前交易日，格式年月日，例如"20170802"。
}

func (x *RspPgmTradeDate) Reset() {
	*x = RspPgmTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmTradeDate) ProtoMessage() {}

func (x *RspPgmTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmTradeDate.ProtoReflect.Descriptor instead.
func (*RspPgmTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{1}
}

func (x *RspPgmTradeDate) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmTradeDate) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmTradeDate) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspPgmTradeDate) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 推送PGM类业务交易日期
// @date 2022-7-13
// @由PGM实时服务提供
// @note 协议号：realtime-> : <5621>
type NotifyPgmTradeDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所id
	TradeDate  string   `protobuf:"bytes,2,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`                        // 当前交易日，格式年月日，例如"20170802"。
}

func (x *NotifyPgmTradeDate) Reset() {
	*x = NotifyPgmTradeDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmTradeDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmTradeDate) ProtoMessage() {}

func (x *NotifyPgmTradeDate) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmTradeDate.ProtoReflect.Descriptor instead.
func (*NotifyPgmTradeDate) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyPgmTradeDate) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmTradeDate) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

// *
// @brief 查询PGM类业务市场信息（交易所信息）请求
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9601>
type ReqPgmMarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` //交易所ID
}

func (x *ReqPgmMarketInfo) Reset() {
	*x = ReqPgmMarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmMarketInfo) ProtoMessage() {}

func (x *ReqPgmMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmMarketInfo.ProtoReflect.Descriptor instead.
func (*ReqPgmMarketInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{3}
}

func (x *ReqPgmMarketInfo) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmMarketInfo) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 查询PGM类业务市场信息（交易所信息）响应
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9602>
type RspPgmMarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32           `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                         // 请求id
	ErrorID uint32           `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                     // 错误码
	Elem    *PgmExchangeElem `protobuf:"bytes,3,opt,name=elem,proto3" json:"elem,omitempty"`                            //
	PkgType EPkgType         `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspPgmMarketInfo) Reset() {
	*x = RspPgmMarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmMarketInfo) ProtoMessage() {}

func (x *RspPgmMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmMarketInfo.ProtoReflect.Descriptor instead.
func (*RspPgmMarketInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{4}
}

func (x *RspPgmMarketInfo) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmMarketInfo) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmMarketInfo) GetElem() *PgmExchangeElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspPgmMarketInfo) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 查询PGM类业务市场状态请求
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9651>
type ReqPgmMarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` //交易所ID
}

func (x *ReqPgmMarketState) Reset() {
	*x = ReqPgmMarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmMarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmMarketState) ProtoMessage() {}

func (x *ReqPgmMarketState) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmMarketState.ProtoReflect.Descriptor instead.
func (*ReqPgmMarketState) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{5}
}

func (x *ReqPgmMarketState) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmMarketState) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 查询PGM类业务市场状态响应
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9652>
type RspPgmMarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ErrorID    uint32   `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                           // 错误码
	ExchangeID EExchgID `protobuf:"varint,3,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
	Status     uint32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                             // Market状态(参见EPgmMarketStatus定义),0-初始化中,1-初始化完成,2-开盘,3-连续交易,4-暂停,5-收盘,6-等待清算
}

func (x *RspPgmMarketState) Reset() {
	*x = RspPgmMarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmMarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmMarketState) ProtoMessage() {}

func (x *RspPgmMarketState) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmMarketState.ProtoReflect.Descriptor instead.
func (*RspPgmMarketState) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{6}
}

func (x *RspPgmMarketState) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmMarketState) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmMarketState) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *RspPgmMarketState) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// *
// @brief 推送PGM类业务市场状态变更通知
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9653>
type NotifyPgmMarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
	Status     uint32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                             // Market状态(参见EPgmMarketStatus定义),0-初始化中,1-初始化完成,2-开盘,3-连续交易,4-暂停,5-收盘,6-等待清算
}

func (x *NotifyPgmMarketState) Reset() {
	*x = NotifyPgmMarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmMarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmMarketState) ProtoMessage() {}

func (x *NotifyPgmMarketState) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmMarketState.ProtoReflect.Descriptor instead.
func (*NotifyPgmMarketState) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{7}
}

func (x *NotifyPgmMarketState) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmMarketState) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// *
// @brief 查询PGM类合约信息请求
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9603>
type ReqPgmInstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约ID
}

func (x *ReqPgmInstInfo) Reset() {
	*x = ReqPgmInstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmInstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmInstInfo) ProtoMessage() {}

func (x *ReqPgmInstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmInstInfo.ProtoReflect.Descriptor instead.
func (*ReqPgmInstInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{8}
}

func (x *ReqPgmInstInfo) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmInstInfo) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqPgmInstInfo) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 查询PGM类合约信息响应
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9604>
type RspPgmInstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32             `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32             `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
	Elem    []*PgmContractElem `protobuf:"bytes,3,rep,name=elem,proto3" json:"elem,omitempty"`
	PkgType EPkgType           `protobuf:"varint,4,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"` // 分包标志
}

func (x *RspPgmInstInfo) Reset() {
	*x = RspPgmInstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmInstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmInstInfo) ProtoMessage() {}

func (x *RspPgmInstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmInstInfo.ProtoReflect.Descriptor instead.
func (*RspPgmInstInfo) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{9}
}

func (x *RspPgmInstInfo) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmInstInfo) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmInstInfo) GetElem() []*PgmContractElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *RspPgmInstInfo) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 查询PGM类 合约状态请求
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9618>
type ReqPgmInstState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
	ContractID string   `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`                      // 合约ID
}

func (x *ReqPgmInstState) Reset() {
	*x = ReqPgmInstState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPgmInstState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPgmInstState) ProtoMessage() {}

func (x *ReqPgmInstState) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPgmInstState.ProtoReflect.Descriptor instead.
func (*ReqPgmInstState) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{10}
}

func (x *ReqPgmInstState) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqPgmInstState) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *ReqPgmInstState) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

// *
// @brief 查询PGM类 合约状态响应
// @date 2022-5-16
// @由PGM合约管理服务提供
// @note 协议号：contract manage-> : <9619>
type RspPgmInstState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32            `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID    uint32            `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
	ContractID string            `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`
	State      EPgmInstStateType `protobuf:"varint,4,opt,name=state,proto3,enum=fippb.EPgmInstStateType" json:"state,omitempty"`
}

func (x *RspPgmInstState) Reset() {
	*x = RspPgmInstState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspPgmInstState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspPgmInstState) ProtoMessage() {}

func (x *RspPgmInstState) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspPgmInstState.ProtoReflect.Descriptor instead.
func (*RspPgmInstState) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{11}
}

func (x *RspPgmInstState) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspPgmInstState) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *RspPgmInstState) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RspPgmInstState) GetState() EPgmInstStateType {
	if x != nil {
		return x.State
	}
	return EPgmInstStateType_PGMIST_Bid_Initializing
}

// *
// @brief PGM历史数据写入完毕通知
// @date 2022-5-16
// @由PGM历史行情服务提供
// @note 协议号：history-> : <7651>
type NotifyPgmHandleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32         `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                                     //消息ID
	ErrorID    uint32         `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"`                                 //数据写入结果
	HandleType EPgmHandleType `protobuf:"varint,3,opt,name=handleType,proto3,enum=fippb.EPgmHandleType" json:"handleType,omitempty"` //服务处理事件类型
}

func (x *NotifyPgmHandleResult) Reset() {
	*x = NotifyPgmHandleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmHandleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmHandleResult) ProtoMessage() {}

func (x *NotifyPgmHandleResult) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmHandleResult.ProtoReflect.Descriptor instead.
func (*NotifyPgmHandleResult) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyPgmHandleResult) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *NotifyPgmHandleResult) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *NotifyPgmHandleResult) GetHandleType() EPgmHandleType {
	if x != nil {
		return x.HandleType
	}
	return EPgmHandleType_PgmHT_TimeChart
}

// *
// @brief 请求订阅(指定交易所的)全部贵金属行情
// @date 2022-5-17
// @note 协议号：proxy->real:<5616>,real->collect:<5616>
type ReqSubPgmAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
}

func (x *ReqSubPgmAllQuot) Reset() {
	*x = ReqSubPgmAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubPgmAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubPgmAllQuot) ProtoMessage() {}

func (x *ReqSubPgmAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubPgmAllQuot.ProtoReflect.Descriptor instead.
func (*ReqSubPgmAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{13}
}

func (x *ReqSubPgmAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubPgmAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求订阅(指定交易所的)全部贵金属行情响应.订阅成功后,collect会向real推送行情快照及行情更新通知;real会向proxy推送行情快照及行情更新通知
// @date 2022-5-17
// @note 协议号：real->proxy:<5617>   collect->real:<5617>
type RspSubPgmAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubPgmAllQuot) Reset() {
	*x = RspSubPgmAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubPgmAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubPgmAllQuot) ProtoMessage() {}

func (x *RspSubPgmAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubPgmAllQuot.ProtoReflect.Descriptor instead.
func (*RspSubPgmAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{14}
}

func (x *RspSubPgmAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubPgmAllQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 请求取消订阅(指定交易所的)全部贵金属行情
// @date 2022-5-17
// @note 协议号：proxy->real:<5622>、real->collect
type ReqUnSubPgmAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
}

func (x *ReqUnSubPgmAllQuot) Reset() {
	*x = ReqUnSubPgmAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUnSubPgmAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUnSubPgmAllQuot) ProtoMessage() {}

func (x *ReqUnSubPgmAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUnSubPgmAllQuot.ProtoReflect.Descriptor instead.
func (*ReqUnSubPgmAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{15}
}

func (x *ReqUnSubPgmAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqUnSubPgmAllQuot) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求取消订阅(指定交易所的)全部贵金属行情响应
// @date 2022-5-17
// @note 协议号：real->proxy:<5623>、collect->real
type RspUnSubPgmAllQuot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspUnSubPgmAllQuot) Reset() {
	*x = RspUnSubPgmAllQuot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUnSubPgmAllQuot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUnSubPgmAllQuot) ProtoMessage() {}

func (x *RspUnSubPgmAllQuot) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUnSubPgmAllQuot.ProtoReflect.Descriptor instead.
func (*RspUnSubPgmAllQuot) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{16}
}

func (x *RspUnSubPgmAllQuot) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspUnSubPgmAllQuot) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @brief 请求订阅(指定贵金属交易所的)全部合约
// @date 2022-6-23
// @note 协议号：contract mng->collect:<10606>
type ReqSubPgmAllContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
}

func (x *ReqSubPgmAllContract) Reset() {
	*x = ReqSubPgmAllContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubPgmAllContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubPgmAllContract) ProtoMessage() {}

func (x *ReqSubPgmAllContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubPgmAllContract.ProtoReflect.Descriptor instead.
func (*ReqSubPgmAllContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{17}
}

func (x *ReqSubPgmAllContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqSubPgmAllContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求订阅(指定贵金属交易所的)全部合约响应. 订阅成功后,collect会向contract mng推送合约快照及合约更新通知
// @date 2022-6-23
// @note 协议号：collect->contract mng:<10607>
type RspSubPgmAllContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspSubPgmAllContract) Reset() {
	*x = RspSubPgmAllContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubPgmAllContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubPgmAllContract) ProtoMessage() {}

func (x *RspSubPgmAllContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubPgmAllContract.ProtoReflect.Descriptor instead.
func (*RspSubPgmAllContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{18}
}

func (x *RspSubPgmAllContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspSubPgmAllContract) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

// *
// @贵金属合约推送通知<10608>
// @date 2022-6-23
// @note 协议号：collect->contract mng:<10608>
type NotifyPgmContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID EExchgID           `protobuf:"varint,1,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 请求id
	Elem       []*PgmContractElem `protobuf:"bytes,2,rep,name=elem,proto3" json:"elem,omitempty"`                                  // 合约列表
	PkgType    EPkgType           `protobuf:"varint,3,opt,name=pkgType,proto3,enum=fippb.EPkgType" json:"pkgType,omitempty"`       // 分包标志
}

func (x *NotifyPgmContract) Reset() {
	*x = NotifyPgmContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPgmContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPgmContract) ProtoMessage() {}

func (x *NotifyPgmContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPgmContract.ProtoReflect.Descriptor instead.
func (*NotifyPgmContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{19}
}

func (x *NotifyPgmContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

func (x *NotifyPgmContract) GetElem() []*PgmContractElem {
	if x != nil {
		return x.Elem
	}
	return nil
}

func (x *NotifyPgmContract) GetPkgType() EPkgType {
	if x != nil {
		return x.PkgType
	}
	return EPkgType_PkgSingle
}

// *
// @brief 请求取消订阅(指定贵金属交易所)全部合约
// @date 2022-6-23
// @note 协议号：contract_mng->collect:<10609>、real->collect
type ReqUnSubPgmAllContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID      uint32   `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`                               // 请求id
	ExchangeID EExchgID `protobuf:"varint,2,opt,name=exchangeID,proto3,enum=fippb.EExchgID" json:"exchangeID,omitempty"` // 交易所ID
}

func (x *ReqUnSubPgmAllContract) Reset() {
	*x = ReqUnSubPgmAllContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUnSubPgmAllContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUnSubPgmAllContract) ProtoMessage() {}

func (x *ReqUnSubPgmAllContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUnSubPgmAllContract.ProtoReflect.Descriptor instead.
func (*ReqUnSubPgmAllContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{20}
}

func (x *ReqUnSubPgmAllContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ReqUnSubPgmAllContract) GetExchangeID() EExchgID {
	if x != nil {
		return x.ExchangeID
	}
	return EExchgID_ExchNull
}

// *
// @brief 请求取消订阅(指定贵金属交易所)全部合约响应
// @date 2022-6-23
// @note 协议号：collect->contract_mng:<10610>
type RspUnSubPgmAllContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgID   uint32 `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`     // 请求id
	ErrorID uint32 `protobuf:"varint,2,opt,name=errorID,proto3" json:"errorID,omitempty"` // 错误码
}

func (x *RspUnSubPgmAllContract) Reset() {
	*x = RspUnSubPgmAllContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fip_interface_internal_pgm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspUnSubPgmAllContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspUnSubPgmAllContract) ProtoMessage() {}

func (x *RspUnSubPgmAllContract) ProtoReflect() protoreflect.Message {
	mi := &file_fip_interface_internal_pgm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspUnSubPgmAllContract.ProtoReflect.Descriptor instead.
func (*RspUnSubPgmAllContract) Descriptor() ([]byte, []int) {
	return file_fip_interface_internal_pgm_proto_rawDescGZIP(), []int{21}
}

func (x *RspUnSubPgmAllContract) GetMsgID() uint32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *RspUnSubPgmAllContract) GetErrorID() uint32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

var File_fip_interface_internal_pgm_proto protoreflect.FileDescriptor

var file_fip_interface_internal_pgm_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x67, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x66, 0x69, 0x70, 0x70, 0x62, 0x1a, 0x10, 0x66, 0x69, 0x70, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x69, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x70, 0x67, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70,
	0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49,
	0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45,
	0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x59, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x10,
	0x52, 0x73, 0x70, 0x50, 0x67, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x50, 0x67,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x50, 0x67, 0x6d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5f, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67, 0x6d, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x50, 0x67, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0x97, 0x01, 0x0a,
	0x0e, 0x52, 0x73, 0x70, 0x50, 0x67, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66,
	0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70,
	0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50, 0x67, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44,
	0x22, 0x91, 0x01, 0x0a, 0x0f, 0x52, 0x73, 0x70, 0x50, 0x67, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67,
	0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x35, 0x0a,
	0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x67, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x50, 0x67,
	0x6d, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x42, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x50, 0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x50,
	0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63,
	0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x22, 0x44, 0x0a, 0x12, 0x52, 0x73, 0x70, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x50, 0x67, 0x6d, 0x41,
	0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62,
	0x50, 0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62,
	0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x14, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x50,
	0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x9b, 0x01,
	0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x67, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x50, 0x67, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x50, 0x6b, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x50, 0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x66, 0x69, 0x70, 0x70, 0x62, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x67, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x16,
	0x52, 0x73, 0x70, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x50, 0x67, 0x6d, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x70, 0x64, 0x65, 0x76,
	0x2e, 0x64, 0x66, 0x69, 0x74, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x69,
	0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fip_interface_internal_pgm_proto_rawDescOnce sync.Once
	file_fip_interface_internal_pgm_proto_rawDescData = file_fip_interface_internal_pgm_proto_rawDesc
)

func file_fip_interface_internal_pgm_proto_rawDescGZIP() []byte {
	file_fip_interface_internal_pgm_proto_rawDescOnce.Do(func() {
		file_fip_interface_internal_pgm_proto_rawDescData = protoimpl.X.CompressGZIP(file_fip_interface_internal_pgm_proto_rawDescData)
	})
	return file_fip_interface_internal_pgm_proto_rawDescData
}

var file_fip_interface_internal_pgm_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_fip_interface_internal_pgm_proto_goTypes = []interface{}{
	(*ReqPgmTradeDate)(nil),        // 0: fippb.ReqPgmTradeDate
	(*RspPgmTradeDate)(nil),        // 1: fippb.RspPgmTradeDate
	(*NotifyPgmTradeDate)(nil),     // 2: fippb.NotifyPgmTradeDate
	(*ReqPgmMarketInfo)(nil),       // 3: fippb.ReqPgmMarketInfo
	(*RspPgmMarketInfo)(nil),       // 4: fippb.RspPgmMarketInfo
	(*ReqPgmMarketState)(nil),      // 5: fippb.ReqPgmMarketState
	(*RspPgmMarketState)(nil),      // 6: fippb.RspPgmMarketState
	(*NotifyPgmMarketState)(nil),   // 7: fippb.NotifyPgmMarketState
	(*ReqPgmInstInfo)(nil),         // 8: fippb.ReqPgmInstInfo
	(*RspPgmInstInfo)(nil),         // 9: fippb.RspPgmInstInfo
	(*ReqPgmInstState)(nil),        // 10: fippb.ReqPgmInstState
	(*RspPgmInstState)(nil),        // 11: fippb.RspPgmInstState
	(*NotifyPgmHandleResult)(nil),  // 12: fippb.NotifyPgmHandleResult
	(*ReqSubPgmAllQuot)(nil),       // 13: fippb.ReqSubPgmAllQuot
	(*RspSubPgmAllQuot)(nil),       // 14: fippb.RspSubPgmAllQuot
	(*ReqUnSubPgmAllQuot)(nil),     // 15: fippb.ReqUnSubPgmAllQuot
	(*RspUnSubPgmAllQuot)(nil),     // 16: fippb.RspUnSubPgmAllQuot
	(*ReqSubPgmAllContract)(nil),   // 17: fippb.ReqSubPgmAllContract
	(*RspSubPgmAllContract)(nil),   // 18: fippb.RspSubPgmAllContract
	(*NotifyPgmContract)(nil),      // 19: fippb.NotifyPgmContract
	(*ReqUnSubPgmAllContract)(nil), // 20: fippb.ReqUnSubPgmAllContract
	(*RspUnSubPgmAllContract)(nil), // 21: fippb.RspUnSubPgmAllContract
	(EExchgID)(0),                  // 22: fippb.EExchgID
	(*PgmExchangeElem)(nil),        // 23: fippb.PgmExchangeElem
	(EPkgType)(0),                  // 24: fippb.EPkgType
	(*PgmContractElem)(nil),        // 25: fippb.PgmContractElem
	(EPgmInstStateType)(0),         // 26: fippb.EPgmInstStateType
	(EPgmHandleType)(0),            // 27: fippb.EPgmHandleType
}
var file_fip_interface_internal_pgm_proto_depIdxs = []int32{
	22, // 0: fippb.ReqPgmTradeDate.exchangeID:type_name -> fippb.EExchgID
	22, // 1: fippb.RspPgmTradeDate.exchangeID:type_name -> fippb.EExchgID
	22, // 2: fippb.NotifyPgmTradeDate.exchangeID:type_name -> fippb.EExchgID
	22, // 3: fippb.ReqPgmMarketInfo.exchangeID:type_name -> fippb.EExchgID
	23, // 4: fippb.RspPgmMarketInfo.elem:type_name -> fippb.PgmExchangeElem
	24, // 5: fippb.RspPgmMarketInfo.pkgType:type_name -> fippb.EPkgType
	22, // 6: fippb.ReqPgmMarketState.exchangeID:type_name -> fippb.EExchgID
	22, // 7: fippb.RspPgmMarketState.exchangeID:type_name -> fippb.EExchgID
	22, // 8: fippb.NotifyPgmMarketState.exchangeID:type_name -> fippb.EExchgID
	22, // 9: fippb.ReqPgmInstInfo.exchangeID:type_name -> fippb.EExchgID
	25, // 10: fippb.RspPgmInstInfo.elem:type_name -> fippb.PgmContractElem
	24, // 11: fippb.RspPgmInstInfo.pkgType:type_name -> fippb.EPkgType
	22, // 12: fippb.ReqPgmInstState.exchangeID:type_name -> fippb.EExchgID
	26, // 13: fippb.RspPgmInstState.state:type_name -> fippb.EPgmInstStateType
	27, // 14: fippb.NotifyPgmHandleResult.handleType:type_name -> fippb.EPgmHandleType
	22, // 15: fippb.ReqSubPgmAllQuot.exchangeID:type_name -> fippb.EExchgID
	22, // 16: fippb.ReqUnSubPgmAllQuot.exchangeID:type_name -> fippb.EExchgID
	22, // 17: fippb.ReqSubPgmAllContract.exchangeID:type_name -> fippb.EExchgID
	22, // 18: fippb.NotifyPgmContract.exchangeID:type_name -> fippb.EExchgID
	25, // 19: fippb.NotifyPgmContract.elem:type_name -> fippb.PgmContractElem
	24, // 20: fippb.NotifyPgmContract.pkgType:type_name -> fippb.EPkgType
	22, // 21: fippb.ReqUnSubPgmAllContract.exchangeID:type_name -> fippb.EExchgID
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_fip_interface_internal_pgm_proto_init() }
func file_fip_interface_internal_pgm_proto_init() {
	if File_fip_interface_internal_pgm_proto != nil {
		return
	}
	file_fip_global_proto_init()
	file_fip_def_pgm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fip_interface_internal_pgm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmTradeDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmMarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmMarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmMarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmMarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmMarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmInstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmInstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPgmInstState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspPgmInstState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmHandleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubPgmAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubPgmAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUnSubPgmAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUnSubPgmAllQuot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubPgmAllContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubPgmAllContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPgmContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUnSubPgmAllContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fip_interface_internal_pgm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspUnSubPgmAllContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fip_interface_internal_pgm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fip_interface_internal_pgm_proto_goTypes,
		DependencyIndexes: file_fip_interface_internal_pgm_proto_depIdxs,
		MessageInfos:      file_fip_interface_internal_pgm_proto_msgTypes,
	}.Build()
	File_fip_interface_internal_pgm_proto = out.File
	file_fip_interface_internal_pgm_proto_rawDesc = nil
	file_fip_interface_internal_pgm_proto_goTypes = nil
	file_fip_interface_internal_pgm_proto_depIdxs = nil
}
